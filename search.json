[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jakub Jędrusiak – blog okołostatystyczny",
    "section": "",
    "text": "Sortuj według\n       Domyślnie\n         \n          Tytuł\n        \n         \n          Data - Od najstarszych\n        \n         \n          Data - Od najnowszych\n        \n         \n          Autor\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nPodstawy programowania w R\n\n\n\n\n\n\n\nstatystyka\n\n\nR\n\n\n\n\nPisanie analiz statystycznych w R jest coraz bardziej powszechne. Nie bez powodu. W R da się zrobić wszystko, jest darmowe i pozwala na automatyzację. Jak zacząć uczyć się R? Odpowiadam na to w tym tekście.\n\n\n\n\n\n\n21 lut 2023\n\n\nJakub Jędrusiak\n\n\n\n\n\n\n  \n\n\n\n\nKombinatoryka\n\n\n\n\n\nIle wykonano uścisków dłoni w pomieszczeniu, w którym jest 100 osób? Omawiam tutaj trzy podstawowe pojęcia kombinatoryki – wariacje, kombinacje i permutacje.\n\n\n\n\n\n\n17 lut 2023\n\n\nJakub Jędrusiak\n\n\n\n\n\n\n  \n\n\n\n\nTesty statystyczne i wartość p\n\n\n\n\n\nCzymże jest prawda? Czy czegokolwiek możemy być pewni? Nie lubimy się pakować w takie pytania, bo łatwo dojść do odpowiedzi „nie”, a wtedy tracimy grunt pod nogami. Część z nas zgodzi się, że tak naprawdę niczego nie możemy być pewni. W końcu zawsze może się okazać, że żyjemy w Matrixie, a wtedy żadne dowody nie mają znaczenia. Ale jednak pewnych rzeczy jesteśmy bardziej pewni niż innych.\n\n\n\n\n\n\n21 wrz 2022\n\n\nJakub Jędrusiak\n\n\n\n\n\n\n  \n\n\n\n\nWyjaśnianie wariancji i test F\n\n\n\n\n\nCo to znaczy, że geny wyjaśniają 90% wariancji wzrostu? Że z moich 170 cm wzrostu 153 cm zawdzięczam genom, a pozostałe 17 cm środowisku? Czym w ogóle jest wariancja? Odpowiem na to pytanie, jak i wprowadzę pojęcie modelu i jego testowania.\n\n\n\n\n\n\n19 maj 2022\n\n\nJakub Jędrusiak\n\n\n\n\n\n\nBrak pasujących"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "O mnie",
    "section": "",
    "text": "Student psychologii Uniwersytetu Wrocławskiego. Strona poglądowa do gromadzenia materiałów. Aktualnie niewiele się tu dzieje.\n\n\n\n\n\n\nPublikacje\n\nBurzyński, E. (2020). Czarny Zeszyt. Codzienność (J. Jędrusiak & D. Wójcik, Red.). Oleśnica: Stowarzyszenie Evviva l’arte. Pobrano z https://s-el.pl/wp-content/uploads/2020/10/Czarny-zeszyt.pdf\n\n\nJędrusiak, J. (2021). Twórczość i perspektywy na aktywność twórczą w medycynie. W M. M. Nowak (Red.), Sztuka w medycynie (s. 11–22). Poznań: Wydawnictwo Kontekst. Pobrano z https://www.researchgate.net/publication/357701421_Sztuka_w_medycynie"
  },
  {
    "objectID": "posts/procent-wariancji.html",
    "href": "posts/procent-wariancji.html",
    "title": "Wyjaśnianie wariancji i test F",
    "section": "",
    "text": "W psychologii można spotkać się z przytaczaniem wartości odziedziczalności. Możemy, dla przykładu, przeczytać, że wzrost jest odziedziczalny w 90% (Plomin, DeFries, McClearn, & McGuffin, 2001). Ale co to znaczy? Że z moich 170 cm wzrostu 153 cm zawdzięczam genom, a pozostałe 17 cm środowisku? To jest bez sensu. Czy odziedziczalność powie mi, czy byłem skazany na bycie niskim od początku albo czy dało się tego uniknąć? W Genetyce zachowania możemy przeczytać, że odziedziczalność to:\nW innym miejscu spotykamy uszczegółowienie:\nPo którym następuje groźnie brzmiące ostrzeżenie:\nŁatwo jest zrozumieć, że istnieje jakieś nieporozumienie co do tego, czym jest odziedziczalność. Widzimy wyraźnie, że odziedziczalność nie ma oznaczać ograniczeń, jakie biologia narzuca na jednostkę, ale że jest to miara, która w jakiś sposób dotyczy całej populacji. Pojawia się tajemnicza wariancja, co powoduje mroczne skojarzenia z matematyką. Ale ciągle możemy mieć wątpliwości co do tego, co ma znaczyć, że wzrost jest odziedziczalny w 90%? Bez tła statystycznego powyższe wyjaśnienia właściwie nic nie wyjaśniają. Ale na ich podstawie możemy wyrazić myśl o wzroście tak: czynniki genetyczne wyjaśniają 90% wariancji w zakresie wzrostu w populacji. I tak dochodzimy do clou tego tekstu – co to znaczy, że coś wyjaśnia 90% wariancji?"
  },
  {
    "objectID": "posts/procent-wariancji.html#średnia-jako-model",
    "href": "posts/procent-wariancji.html#średnia-jako-model",
    "title": "Wyjaśnianie wariancji i test F",
    "section": "1 Średnia jako model",
    "text": "1 Średnia jako model\nBy zrozumieć sens odziedziczalności (i podobnych tworów) w kontekście wyjaśniania wariancji, musimy najpierw powiedzieć sobie coś o tym, czym jest owa tajemnicza wariancja. Wykorzystamy do tego spreparowany zbiór danych nt. związku wielkości pająków z niepokojem odczuwanym przez obserwatorów(na podstawie: Field, Miles, & Field, 2012). Wyobraźmy sobie, że wielkość pająka wyrażono na Międzynarodowej Skali Wielkości Pająków, zaś niepokój mierzono kwestionariuszowo. Dane zebrano w tabeli poniżej.\n\n\n\n\nTabela 1:  Wielkość pająka i niepokój, jaki wzbudza. \n \n  \n    wielkość pająka \n    niepokój \n  \n \n\n  \n    1 \n    2 \n  \n  \n    2 \n    8 \n  \n  \n    3 \n    5 \n  \n  \n    4 \n    8 \n  \n  \n    5 \n    12 \n  \n  \n    6 \n    11 \n  \n  \n    7 \n    18 \n  \n  \n    8 \n    16 \n  \n\n\n\n\n\n\nDla takich danych możemy policzyć całkiem sporo rzeczy. Łatwiej jest jednak zrozumieć dane, jak się je rzeczywiście widzi. Spróbujmy więc stworzyć wykres. Chcielibyśmy wiedzieć, jaki jest związek wielkości pająka z niepokojem, jaki wywołuje1.\n\n\n\n\n\nRysunek 1: Wielkość pająka i niepokój, jaki wzbudza, tyle że na wykresie.\n\n\n\n\nWidzimy więc wyraźnie, że im większy pająk, tym większy lęk wywołuje. Ale z tym wnioskiem wybiegliśmy sporo w przyszłość. Zazwyczaj w pierwszym odruchu robimy coś znacznie prostszego – liczymy średnią. Średni niepokój wyniósł tutaj dokładnie 10. Szybkie spojrzenie w tabelę pozwala nam stwierdzić, że żaden badany takiego wyniku niepokoju nie uzyskał i niezbyt nas to dziwi. W końcu to tylko średnia, żaden prawdziwy wynik nie musi mieć dokładnie średniej wartości. Jak w znienawidzonym przez statystyków kawale o średniej liczbie nóg na spacerze z psem. Rozumiemy więc, że średnia tylko w pewnym przybliżeniu oddaje cały zbiór danych, a konkretne wartości mogą się od średniej mniej lub bardziej odchylać. Te odchylenia możemy nanieść na wykres.\n\n\n\n\n\nRysunek 2: Średnia to rodzaj modelu, czyli narzędzia do przewidywania danych. Żaden z naszych pająków nie wywoływał średniego niepokoju, każdy punkt ma większe lub mniejsze odchylenie od średniej.\n\n\n\n\nPrzerywane linie pokazują nam odchylenie każdego punktu od średniej (residual). Dla przykładu pierwszy punkt ma wartość niepokoju 2, więc jego odchylenie to \\(2 - 10 = -8\\). Dlaczego na minusie? Bo pierwszy punkt jest poniżej średniej, więc żeby przejść od średniej do wartości tego konkretnego punktu musimy wykonać odejmowanie. Inny przykład – ostatni punkt ma wartość niepokoju 15, więc jego odchylenie od średniej wynosi \\(15 - 10 = 5\\). Tutaj odchylenie jest już dodatnie, co ma sens, bo ostatni punkt jest powyżej średniej, więc żeby przesunąć się od wartości średniej do wartości tego punktu musimy dodawać. Jak widać, żeby policzyć odchylenie, wystarczy od wartości punktu odjąć średnią. Można zapisać to matematycznie:\n\\[\nS_i = x_i - \\bar x\n\\] gdzie \\(S_i\\) to odchylenie, \\(x_i\\) to wartość konkretnego punktu, a \\(\\bar x\\) to średnia. Pozioma kreska nad czymś zawsze oznacza średnią. Dla każdego punktu moglibyśmy policzyć takie odchylenie i dopisać sobie je do tabeli.\n\n\n\n\nTabela 2:  Każdy punkt ma swoje odchylenie od średniej, które możemy policzyć. Dodatnie odchylenia oznaczają, że wartość jest wyższa od średniej, a ujemne, że jest niższa. \n \n  \n    wielkość pająka \n    niepokój \n    Si \n  \n \n\n  \n    1 \n    2 \n    2 - 10 = -8 \n  \n  \n    2 \n    8 \n    8 - 10 = -2 \n  \n  \n    3 \n    5 \n    5 - 10 = -5 \n  \n  \n    4 \n    8 \n    8 - 10 = -2 \n  \n  \n    5 \n    12 \n    12 - 10 = 2 \n  \n  \n    6 \n    11 \n    11 - 10 = 1 \n  \n  \n    7 \n    18 \n    18 - 10 = 8 \n  \n  \n    8 \n    16 \n    16 - 10 = 6 \n  \n\n\n\n\n\n\nŚrednia jest więc pewnym modelem, czyli służy nam jako uproszczony opis danych. Ponieważ modele są uproszczone, zawsze zawierają w sobie jakiś błąd. tym wypadku błędem jest po prostu odchylenie, które właśnie policzyliśmy.\nJakby ktoś zapytał mnie, jak duży niepokój wywołują pająki i uparł się, żeby podać mu jedną liczbę, to podałbym właśnie średnią. Dlaczego? Średnie mają tę niezwykłą właściwość, że starają się być tak bardzo na środku, tak blisko każdego punktu, jak to możliwe. Innymi słowy zwykła średnia daje nam mniejsze odchylenia niż jakakolwiek inna pojedyncza liczba. Dla przykładu, jakbyśmy stwierdzili sobie, że nie chcemy brać za model takiej brzydkiej liczby jak 10, a chcemy wziąć, powiedzmy, 15, to nagle okazałoby się, że odchylenia nam wzrosły. Obrazowo mówiąc, przerywane kreski na wykresie zrobiłyby się dłuższe.\nŚrednia gwarantuje mi, że pomylę się tak mało, jak to tylko możliwe, czyli że sumarycznie przerywane kreski na wykresie będą tak krótkie, jak się da. Średnia jest więc modelem niedoskonałym (bo ma błąd), ale lepszym niż jakakolwiek inna pojedyncza liczba (bo ma najmniejszy błąd).\n\n\n\n\n\nRysunek 3: Modelem mogłaby być dowolna liczba, jeśli się uprzeć, ale żadna pojedyncza liczba nie będzie miała tak małych odchyleń, jak średnia."
  },
  {
    "objectID": "posts/procent-wariancji.html#wariancja",
    "href": "posts/procent-wariancji.html#wariancja",
    "title": "Wyjaśnianie wariancji i test F",
    "section": "2 Wariancja",
    "text": "2 Wariancja\nPotrafimy policzyć odchylenie dowolnego punktu od średniej i wiemy, jak wyglądają te odchylenia na wykresie. Powiedziałem też, że sumarycznie średnia daje mniejsze odchylenia niż jakakolwiek inna liczba. Kusi więc, żeby odchylenia te rzeczywiście zsumować. W końcu w ten sposób wiedzielibyśmy, ile mamy błędu w modelu, czy jest go dużo, czy mało. Co więcej, poszczególne odchylenia różnią się między sobą. Fajnie więc by było policzyć średnią odchyleń. Takie średnie odchylenie powiedziałoby nam, czy ogólnie patrząc odchylenia są duże, czy niewielkie, a więc czy sama średnia jest blisko danych (dobrze je przybliża), czy może jest kompletnie od czapy (nie oddaje dobrze danych)2.\nSkuszeni matematyczną perspektywą bierzemy kalkulator w dłoń, dodajemy do siebie wartości odchyleń (co ładnie, matematycznie możemy zapisać jako \\(\\sum S_i\\), bo wielka litera sigma znaczy po prostu dodawanie)3 i bardzo się dziwimy, kiedy wychodzi nam 0. Ale jak 0? W końcu sumaryczne odchylenie nie może nam wyjść 0! Chcieliśmy jakiejś dużej liczby, która da nam ogólne pojęcie o tym, jak nasze dane odchylają się od średniej, a wychodzi nam 0, tak jakby w ogóle nie było żadnych odchyleń. Po chwili jednak orientujemy się dlaczego – część odchyleń jest dodatnich, a część ujemnych, to jak się je doda, to się zerują. No tak. A średnia (jak sama nazwa wskazuje) jest dokładnie pośrodku tych danych.\nTo w takim razie, jak chcemy dostać to nasze ogólne odchylenie, to musimy pozbyć się minusów. Moglibyśmy je po prostu zignorować (tzn. dodawać wartości bezwzględne odchyleń \\(|S_i|\\)), ale to by przecież by łoza proste. Statystycy, chcąc utrudnić wszystkim życie4, wybrali inny sposób na pozbywanie się minusów, czyli podnoszenie do potęgi drugiej. Minus razy minus daje plus, głosi szkolna formułka. Opanowujemy więc flashbacki z liceum, zaciskamy zęby, podnosimy odchylenia do kwadratu i znowu je do siebie dodajemy. Matematycznie wyrazilibyśmy to tak:\n\\[\nSS_T = \\sum_{i=1}^N S_i^2 = \\sum_{i=1}^N (x_i - \\bar x)^2\n\\]\nZa tym przerażającym zapisem kryje się prosta idea – weź wszystkie odchylenia (a mamy ich N, bo tak się oznacza liczbę zebranych obserwacji) i dodaj je wszystkie po kolei, zaczynając od 1. i na N-tym (w naszym przypadku 8.) kończąc. Po znaku równa się przypominam, co właściwie oznaczaliśmy przez \\(S_i\\), czyli obserwacja odjąć średnia do kwadratu. Jak to rzeczywiście zrobimy, wyjdzie nam 190,875. Niezbyt ładna liczba, ale daje więcej satysfakcji niż 0. Tę liczbę we wzorze nazwałem \\(SS_T\\), co jest skrótem od total sum of squares, czyli całkowita suma kwadratów. Jak się zastanowić, to jest to niezła nazwa, bo od razu jest praktycznie wzorem.\nAle z całkowitą sumą kwadratów jest pewien problem. Siłą rzeczy, im będzie więcej obserwacji, tym ta liczba będzie większa, nawet jeśli odchylenia będą mniejsze. 100 ciężarówek z 50 paletami każda dadzą w sumie więcej towaru, niż 1 ciężarówka z 200 paletami. Suma ocen wzrasta z każdą oceną, mimo że średnia może nawet nie drgnąć. Ale możemy sobie z tym poradzić dość łatwo – po prostu zróbmy z tego średnią. Średnia to suma dzielona przez liczbę przypadków. \\(SS_T\\) jest sumą kwadratów odchyleń (w tym miejscu tekstu należy się zatrzymać i upewnić się, że rozumie się wyrażenie „suma kwadratów odchyleń”), więc jak podzielimy ją przez liczbę obserwacji, to wyjdzie nam średnia z kwadratów odchyleń. Prawda? No prawie, bo to znowu byłoby za proste.\nNie rozwodząc się za bardzo, bo to też jest szeroki temat, zamiast dzielić \\(SS_T\\) przez 8, musimy podzielić ją przez 7. Mówiąc w dużym skrócie, nas w badaniach obchodzi cała populacja. Badamy tylko (losową) próbę z tej populacji, ale tak naprawdę to o samej populacji chcemy wnioskować. Nie wystawiłem 8 osób na kontakt z dużymi i małymi pająkami, bo ciekawiły mnie te konkretne osoby, tylko dlatego, że chcę powiedzieć coś ogólnie o ludziach, o Polakach, o nastolatkach czy jakiejkolwiek innej interesującej mnie populacji. Jeśli podzielilibyśmy przez 8, to wyszłaby nam średnia, która jest prawdziwa dla tej konkretnej próby, ale prawie na pewno niższa, niż ta prawdziwa, populacyjna. Ale jak podzielimy przez 7, to będziemy znacznie, znacznie bliżej prawdziwym wartościom. To da się matematycznie udowodnić, ale bez przesady, nie wszystko naraz. Ta skorygowana liczba nazywa się stopniami swobody i dla średniej zawsze jest ich \\(N-1\\). To będzie ogólnie problem w statystyce, że od czasu do czasu będziemy musieli dzielić przez stopnie swobody zamiast normalnie przez wielkość próby, żeby dostać bardziej wiarygodne liczby. Jeśli uczy się tego pierwszy raz, to można to \\(N-1\\) przyjąć na wiarę, bo sama wariancja jest wystarczająco skomplikowana. Nie trzeba wszystkiego w pełni zrozumieć od razu.\nTakże jeśli chcemy uzyskać średnią kwadratów odchyleń, to bierzemy naszą całkowitą sumę kwadratów i dzielimy ją przez \\(N-1\\). Tak jak średnią ocen liczymy dzieląc sumę ocen przez ich liczbę. Możemy to zapisać matematycznie na kilka sposobów:\n\\[\n\\sigma^2 = \\frac{SS_T}{N-1} = \\frac{\\sum^N_{i = 1} S_i^2}{N-1} = \\frac{\\sum^N_{i = 1} (x_i - \\bar x)^2}{N-1}\n\\]Spokojnie. To są tylko wzory, nie trzeba się ich bać. Każdy z tych trzech wzorów znaczy to samo i opiera się na tym, co już wiemy z poprzednich części tekstu. Tak naprawdę to ciągle wzór na \\(SS_T\\), tylko teraz podzielony na \\(N-1\\). Po pokonaniu pierwszego szoku można zacząć świętować! W ten sposób udało nam się wreszcie policzyć średnią kwadratów odchyleń (ponownie – trzeba się zatrzymać, upewnić się, że się rozumie, ewentualnie trochę się cofnąć i dopiero można iść dalej).\nTrzeba przyznać, że „średni kwadrat odchylenia” albo „średnia z odchyleń podniesionych do potęgi drugiej” to nie są zbyt chwytliwe nazwy. Dlatego właśnie nazwano to wariancją i oznaczono przez \\(\\sigma^2\\). To jest mała grecka litera sigma. A dlaczego \\(\\sigma^2\\) a nie po prostu \\(\\sigma\\)? Bo to średnia z kwadratów odchyleń. Jeśli byśmy chcieli wycofać się teraz z tej gmatwającej wszystko decyzji o podnoszeniu czegokolwiek do kwadratu i uzyskać upragnione średnie odchylenie, to możemy teraz wyciągnąć pierwiastek ze wzoru na wariancję, jaki nam przed chwilą wyszedł i który na pierwszy rzut oka może przytłaczać.\n\\[\n\\sigma = \\sqrt{\\frac{SS_T}{N-1}} = \\sqrt{\\frac{\\sum^N_{i = 1} S_i^2}{N-1}} = \\sqrt{\\frac{\\sum^N_{i = 1} (x_i - \\bar x)^2}{N-1}}\n\\]Każdy z tych wzorów znaczy ostatecznie to samo, więc można używać któregokolwiek. Ważne jest to, że wychodzi nam z tego średnie odchylenie, które nazywamy odchyleniem standardowym i które oznaczamy literą \\(\\sigma\\) lub skrótem SD (standard deviation). Odchylenie standardowe, jak już wyżej wspomniałem, mówi nam, czy średnia dobrze reprezentuje dane. Jeśli jest wysokie, to znaczy, że dane są mocno rozproszone (odchylenia są ogólnie duże) i sama średnia jest mało wiarygodna. Jeśli SD jest niewielkie, to średniej zasadniczo można zaufać. To jakie SD jest duże, a jakie małe, zależy od tego, co mierzymy. Dla średniej pensji SD = 10 uznalibyśmy za raczej niewielkie, ale takie samo odchylenie standardowe dla średniej liczby nóg takie małe już się nie wydaje. Także może i mamy średnio po 3 nogi jak wychodzimy z psem na spacer, ale ta średnia ma całą nogę odchylenia standardowego!\nPodsumowując ten fragment:\n\nZauważyliśmy, że każdy punkt ma swoje większe lub mniejsze odchylenie od średniej.\nPróbowaliśmy sumować te odchylenia, ale przeszkadzały nam minusy, więc przed sumowaniem podnosiliśmy nasze odchylenia do kwadratu, uzyskując w ten sposób całkowitą sumę kwadratów (\\(SS_T\\)).\nWykorzystaliśmy całkowitą sumę kwadratów do policzenia wariancji (średniej z kwadratów odchyleń) w taki sposób, że podzieliliśmy \\(SS_T\\) przez \\(N-1\\) (stopnie swobody). Nie mogliśmy podzielić \\(SS_T\\) przez \\(N\\), bo to zaniżyłoby prawdziwą wariancję w populacji.\nWyciągnęliśmy pierwiastek z wariacji, żeby wreszcie dostać średnie odchylenie, które nazywamy odchyleniem standardowym."
  },
  {
    "objectID": "posts/procent-wariancji.html#średnia-to-nie-wszystko",
    "href": "posts/procent-wariancji.html#średnia-to-nie-wszystko",
    "title": "Wyjaśnianie wariancji i test F",
    "section": "3 Średnia to nie wszystko",
    "text": "3 Średnia to nie wszystko\nWiemy już bardzo dokładnie czym jest wariancja i jaki ma związek ze średnią. Ale nie oszukujmy się, jesteśmy w stanie wymyślić lepsze modele niż średnia. Od samego początku korci nas, żeby na wykresie niepokoju od wielkości pająka narysować piękną, skośną, rosnącą linię, która będzie zależała nie tylko od wartości niepokoju, ale również od wielkości pająka. Przecież od razu widać, że pasowałaby do naszych danych znacznie bardziej.\n\n\n\n\n\nRysunek 4: Linia rosnąca sugeruje nam, że im większy pająk, tym większy niepokój wywołuje. Na pierwszy rzut oka widać, że odchylenia są mniejsze, niż przy średniej.\n\n\n\n\nOd razu lepiej. Od początku chcieliśmy móc powiedzieć, że im większy pająk, tym większy niepokój, a teraz mamy tego dowód. W końcu ta linia ewidentnie pasuje do danych lepiej – na pierwszy rzut oka widać, że odchylenia są mniejsze. No właśnie! Dzięki łamaniu sobie głowy nad odchyleniami od średniej zyskaliśmy sposób na stwierdzenie, czy jakiś model jest lepszy od średniej, czy nie – wystarczy sprawdzić, czy odchylenia zrobiły się istotnie mniejsze.\nSpróbujmy więc zrobić dla tych nowych odchyleń to samo, co zrobiliśmy dla odchyleń od średniej. Ponieważ samo wyznaczanie wartości tych odchyleń wymaga bardziej złożonych obliczeń ze wzoru na prostą, po prostu je podam (bo policzył je za mnie program statystyczny). Powiem tylko, że procedura jest identyczna, jak w przypadku liczenia \\(SS_T\\), ale licząc odchylenia zamiast wartości średniej (która poprzednio była naszym modelem) odejmujemy wartość, którą przewiduje nasz nowy, lepszy model, a którą w tabeli oznaczyłem jako \\(x_M\\). Podnosimy więc wartości odchyleń (oznaczone w tabeli \\(S_R\\)) do kwadratu, sumujemy i wychodzi nam w zaokrągleniu \\(SS_R = 29,98\\). \\(SS_R\\) oznacza residual sum of squares i w gruncie rzeczy mówi nam o tych odchyleniach, które ciągle są, które nie zniknęły, mimo że nowy model jest lepszy.\n\n\n\n\nTabela 3:  Nowy model magicznie przewiduje niepokój z wielkości pająka (xM), ale nie robi tego doskonale. Tak jak dla średniej, możemy policzyć, jak wartość prawdziwa odchyla się od tej z modelu. \n \n  \n    wielkość pająka \n    niepokój \n    xM \n    SR \n  \n \n\n  \n    1 \n    2 \n    2,92 \n    -0,92 \n  \n  \n    2 \n    8 \n    4,94 \n    3,06 \n  \n  \n    3 \n    5 \n    6,96 \n    -1,96 \n  \n  \n    4 \n    8 \n    8,99 \n    -0,99 \n  \n  \n    5 \n    12 \n    11,01 \n    0,99 \n  \n  \n    6 \n    11 \n    13,04 \n    -2,04 \n  \n  \n    7 \n    18 \n    15,06 \n    2,94 \n  \n  \n    8 \n    16 \n    17,08 \n    -1,08 \n  \n\n\n\n\n\n\nMożemy w pewnym sensie mówić o wariancji wokół średniej i wariancji wokół modelu5. Wariancja, niezależnie wokół czego, to suma kwadratów podzielona przez \\(N-1\\), więc naturalnie musielibyśmy teraz \\(SS_T\\) i \\(SS_R\\) podzielić przez \\(N-1\\). Jednak to, co chcę pokazać dalej, będzie łatwiejsze do zrozumienia, jeśli będziemy się posługiwać surowymi sumami kwadratów. Możemy więc zignorować dzielenie przez \\(N-1\\). Jeśli ktoś mi nie ufa, to może robić to, co za moment zrobię, ale wcześniej podzielić nasze sumy kwadratów przez \\(N-1\\) i gwarantuję, że wyjdzie mu to samo6.\nMożemy więc spojrzeć na to w ten sposób – na początku mieliśmy 190,875 jednostek wariancji, a teraz, po dopasowaniu nowego modelu, mamy ich tylko 29,98. Dla wygody zaokrąglijmy te liczby do całości. Także cała różnica, \\(191 - 30 = 161\\), gdzieś nam wyparowała. Ta wariancja była, a teraz nagle jej nie ma. O takiej wariancji możemy powiedzieć, że została wyjaśniona i możemy ją oznaczyć \\(SS_M\\) od model sum of squares. Czyli stworzyliśmy nowy model, który pozwala nam przewidywać niepokój z wielkości pająka i w ten sposób wyjaśniliśmy jakąś część wariancji. Jaką? Coż, wystarczy to przeliczyć na procenty. Cała wariancja7 wynosiła 191 jednostek, a wariacja wyjaśniona wyniosła 161 jednostek. Odsetek wariancji, który udało nam się wyjaśnić, oznaczamy \\(R^2\\) i możemy go wyrazić w procentach8.\n\\[\nR^2 = \\frac{161}{191}\\times 100\\% = 84,3\\%\n\\]Możemy więc powiedzieć, że wielkość pająka (bo nowy model przewiduje niepokój na podstawie wielkości pająka) wyjaśnia 84,3% wariancji niepokoju. Ludzie ciągle różnią się niepokojem w reagowaniu na pająki, ale odchylenia od nowego modelu są znacznie mniejsze. Ogólny wzór na \\(R^2\\) wygląda więc tak9:\n\\[\nR^2 = \\frac{SS_M}{SS_T} = \\frac{SS_T - SS_R}{SS_T}\n\\]\nMoglibyśmy się pytać, co odpowiada za pozostałe 17,3% wariancji. Mogą to być dodatkowe czynniki, takie jak doświadczenia z pająkami w dzieciństwie albo uszkodzenia mózgu. To wymaga dalszych badań.\nMożemy wyobrazić sobie, że pojawia nam się nowa osoba badana, która pająków nie boi się w ogóle, co pokazałem na wykresie. Jak to wpływa na nasz model?\n\n\n\n\n\nRysunek 5: Nowa osoba badana, która nie boi się pająków wcale, nie przystaje do naszego modelu. Może to sugerować, że nasz model jest adekwatny tylko dla pewnej grupy osób (czyli możemy stworzyć bardziej złożony model, który weźmie to pod uwagę) albo że odważny badany kłamie (i powinien zostać wykluczony z bazy).\n\n\n\n\nJak widzimy model się trochę pozmieniał. \\(R^2\\) spadło dramatycznie, bo w tym drugim modelu wyniosło zaledwie 23,4%. Ale pojawienie się tego nowego, odważnego badanego nie zmieniło wyników pozostałych.\nTak samo jest z odziedziczalnością. Odziedziczalność mówi nam, jaką część różnic w populacji da się wyjaśnić czynnikami genetycznymi, ale nawet bardzo wysoka odziedziczalność nie mówi nam, jakie są biologiczne, genetyczne granice ludzkich możliwości rozwoju. Jeśli pojawi się zdeterminowana jednostka, to może ona wstrząsnąć naszym modelem albo, co ciekawsze, nie zrobić żadnej różnicy w modelu (jeśli próba byłaby odpowiednio duża)10. W takim wypadku model ciągle byłby bardzo adekwatny, wyjaśniałby bardzo dużo wariancji, a jednocześnie nie wykluczał istnienia jednostek, które całkowicie do niego nie przystają.\nDlatego właśnie odziedziczalność tej samej cechy może być różna w różnych populacjach albo zmieniać się w czasie – odziedziczalność, tak jak każdy model statystyczny, opisuje różnice tu i teraz, na poziomie populacji. Niestety (albo na szczęście) sama odziedziczalność nie może rozstrzygnąć, czy ja, konkretna jednostka, od urodzenia byłem skazany na bycie tak niskim. Może mi jednak powiedzieć, że czynniki genetyczne wyjaśniają 90% wariancji wzrostu w mojej populacji. Tylko teraz już wiem, co to znaczy."
  },
  {
    "objectID": "posts/procent-wariancji.html#test-f",
    "href": "posts/procent-wariancji.html#test-f",
    "title": "Wyjaśnianie wariancji i test F",
    "section": "4 Test F",
    "text": "4 Test F\nMoglibyśmy w tym momencie skończyć, ale skoro mamy wszystkie skróty powtórzone na świeżo, dobrze byłoby jeszcze jedną sprawę omówić. Wiedzę o tym, czym jest \\(SS_M\\) i \\(SS_R\\) (tzn. cała wariancja wyjaśniona przez model i cała wariancja niewyjaśniona przez model) możemy wykorzystać, do zrozumienia potężnej, uniwersalnej statystyki diagnostycznej – \\(F\\). Najpierw wyjaśnię, jak to się liczy, a potem jak się to interpretuje.\nStatystyka \\(F\\) to stosunek (czyli wynik dzielenia) wariancji wyjaśnionej do wariancji niewyjaśnionej. Matematycznie możemy zapisać to tak:\n\\[\nF = \\frac{MS_M}{MS_R}\n\\]\nMoment. Dopiero akapit wyżej pisałem, że wariancja wyjaśniona to \\(SS_M\\), a niewyjaśniona to \\(SS_R\\), a teraz nagle piszę \\(MS_M\\) i \\(MS_R\\). Czy to podważa moją wiarygodność? Czy należy rzucić komputerem w proteście przeciw umowności matematyki? Nie. Bez przesady. \\(M\\) znaczy średnia.\nPrzypominam – \\(SS_M\\) i \\(SS_R\\) to sumy kwadratów, tak jakbyśmy tylko zsumowali swoje oceny bez liczenia średniej. Do policzenia \\(F\\) potrzebujemy nie sum kwadratów, a średniego kwadratu. Ponownie, średnią ocen liczymy dzieląc sumę ocen przez ich liczbę. Mamy już policzone sumy kwadratów \\(SS_M\\) i \\(SS_R\\), więc dzielimy je przez liczbę obserwacji. Uważnemu czytelnikowi zapaliła się właśnie w głowie lampka ostrzegawcza, bo pisałem przecież, że liczba przypadków jest zakłamana i nie można jej ufać. Nie pożyczamy jej pieniędzy. Ufać można stopniom swobody i przez nie powinniśmy podzielić. Już raz to zrobiliśmy, podzieliliśmy \\(SS_T\\) przez stopnie swobody i nazwaliśmy to wariancją. Teraz tę samą logikę chcemy zastosować do \\(SS_R\\) i \\(SS_M\\).\nTylko pojawia się trudne pytanie – ile stopni swobody mają nasze \\(SS_M\\) i \\(SS_R\\)? Już odpowiadam. Liczba stopni swobody dla \\(SS_M\\) to liczba zmiennych niezależnych (w przykładzie z pająkami to 1, bo lęk przewidujemy tylko na podstawie wielkości pająka). Liczba stopni swobody dla \\(SS_R\\) to liczba obserwacji – liczba zmiennych niezależnych – 1 (w naszym przypadku \\(8-1-1 = 6\\)). I to trzeba po prostu wziąć na wiarę.\nTakże bierzemy nasze sumy kwadratów i robimy z nich średnie. \\(MS_M = \\frac{160,895}{1} = 160,895\\) oraz \\(MS_R = \\frac{29,98}{6} = 5\\). Mając średnie możemy policzyć wartość naszej statystyki \\(F = \\frac{160,895}{5} \\approx 32\\). Czad. Tylko co z tego?\nTa liczba, 32, informuje nas, że ilość wariancji wyjaśnionej przez model jest 32 razy większa niż ilość wariancji niewyjaśnionej. Czyli że model więcej wyjaśnia niż nie wyjaśnia, bo wyjaśnia średnio 160,895 jednostek wariancji, a nie wyjaśnia średnio 5 jednostek wariacji. Dobry model ma co najmniej \\(F > 1\\), bo – jak się zastanowić – wtedy właśnie więcej wyjaśnia, bo nie wyjaśnia11. Licznik jest większy niż mianownik. \\(SS_M > SS_R\\). Jakby wyszło nam, że \\(F = 0,25\\), to znaczyłoby to, że model jest fatalny, bo ma więcej (4 razy więcej!) błędu niż racji. W skrócie mówiąc – im większe \\(F\\), tym lepiej, a \\(F > 1\\) to absolutne minimum."
  },
  {
    "objectID": "posts/procent-wariancji.html#postscriptum-jak-szybciej-liczyć-ssm",
    "href": "posts/procent-wariancji.html#postscriptum-jak-szybciej-liczyć-ssm",
    "title": "Wyjaśnianie wariancji i test F",
    "section": "5 Postscriptum – jak szybciej liczyć SSM",
    "text": "5 Postscriptum – jak szybciej liczyć SSM\nMożna zauważyć ciekawą rzecz związaną z obliczaniem \\(SS_M\\). Jak się okazuje, \\(SS_M\\) da się policzyć bez liczenia \\(SS_T\\) i \\(SS_R\\). \\(SS_M\\) uzyskujemy, jeśli zignorujemy obserwacje i zsumujemy kwadraty różnic między średnią a nowym modelem. Zaznaczyłem te różnice na poniższym wykresie przerywanymi liniami.\n\n\n\n\n\nRysunek 6: \\(SS_M\\) można szybciej policzyć za pomocą odchyleń modelu od średniej, czyli kresek między średnią wartościami przewidywanymi przez nasz nowy model.\n\n\n\n\nMożna to przetestować za pomocą danych z tabeli niżej. \\(x_M\\) to wartość przewidywana przez model, a \\(S_M\\) to różnica między modelem a średnim niepokojem. Podniesienie wartości \\(S_M\\) do kwadratu i zsumowanie ich daje w wyniku nasze \\(SS_M\\).\n\n\n\n\nTabela 4:  Podstawą do policzenia SSM mogą być odchylenia modelu od średniej SM. Trzeba je policzyć dla każdego punktu, podnieść do kwadratu i dodać. \n \n  \n    wielkość pająka \n    niepokój \n    xM \n    SM \n  \n \n\n  \n    1 \n    2 \n    2,92 \n    2,92 - 10 = -7,08 \n  \n  \n    2 \n    8 \n    4,94 \n    4,94 - 10 = -5,06 \n  \n  \n    3 \n    5 \n    6,96 \n    6,96 - 10 = -3,04 \n  \n  \n    4 \n    8 \n    8,99 \n    8,99 - 10 = -1,01 \n  \n  \n    5 \n    12 \n    11,01 \n    11,01 - 10 = 1,01 \n  \n  \n    6 \n    11 \n    13,04 \n    13,04 - 10 = 3,04 \n  \n  \n    7 \n    18 \n    15,06 \n    15,06 - 10 = 5,06 \n  \n  \n    8 \n    16 \n    17,08 \n    17,08 - 10 = 7,08 \n  \n\n\n\n\n\n\nJest to jeszcze jeden sposób myślenia o \\(SS_M\\), który może pojawić się w niektórych opracowaniach. Zgłębienie tego może dać nam nowy sposób myślenia o wariancji wyjaśnianej, ale nie jest konieczne, bo ostatecznie liczy nam to komputer. Rozumienie tego, jak działa \\(SS_M\\) według poprzedniego sposobu (wariancja, która zniknęła, jak zmieniliśmy model ze średniej na jakiś inny) to i tak dużo i powinno wystarczyć."
  },
  {
    "objectID": "posts/kombinatoryka.html",
    "href": "posts/kombinatoryka.html",
    "title": "Kombinatoryka",
    "section": "",
    "text": "Pokaż kod\nimport itertools\nimport pandas as pd\n\ndef variations(iterable, subset_length):\n    '''Kombinacje w wierszach, permutacje w kolumnach, wszystko razem to wariacje'''\n    df = pd.DataFrame([list(itertools.permutations(x)) for x in itertools.combinations(iterable, subset_length)])\n    df.index = range(1, len(df.index) + 1)\n    df.columns = range(1, len(df.columns) + 1)\n    return df\n\n\nKombinatoryka to część matematyki zajmująca się modyfikacjami zbiorów. Weźmy sobie zbiór 5 pierwszych liter alfabetu i nazwijmy go Z jak zbiór. Zacznę od skomplikowanie brzmiącego wstępu, a potem wyjaśnię to na przykładach.\n\nZ = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\nZ tym zbiorem mogę zrobić kilka rzeczy. Mogę go zacząć rozbijać na mniejsze zbiory. Mogę zacząć przestawiać w nim elementy. Mogę najpierw rozbić go na mniejsze zbiory, a potem przestawiać elementy w tych małych zbiorach. Każda z tych akcji ma swoją własną nazwę. Jeżeli mówię, że:\n\npermutuję – zmieniam kolejność elementów;\nkombinuję – rozbijam swój zbiór na mniejsze zbiory (combine – łączyć; łączę stare elementy na nowo).\n\nKiedy robię permutacje, z góry zakładam, że kolejność ma znaczenie. Jest wiele sytuacji, w których kolejność ma znaczenie, ale są też sytuacje, w których liczy się tylko to, jakie mam elementy, a nie w jakiej są kolejności. Dla przykładu nieważne, czy w losowaniu Lotto wyciągnięto 2, 5, 7 czy 7, 5, 2 – jeśli mamy te liczby na swoim kuponie, możemy dostać nagrodę. Jeśli kolejność ma znaczenie, mówimy o wariacjach, a jeśli znaczenia nie ma, mówimy o kombinacjach.\nPrzed chwilą mówiłem, że zmiana kolejności to permutacja, a potem nagle używam słowa wariacja. Istnieje pomiędzy nimi pewna różnica, polegająca na tym, czy zmieniam kolejność w całym naszym zbiorze, czy wcześniej rozbijam go na mniejsze zbiory. Słowem permutacja określamy zmiany kolejności w całym zbiorze, zaś o wariacjach mówimy wtedy, gdy przed zmianą kolejności rozbijamy nasz zbiór na mniejsze zbiory.\n\n1 Permutacje\nOmówmy to na przykładzie naszego zbioru liter od A do E. Permutacja tego zbioru będzie wyglądała tak:\n\npd.DataFrame(itertools.permutations(Z))\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n    \n  \n  \n    \n      0\n      A\n      B\n      C\n      D\n      E\n    \n    \n      1\n      A\n      B\n      C\n      E\n      D\n    \n    \n      2\n      A\n      B\n      D\n      C\n      E\n    \n    \n      3\n      A\n      B\n      D\n      E\n      C\n    \n    \n      4\n      A\n      B\n      E\n      C\n      D\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      115\n      E\n      D\n      A\n      C\n      B\n    \n    \n      116\n      E\n      D\n      B\n      A\n      C\n    \n    \n      117\n      E\n      D\n      B\n      C\n      A\n    \n    \n      118\n      E\n      D\n      C\n      A\n      B\n    \n    \n      119\n      E\n      D\n      C\n      B\n      A\n    \n  \n\n120 rows × 5 columns\n\n\n\nZe zbioru 5 liter możemy zatem wytworzyć 120 zbiorów, każdy z inną kolejnością liter. Policzyć jest to dość łatwo. Mamy 5 miejsc i 5 liter, które możemy tam umieścić: \\(P_5 = \\_ \\times \\_ \\times \\_ \\times \\_ \\times \\_\\). Na pierwszym miejscu możemy umieścić 5 liter: \\(P_5 = 5 \\times \\_ \\times \\_ \\times \\_ \\times \\_\\). Ponieważ jedną literę już zużyliśmy, do drugiego miejsca możemy wsadzić tylko jedną z 4 pozostałych liter: \\(P_5 = 5 \\times 4 \\times \\_ \\times \\_ \\times \\_\\). Uzupełniając nasz schemacik dalej otrzymujemy równanie \\(P_5 = 5\\times 4 \\times 3 \\times 2 \\times 1 = 5! = 120\\). 5! (czyt. pięć silnia) to skrótowy zapis mnożenia liczb od 1 do 5. Powstaje nam z tego wzór na liczbę możliwych permutacji n elementów:\n\\[\nP_n = n!\n\\]\n\n\n2 Wariacje\nCiekawie zaczyna się robić, gdy przed zmianą kolejności chcemy jeszcze rozbić nasz zbiór na mniejsze zbiory. Dla przykładu możemy sobie wyobrazić, że chcemy z naszego zbioru 5 liter wybrać wszystkie możliwe zbiory po 2 litery, np. AB, AC, AD itd. Mamy do dyspozycji mniej miejsca, niż liter w zbiorze. Liczenie czegoś takiego jest analogiczne. Na pierwszym miejscu może pojawić się 1 z 5 liter, na drugim tylko 1 z 4: \\(V^2_5 = 5 \\times 4 = 20\\). Powinno więc istnieć 20 takich zbiorów. Wypiszmy je wszystkie.\n\nvariations(Z, 2)\n\n\n\n\n\n  \n    \n      \n      1\n      2\n    \n  \n  \n    \n      1\n      (A, B)\n      (B, A)\n    \n    \n      2\n      (A, C)\n      (C, A)\n    \n    \n      3\n      (A, D)\n      (D, A)\n    \n    \n      4\n      (A, E)\n      (E, A)\n    \n    \n      5\n      (B, C)\n      (C, B)\n    \n    \n      6\n      (B, D)\n      (D, B)\n    \n    \n      7\n      (B, E)\n      (E, B)\n    \n    \n      8\n      (C, D)\n      (D, C)\n    \n    \n      9\n      (C, E)\n      (E, C)\n    \n    \n      10\n      (D, E)\n      (E, D)\n    \n  \n\n\n\n\nŻeby wyprowadzić wzór na takie wariacje, musimy zwrócić uwagę na fakt, że nasze obliczenie \\(5 \\times 4\\) wygląda jak kawałek silni. Brakuje tylko \\(3 \\times 2 \\times 1\\). Moglibyśmy więc zapisać to w taki sposób:\n\\[\nV^2_5 = 5 \\times 4 = \\frac{5 \\times 4 \\times 3 \\times 2 \\times 1}{3 \\times 2 \\times 1} = \\frac{5!}{3!}\n\\]\nW taki sposób \\(3 \\times 2 \\times 1\\) skróci się i zostanie tylko \\(5 \\times 4\\). Jeśli mielibyśmy 3 miejsca, chcielibyśmy uzyskać \\(5 \\times 4 \\times 3\\), a więc w mianowniku zapisalibyśmy tylko \\(2 \\times 1\\), czyli ostatecznie \\(\\frac{5!}{2!}\\). Powstaje nam z tego następujący wzór na liczbę wariacji n elementów po k elementów (czyli rozbicie w podzbiory po k elementów):\n\\[\nV^k_n = \\frac{n!}{(n-k)!}\n\\]\nSpróbujmy wypisać wariacje naszego zbioru po 3 elementy.\n\nvariations(Z, 3)\n\n\n\n\n\n  \n    \n      \n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      1\n      (A, B, C)\n      (A, C, B)\n      (B, A, C)\n      (B, C, A)\n      (C, A, B)\n      (C, B, A)\n    \n    \n      2\n      (A, B, D)\n      (A, D, B)\n      (B, A, D)\n      (B, D, A)\n      (D, A, B)\n      (D, B, A)\n    \n    \n      3\n      (A, B, E)\n      (A, E, B)\n      (B, A, E)\n      (B, E, A)\n      (E, A, B)\n      (E, B, A)\n    \n    \n      4\n      (A, C, D)\n      (A, D, C)\n      (C, A, D)\n      (C, D, A)\n      (D, A, C)\n      (D, C, A)\n    \n    \n      5\n      (A, C, E)\n      (A, E, C)\n      (C, A, E)\n      (C, E, A)\n      (E, A, C)\n      (E, C, A)\n    \n    \n      6\n      (A, D, E)\n      (A, E, D)\n      (D, A, E)\n      (D, E, A)\n      (E, A, D)\n      (E, D, A)\n    \n    \n      7\n      (B, C, D)\n      (B, D, C)\n      (C, B, D)\n      (C, D, B)\n      (D, B, C)\n      (D, C, B)\n    \n    \n      8\n      (B, C, E)\n      (B, E, C)\n      (C, B, E)\n      (C, E, B)\n      (E, B, C)\n      (E, C, B)\n    \n    \n      9\n      (B, D, E)\n      (B, E, D)\n      (D, B, E)\n      (D, E, B)\n      (E, B, D)\n      (E, D, B)\n    \n    \n      10\n      (C, D, E)\n      (C, E, D)\n      (D, C, E)\n      (D, E, C)\n      (E, C, D)\n      (E, D, C)\n    \n  \n\n\n\n\nTabela jest bardziej rozbudowana, ale wszystko zgadza się z naszymi poprzednimi wnioskami:\n\\[\n\\displaylines{\nV^3_5 = \\frac{5!}{(5-3)!} = \\frac{5!}{2!} = \\\\\n= \\frac{5 \\times 4 \\times 3 \\times 2 \\times 1}{2 \\times 1} = \\\\\n= 5 \\times 4 \\times 3 = 20 \\times 3 = 60\n}\n\\]\nCzyli wariacji po 3 elementy jest w naszym przykładzie 3 razy więcej, niż wariacji po 2 elementy.\n\n\n3 Kombinacje\nMożemy zwrócić uwagę, że tabela powyżej ma ściśle określoną strukturę. W pierwszym wierszu wszystkie podzbiory składają się z literek A, B i C ułożonych na różne sposoby. Można więc powiedzieć, że podzbiory w każdym wierszu są dla siebie permutacjami, bo składają się z tych samych elementów, różnią się tylko kolejnością. Każda kolumna zawiera unikalne zestawy literek. Widzimy więc, że ze zbioru 5 literek możemy wybrać 10 różnych zestawów literek, a w każdym z tych zestawów można ułożyć literki na 6 sposobów, co daje łącznie 60 wariacji. Wariacje możemy więc uzyskać tak, że weźmiemy wszystkie unikalne mniejsze zestawy literek, a potem rozpiszemy permutacje każdego z tych zestawów. Takie unikalne zestawy literek, bez zwracania uwagi na ich kolejność, to kombinacje. W tabeli każdy wiersz to pełny zestaw kombinacji. Wynika nam z tego inny wzór na liczbę wariacji:\n\\[\nV^k_n = C^k_n \\times P_k\n\\]\nSą to w rzeczywistości wymiary naszej tabeli. Liczba kombinacji (tj. unikalnych zestawów) to liczba wierszy, a liczba permutacji to liczba kolumn. Tabela powyżej ma wymiary \\(10 \\times 6\\), bo mamy 10 unikalnych zestawów po 3 elementy i każdy taki zestaw da się ułożyć na 6 różnych sposobów, co ostatecznie daje 60 komórek.\nŻeby wyprowadzić wzór na liczbę kombinacji, możemy wykorzystać fakt, że wiemy, jak się liczy liczbę wariacji i permutacji. W powyższej tabeli mamy 60 wariacji, a każda kombinacja ma 6 możliwych permutacji. Żeby więc pozbyć się informacji o permutacjach, musimy podzielić 60 wariacji na 6. Podstawiając do wzoru:\n\\[\n\\displaylines{\nV^3_5 = C^3_5 \\times P_3 \\\\\n60 = C^3_5 \\times 6\\ |\\div 6 \\\\\nC^3_5 = \\frac{60}{6} = 10\n}\n\\]\nCzyli jeśli mamy tabelę z 6 kolumnami i ilomaś wierszami, która ma 60 komórek, to wierszy musi być 10.\nMożemy do naszego nowego wzoru podstawić wzory na liczbę wariacji i permutacji i w ten sposób uzyskać ogólny wzór na liczbę kombinacji:\n\\[\n\\displaylines{\nV^k_n = C^k_n \\times P_k \\\\\n\\frac{n!}{(n-k)!} = C^k_n \\times k! \\ |\\div k! \\\\\nC^k_n = \\frac{\\frac{n!}{(n-k)!}}{k!} = \\frac{n!}{k!(n-k)!} = \\binom{n}{k}\n}\n\\]\nWzór ten doczekał się nawet własnego symbolu zwanego dwumianem Newtona \\(\\binom{n}{k}\\) (czyt. en nad ka). Dla przykładu liczba kombinacji 5 elementów po 3 elementy oznacza się jako 5 nad 3 i liczy tak:\n\\[\n\\displaylines{\n\\binom{5}{3} = \\frac{5!}{3!(5-3)!} = \\\\\n= \\frac{5!}{3!2!} = \\frac{5 \\times 4 \\times 3 \\times 2 \\times 1}{(3 \\times 2 \\times 1) \\times (2 \\times 1)} = \\\\\n= 10\n}\n\\]\n\n\n4 Powtórzenia\nDo tej pory omówiliśmy wariacje i kombinacje bez powtórzeń. Innymi słowy litera raz użyta nie mogła zostać użyta ponownie. Spotykaliśmy zbiory ABC, ale nie spotkaliśmy zbioru AAA. Wariacje i kombinacje mogą pozwalać na takie powtórzenia. Wariacje możemy policzyć jak zawsze kreskami. W zbiorze Z mamy 5 liter i chcemy zrobić z niego podzbiory po 2 elementy ze zwracaniem (czyli po wylosowaniu wraca do puli, czyli z powtórzeniami). Na pierwszym miejscu może być 5 liter, ale na drugim miejscu także może być 5 liter, bo litery się nie zużywają. Wychodzi nam więc takie działanie:\n\\[\n\\bar{V}^2_5 = 5 \\times 5 = 5^2 = 25\n\\]\nWychodzi nam z tego prosty wzór na liczbę wariacji n elementów po k elementów z powtórzeniami:\n\\[\n\\bar{V}^k_n = n^k\n\\]\nWzór na kombinacje z powtórzeniami podaję raczej pro forma, bo rzadko jest używany.\n\\[\n\\bar{C}^k_n = \\binom{k+n-1}{k} = \\frac{(k+n-1)!}{k!(n-1)!}\n\\]\n\n\n5 Podsumowanie\nPermutacje to zmiany kolejności, kombinacje to unikalne podzbiory. Jeśli zaczniemy robić permutacje unikalnych podzbiorów, wyjdą nam wariacje. Albo patrząc inaczej – permutacje to wariacje \\(V^n_n\\). Permutacje i wariacje możemy liczyć kreskami i silnią. Liczbę kombinacji uzyskamy dzieląc liczbę wariacji po k elementów przez liczbę permutacji k. Powstały wzór oznacza się symbolem Newtona \\(\\binom{n}{k}\\). Pomocny może okazać się poniższy schemat.\n\n\n```{mermaid}\n%%| fig-responsive: true\n%%| fig-width: 80%\n%%| code-fold: true\n%%| code-summary: \"Pokaż kod\"\nflowchart TD\n    START(START) --> zbior\n    zbior[/Mam zbiór, z którym chcę coś zrobić/] -->\n    kolejnosc{Czy kolejność ma znaczenie?}\n    kolejnosc -->|Nie| C[kombinacja]\n        C --> C_powtorzenia{Czy elementy mogą się powtarzać?}\n        C_powtorzenia -->|Tak| C_powtorzenia_koniec(kombinacja z powtórzeniami)\n        C_powtorzenia -->|Nie| C_koniec(kombinacja bez powrótrzeń)\n    kolejnosc -->|Tak| V[wariacja]\n        V --> V_calosc{Czy wykorzystuję cały zbiór?}\n        V_calosc -->|Tak| P(permutacja)\n        V_calosc -->|Nie| V_powtorzenia{Czy elementy mogą się powtarzać?}\n        V_powtorzenia -->|Tak| V_powtorzenia_koniec(wariacja z powtórzeniami)\n        V_powtorzenia -->|Nie| V_koniec(wariacja bez powrótrzeń)\n```\n\n\n\nflowchart TD\n    START(START) --> zbior\n    zbior[/Mam zbiór, z którym chcę coś zrobić/] -->\n    kolejnosc{Czy kolejność ma znaczenie?}\n    kolejnosc -->|Nie| C[kombinacja]\n        C --> C_powtorzenia{Czy elementy mogą się powtarzać?}\n        C_powtorzenia -->|Tak| C_powtorzenia_koniec(kombinacja z powtórzeniami)\n        C_powtorzenia -->|Nie| C_koniec(kombinacja bez powrótrzeń)\n    kolejnosc -->|Tak| V[wariacja]\n        V --> V_calosc{Czy wykorzystuję cały zbiór?}\n        V_calosc -->|Tak| P(permutacja)\n        V_calosc -->|Nie| V_powtorzenia{Czy elementy mogą się powtarzać?}\n        V_powtorzenia -->|Tak| V_powtorzenia_koniec(wariacja z powtórzeniami)\n        V_powtorzenia -->|Nie| V_koniec(wariacja bez powrótrzeń)"
  },
  {
    "objectID": "posts/p-value.html",
    "href": "posts/p-value.html",
    "title": "Testy statystyczne i wartość p",
    "section": "",
    "text": "Dla przykładu – wychodzę z mieszkania i zamykam drzwi na klucz. Zrobiłem to odruchowo, nieuważnie, więc po chwili nie wiem już, czy zamknąłem te drzwi, czy nie. Wzbiera we mnie lęk, więc cofam się i sprawdzam. Uff, zamknąłem. W tej chwili uzyskuję chwilową pewność1, że drzwi są zamknięte i spokojnie wychodzę z budynku. Wspomnienie zaciera się nieco, więc moja pewność spada ze 100% do 96%. Jednak taki poziom pewności w zupełności wystarczy, żebym na pytanie „Zamknąłeś drzwi?” odpowiedział „Tak”.\nJeśli jednak cierpiałbym na zaburzenie obsesyjno-kompulsywne (OCD), 96% pewności mogłoby się okazać stanowczo za dużym ryzykiem. Mógłbym wracać do tych drzwi kilkanaście razy, za każdym razem sprawdzając, czy na pewno są zamknięte. Każda pewność niższa niż 100% byłaby dla mnie trudna do zaakceptowania. Nawet 0,5% szans, że stanie się coś złego, mógłbym uważać za bardzo, bardzo dużo. Jednak takie zachowania i zniekształcenia poznawcze uznajemy za objaw psychopatologii (Butcher & Hooley, 2018). W świecie rzeczywistym musimy akceptować jakąś niepewność, jakąś szansę na pomyłkę. W przypadku zamykania drzwi robimy to na oko. W nauce, gdzie prawdopodobieństwo określamy liczbowo, możemy przyjąć konkretną granicę."
  },
  {
    "objectID": "posts/p-value.html#problemy-z-próbkowaniem",
    "href": "posts/p-value.html#problemy-z-próbkowaniem",
    "title": "Testy statystyczne i wartość p",
    "section": "1 Problemy z próbkowaniem",
    "text": "1 Problemy z próbkowaniem\nWyobraźmy sobie, że słyszymy w telewizji wypowiedź pewnego polityka, który twierdzi, że kobiety są mniej inteligentne od mężczyzn. Do tego wyobraźmy sobie, że jesteśmy psychologami, więc mamy uprawnienia do badania inteligencji. Sceptyczni, postanawiamy naukowo sprawdzić, czy chłopski rozum naszego polityka może mieć trochę racji. Docieramy do 100 kobiet i 100 mężczyzn, każdej z osób badanych przeprowadzamy rzetelny i trafny test inteligencji WAIS-R, liczymy średnie i jesteśmy w szoku. Na skali IQ, średnia inteligencja kobiet wyniosła 99, a średnia inteligencja mężczyzn 101. Ogarnia nas zdziwienie. Czy polityk miał rację? Czy musimy się teraz pokajać i w geście hołdu zaśpiewać razem Yellow Submarine? Niekoniecznie.\nNie ufamy swoim wnioskom, więc postanawiamy powtórzyć badanie. Ponownie pobieramy próbkę 100 kobiet i 100 mężczyzn, ponownie wykonujemy WAIS-R i ponownie liczymy średnie. Ciekawe. Tym razem średnia dla kobiet wyniosła 101, a dla mężczyzn… 98. Nie dość, że różnica wzrosła, to jeszcze się odwróciła. Ale jak to? Losowaliśmy z tej samej populacji. Dlaczego nagle średnia inteligencja w naszych próbkach jest inna?\nTen przykład stał się nierealny, gdy od niechcenia samodzielnie przeprowadziliśmy WAIS-R 200 osobom. Popuśćmy wodze fantazji jeszcze luźniej. Wyobraźmy sobie, że jesteśmy szalonym dyktatorem dużego państwa i mamy nieograniczone zasoby. Zaskoczeni naszymi wynikami, chcemy sprawdzić, czy kolejne średnie też będą się od siebie różniły. Badamy więc 1000 próbek po 100 osób każda. Mamy na swoim komputerze 1000 średnich, które przeglądamy. Kilka spośród nich pokazałem w tabeli 1.\n\n\n\n\nTabela 1:  Średnie wyniki IQ są zawsze trochę inne, ale rzadko są dalekie od 100. \n \n  \n    lp \n    IQ \n  \n \n\n  \n    1 \n    98.77 \n  \n  \n    2 \n    99.78 \n  \n  \n    3 \n    97.06 \n  \n  \n    4 \n    103.18 \n  \n  \n    5 \n    101.92 \n  \n  \n    6 \n    99.63 \n  \n  \n    7 \n    98.33 \n  \n  \n    8 \n    100.49 \n  \n  \n    9 \n    99.89 \n  \n  \n    10 \n    98.66 \n  \n\n\n\n\n\n\nZaczynamy zauważać, że wyniki za każdym razem były trochę inne, ale zawsze lądowały w pobliżu 100. Innymi słowy średnie bliskie 100 pojawiały się często, a średnie dalekie od 100 pojawiały się rzadko. Nie mamy na przykład ani jednego wyniku mniejszego niż 95, a w zakresie 99-101 mieści się 47% wszystkich uzyskanych średnich. Możemy zrobić nawet wykres, jak często pojawiały się jakie średnie.\n\n\n\n\n\nRysunek 1: Im wyższy słupek, tym średnia z tego zakresu pojawiała się częściej w naszym zbiorze 1000 średnich. Jak widać, średnie koncentrują się dookoła wyniku 100 IQ.\n\n\n\n\nWpadamy więc na pomysł – skoro średnie koncentrują się dookoła wyniku 100, to może prawdziwa średnia inteligencja w populacji wynosi właśnie 100? To jest bardzo rozsądne założenie. Zwłaszcza, że jeśli policzymy jedną, zbiorczą średnią dla 100 000 naszych badanych, to rzeczywiście wychodzi 100.\nDobieranie próby, wielkości tej próby i generalizowanie wniosków z prób na całe populacje to temat na całą inną rozmowę. Nie będziemy się teraz w to zagłębiać. Dla nas ważny jest taki problem – skąd mamy wiedzieć, czy różnica w IQ, która wychodzi nam w naszym badaniu, rzeczywiście istnieje? Może wyszła nam tylko przez przypadek? Czy cała nauka to kłamstwo, bo nigdy nie możemy mieć pewności? Czy nie powinniśmy odrzucić akademickich dywagacji i podążać za chłopskim rozumem? Wstrzymajmy panikę. To da się rozwiązać."
  },
  {
    "objectID": "posts/p-value.html#jak-łatwo-wychodzą-przypadkowe-różnice",
    "href": "posts/p-value.html#jak-łatwo-wychodzą-przypadkowe-różnice",
    "title": "Testy statystyczne i wartość p",
    "section": "2 Jak łatwo wychodzą przypadkowe różnice?",
    "text": "2 Jak łatwo wychodzą przypadkowe różnice?\nI teraz robi się ciekawie. To jest skomplikowane, warto tutaj zwolnić. Jeśli to się zrozumie, to zrozumie się całą wielką logikę testów statystycznych. Spróbujmy więc nieco się zagłębić. Jesteśmy w końcu w pięknej, abstrakcyjnej sytuacji, gdzie mamy do swojej dyspozycji 1000 średnich z różnych próbek. Na rysunku 1. widzimy, że większość naszych średnich mieści się mniej więcej w granicach 98-102. Uzyskać przez przypadek średnią 105 byłoby bardzo trudno. Uzyskać średnią 115 jest praktycznie niemożliwe. Ale już średnią 101 przez przypadek uzyskać jest bardzo łatwo.\nMożemy to ugryźć od innej strony. Jestem w końcu szalonym, bogatym dyktatorem dużego państwa, więc znowu robię olbrzymie badania i powtarzam nasz pierwotny eksperyment 1000 razy. Czyli losuję 1000 próbek po 100 mężczyzn, 1000 próbek po 100 kobiet, mierzę inteligencję i liczę różnicę. Efektem jest zbiór danych, którego fragment znajdziemy w tabeli 2.\n\n\n\n\nTabela 2:  Możemy wiele razy powtórzyć nasz eksperyment, a różnice za każdym razem będą inne. \n \n  \n    lp \n    IQ kobiet \n    IQ mężczyzn \n    różnica \n  \n \n\n  \n    1 \n    100.49 \n    98.83 \n    1.66 \n  \n  \n    2 \n    97.89 \n    99.14 \n    -1.25 \n  \n  \n    3 \n    99.89 \n    101.26 \n    -1.37 \n  \n  \n    4 \n    99.87 \n    100.14 \n    -0.27 \n  \n  \n    5 \n    102.91 \n    98.65 \n    4.26 \n  \n  \n    6 \n    101.43 \n    101.82 \n    -0.39 \n  \n  \n    7 \n    103.46 \n    101.24 \n    2.22 \n  \n  \n    8 \n    100.30 \n    101.45 \n    -1.15 \n  \n  \n    9 \n    99.98 \n    99.17 \n    0.81 \n  \n  \n    10 \n    99.00 \n    100.54 \n    -1.54 \n  \n\n\n\n\n\n\nPodstawą do różnicy była tu średnia inteligencja kobiet, więc ujemna różnica oznacza, że mężczyźni okazali się mniej inteligentni, zaś dodatnia, że bardziej. Tak jak w przypadku tabeli 1., niektóre różnice są większe, niektóre mniejsze, ale ich rozkład nie jest przypadkowy. Wrzućmy nasze różnice na wykres.\n\n\n\n\n\nRysunek 2: Różnice w średnich bywały większe lub mniejsze, ale oscylowały wokół zera.\n\n\n\n\nJak widzimy, różnice oscylują wokół zera. Skoro w większości eksperymentów różnica wyniosła zero albo prawie zero, to najprawdopodobniej to jest właśnie odpowiedź – prawdziwa różnica wynosi właśnie zero! Ale pomimo tego łatwo jest losowo uzyskać różnicę rzędu 1 punktu. Trudniej jest uzyskać różnicę rzędu 5 punktów. Przypadkowa różnica rzędu 10 punktów jest prawie niemożliwa do uzyskania.\nTo jest absolutnie kluczowe. Gdy nie ma różnic w populacjach, różnice między poszczególnymi próbkami i tak się zdarzają. Małe różnice w próbkach są łatwe do uzyskania, a duże różnice są mniej prawdopodobne. Możemy określić dokładnie, jak łatwo uzyskać jest jaką różnicę. Na przykład – jak często pojawiła się w naszym zbiorze różnica 5 lub więcej punktów (na plusie albo na minusie)? Mogę to policzyć – w 1000 próbkach różnica 5 albo większa pojawiła się 19 razy, co daje 1,9% szans. A jak często pojawiła się różnica co najmniej 2 punktów? W 343 przypadkach na 1000, czyli 34,3% szans."
  },
  {
    "objectID": "posts/p-value.html#istotność-statystyczna",
    "href": "posts/p-value.html#istotność-statystyczna",
    "title": "Testy statystyczne i wartość p",
    "section": "3 Istotność statystyczna",
    "text": "3 Istotność statystyczna\nPowtarzając nasze badanie 1000 razy, byliśmy w stanie ustalić, że różnicy w inteligencji tak naprawdę nie ma. Zyskaliśmy też możliwość policzenia, jak łatwo uzyskać daną różnicę przez przypadek, mimo że tak naprawdę różnic nie ma. Ale czy naprawdę musimy powtarzać nasz eksperyment 1000 razy, żeby zyskać taką pewność? Ronald Fisher wymyślił sposób, który ułatwia nam całą sprawę i pozwala dochodzić do podobnych wniosków na podstawie pojedynczych próbek.\nFisher daje nam taką propozycję – najpierw udajmy, że różnicy tak naprawdę nie ma. Przyjmijmy za fakt to, co trochę wyżej wywołało u nas kryzys wiary w naukę, czyli że jakakolwiek różnica, która między próbkami powstała, powstała w wyniku przypadku. Ot, bo średnie z próbek nie oddają dokładnie średniej z całej populacji i majtają się losowo dookoła prawdziwej średniej2. Taką hipotezę nazywamy hipotezą zerową. Hipoteza zerowa zawsze mówi, że tak naprawdę różnic nie ma, a jeśli jakieś wykryliśmy, to powstały one przez przypadek3.\nWyobrażamy sobie więc, że różnic między populacjami kobiet i mężczyzn w zakresie inteligencji nie ma. Przypomnijmy, że w pierwszym rzucie naszych badań kobiety miały średnią inteligencję równą 99, a mężczyźni 101. Różnica wyniosła więc 2 punkty. Z Badań Szalonego Dyktatora™ wiemy, że uzyskanie tak małej różnicy przez przypadek jest całkiem prawdopodobne, ale zakładamy, że dostępu do tamtych danych nie mamy.\nWiemy, że kiedy różnic tak naprawdę nie ma, to łatwo uzyskuje się małe różnice, ale uzyskanie dużej różnicy staje się naprawdę trudne. Możemy pójść więc taką logiką – jeśli 2 punkty to duża różnica, to to nie mógł być przypadek, że ją uzyskaliśmy. Z tego, że jest duża, możemy wnioskować, że istnieje naprawdę, a nie wynika z losowego majtania się średnich w próbkach dookoła prawdziwej średniej. Jeśli zaś różnica 2 punktów jest mała, no to równie dobrze mogła nam się trafić przez przypadek.\nLecz czy da się sprawdzić, czy dana różnica jest duża, czy mała? Bo przecież to nie może być po prostu umowne. Duże różnice to takie, które przez przypadek zdarzają się rzadko, a małe różnice to takie, które zdarzają się często. Ale czy bez pomocy państwowego aparatu opresji możemy zrobić to, co robiliśmy na koniec poprzedniego podrozdziału, czyli policzyć dokładne szanse na uzyskanie danej różnicy przez przypadek? Możesz pewnie teraz powtórzyć za Tadeuszem Sznukiem „nie wiem, ale się domyślam”.\nOczywiście sposób na to istnieje. Ten sposób nazywamy testem t-Studenta4. Należy on do szerokiej grupy podobnych sposobów na różne problemy, nazywających się ogólnie testami statystycznymi. Co najlepsze, nie będziemy wgłębiać się teraz w to, jak konkretnie ten test działa z punktu widzenia matematyki. Nie jest nam to potrzebne do zrozumienia jego logiki. A logika jest następująca:\n\nZałóż, że różnic tak naprawdę nie ma (hipoteza zerowa jest prawdziwa).\nPolicz, jak prawdopodobne jest uzyskanie takiej różnicy, jaka wyszła5.\n\nPonieważ założyliśmy, że różnic tak naprawdę nie ma, to różnica, która wyszła, musiała nam wyjść przez przypadek. Innymi słowy my chwilowo zakładamy, że to rzeczywiście był przypadek. Wtedy, korzystając ze wzoru testu t-Studenta, sprawdzamy, jaka była szansa, żeby ten przypadek miał miejsce. Jeśli szansa na to była bardzo mała, dochodzimy do wniosku, że to może jednak nie stało się przypadkiem. Mówiąc językiem naukowym – odrzucamy hipotezę zerową. Zerowa mówiła, że to wszystko wyszło przez przypadek, Ty jej odpowiadasz, że takie różnice nie dzieją się przez przypadek, że prawdopodobieństwo jest za niskie. Odrzucona hipoteza zerowa zaczyna płakać i upokorzona ucieka. Gorzej, jeśli szansa na przypadek jest duża. Wtedy nie możemy hipotezy zerowej odrzucić. Ciężko jest ją też przyjąć, ale o tym później.\nNie wgłębiając się za bardzo w to, jak nasz test to robi, wrzucamy do niego nasze dane. Program statystyczny wypluwa nam wtedy coś w tym rodzaju:\n\n\n\n    Welch Two Sample t-test\n\ndata:  women and men\nt = -0.94536, df = 195.91, p-value = 0.3456\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -6.172271  2.172271\nsample estimates:\nmean of x mean of y \n       99       101 \n\n\nNajważniejsza dla nas wartość określona jest literką \\(p\\) (p-value). Ta wartość znaczy to, nad czym tak bardzo się rozwodziłem we wcześniejszych akapitach – jak łatwo byłoby uzyskać otrzymać różnicę 2 punktów przez przypadek, gdyby różnic tak naprawdę nie było? W naszym wypadku odpowiedzią jest, że taką różnicę uzyskamy w 34,6% losowych próbek. Badania Szalonego Dyktatora™ pokazały wartość 34,3%, także widzimy, że test t-Studenta ma naprawdę dobrą skuteczność. Z jednego powtórzenia wyczytał to, do czego szalony dyktator potrzebował tysiąca powtórzeń. Teraz pojawia się pytanie – czy to wystarczająco mała szansa, żeby stwierdzić, że to nie przypadek? Żeby odrzucić hipotezę zerową?\nNa oko moglibyśmy powiedzieć, że nie. Jeśli naprawdę nie byłoby różnic, to różnicę rzędu 2 punktów albo więcej i tak dostawalibyśmy w mniej więcej co trzeciej próbce. Tak po prostu losowo. Ale jeśli \\(p\\) wyszłoby nam 0,000001%, to raczej nie mielibyśmy wątpliwości, że to nie mógł być przypadek i różnica istnieje naprawdę. Ale co gdy \\(p = 8\\%\\)? Albo \\(p = 4\\%\\)? Być może dobrze by było, gdybyśmy zaczęli się zastanawiać, jak duże ryzyko błędu możemy ponieść i podejmowali tę decyzję osobno w każdym przypadku. A może powodowałoby to tylko chaos i trudności w dojściu do porozumienia, bo dla każdego naukowca duża i mała szansa znaczyłyby co innego.\nTak czy inaczej musimy ustalić gdzieś punkt odcięcia. Jak małe prawdopodobieństwo jest wystarczająco małe, żeby uznać, że to nie mógł być przypadek? Taką wartość odcięcia oznaczamy \\(\\alpha\\) i w większości nauk przyjęty zwyczaj mówi, że \\(\\alpha = 0,05\\). Jeśli szansa na przypadek wynosi mniej niż 5%, to uznajemy, że to nie był przypadek. Warto zaznaczyć, że taka granica jest całkiem arbitralna. Jak każda granica, wywołuje pytania w stylu „Czyli jak szansa na przypadek wynosi 4,9%, to nie wierzę, że to przypadek, ale jak wynosi już 5,1%, to nie mogę być taki pewny?“. Odpowiedź brzmi „tak”. Mimo że na zdrowy rozum to nie ma sensu, to bycie blisko granicy rzeczywiście wywołuje duże emocje i część naukowców skłania do podejrzanych praktyk, żeby tylko zbić \\(p\\) poniżej magicznego 0,056.\nGdy prawdopodobieństwo uzyskania danej różnicy w sytuacji braku rzeczywistych różnic jest mniejsze niż 5%7, mówimy o takiej różnicy, że jest istotna statystycznie i odrzucamy hipotezę zerową (czyt. to nie mógł być przypadek). W naszym przykładzie \\(p = 0,346\\), a więc nie możemy odrzucić hipotezy zerowej (\\(0,346 > 0,005\\)). Prawdopodobieństwo przypadku jest stanowczo za wysokie.\nCo jest jednak ważne, wartość \\(\\alpha = 0,05\\) ciągle dopuszcza 5% szans na błąd. Jeśli zrobilibyśmy 100 badań, to ok. 5 z nich dałoby nam złudzenie, że różnica jest prawdziwa, mimo że tak naprawdę nie jest. W Badaniach Szalonego Dyktatora™ w 1000 powtórzeń uzyskaliśmy dużą różnicę 47 razy (właśnie ok. 5%). Jakieś ryzyko błędu zawsze jest, pytanie brzmi tylko, jak duże ryzyko jesteśmy w stanie zaakceptować. Daryl Bem (2011) opublikował kiedyś podsumowanie swoich badań, 9 eksperymentów z których 8 udowadniało, że ludzie potrafią przewidywać przyszłość. Jak się potem okazało, w ciągu 10 lat swoich badań wykonał on znacznie więcej niż te 9 eksperymentów, ale opublikował tylko te, które wyszły (Engber, 2017). Można więc zapytać, dlaczego wyszły? A odpowiedź może brzmieć – przypadkiem. Bo wartość \\(\\alpha\\) zawsze jest trochę większa, niż zero.\nPytaniem filozoficznym jest, czy w takim razie mamy hipotezę zerową przyjąć? To nie jest takie proste, bo brakuje nam jednego jeszcze czynnika – wielkości próby. Zanim jednak omówimy wielkość próby, weźmiemy to, co powiedzieliśmy o teście t-Studenta i zobaczymy, jak to ma się do całej reszty testów statystycznych."
  },
  {
    "objectID": "posts/p-value.html#logika-testów-statystycznych",
    "href": "posts/p-value.html#logika-testów-statystycznych",
    "title": "Testy statystyczne i wartość p",
    "section": "4 Logika testów statystycznych",
    "text": "4 Logika testów statystycznych\nTestów statystycznych jest od groma. Chciałbym móc powiedzieć, że każdy sprawdza co innego, ale niestety często wiele testów służy do dokładnie tego samego, a ich autorzy przekrzykują się w tym, który test jest mocniejszy, lepszy, bardziej odporny, lepiej pachnie itd. Zdobycie pewnej orientacji w tym gąszczu wymaga czasu i doświadczenia. Dzisiaj wiem, że różnice w średnich sprawdzam testem t-Studenta, a normalność rozkładu np. testem Shapiro-Wilka, ale nie wiedziałem tego, jak zaczynałem dopiero zaczynałem się uczyć.\nMimo całego bogactwa testów statystycznych, każdy z nich idzie bardzo podobną logiką, opierającą się na dwóch hipotezach – zerowej (\\(H_0\\)) i alternatywnej (\\(H_1\\)). Zerową już poznaliśmy (i skrzywdziliśmy). Hipoteza alternatywna to jej dokładne przeciwieństwo. Jeśli zerowa mówi, że nie ma różnic, to alternatywna na przekór twierdzi, że różnice są. Każdy test statystyczny ma takie dwie hipotezy. Wiedzieć, co robi dany test, to znaczy znać jego hipotezy. Przykładowo dla testu t-Studenta hipotezy brzmią tak:\n\n\\(H_0\\): Prawdziwa różnica między średnimi wynosi 0.\n\\(H_1\\): Prawdziwa różnica między średnimi jest różna od 0.\n\nDla testu Shapiro-Wilka hipotezy brzmią tak:\n\n\\(H_0\\): Rozkład zmiennej nie różni się od normalnego8.\n\\(H_1\\): Rozkład zmiennej różni się od normalnego.\n\nHipoteza alternatywna może być niekierunkowa (np. kobiety i mężczyźni różnią się inteligencją) lub kierunkowa (np. kobiety są inteligentniejsze od mężczyzn). W tym miejscu tylko to sygnalizuję, ale to ma potem znaczenie np. przy testowaniu, czy średnie się różnią (tzw. testy jedno- lub dwustronne).\nKażdy test statystyczny wyrzuca nam na koniec wartość \\(p\\). Ta wartość zawsze znaczy to samo – jeśli hipoteza zerowa byłaby prawdziwa, to jak trudno by było uzyskać dane, które uzyskaliśmy? Jeśli byłoby trudno, jeśli szansa na to wynosi mniej niż 5%, to odrzucamy hipotezę zerową. Przy teście t-Studenta oznacza to, że stwierdzamy, że różnica w średnich istnieje naprawdę, a nie jest tylko artefaktem w naszych próbkach. W teście Shapiro-Wilka odrzucenie hipotezy zerowej oznacza, że stwierdzamy, że rozkład różni się od normalnego. Na przykład jest paranormalny i straszy.\nCiekawe jest to, że o ile przy większości testów chcemy odrzucić hipotezę zerową, tak nie zawsze jest to prawdą. Nie chodzi mi o sytuację, w której po prostu chcemy, żeby się okazało, że kobiety i mężczyźni nie różnią się inteligencją. Czasem po prostu potrzebujemy, żeby hipoteza zerowa była prawdziwa. Dla przykładu z pewnych matematycznych przyczyn lubimy, jak dane nam się rozkładają normalnie. Dlatego jeśli test Shapiro-Wilka daje istotny statystycznie wynik, to zaklinamy pod nosem, bo to znaczy, że nasz rozkład istotnie różni się od normalnego9. Logika jest ta sama – \\(p < 0,05\\) oznacza odrzucenie hipotezy zerowej, tylko w przypadku tego testu, odrzucanie hipotezy zerowej jest nam nie na rękę.\nJeśli rozumie się tę ogólną logikę testów statystycznych, zna się hipotezę zerową danego testu, potrafi się wykorzystać wartość \\(p\\) do jej odrzucenia bądź nieodrzucania oraz potrafi się zinterpretować, co to odrzucenie znaczy w konkretnym teście, to spokojnie można iść w świat. Najtrudniejsze już za nami. Pierwszy kamień milowy właściwie mamy osiągnięty. Zanim jednak otworzymy szampana, warto się jeszcze zorientować, jak na \\(p\\) można wpływać, kiedy badanie nam nie wychodzi i jak ma się istotność statystyczna do wielkości efektu."
  },
  {
    "objectID": "posts/p-value.html#wielkość-próbki",
    "href": "posts/p-value.html#wielkość-próbki",
    "title": "Testy statystyczne i wartość p",
    "section": "5 Wielkość próbki",
    "text": "5 Wielkość próbki\nZ może nieco przydługich rozważań powyżej wyłonił nam się jasny obraz – duże różnice możemy wykryć, a małe nie, bo jak różnica jest mała, to zawsze jest ryzyko, że powstała przypadkiem. Ale na wielkość różnicy nie możemy wpływać. Ona jest jaka jest. A co jeśli się uprę i będę chciał wykryć małą różnicę? Czy jest coś, na co mogę wpłynąć, a co pozwoli mi wykrywać nawet te mniejsze różnice tak, żeby były istotne statystycznie? Owszem. Spoilerem był tytuł podrozdziału, ale można wykrywać mniejsze różnice, gdy zbierze się większą próbę.\nZobaczmy to na przykładzie. Pokazywałem wcześniej (na rysunku 1) wyniki symulacji, gdzie braliśmy 100 osób, liczyliśmy ich średnią inteligencję. Powtórzyliśmy to 1000 razy i patrzyliśmy, jak często pojawiają się dane średnie. Teraz zrobimy to samo, ale każda pojedyncza próbka będzie składała się z 1000 osób.\n\n\n\n\n\nRysunek 3: Jak często pojawiały się dane średnie, gdy w jednym rzucie badaliśmy 100 osób (mała próba) albo 1000 osób (duża próba).\n\n\n\n\nNa rysunku 3 widzimy, co się dzieje, kiedy liczebność próby zwiększa się. Kiedy próba była mała, wyniki koncentrowały się wokół prawdziwej średniej, czyli wartości 100, ale miały całkiem spory rozstrzał – ok. 95-105. Większość wyników plasowała się wtedy w zakresie10 od 98,5 do 101,5. Gdy próbka była duża, wyniki ciągle koncentrowały się wokół 100, ale były znacznie mniej rozproszone. Całkowity rozstęp to ok. 98-102, a większość wyników mieści się w zakresie 99,5-100,5.\nMa to sens, jak się dłużej zastanowić. Na czuja da się stwierdzić, że średnia z 1000 osób będzie bardziej adekwatna, niż średnia ze 100 osób. A „bardziej adekwatna” oznacza w tym wypadku „bliższa prawdziwej średniej całej populacji” czyli „bliżej 100”. Dlatego właśnie ten rozkład jest bardziej zbity – bo każda pojedyncza średnia, która go buduje, jest bardziej adekwatna.\nMożna powiedzieć – no tak, ale co to zmienia? Zmienia to tyle, że teraz co innego jest małą, a co innego dużą różnicą. Przy małych próbach wyniki oddalone o 1 lub więcej punktów od prawdziwej średniej zdarzały się dość często, bo w 53,3% przypadków. W takim razie można powiedzieć, że 1 punkt oddalenia to dość mało, często się zdarza przez przypadek. Ale jak próba jest duża, to takie samo oddalenie możemy już uznać za duże, bo pojawiło się tylko w 3,4% przypadków.\nPrzekładając to na logikę wartości \\(p\\) – różnice, które bardzo łatwo uzyskać w małych próbach, nagle stają się trudne do uzyskania, gdy próba jest duża. Jeśli zbadaliśmy po 100 kobiet i mężczyzn i wyszła nam różnica 2 punktów IQ, to nie zrobi to na nas większego wrażenia, bo taka różnica może być przypadkowa. Ale jeśli różnica 2 punkty wychodzi przy próbce po 1000 osób, to wtedy mamy już więcej zaufania, że ta różnica istnieje naprawdę.\nJako ciekawostkę mogę jeszcze dorzucić, że jeśli spodziewamy się, jak duży będzie nasz efekt (np. dlatego, że przeczytaliśmy dużo na ten temat i mamy już mniej więcej wyczucie, czego się spodziewać), to możemy oszacować, ile osób musimy zbadać, żeby efekt o takiej wielkości wykryć. Im mniejszy jest efekt do wykrycia, tym więcej ludzi trzeba zbadać, żeby okazał się istotny statystycznie. Nazywamy to analizą mocy i możemy wykonać w darmowym programie G*Power lub za pomocą pakietu pwr w R.\n\n5.1 Dlaczego większe próbki pozwalają wykryć mniejsze efekty?\nTa część jest zupełnie nieobowiązkowa. Spokojnie da się dobrze rozumieć testy statystyczne po prostu wiedząc, że większe próbki pozwalają wykryć mniejsze efekty, bez wchodzenia w szczegóły dlaczego tak się dzieje. Ale poświęcę chwilę, żeby to drugie też wyjaśnić. Kilka kolejnych akapitów będzie też bardziej techniczne i można spokojnie je pominąć i przejść do podrozdziału o wielkości efektu.\nPod rysunkiem 3. pisałem o tym, że większość wyników mieści się w jakimśtam zakresie dookoła średniej. Ten zakres, w którym zawiera się większość wyników, nazywamy odchyleniem standardowym i więcej na jego temat piszę w rozdziale ?@sec-procent-wariancji.\nBardzo szczególne jest odchylenie standardowe rozkładów takich, jak te z rysunku 3. Przypomnijmy, co to są za rozkłady. Pokazują one, jak często możemy wylosować jaką średnią. Środkiem tego rozkładu jest prawdziwa średnia całej populacji, a średnie dookoła to losowe odchylenia od tej prawdziwej średniej. Takie rozkłady nazywamy rozkładami próbkowania i niosą one bardzo ważną informację – jakie różnice są duże, a jakie są małe. Odchylenia standardowe takich rozkładów nazywamy błędem standardowym. Błąd standardowy mówi nam, jakie średnie będą nam często wychodzić przez przypadek, a jakie rzadko.\nJeśli wartości są w obrębie ok. 2 błędów standardowych, czyli tam, gdzie 95% wszystkich wyników, to uznajemy, że różnice są w sumie małe, nieistotne statystycznie. To, że to są 2 odchylenia standardowe11 to konkret, którego nie mówiłem wcześniej, ale który wynika z faktu, że przyjmujemy \\(\\alpha = 0,05\\) (por. podrozdział Istotność statystyczna). Innymi słowy wyniki oddalone o mniej niż 2 odchylenia standardowe uzyskać jest łatwo (więcej niż 5% szans), a wyniki oddalone o więcej niż 2 odchylenia standardowe uzyskać jest trudno (mniej niż 5% szans).\nŻeby przerobić to na konkretnym przykładzie, zerknijmy jeszcze raz na rozkłady z rysunku 3. Odchylenie standardowe rozkładu z małymi próbkami wynosi12 ok. 1,5, zaś średnia wynosi 100. Oznacza to, że często (w ok. 95% przypadków) będą nam się losowały średnie z zakresu 97-103. Jeśli jakaś grupa, np. członkowie Mensy, będzie miała średnią spoza tego zakresu, to da nam dowód na to, że średnia inteligencja tej grupy naprawdę jest inna niż średnia ogółu społeczeństwa. Odchylenie standardowe rozkładu z większymi próbami jest mniejsze, bo wynosi zaledwie ok. 0,5 (widać na rysunku, że rozkład jest węższy, więc trzeba węższych widełek, żeby objąć większość wyników). Oznacza to, że spodziewamy się wyników w zakresie 99-101 punktów IQ, a wyniki spoza tego zakresu uznajemy za nieprzypadkowe. Średni wynik 102 łatwo jest uzyskać, kiedy zbadamy tylko 100 osób, ale trudno, kiedy zbadamy ich 1000.\nWidzimy więc, że im większa próbka, tym błąd standardowy mniejszy. Przypomnijmy, że mniejszy błąd standardowy oznacza, że łatwiej nam wykryć mniejsze efekty, bo zakres wyników podejrzanych o bycie przypadkowymi (średnia ± 2 błędy standardowe) jest węższy. Możemy to sobie wyobrazić tak, że gdy policja robi dokładniejsze sprawdzenie podejrzanych, to winę części z nich mogą wykluczyć. Grono podejrzanych zmniejsza się i łatwiej jest odróżnić prawego obywatela od przestępcy.\nCzy potrzebujemy jednak Badań Szalonego Dyktatora™, żeby znać błąd standardowy? W końcu musimy wiedzieć, jaka jest prawdziwa średnia i zobaczyć, jak często pojawiają się jakie średnie próbek, żeby sprawdzić odchylenie standardowe tego rozkładu. Na szczęście, tak jak wcześniej odkryliśmy dla testów t-Studenta, istnieje zaskakująco prosty sposób na oszacowanie wielkości błędu standardowego na podstawie jednej próbki, bez pobierania 1000 próbek po 100 osób. Wzór ten wynika z czegoś, co nazywa się centralnym twierdzeniem granicznym i wygląda następująco:\n\\[\nSE=\\frac{SD}{\\sqrt{n}}\n\\]\nBierzemy odchylenie standardowe naszej próbki i dzielimy je przez pierwiastek z liczby obserwacji (w naszym wypadku liczby osób badanych). Z Badań Szalonego Dyktatora™ wyszło, że błąd standardowy dla próbki wielkości 100 osób wynosi 1,52. Jeśli weźmiemy naszą próbkę 100 mężczyzn z samego początku i podstawimy dane do wzoru, wyjdzie nam \\(SE = \\frac{14,17}{\\sqrt{100}} = 1,42\\). Jak widzimy, skuteczność tego twierdzenia jest niezła. Biorąc pod uwagę, jak dużo środków i czasu oszczędza (nie trzeba powtarzać badania 1000 razy), jest wręcz fenomenalna.\nNajważniejsze jest jednak to, że w mianowniku tego twierdzenia pojawia się pierwiastek z liczby osób badanych. Oznacza to, że im więcej osób badanych, tym przez większą liczbę dzielimy. Jak dzielimy przez większe liczby, rzeczy maleją. Czyli im więcej osób badanych, tym mniejszy błąd standardowy. A wiemy, że im mniejszy błąd standardowy, tym łatwiej wykrywać małe efekty. I właśnie dlatego, że w mianowniku tego twierdzenia jest liczba obserwacji, większe próbki pozwalają wykryć mniejsze efekty."
  },
  {
    "objectID": "posts/p-value.html#wielkość-efektu-a-istotność-statystyczna",
    "href": "posts/p-value.html#wielkość-efektu-a-istotność-statystyczna",
    "title": "Testy statystyczne i wartość p",
    "section": "6 Wielkość efektu a istotność statystyczna",
    "text": "6 Wielkość efektu a istotność statystyczna\nKiedy wiemy już, co znaczy istotność statystyczna, dobrze byłoby powiedzieć, czego nie oznacza. Ludzie często uważają, że jest ona czymś innym, niż jest w rzeczywistości, być może dzięki temu, że ma tak chwytliwą nazwę. Z jednej strony mamy w statystyce rzeczy, które nazywają się „błąd I rodzaju” i „błąd II rodzaju”, które spokojnie dało się nazwać lepiej13. Na przykład żeby nazwa sugerowała nam który jest który14. „Istotność statystyczna” to termin znacznie doskonalszy, bo nie dość, że przypomina, co oznacza, to do tego sugeruje, że znaczy znacznie, znacznie więcej, niż znaczy w rzeczywistości. Coś jak nazwa „apartament” użyta na pokój motelowy z łóżkiem, oknem i niewielkim stołem.\nKiedy mówimy, że różnice są nieistotne statystycznie, sugeruje to, że nie mają żadnego znaczenia. Kiedy mówimy, że odkryliśmy istotne różnice, sugeruje to, że odnaleźliśmy coś fundamentalnego. „Nieistotne” rozumiemy jako „małe”, „zaniedbywalne”, zaś „istotne” jako „duże”, „ważne”. I to jest błąd.\nWyobraźmy sobie (przykład kompletnie zmyślony), że badaliśmy skuteczność maści z sadła goryla, którą naciera się bananowce, żeby rodziły więcej owoców. A co tam, czemu nie. Jako szalony dyktator jesteśmy potentatami światowego rynku bananowego, mamy do swojej dyspozycji miliony drzew bananowych, możemy testować. Planujemy nasz eksperyment poprawnie metodologicznie, z grupą kontrolną i standardowymi procedurami, kupujemy tony rzeczonej maści i wydajemy polecenie smarowania oznaczonych drzew. Banany rodzone w eksperymentalnych hodowlach skrzętnie ważymy. Gdy dane spływają, dokonujemy analizy statystycznej. I cieszymy się niezmiernie, bo oto wychodzi nam istotny statystycznie efekt! Odrzucamy hipotezę zerową, to nie może być przypadek, bo \\(p < 0,001\\). Czy to znaczy, że czas zacząć masowo smarować wszystkie nasze drzewa? Nie tak szybko.\nWartość \\(p\\) mówi nam, że różnica między drzewami smarowanymi a niesmarowanymi istnieje naprawdę, że nie jest tylko losowym artefaktem próbkowania. Wiemy więc, że drzewa traktowane maścią rodzą więcej bananów. Ale zupełnie innym pytaniem jest „o ile więcej”. W końcu zbadaliśmy bardzo, bardzo dużo drzew. Oznacza to, że możemy skutecznie wykrywać bardzo małe różnice. Pytanie zaś jest o wielkość efektu. Sprawdzamy więc, za jakie zwiększenie produkcji goryle oddały swoje sadło. Okazuje się, że maść powoduje zwiększenie miesięcznej produkcji bananów z jednej hodowli o ok. 2 kilogramy. Na oko 2 kiście. W chwili, kiedy to piszę, przekłada się to na zwiększenie miesięcznego przychodu o ok. 11,6 zł. A maść z sadła goryla jest znacznie, znacznie droższa. Zwłaszcza biorąc pod uwagę straty wizerunkowe.\nTakże kiedy mówimy, że „efekt jest istotny statystycznie” mamy na myśli „mamy rozsądne powody przypuszczać, że istnieje naprawdę”, a kiedy mówimy, że „efekt okazał się nieistotny statystycznie” mamy na myśli „nie możemy być pewni, czy w ogóle istnieje”. A przynajmniej to powinniśmy mieć na myśli. Z tym, co ludzie rzeczywiście mają na myśli mówiąc o statystycznej istotności, cóż, różnie bywa.\nZ naszym bananowym przykładem wiąże się jeszcze ciekawy problem dotyczący wyników nieistotnych. Nasz potentat bananowy, przed rozpoczęciem eksperymentu, mógłby sprawdzić, jak mocno maść z sadła goryla musiałaby zwiększyć produkcję, żeby wprowadzanie jej w ogóle było opłacalne. Wtedy mógłby wykonać analizę mocy, o której wspominałem wcześniej, żeby sprawdzić, ile drzew musi smarować, żeby wykryć efekt o pożądanej wielkości. Mniejszych efektów wykrywać po prostu nie potrzebuje. Badając za dużo drzew dał sobie możliwość wykrycia bardzo małych różnic, ale też wydał mnóstwo pieniędzy na maść i stracił więcej czasu swoich pracownikóę. Dla naszego potentata nie było ważne, czy maść w ogóle ma szansę zwiększyć liczbę owoców (co mogłoby ciekawić biologa), ale czy może zwiększyć tę produkcję w opłacalny sposób.\nTo rodzi pytanie dotyczące udowadniania nieistnienia. Wydaje się, że nie da się udowodnić nieistnienia czegoś. Jeśli powiem, że jednorożców nie ma, ktoś może mi odpowiedzieć, że źle szukałem. I technicznie będzie miał rację, może po prostu wszyscy źle szukamy. Czasem mam taką nadzieję. W statystyce również nie możemy być do końca pewni, czy efekt nie istnieje. Dla przykładu – jeśli w naszych badaniach maści z sadła goryla nie zaobserwowalibyśmy żadnych efektów (czyli najbardziej prawdopodobny scenariusz), mogłoby to być dlatego, że żadnego efektu tak naprawdę nie ma (czyli najbardziej prawdopodobny scenariusz). Ale być może efekt jest, tylko nasza próbka jest zbyt mała. Może efekt zwiększa masy hodowanych bananów o tysięczne części grama i po prostu na świecie jest za mało bananowców, żeby to wykryć. A może nasze badanie ma błędy metodologiczne. Może efekt jest, ale użyliśmy za mało maści albo smarowaliśmy gałęzie, podczas gdy powinniśmy byli smarować liście. Zawsze istnieje pewna doza niepewności w określaniu, że czegoś nie ma. Z drugiej strony, jeśli zrobiliśmy wszystko, co było w naszej mocy i według wszystkiego, co wiemy, powinniśmy coś zaobserwować, a nie widzimy nic, to może rzeczywiście tego nie ma? Może brak dowodu tam, gdzie się go spodziewamy, może być dowodem nieistnienia? W niektórych przypadkach, przynajmniej. W końcu z praktycznego punktu widzenia, co za różnica, czy efektu nie ma wcale, czy jest tak mały, że niemożliwy do zaobserwowania?15"
  },
  {
    "objectID": "posts/p-value.html#podsumowanie",
    "href": "posts/p-value.html#podsumowanie",
    "title": "Testy statystyczne i wartość p",
    "section": "7 Podsumowanie",
    "text": "7 Podsumowanie\n\nJeżeli obserwujemy jakiś efekt w naszych danych to może on albo istnieć naprawdę, albo być losowym artefaktem, błędem, wynikającym z tego, że próbka nie jest doskonałym odzwierciedleniem populacji, z której pochodzi.\nWartość \\(p\\) mówi nam, jaka jest szansa uzyskania danego efektu (np. różnicy w średnich) przez przypadek, czyli gdyby ten efekt tak naprawdę nie istniał. Jeśli ta szansa jest mniejsza niż 5%, to uznajemy, że nie może być mowy o przypadku.\nWartość \\(p\\) dają nam testy statystyczne, które są wymyślane w konkretnym celu. Rdzeń testu statystycznego stanowi jego hipoteza zerowa, którą – na podstawie wartości \\(p\\) – odrzucimy lub nie.\nWartość \\(p\\) zależy od dwóch rzeczy – wielkości efektu i wielkości próby. Na wielkość efektu nie mamy wpływu, ale możemy wykrywać mniejsze efekty zwiększając liczebność próby.\nTo, że coś jest istotne statystycznie znaczy tylko tyle, że prawdopodobnie istnieje naprawdę. Wartość \\(p\\) nie mówi nam, czy efekt jest duży, czy mały, ani czy ma praktyczne znaczenie."
  },
  {
    "objectID": "posts/podstawy_R.html",
    "href": "posts/podstawy_R.html",
    "title": "Podstawy programowania w R",
    "section": "",
    "text": "W kilku miejscach wrzucam informacje, jak to, co omawiamy teoretycznie, można zrobić w R. Absolutnie nie jest to konieczne do zrozumienia statystyki! Jest to tylko jedna z możliwości, jak można opisaną dalej teorię przekuć w praktykę. O R można myśleć jako o programie do robienia statystyki, podobnie jak SPSS, Statistica, Stata czy (oparte na R, darmowe i otwartoźródłowe) jamovi. Jeśli jednak Czytelnik widział kiedyś program statystyczny, spodziewać się będzie ekranu podobnego do Excela, gdzie na górnej belce wybiera się testy statystyczne, jakie chce się przeprowadzić. Praca w R tak nie wygląda. Największa wada i zaleta R polega na tym, że jest on jednocześnie językiem programowania. A to daje bardzo ciekawe możliwości, o których niżej. Także praca w R wygląda tak, że w specjalnym języku piszemy komputerowi, co ma zrobić, potem uruchamiamy te instrukcje i gotowe.\nW tym miejscu spróbuję opisać, jak zacząć pracę z R. Nie mam ambicji zrobić pełnego wprowadzenia, bo wyszedłby z tego osobny podręcznik. Mam ambicje dać jakikolwiek fundament, który pozwoli Czytelnikowi wyczyścić dane i zrobić podstawowe testy. Jeśli po przeczytaniu tego tekstu ktoś stwierdzi „Może warto się zagłębić”, to znajdzie mnóstwo materiałów, które mu na to pozwolą. Ze swojej strony mogę polecić podręcznik „Język R. Kompletny zestaw narzędzi dla analityków danych” Wickhama i Grolemunda (2020), interaktywne kursy na DataCamp, a pomocy w rozwiązaniu konkretnych problemów zawsze można szukać na StackOverflow."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-console",
    "href": "posts/podstawy_R.html#sec-console",
    "title": "Podstawy programowania w R",
    "section": "3.1 Konsola, zmienne i matematyka",
    "text": "3.1 Konsola, zmienne i matematyka\nEkran RStudio składa się z trzech okienek. Duże okienko po lewej i dwa mniejsze po prawej. Skierujmy naszą uwagę na okienko po lewej, czyli konsolę. Wita nas ona ciepłą informacją, że R jest zainstalowany. Znakiem zachęty > zachęca nas do wydawania jej poleceń. Konsola R to miejsce, w którym możemy mówić R, żeby coś dla nas liczył. Można to potraktować jako super-kalkulator. Spróbuj – wpisz w konsolę 2+3*5, zatwierdź enterem i zwróć uwagę, że R stosuje poprawną kolejność wykonywania działań. Spacje nie mają znaczenia, także możemy wpisać również bardziej estetyczną wersję 2 + 3 * 5. Nie wiem po co, skoro to tylko obliczenie na szybko, ale można.\nWynik takiego działania nigdzie się nie zapisuje, tylko wyświetla się w konsoli. Jeśli chcemy zapisać nasz wynik, możemy to zrobić stosując znaczek <-6. Przydatnym skrótem jest tu w RStudio jest Alt+-, który od razu wstawia nam tę strzałeczkę. Wyjaśnijmy to na przykładzie.\n\nwynik <- 2 + 3 * 5\n\na <- wynik * 3^3\n\nPowyżej zapisałem dwa polecenia, które do konsoli powinniśmy wpisać jedno po drugim i każde z nich zatwierdzić enterem. Pierwsze polecenie mówi konsoli – policz 2 + 3 * 5 i zapisz to w zmiennej wynik. Po zatwierdzeniu tego polecenia możemy zauważyć, że wynik działania nam się nie wyświetlił. Za to w prawym górnym okienku pojawiło się słowo wynik i obok wartość 17. Od tego momentu możemy używać słowa wynik zamiast liczby 17. Spróbuj wpisać w konsolę samo słowo wynik i zatwierdzić enterem. Wyskoczy 17. Jeśli teraz wpiszesz np. wynik * 2, to konsola zwróci to samo, co zwróciłaby po wpisaniu 17 * 2, czyli 34. Co więc robi drugie polecenie z przyładu? Możemy je odczytać jako „W zmiennej o nazwie a zapisz (a <-) wynik mnożenia zmiennej wynik i 3 do potęgi 3 (wynik * 3^3)“. Operator ^ oznacza potęgowanie. Jeśli potem wpiszemy w konsolę a, naszym oczom ukaże się 459, czyli \\(17 \\times 3^3\\).\nJak się potem okaże, w zmiennych możemy zapisywać dużo więcej, niż tylko wyniki prostych działań matematycznych. W identyczny sposób do odpowiednich zmiennych trafią wyniki testów statystycznych albo całe bazy danych. Ale o tym dalej."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-functions",
    "href": "posts/podstawy_R.html#sec-functions",
    "title": "Podstawy programowania w R",
    "section": "3.2 Funkcje",
    "text": "3.2 Funkcje\nTym, co robi robotę w R (jak i w każdym innym języku programowania) są funkcje. Funkcje to maszyny, do których wrzucamy jakiś obiekt (np. liczbę), funkcja nam to przekształca i wyrzuca z siebie coś innego. Tak samo jak funkcje w matematyce. Skojarzenie jest słuszne, bo funkcje w programowaniu zapisujemy konwencją f(x), czyli nazwa(co_wrzucam_do_funkcji). Dla przykładu funkcja o nazwie seq pozwala nam wytwarzać regularne sekwencje liczb, np. od 1 do 10 co 2. Musimy do tej funkcji wrzucić (1) od jakiej liczby chcemy zacząć, (2) na jakiej chcemy skończyć i (3) jaki chcemy mieć krok. Dla przykładu:\n\nseq(5, 62, 3)\n\n#>  [1]  5  8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 62\n\n\n\nTo, co wrzucamy do funkcji, nazywamy argumentami. Tutaj były nimi liczby. Funkcja seq wie, że ma zacząć od 5 i skończyć na 62, a nie zacząć od 62 i skończyć na 5, bo ma pod maską zapisane, w jakiej kolejności będzie dostawać te liczby. Takie argumenty nazywamy pozycyjnymi – funkcja wie, co to jest i co ma z tym zrobić, na podstawie pozycji. W R każdy argument możemy też jednak nazwać. Dla przykładu wiemy, że argumenty funkcji seq nazywają się from, to i by. Możemy więc wprost powiedzieć funkcji, że oto dajemy jej from, to i by.\n\nseq(from = 5, to = 62, by = 3)\n\n#>  [1]  5  8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 62\n\n\n\nseq(to = 62, by = 3, from = 5) # jeśli nazywamy argumenty, kolejność nie ma znaczenia\n\n#>  [1]  5  8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 62\n\n\n\nTego typu argumenty nazywamy kluczowymi (keyword) albo nazwanymi (named). W praktyce wykorzystuje się mieszankę jednego i drugiego typu argumentów. Nazywanie argumentów zwiększa czytelność kodu, ale czasem pozycja jest wystarczająco jasna. Dla przykładu mogę napisać sqrt(x = 9), żeby wyciągnąć pierwiastek kwadratowy (square root) z 9, ale czy zapis sqrt(9) jest jakkolwiek mniej jasny?\nCzasami też używamy argumentów kluczowych, żeby zmienić jakieś ustawienia domyślne albo odblokować nowe możliwości. Dla przykładu funkcja seq dysponuje dodatkowym argumentem length.out. Jeśli ustawimy length.out, możemy ustalić liczbę elementów w naszym wyniku zamiast punktu końcowego albo kroku.\n\nseq(5, by = 3, length.out = 10) # daj mi 10 kolejnych liczb zaczynając od 5 i co 3\n\n#>  [1]  5  8 11 14 17 20 23 26 29 32\n\n\n\nseq(1, 100, length.out = 10) # podaj 10 liczb między 1 a 100\n\n#>  [1]   1  12  23  34  45  56  67  78  89 100"
  },
  {
    "objectID": "posts/podstawy_R.html#sec-docs",
    "href": "posts/podstawy_R.html#sec-docs",
    "title": "Podstawy programowania w R",
    "section": "3.3 Dokumentacja",
    "text": "3.3 Dokumentacja\nRóżne funkcje przyjmują różne argumenty. Podobnie jak nie powiemy piekarzowi, żeby stosował białą fugę do naszego chleba, tak samo do funkcji seq nie wrzucimy słów zamiast liczb. Tak jak musimy wiedzieć, że piekarz zajmuje się pieczywem, tak samo musimy znać funkcje, których używamy. W poprzednim podrozdziale wiedzieliśmy, co można wrzucić do funkcji seq i jak nazywają się jej argumenty, bo to napisałem. Tak samo podałem ot tak, że argument funkcji sqrt nazywa się x. Skąd mam to jednak wiedzieć?\nNie bez powodu mówimy o językach programowania. Wiele funkcji nauczymy się na pamięć i będziemy po prostu wiedzieć, jak z nich korzystać. Jednak znacznie częściej (w wielu przypadkach też dla funkcji, które znamy) będziemy korzystać z dokumentacji. R dysponuje świetną dokumentacją dla każdej funkcji7. Zawiera ona opis, co dana funkcja robi, jakie argumenty przyjmuje, a często nawet tło teoretyczne jej działania. Żeby dostać się do dokumentacji danej funkcji, wywołujemy ją w konsoli ze znakiem zapytania, np. ?seq. Powoduje to, że w okienku Help po prawej wyświetla nam się pełna dokumentacja tej funkcji. Nie trzeba więc sięgać do Google, żeby uzyskać odpowiedź na podstawowe problemy. O ile wiemy, jakiej funkcji chcemy użyć. Także zachęcam do częstego sięgania do dokumentacji. To absolutnie podstawowe narzędzie w programowaniu czegokolwiek.\nŚwietnym źródłem informacji o funkcjach, pozwalającym również znaleźć odpowiednią funkcję do realizacji naszego celu, są ściągi (cheat sheets). Pakiety tidyverse mają nawet swoje oficjalne ściągi, które na początku swojej nauki R wydrukowałem i zalaminowałem. Polecam je gorąco, zwłaszcza do pakietów dplyr, ggplot2 i stringr. Można je znaleźć bezpośrednio w RStudio wybierając Help → Cheat sheets → Browse all cheat sheets albo na stronie Posit, czyli firmy, która wypuszcza RStudio. Jak przejdziemy dalej, do części praktycznej, polecam, żeby mieć te ściągi już przygotowane, wydrukowane lub w .pdf."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-scripts",
    "href": "posts/podstawy_R.html#sec-scripts",
    "title": "Podstawy programowania w R",
    "section": "3.4 Skrypty",
    "text": "3.4 Skrypty\nWpisaliśmy w konsolę już sporo rzeczy. Historię naszych komend możemy zobaczyć przechodząc do odpowiedniej zakładki w prawym górnym okienku. Jednak wyjście z programu może nam skutecznie skasować tę historię. Jeśli mamy całą sporą analizę statystyczną, która składa się z 200 linijek kodu, to chcielibyśmy mieć jakiś sposób na zapisanie tego na przyszłość, żeby nie musieć za każdym razem wklepywać tego kodu z pamięci. Zaopatrujemy się więc w gruby zeszyt w linie i wszystkie komendy piszemy również tam. Żarcik. Do przechowywania kodu służą specjalne pliki zwane skryptami. Tak jak mamy pliki .pdf, .txt, .docx, tak w plikach .R zapisujemy kod R.\nNajprościej stworzyć nowy skrypt klikając w biały kwadracik z plusem w lewym górnym rogu RStudio. Spowoduje to otworzenie listy rzeczy, które możemy wytworzyć. Nas w tej chwili interesuje R Script. Gdy utworzymy nasz skrypt, otworzy się on nad konsolą. Warto od razu zapisać go na dysku skrótem Ctrl+S (lub File → Save). Warto się upewnić, że zapisywany plik rzeczywiście kończy się rozszerzeniem .R.\nNa razie nasz skrypt jest pusty, ale możemy w nim pisać dowolne polecenia tak samo, jak napisalibyśmy w konsoli. Różnica jest taka, że nie są one od razu wykonywane. Skrypt to tekst. Jeśli chcemy wykonać jakieś polecenie ze skryptu, to albo kopiujemy je do konsoli, albo umieszczamy na nim kursor i klikamy Ctrl+Enter. Możemy też myszką zaznaczyć większy fragment kodu i kliknąć Ctrl+Enter. Jeśli chcielibyśmy wykonać cały nasz skrypt, to zaznaczamy cały kod (Ctrl+A) i ponownie używamy Ctrl+Enter. Ewentualnie możemy skorzystać ze skrótu Ctrl+Shift+S8.\nTo jest najważniejsza różnica między skryptem a konsolą – cokolwiek wpisane w konsolę jest wykonywane natychmiast i znika. Z konsoli korzystamy, kiedy chcemy zrobić jakieś jednorazowe operacje albo coś sobie przetestować. W skrypt wpisujemy to, co chcemy zachować. Ewentualnie szkic, który potem będziemy naprawiać. Gdy ludzie przechodzą nagle z konsoli do skryptu, bardzo często zaczynają wpisywać w swój skrypt różne śmieci, które wcześniej wpisaliby w konsolę. Konsola nie zniknęła, ciągle jest do naszej dyspozycji. Skrypt w swojej ostatecznej postaci powinien jednak działać tak, że jak go uruchomimy, to cały przeleci bez błędów. No, przynajmniej do tego dążymy. Czyli konsola do testów, skrypt do prawdziwego kodu."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-comments",
    "href": "posts/podstawy_R.html#sec-comments",
    "title": "Podstawy programowania w R",
    "section": "3.5 Komentarze",
    "text": "3.5 Komentarze\nJeśli chcielibyśmy zrobić w skrypcie jakąś notatkę, która nie jest kodem, używamy znaczka #. Jest to tzw. komentarz. Możemy na przykład napisać:\n\nprint(\"Hello world!\") # czuję się programistą\n\nJeśli wykonamy taką linijkę, konsola zignoruje wszystko po znaku #. Pozwala to nam zostawiać sobie notatki w rodzaju # hipoteza 1 albo # nie wiem, czemu to działa, ale działa. Komentowanie kodu może nam (i naszym współpracownikom) ułatwić zrozumienie, o co nam chodziło, gdy to pisaliśmy.\nJeśli chcemy zaopatrzyć nasz kod w nagłówki, żeby podzielić go na sekcje, konwencja mówi, żeby formatować je tak:\n\n# Przygotowanie ----\n\n## Ładowanie danych ----\n\n# kod ładujący dane\n\n## Ładowanie bibliotek ----\n\n# kod ładujący biblioteki\n\nKażdy znaczek # to niższy poziom nagłówka, czyli wytworzyłem sekcję Przygotowanie, a w niej dwie podsekcje Ładowanie danych i Ładowanie bibliotek. Takich poziomów nagłówków możemy mieć, ile chcemy. Nagłówek tym się różni od zwykłego komentarza, że zapisujemy po nim cztery myślniki ---- lub inne znaki. Tak sformatowane nagłówki wyświetlają się w bocznym panelu outline w RStudio i pozwalają się lepiej ogarnąć i poruszać w długim kodzie. Panel outline możemy rozwinąć skrótem Ctrl+Shift+O albo klikając skrajną prawą ikonkę nad edytorem skryptu (poziome kreski na prawo od guzika Source)."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-projects",
    "href": "posts/podstawy_R.html#sec-projects",
    "title": "Podstawy programowania w R",
    "section": "3.6 Projekty",
    "text": "3.6 Projekty\nZazwyczaj projekt badawczy składa się z wielu plików. Nie jest to tylko kod R, ale też chociażby pliki z danymi, instrukcje do metod badawczych itd. Zazwyczaj trzymamy to wszystko w jednym folderze. O ile utrzymujemy jakikolwiek porządek w plikach. Możemy też mieć całe studia luzem na pulpicie, nie oceniam. RStudio pomaga nam w zarządzaniu takimi grupami plików poprzez projekty. Projekty w RStudio robią kilka rzeczy, m.in. pozwalają ustawić niestandardowe opcje (np. zmienić język słownika na angielski tylko dla tego jednego projektu), zapamiętać otwarte okna i ich układ, ale przede wszystkim pomagają nam lokalizować pliki znajdujące się w tym samym folderze9. Zawsze, kiedy planujemy zachować jakiś zbiór powiązanych plików na dłużej, warto jest wytworzyć projekt.\nProjekty tworzymy i otwieramy przez guzik w prawym górnym rogu. Rozwijane menu pozwala nam stworzyć nowy projekt, a wyskakujące okienko pyta, czy wytworzyć go w już istniejącym folderze, stworzyć nowy folder, czy może pobrać repozytorium Git. Jeśli wybraliśmy nowy folder, mamy kilka typów projektów do wyboru, ale w większości przypadków wybieramy po prostu New Project. Okienko pozwala nam nadać projektowi nazwę, wybrać jego lokalizację, a także wytworzyć puste repozytorium Git10. RStudio wytworzy nam w ten sposób plik .Rproj organizujący nasz projekt."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-libs",
    "href": "posts/podstawy_R.html#sec-libs",
    "title": "Podstawy programowania w R",
    "section": "3.7 Pakiety",
    "text": "3.7 Pakiety\nPakiety (packages lub libraries) to niejako dodatki do R, które rozszerzają jego możliwości. Dla przykładu – R w swojej podstawowej wersji nie ma funkcji liczącej skośność. Nie jest to jednak żaden problem, bo możemy R rozszerzyć np. o pakiet o nazwie e1071 albo moments. Oba te pakiety dodają nam do R możliwość szybkiego i prostego policzenia skośności. Pakiety – w olbrzymiej większości – są darmowe.\nAbsolutnie podstawowym pakietem, czy właściwie zbiorem pakietów, jest tidyverse. tidyverse usprawnia R właściwie we wszystkim, co w podstawowej wersji jest niewygodne – readr (czyt. rider) pozwala łatwo ładować dane, dplyr (czyt. diplajer) niesamowicie usprawnia czyszczenie danych, lubridate i stringr (czyt. stringer) to podstawowe narzędzie do pracy odpowiednio z datami i z tekstem11, nie mówiąc już o ggplot2, czyli najpotężniejszym narzędziu do tworzenia wykresów. Współcześnie tidyverse to podstawowy sposób programowania w R. Na szczęście nie musimy wszystkich tych pakietów przywoływać z osobna, bo możemy załadować je wszystkie naraz, ładując jeden zbiorczy pakiet tidyverse. Pakiety ładujemy za pomocą funkcji library, do której wrzucamy nazwę pakietu w cudzysłowie. Nasz skrypt zaczniemy więc od takiej instrukcji:\n\nlibrary(\"tidyverse\")\n\nJeśli robimy to po raz pierwszy, to po wykonaniu polecenia konsola wyrzuci nam błąd Błąd w poleceniu 'library(\"tidyverse\")':nie ma pakietu o nazwie ‘tidyverse’. Wynika to z faktu, że instrukcja library tylko ładuje pakiet, ale nie pobiera ich wcześniej. Na szczęście robimy to tylko raz. Zawsze później wystarczy samo library. Dlatego też nie będziemy wpisywać komendy instalującej pakiet do skryptu, tylko bezpośrednio do konsoli. Nie chcemy w końcu, żeby pakiet tidyverse instalował się za każdym razem, kiedy będziemy uruchamiać skrypt. Będzie to niemiłosiernie spowalniało skrypt i wymuszało dostęp do Internetu. Dlatego też do konsoli wpisujemy:\n\ninstall.packages(\"tidyverse\")\n\nInnym sposobem instalowania pakietów jest skierowanie się w prawe dolne okienko w RStudio, przejście do zakładki Packages, kliknięcie guzika Install, wpisanie nazwy pakietu w wyskakującym okienku (już bez cudzysłowu) i zatwierdzenie guzikiem Install.\nGdy zainstalujemy już pakiet tidyverse – dowolną z metod – ponownie próbujemy go załadować, tym razem już bez błędu. Konsola poinformuje nas wtedy co dokładnie załadowała.\n\nlibrary(\"tidyverse\")\n\n#> ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n#> ✔ ggplot2 3.4.1     ✔ dplyr   1.1.0\n#> ✔ tidyr   1.3.0     ✔ stringr 1.5.0\n#> ✔ readr   2.1.4     ✔ forcats 1.0.0\n#> ✔ purrr   1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "posts/podstawy_R.html#sec-choosing",
    "href": "posts/podstawy_R.html#sec-choosing",
    "title": "Podstawy programowania w R",
    "section": "5.1 Wybieranie kolumn i wierszy",
    "text": "5.1 Wybieranie kolumn i wierszy\nBardzo często będziemy potrzebowali tylko określonych kolumn albo tylko określonych wierszy. Przeglądając nasze dane zauważamy, że składają się w dużej części z niepotrzebnych kolumn, jakie wygenerował dla nas program do ankiet. Kolumny takie jak godziny wypełniania są nam niepotrzebne do analizy. Co więcej nasze dane to fragment bazy danych z badania, w którym mówiliśmy mężczyznom, że są mało męscy. Potem patrzyliśmy, jak to wpłynie na nich homofobię. Badaliśmy więc wyłącznie mężczyzn, a mimo to ankietę próbowało też wypełnić kilka kobiet i osób o innej płci. Ponieważ ankieta nie dopuściła ich nawet do metryczki, widzimy w ich przypadkach wartości NA, co w R oznacza „brak danych”.\n\n5.1.1 Filtrowanie wierszy z dplyr::filter\nZacznijmy od tego, że w naszej bazie zostawimy tylko mężczyzn. Wszystkie komendy poniżej wpisuję w konsoli, dla testów. Jeśli wpisujemy komendy modyfikujące dane i nie dodamy specjalnej instrukcji zapisującej, to nie zapisujemy zmian, więc możemy bezpiecznie sprawdzić, co się stanie, jak rzeczywiście to zrobimy. Dopiero na koniec podam, jak nasze zmiany rzeczywiście zapisać. Zachęcam do tego, żeby kolejne kroki pisać samodzielnie (może być w skrypcie) i potem wykonywać, żeby widzieć wszystkie pośrednie kroki. Jak więc odfiltrować nie-mężczyzn? Robimy to za pomocą komendy filter()12. tidyverse opiera się o intuicyjnie brzmiące czasowniki takie jak filter, select, group_by, summarise itd. Komenda filter przyjmuje naszą bazę i jakieś warunki, np. płeć męska. W naszym wypadku będzie to wyglądać tak:\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\")\n\nDobra, co to jest %>%? Nie było o tym mowy. Owszem, nie było, ale to bardzo wygodna rzecz. Nazywa się pipe (tłumaczone jako potok, bo rura nieładnie brzmi). Mówi mniej więcej „wrzuć to do tego”. W naszym przykładzie df %>% filter() oznacza „wrzuć bazę danych df do funkcji filter“, czyli dokładnie to samo, co filter(df). Po co więc w ogóle bawić się w potoki? Bo pozwalają nam wygodnie łączyć komendy w ciągi, jak zobaczymy za chwilę. Do wstawiania potoków służy nam wygodny skrót klawiszowy Ctrl+Shift+M, który jest chyba najczęściej stosowanym skrótem przy pisaniu dowolnego programu.\nDruga kwestia to podział na linijki. Rozbiłem tę komendę na dwie linijki dla czytelności, ale spokojnie mógłbym zapisać to w jednej linijce. Warto jednak pisać kod tak, żeby dało się go potem łatwo czytać. RStudio podpowiada nam też wcięcia, żebyśmy widzieli, że te linijki tworzą jedną całość. W podrozdziale 9 powiem więcej o formatowaniu kodu.\nTa komenda oznacza „weź zmienną df, wrzuć ją do komendy filter i zostaw tylko te przypadki, w których w kolumnie Płeć jest wartość \"Mężczyzna\".” Nazwy kolumn piszemy bez cudzysłowu, ale jeśli wartość komórki to tekst, to zawsze piszemy go w cudzysłowie. Inaczej R pomyśli, że podajemy mu jakąś zmienną, z której ma dopiero odczytać, co ma być w kolumnie Płeć. Nam chodzi o dosłowny tekst \"Mężczyzna\".\nOstatecznie zostaje operator logiczny. Dlaczego piszę == zamiast =? W programowaniu znak = służy do przypisywania wartości do zmiennych. Zapis a = 5 oznacza „niech a ma wartość 5”. Sprawdzenie czy a ma wartość 5 odbywa się poprzez komendę a == 5. Konsola wyrzuci nam wtedy TRUE, FALSE albo BŁĄD: nie znaleziono obiektu 'a'. Kilka innych operatorów logicznych prezentuje tabela.\n\nCzęść operatorów logicznych dostępnych w R.\n\n\n\n\n\n\n\nOperator\nZnaczenie\nPrzykład\n\n\n\n\n==\nrówna się\nPłeć == \"Mężczyzna\"\n\n\n!=\nnie równa się\nPłeć != \"Kobieta\"\n\n\n> (>=)\nwiększe niż(większe lub równe)\nWiek > 40\n\n\n< (<=)\nmniejsze niż(mniejsze lub równe)\nWiek < 40\n\n\n|\nlub\nWiek < 18 | Wiek > 60\n\n\n&\ni\nPłeć == \"Mężczyzna\" & Wiek > 40\n\n\n%in%\nzawiera się w zbiorze\nPłeć %in% c(\"Kobieta\", \"Inna\")\n\n\n!\nzaprzeczenie\n! Płeć %in% c(\"Kobieta\", \"Inna\")\n\n\n\n\n\n5.1.2 Wybieranie kolumn z dplyr::select\nOdfiltrowaliśmy więc nie-mężczyzn. Kolejny problem to cała seria niepotrzebnych kolumn. Godziny, adres, zgoda etyczna (która była obowiązkowa, więc cała zawiera identyczne wartości) i płeć (już jednakowa dla wszystkich) są nam do niczego niepotrzebne. Do wybierania, jakie kolumny zostawić, służy funkcja select(). Wrzucamy do niej nazwy albo numery kolumn, które chcemy zostawić w bazie. Rozszerzmy więc naszą poprzednią instrukcję o dodatkową komendę za pomocą potoku.\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18)\n\nPo pierwsze zauważmy, że wystarczyło dodać potok i kolejną komendę. Teraz cała nasza instrukcja oznacza „Weź df, odfiltruj mężczyzn i potem wybierz kolumny Id, Wiek (ukończony w latach), Wykształcenie oraz kolumny od 9. do 18.”. Do tego więc służą potoki – pozwalają naraz wykonać całą serię modyfikacji tego samego obiektu.\nWypada tu wyjaśnić dwie sprawy. Po pierwsze kolumna z wiekiem zawiera w nazwie spacje. Jeśli nazwa kolumny zawiera niestandardowe znaki, trzeba ją otoczyć znakami ` (pol. grawis, ang. backtick), który znajduje się na klawiaturze tuż pod Esc. Druga rzecz to 9:18, co znaczy „liczby od 9 do 18” i jest wygodnym, skrótowym zapisem seq(9, 18).\nEwentualnie możemy chcieć powiedzieć, żeby zostawić wszystkie kolumny poza jakąś kolumną. Jeśli chcemy wykluczyć 2 kolumny z 200, to lepiej wskazać te 2 do wywalenia niż pozostałe 198 do zachowania. Możemy to zrobić z użyciem znaku -, który wstawiamy przed kolumną. Możemy ustawić minus zarówno przed nazwą kolumny, jak i zakresem kolumn. Warto jednak zauważyć, że zakres pozycji trzeba wziąć w nawias. Inaczej zapis -2:5 R zinterpretuje jako „kolumny od -2 do 5”. Nie jest to głupie, bo „kolumna -2” oznacza „druga od końca”.\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(-(2:5), -`Wyrażam świadomą i dobrowolną zgodę na udział w badaniu.`)"
  },
  {
    "objectID": "posts/podstawy_R.html#sec-rename",
    "href": "posts/podstawy_R.html#sec-rename",
    "title": "Podstawy programowania w R",
    "section": "5.2 Zmiana nazw kolumn z dplyr::rename i purrr::set_names",
    "text": "5.2 Zmiana nazw kolumn z dplyr::rename i purrr::set_names\nZ selekcji istniejących infromacji przejdźmy do dodawania nowych. Zacznijmy może od zmiany nazw kolumn, żeby łatwiej nam się pisało dalsze komendy. Do tego służą funkcje rename z pakietu dplyr i set_names z pakietu purrr13. rename służy do zmiany nazw raczej pojedynczych kolumn i przyjmuje argumenty w postaci rename(\"nowa_nazwa\" = \"stara nazwa\"). Za jednym zamachem możemy zmienić ile nazw chcemy, jeśli jednak chcemy zmienić wszystkie nazwy, wygodniejsza jest funkcja set_names. Wrzucamy do niej po kolei same nowe nazwy. Znowu – nazwy to dosłowne ciągi znaków14, więc zawsze piszemy je w cudzysłowie.\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%\n    set_names(\"id\", \"wiek\", \"wyksztalcenie\", paste(\"H\", 1:10, sep = \"_\"))\n\nCo znowu namieszałem? Czemu znowu coś utrudniam? Cóż, żeby ułatwić. O ile kolejne nazwy \"id\", \"wiek\" i \"wyksztalcenie\" rozumieją się same przez się, to do czego służy tutaj funkcja paste? Jeśli zerkniemy w bazę danych, zauważymy, że kolejne 10 kolumn to to samo pytanie „Takie widoki w przestrzeni publicznej są normalne”. Odpowiedź na to pytanie (znajdujące się pod obrazkiem neutralnym lub przedstawiającym parę jednopłciową) traktowaliśmy jako wskaźnik homofobii. Jest bardzo częste, że czyszcząc dane z badania mamy serię odpowiedzi z jednego kwestionariusza. Zazwyczaj wszystkie te pytania nazywamy według jednej konwencji np. wszystkie odpowiedzi z kwestionariusza TIPI nazywamy TIPI_1, TIPI_2, TIPI_3 itd. Ale po co pisać te etykiety ręcznie, skoro możemy je wygenerować? Do tego służy funkcja paste. Jeśli widzimy jakąś funkcję zagnieżdżoną w innej funkcji, a nie wiemy, jaką funkcję tam spełnia, można spróbować samą tę wewnętrzną funkcję wpisać w konsolę i zobaczyć, co robi.\n\npaste(\"H\", 1:10, sep = \"_\")\n\n#>  [1] \"H_1\"  \"H_2\"  \"H_3\"  \"H_4\"  \"H_5\"  \"H_6\"  \"H_7\"  \"H_8\"  \"H_9\"  \"H_10\"\n\n\n\nJak widzimy, paste wygenerowało nam 10 kolejnych etykiet łącząc \"H\" i liczby od 1 do 10. Argument sep = \"_\" mówi, żeby między kolejnymi kawałkami wstawiać podkreślnik. Do paste możemy wrzucić dowolną liczbę znaków do połączenia. Jeśli nie chcemy żadnego separatora, możemy ustawić sep = \"\", czyli pusty ciąg znaków w separatorze albo możemy użyć bliźniaczej funkcji paste0, która nie ma separatora. Użycie tej funkcji wewnątrz set_names jest równoważne temu, jakbym napisał te etykietki ręcznie. To jest siła programowania, że dosłowne dane możemy zastępować zmiennymi albo funkcjami, które nam te dane wygenerują. To pozwala nam na przykład zastosować to samo czyszczenie do 100 różnych plików. Wystarczy, że zamiast nazwy danego pliku wszędzie wrzucimy zmienną, a potem będziemy tylko wrzucać do tej zmiennej nazwy kolejnych plików.\nCo ciekawe, zmieniać nazwy możemy też za pomocą funkcji select, ale wyłącznie pojedynczo, nie można wtedy użyć czegoś w stylu 9:18. Składnia jest taka sama, jak rename, ale select zmienia też kolejność kolumn i skład wynikowej tabeli, więc trzeba uważać. Jednak do małych tabel, gdzie nie jest problemem wypisać wszystkie kolumny, można spokojnie za jednym zamachem kolumny wybrać i nazwać."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-values",
    "href": "posts/podstawy_R.html#sec-values",
    "title": "Podstawy programowania w R",
    "section": "5.3 Zmiana wartości komórek z dplyr::mutate i readr::parse_number",
    "text": "5.3 Zmiana wartości komórek z dplyr::mutate i readr::parse_number\nJak widzimy, odpowiedzi na pytania z homofobią zawierają nie tylko liczby, ale też tekst z wyjaśnieniem tych liczb na skali. My jednak chcemy zostawić same liczby, żeby móc na nich liczyć. Podobny problem mamy z kolumną z wiekiem, gdzie możemy zauważyć, że jest to kolumna tekstowa. Dziwne, w końcu wiek to (tylko) liczba. Przejrzenie danych pozwala stwierdzić, że respondent o id 50 w pytaniu o wiek wpisał „18 (2021)“. Nieważne, jak się będziemy przed tym bronić, co dopiszemy do pytania o wiek, jak bardzo wprost będziemy błagać, żeby wpisywać tam tylko liczby, zawsze znajdzie się ktoś, kto zrobi w nim elaborat. Ten jeden respondent sprawił, że cała ta kolumna została zinterpretowana jako kolumna tekstowa, a nie liczbowa. Odpowiedź na oba te problemy jest taka sama – mutate i parse_number.\nFunkcja mutate to ogólna funkcja, za pomocą której modyfikujemy kolumny albo dodajemy nowe. Będziemy ją wykorzystywać bardzo często, za każdym razem, gdy baza danych będzie wymagała poprawek lub dodatkowych obliczeń. Jej składnia wygląda następująco:\n\nzmienna_z_danymi %>%\n    mutate(\n        kolumna_do_modyfikacji = jakas_funkcja(kolumna_do_modyfikacji),\n        nowa_kolumna = inna_funkcja(jak_stworzyc_nowa_kolumne)\n    )\n\nmutate służy do tworzenia nowych kolumn. Możemy ją jednak wykorzystywać do modyfikowania kolumn już istniejących, bo jeśli nowa kolumna ma taką samą nazwę, jak stara, to nowa zastępuje starą. W naszym przykładzie chcemy do kolumny wiek zastosować funkcję parse_number, która pozbywa się z komórek wszystkiego, poza pierwszą napotkaną liczbą15. Taka instrukcja będzie wyglądała następująco:\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%\n    set_names(\"id\", \"wiek\", \"wyksztalcenie\", paste(\"H\", 1:10, sep = \"_\")) %>%\n    mutate(\n        wiek = parse_number(wiek)\n    )\n\n\n5.3.1 Przekształcanie wielu kolumn jednocześnie z dplyr::across\nPo wykonaniu tej funkcji widzimy, że cała kolumna jest już numeryczna. To samo możemy zrobić dla pytań z homofobią. Moglibyśmy, oczywiście, zapisać H_1 = parse_number(H_1), H_2 = parse_number(H_2) itd., ale po co się męczyć? Na początku roku 2020 dostaliśmy cudowną funkcję pomocniczą across, która przydaje nam się w takich dokładnie wypadkach, gdy chcemy w taki sam sposób zmodyfikować więcej niż jedną kolumnę, bez zbędnego przepisywania tego samego. Jak jej używać?\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%\n    set_names(\"id\", \"wiek\", \"wyksztalcenie\", paste(\"H\", 1:10, sep = \"_\")) %>%\n    mutate(\n        wiek = parse_number(wiek),\n        across(starts_with(\"H_\"), parse_number)\n    )\n\nPierwszą rzeczą, którą ta funkcja przyjmuje, jest zestaw kolumn. Można je wskazać na różne sposoby, np. wypisać ich nazwy albo numery. Gdy używam zestaw, mam na myśli, że trzeba je wpakować w funkcję c() (od concatenate), np. c(1, 8, 10:16). Możemy też użyć jednej z cudownych funkcji pomocniczych z zestawu tidy-select. Tutaj akurat użyłem starts_with(\"H_\"), żeby powiedzieć across, że chodzi mi o wszystkie kolumny, których nazwy zaczynają się od H_. Te same funkcje możemy wykorzystywać w funkcji select przy wybieraniu kolumn (por. Sekcja 5.1.2). Kilka innych tego typu funkcji umieściłem w tabeli.\n\nFunkcje pomocnicze do select i across.\n\n\n\n\n\n\nFunkcja\nWybierz wszystkie kolumny…\n\n\n\n\nstarts_with()\nktórych nazwy zaczynają się od\n\n\nends_with()\nktórych nazwy kończą się na\n\n\ncontains()\nktórych nazwy zawierają w sobie\n\n\nmatches()\nktórych nazwy zawierają w sobiewyrażenie regularne16\n\n\n:\nzawierają się w zakresie(np. H_1:H_10)\n\n\nall_of()\nw których wszystkie wartościspełniają jakiś warunek\n\n\nany_of()\nw których jakakolwiekwartość spełnia warunek\n\n\neverything()\nw ogóle wszystkie kolumny\n\n\nwhere()\ngdzie spełniony jest inny warunek(np. where(is.numeric)))\n\n\n\nDrugim argumentem, jaki przyjmuje across, jest nazwa funkcji, którą chcemy zastosować. Co ważne, musi to być jej nazwa bez nawiasów. Jest to częsty błąd, sam wiele razy się łapałem na tym, że odruchowo dodawałem do funkcji nawiasy. Wynika to z subtelnej różnicy, polegającej na tym, że jeśli nie używamy nawiasów, podajemy across samą funkcję, obiekt, który ją zawiera, a jeśli damy nawiasy, to wrzucamy w ten sposób do across wynik działania tej funkcji. Spowodowałoby to, że w tym wypadku dostalibyśmy błąd, że funkcja parse_number() nie dostała wymaganych argumentów. Jeśli chcielibyśmy dorzucić do parse_number jakieś argumenty (jak locale17), możemy to zrobić po przecinku18. Szczegóły, jak zwykle, znajdziemy w dokumentacji funkcji across.\n\n\n5.3.2 Odwracanie punktacji\nBardzo często zdarza nam się, że w kwestionariuszach niektóre pozycje mają odwróconą punktację. Na przykład w kwestionariuszu samooceny Rosenberga SES pojawia się pozycja „Czasem czuję się bezużyteczny(-a)“. Odpowiada się na skali 1 do 4. Wiadomo, że osoba, która zaznacza przy takiej pozycji 4, nie pokazuje swojej wysokiej samooceny. Jest to pozycja z odwróconą punktacją, czyli 4 należy liczyć jako 1, 3 jako 2 itd. Przekształcenie to można zrobić bardzo łatwo. Najpierw dodajemy skrajne wartości skali, np. dla SES \\(1 + 4 = 5\\). Teraz od 5 odejmujemy odpowiedź osoby badanej i dzięki temu rzeczywiście 4 zamienia się w 1, 3 w 2 itd. Jak odwrócić punktację w R?\nPonieważ jest to modyfikacja kolumny, użyjemy funkcji mutate. Załóżmy, że H_5 ma odwróconą punktację. Oceny były na skali od 1 do 6, więc wyniki osób badanych musimy odjąć od 7. W takiej sytuacji kod wyglądałby następująco:\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%\n    set_names(\"id\", \"wiek\", \"wyksztalcenie\", paste(\"H\", 1:10, sep = \"_\")) %>%\n    mutate(\n        wiek = parse_number(wiek),\n        across(H_1:H_10, parse_number),\n        H_5 = 7 - H_5\n    )\n\nNiektórzy lubią tworzyć nowe kolumny na odwróconą punktację, my jednak po prostu zastąpiliśmy oryginalną kolumnę H_5. Zawsze można jednak użyć innej nazwy, np. H_5_odwr =. Jeśli chcemy odwrócić wiele kolumn, możemy użyć across. Załóżmy, że H_7 też ma odwróconą punktację. W takim wypadku nasz kod mógłby wyglądać tak:\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%\n    set_names(\"id\", \"wiek\", \"wyksztalcenie\", paste(\"H\", 1:10, sep = \"_\")) %>%\n    mutate(\n        wiek = parse_number(wiek),\n        across(H_1:H_10, parse_number),\n        H_5 = 7 - H_5,\n        H_7 = 7 - H_7\n    )\n\nJeśli mamy wielki kwestionariusz i nie chce nam się 100 razy pisać tego samego, możemy użyć across:\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%\n    set_names(\"id\", \"wiek\", \"wyksztalcenie\", paste(\"H\", 1:10, sep = \"_\")) %>%\n    mutate(\n        wiek = parse_number(wiek),\n        across(H_1:H_10, parse_number),\n        across(c(H_5, H_7), \\(x) {7 - x})\n    )\n\nPierwszym argumentem jest zestaw kolumn, dlatego nazwy kolumn opakowałem w c(). select czy filter nie potrzebowały, żeby robić takie zestawy, ale wiele funkcji (zwłaszcza spoza tidyverse) tego wymaga. Co z drugim argumentem, czyli funkcją? Tutaj wchodzimy głębiej w programistyczne meandry. Można, oczywiście, zostać przy wersji bez across, ale odważnych zapraszam do świata funkcji anonimowych.\n\n\n5.3.3 Własne funkcje\nDrugi argument w across to funkcja, jakiej across ma użyć do przekształcenia kolumn. Niestety nie ma funkcji, która odejmowałaby od 7. Żeby sobie z tym poradzić, musimy albo taką funkcję wcześniej samodzielnie napisać, albo użyć tzw. funkcji anonimowej (zwanej też lambda). Pierwsza opcja jest łatwa do zrozumienia, ale wymaga sporo pisania jak na coś, czego użyjemy tylko raz. Tworzenie własnych funkcji w R jest dość łatwe. Nasza funkcja mogłaby wyglądać tak:\n\nodejmij_od_7 <- function(wynik) {\n    7 - wynik\n}\n\nPierwsza rzecz to nazwa. Obrazowo nazwałem naszą funkcję odejmij_od_7. Dalej następuje słowo kluczowe function i w nawiasie argumenty naszej funkcji. My wrzucamy do funkcji wynik osoby badanej, więc nasz argument nazwałem obrazowo wynik. Pewnie w rzeczywistej sytuacji użyłbym x, bo nazwa funkcji jest wystarczająco sugerująca. Jeśli chcemy, dla czytelności, rozbić funkcję na kilka linijek, otwieramy nawiasy klamrowe i w nich opisujemy, co funkcja ma robić. Nic nie stoi na przeszkodzie, żeby opisać to wszystko w jednej linijce: function(wynik) 7 - wynik. Po wykonaniu powyższego kodu nasza funkcja rzeczywiście działa, co możemy sprawdzić używając jej w konsoli.\n\nodejmij_od_7(3)\n\n#> [1] 4\n\n\n\nodejmij_od_7(12)\n\n#> [1] -5\n\n\n\nJeśli mamy kilka kwestionariuszy z odwróconą punktacją, każdy z inną skalą, możemy od razu zrobić bardziej ogólną funkcję do odwracania.\n\nodejmij_od <- function(wynik, od_czego) {\n    od_czego - wynik\n}\n\nodejmij_od(3, 7)\n\n#> [1] 4\n\n\n\nodejmij_od(2, od_czego = 4)\n\n#> [1] 2\n\n\n\nBardziej ogólna funkcja wymaga podania drugiego argumentu, tzn. od czego trzeba odjąć wynik. Jak widać, ta funkcja też działa i przyjmuje argumenty pozycyjne lub nazwane. Obu funkcji, po zadeklarowaniu, możemy użyć w across.\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%\n    set_names(\"id\", \"wiek\", \"wyksztalcenie\", paste(\"H\", 1:10, sep = \"_\")) %>%\n    mutate(\n        wiek = parse_number(wiek),\n        across(H_1:H_10, parse_number),\n        across(c(H_5, H_7), odejmij_od, od_czego = 7)\n    )\n\nTutaj nam się to nie przyda, ale nic nie stoi na przeszkodzie, żeby wewnątrz funkcji używać innych funkcji i wielokrotnie używane serie komend przerabiać na pojedynczą komendę. Hadley Wickham wykorzystuje zasadę, że jeśli kopiujesz kod więcej niż dwa razy, to znaczy, że trzeba zrobić z niego funkcję.\n\n5.3.3.1 Funkcje anonimowe\nJeśli funkcja jest prosta i używamy jej tylko raz, często nie chcemy zaśmiecać sobie kodu jej definicją. Wtedy z pomocą przychodzą nam funkcje anonimowe (zwane też funkcjami lambda). Anonimowe, bo nie mają swojej nazwy. Podstawowy sposób ich używania to zadeklarowanie ich od razu w miejscu użycia.\n\nacross(c(H_5, H_7), function(wynik) 7 - wynik)\n\nZamiast nazwy funkcji użyliśmy tutaj od razu jej definicji. Funkcja jest w pełni sprawna i różni się od odejmij_od_7 tylko tym, że nie ma nazwy.\nInny, jeszcze bardziej zwięzły, sposób używania funkcji anonimowych wprowadza R w wersji 4.1.0. Polega on na zapisaniu naszej funkcji w nawiasach klamrowych. Dla przykładu odemowanie od 7 zapiszemy jako {7 - x}. Dlaczego akurat x a nie np. y albo wynik, jak robiliśmy wcześniej? Bo to ustaliłem pisząc przed naszą anonimową funkcją \\(x). Zamiast x mógłbym swoją zmienną zapisać w dowolny sposób. Takie coś w całości, czyli \\(x) {7 - x}19, możemy zapisać w miejscu funkcji w across, co zrobiłem na początku, jak chciałem wzbudzić ciekawość.\nJak wspomniałem w jednym z przypisów, dokumentacja dplyr od niedawna sugeruje, że jeśli funkcja potrzebuje jakichś dodatkowych argumentów, to żeby używać funkcji anonimowej, zamiast wpisywać arguemnty po przecinku. Co prawda wpisywanie po przecinku działa, ale moglibyśmy chcieć na wszelki wypadek dostosować się do nowych standardów. W takim wypadku moglibyśmy zmodyfikować przykład z poprzedniego podrozdziału, gdzie używaliśmy funkcji odejmij_od i dodatkowego arguemntu od_czego.\n\n# źle, choć jeszcze działa\nacross(c(H_5, H_7), odejmij_od, od_czego = 7)\n\n# dobrze\nacross(c(H_5, H_7), \\(x) {odejmij_od(x, od_czego = 7)})"
  },
  {
    "objectID": "posts/podstawy_R.html#sec-newcols",
    "href": "posts/podstawy_R.html#sec-newcols",
    "title": "Podstawy programowania w R",
    "section": "5.4 Nowe kolumny",
    "text": "5.4 Nowe kolumny\nJak wspomniałem, funkcja mutate nie tylko pozwala na modyfikowanie istniejących kolumn, ale też na tworzenie nowych. Zazwyczaj robimy to w dwóch przypadkach – gdy chcemy zagregować dane z wierszy, np. zsumować wyniki z danego kwestionariusza albo gdy chcemy podzielić naszą bazę na kategorie, np. „młodzi”, „w średnim wieku”, „seniorzy”. Omówmy to po kolei.\n\n5.4.1 Agregowanie danych z wierszy z dplyr::pick\nZałóżmy, że homofobię będziemy liczyć poprzez dodanie H_1 + H_2 + H_3 itd. Czasami będziemy chcieli robić sumy, czasami policzyć średnią20. W kwestionariuszach zazwyczaj liczymy sumy, ale np. dla czasów reakcji zazwyczaj będziemy chcieli policzyć średnią. Jak więc dodać taką kolumnę z sumami w R? Mamy dwa sposoby. Pierwszy to wprost opisanie, co dodajemy, wewnątrz mutate.\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%\n    set_names(\"id\", \"wiek\", \"wyksztalcenie\", paste(\"H\", 1:10, sep = \"_\")) %>%\n    mutate(\n        wiek = parse_number(wiek),\n        across(H_1:H_10, parse_number),\n        across(c(H_5, H_7), ~ 7 - .x),\n        H_suma = H_1 + H_2 + H_3 + H_4 + H_5 + H_6 + H_7 + H_8 + H_9 + H_10\n    )\n\nJak można się domyślić, istnieje sposób niewymagający tyle pisania, które w skomplikowanych bazach i długich kwestionariuszach naprawdę może być długotrwałe i uciążliwe. tidyverse ratuje nas tutaj funkcją pick21, a bazowy R dokłada funkcję rowSums (i rowMeans). Wystarczy, że do funkcji rowSums wrzucimy, które kolumny chcemy zsumować, wskazując je właśnie za pomocą pick i ewentualnie funkcji pomocniczych, tak jak robiliśmy w select (por. 5.1.2) i across (por. 5.3.1).\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%\n    set_names(\"id\", \"wiek\", \"wyksztalcenie\", paste(\"H\", 1:10, sep = \"_\")) %>%\n    mutate(\n        wiek = parse_number(wiek),\n        across(H_1:H_10, parse_number),\n        across(c(H_5, H_7), ~ 7 - .x),\n        H_suma = rowSums(pick(H_1:H_10))\n    )\n\n\n\n5.4.2 Kategoryzowanie przypadków i przekodowywanie z dplyr::case_when\nCzasem zdarza się, że chcemy podzielić dane ilościowe (np. wiek, wzrost, szczęście mierzone kwestionariuszowo) na kategorie (młodzi vs nie-aż-tak-młodzi, wysocy vs niscy, szczęśliwi vs nieszczęśliwi). Zdarza się też, że osoba tworząca ankietę nie była na tyle przewidująca, żeby w odpowiedziach do „zdecydowanie się zgadzam” dodać 6, więc nie możemy po prostu użyć parse_number. I w jednym, i w drugim wypadku musimy stworzyć wartości na podstawie innych wartości, np. wzrost poniżej 160 cm zamienić na „niski” albo tekst „zdecydowanie się nie zgadzam” zamienić na 1. Do takich celów służy niezwykle przydatna funkcja case_when z pakietu dplyr. Załóżmy, że chcemy podzielić mężczyzn w naszej bazie na trzy kategorie wykształcenia – podstawowe, ponadpodstawowe i wyższe. Oznacza to, że osoby z wykształceniem średnim i zawodowym musimy wrzucić do jednego worka. W tym celu rozszerzymy naszą instrukcję o kolejną komendę. Funkcja case_when ma dość prostą składnię.\n\ncase_when(\n    warunek_1 ~ wartosc_jesli_prawda,\n    warunek_2 ~ wartosc_jesli_prawda,\n    warunek_3 ~ wartosc_jesli_prawda,\n    .default = wartosc_dla_calej_reszty\n)\n\nFunkcja po kolei sprawdza warunki. Jeśli natrafi na jakiś spełniony warunek, zatrzyma się i da taką wartość, jaką temu warunkowi przypisaliśmy. Warunek jest logiczny, czyli może to być cokolwiek od wyksztalcenie == \"Średnie\" po wzrost <= 160. Należy pamiętać, że jeśli wartość wynikowa ma być tekstem, musimy napisać ją w cudzysłowie, jak każdy dosłowny tekst. .default = wartosc może nam służyć do ustalania, co ma być, jeśli żaden z powyższych warunków się nie sprawdzi22. Jeśli chodzi o przykład z wykształceniem, moglibyśmy rozwiązać go tak:\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%\n    set_names(\"id\", \"wiek\", \"wyksztalcenie\", paste(\"H\", 1:10, sep = \"_\")) %>%\n    mutate(\n        wiek = parse_number(wiek),\n        across(H_1:H_10, parse_number),\n        across(c(H_5, H_7), ~ 7 - .x),\n        H_suma = rowSums(pick(H_1:H_10)),\n        wyksztalcenie_grupa = case_when(\n            wyksztalcenie == \"Średnie\" ~ \"Ponadpodstawowe\",\n            wyksztalcenie == \"Zawodowe\" ~ \"Ponadpodstawowe\",\n            .default = wyksztalcenie\n        )\n    )\n\nW tym wypadku case_when, idąc wiersz po wierszu, sprawdza, czy w kolumnie wyksztalcenie nie znajduje się wartość \"Średnie\". Jeśli tak, to w tworzonej właśnie kolumnie wyksztalcenie_grupa wstawia wartość \"Ponadpodstawowe\" i przechodzi do kolejnego wiersza. Jeśli wykształcenie nie jest średnie, to sprawdza, czy jest zawodowe i w razie czego również wstawia \"Ponadpodstawowe\". Jeśli nie jest ani średnie, ani zawodowe, to wstawia to, co akurat jest w kolumnie wyksztalcenie, czyli dla osób z wykształceniem podstawowym wstawia \"Podstawowe\", a dla osób z wykształceniem wyższym \"Wyższe\"23. W ten sposób z 4 kategorii wykształcenia zrobiły nam się 3. W podobny sposób przekodowywalibyśmy klucz w ankiecie na liczby, np. pisząc H_1 == \"Zdecydowanie się zgadzam\" ~ 6. Możemy ułatwić sobie to przekodowywanie za pomocą questionr, który opisuję w podrozdziale 5.5.1.1.1."
  },
  {
    "objectID": "posts/podstawy_R.html#sortowanie-i-kolejność-kolumn",
    "href": "posts/podstawy_R.html#sortowanie-i-kolejność-kolumn",
    "title": "Podstawy programowania w R",
    "section": "5.5 Sortowanie i kolejność kolumn",
    "text": "5.5 Sortowanie i kolejność kolumn\nWychodzimy już z potężnej funkcji mutate i możemy czyścić dalej. Ostatnia rzecz, którą czasem chcemy zrobić (zazwyczaj ze względów estetycznych), to posortowanie wartości i ustawienie kolumn w określonej kolejności.\n\n5.5.1 Sortowanie z dplyr::arrange\nZa sortowanie w tidyverse odpowiada funkcja arrange. Domyślnie sortuje ona rosnąco, więc jeśli chcemy zastosować sortowanie malejące, użyjemy pomocniczej funkcji desc (od descending). Załóżmy, że chcemy posortować nasze dane najpierw według wykształcenia (od najwyższego, do najniższego), a w obrębie wykształcenia według wieku (od najmłodszych do najstarszych). W pierwszym odruchu chcielibyśmy wpisać arrange(desc(wyksztalcenie), wiek). Jest to dobry odruch, jednak jeśli to zrobimy, zorientujemy się, że najwyższym z wykształceń jest wykształcenie zawodowe. Dzieje się tak dlatego, że w tej chwili wykształcenie to zwykły tekst, a więc jest sortowany alfabetycznie, nie według naszego klucza. Żeby to zmienić, musimy poznać nowy rodzaj danych.\n\n5.5.1.1 Factors\nCzynniki (factors) to rodzaj danych, za pomocą których przechowujemy tekst, który ma tylko kilka możliwych wartości albo gdy te wartości mają jakąś kolejność, którą chcemy wziąć pod uwagę. Jeśli mamy etykiety takie jak wykształcenie, czy grupa kontrolna/eksperymentalna, to powinniśmy je przechowywać właśnie w tej postaci. Danymi tego typu w tidyverse zajmuje się pakiet forcats. Żeby zmienić wykształcenie z czystego tekstu na czynnik, dopiszemy jedną linijkę do naszego mutate i od razu posortujemy.\n\ndf %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%\n    set_names(\"id\", \"wiek\", \"wyksztalcenie\", paste(\"H\", 1:10, sep = \"_\")) %>%\n    mutate(\n        wiek = parse_number(wiek),\n        across(H_1:H_10, parse_number),\n        across(c(H_5, H_7), ~ 7 - .x),\n        H_suma = rowSums(pick(H_1:H_10)),\n        wyksztalcenie_grupa = case_when(\n            wyksztalcenie == \"Średnie\" ~ \"Ponadpodstawowe\",\n            wyksztalcenie == \"Zawodowe\" ~ \"Ponadpodstawowe\",\n            .default = wyksztalcenie\n        ),\n        wyksztalcenie = factor(\n            wyksztalcenie,\n            levels = c(\"Podstawowe\", \"Zawodowe\", \"Średnie\", \"Wyższe\"),\n            ordered = TRUE\n            )\n    ) %>%\n    arrange(desc(wyksztalcenie), wiek)\n\nKomendę factor dla czytelności rozbiłem tutaj na trzy linijki, ale – oczywiście – można ją całą zapisać w jednej. Po pierwsze wskazałem, że na factor przerobiona ma być kolumna wyksztalcenie. Po drugie wskazałem, jakie wykształcenie może mieć wartości, zbierając je w jeden zestaw funkcją c i wrzucając do argumentu levels. Na koniec poinformowałem R, że w kolejność jest tutaj ważna, dopisując ordered = TRUE. Jeśli tak przerobione dane posortujemy, zobaczymy, że baza rzeczywiście zaczyna się od wykształcenia wyższego.\n\n5.5.1.1.1 questionr\nPrzy okazji czynników chciałbym wspomnieć o pierwszym dodatku (addin) do RStudio, jaki może nam się przydać. Dodatki przyjmują różną formę, ale tutaj omówię dwa, które są graficznymi narzędziami pomagającymi nam pisać kod. Można mieć do nich mieszany stosunek, ale póki umiemy też napisać kod ręcznie (lub chociaż wiemy, jak skorzystać z dokumentacji), to mogą być dużą pomocą, zwłaszcza na początku przygody z R. Pierwszym takim dodatkiem jest questionr, który pozwala nam stworzyć komendy związane z czynnikami (i kategoryzować dane ilościowe, co ręcznie robiliśmy w podrozdziale 5.4.2).\nquestionr instalujemy jak każdy inny pakiet (install.packages(\"questionr\")). Od tego momentu (lub po zresetowaniu RStudio) w menu Addins na górnej belce znajdziemy trzy nowe opcje. Ta interesująca nas to Level ordering. Na początku zobaczymy okienko, w którym możemy wybrać kilka rzeczy. W jakiej zmiennej chcemy zmienić kolejność, w jakiej kolumnie i z jakiego pakietu wziąć funkcję do zmiany kolejności (domyślnie jest to fct_relevel z forcats). W drugiej zakładce możemy graficznie ustawić taką kolejność, jaką chcemy. W ostatniej zakładce otrzymujemy gotowy kod. Questionr nie robi nic samodzielnie, ten kod trzeba jeszcze wkleić w skrypt. Z jednym kruczkiem. Nam chodzi o samą komendę fct_relevel, bez pierwszej linijki, która służy do zapisania zmian. Ponieważ my tworzymy mutate, to wystarczy, że skopiujemy nasze gotowe fct_relevel() do funkcji mutate, dopisując nazwę kolumny i pierwszy argument. Może być to użyteczne, jeśli mamy dużo czynników lub dużo poziomów w czynniku. Ostatecznie nasza komenda mutate z użyciem questionr wyglądałaby tak:\n\nmutate(\n        wiek = parse_number(wiek),\n        across(H_1:H_10, parse_number),\n        across(c(H_5, H_7), ~ 7 - .x),\n        H_suma = rowSums(pick(H_1:H_10)),\n        wyksztalcenie_grupa = case_when(\n            wyksztalcenie == \"Średnie\" ~ \"Ponadpodstawowe\",\n            wyksztalcenie == \"Zawodowe\" ~ \"Ponadpodstawowe\",\n            .default = wyksztalcenie\n        ),\n        wyksztalcenie = fct_relevel(\n            wyksztalcenie,\n            \"Podstawowe\", \"Zawodowe\", \"Średnie\", \"Wyższe\"\n        )\n)\n\n\n\n\nRysunek 3: Przykład użycia questionr\n\n\n\n\n\n\n5.5.2 Kolejność kolumn z dplyr::relocate\nMożemy chcieć mieć nasze kolumny w określonej kolejności. Są zasadniczo dwa sposoby zmieniania kolejności kolumn. Jest funkcja relocate, która służy raczej przestawianiu pojedynczych kolumn lub ich niewielkiej liczby. Jeśli chcemy od nowa określić kolejność kolumn, możemy wykorzystać w tym celu znaną nam już funkcję select (por. 5.1.2). Załóżmy, że chcielibyśmy przestawić kolumnę H_suma przed kolumny z cząstkowymi wynikami.\n\n# z użyciem relocate\ndf %>%\n    relocate(H_suma, .before = H_1)\n\n# z użyciem select\ndf %>%\n    select(id, wiek, wyksztalcenie, H_suma, everything())\n\nJeśli przestawiamy kolumny z użyciem relocate, powinniśmy ustawić argument .before albo .after. Oba wymagają nazwy kolumny przed którą lub po której chcemy mieć naszą kolumnę. Jeśli nie ustawimy żadnego, nasze kolumny zostaną przeniesione na początek tabeli. Jeśli używamy select, musimy wpisać kolejność naszych kolumn ręcznie. Zastanawiające może być użycie przeze mnie everything(). W tym kontekście znaczy ono „i potem cała reszta”."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-save",
    "href": "posts/podstawy_R.html#sec-save",
    "title": "Podstawy programowania w R",
    "section": "5.6 Zapisywanie zmian z <-",
    "text": "5.6 Zapisywanie zmian z <-\nW ten sposób uzyskaliśmy cały kod czyszczący. Mamy ów kod zapisany w naszym skrypcie. Jeśli go uruchomimy, to widzimy, że działa. Jednak jeśli w konsolę wpiszemy samo df, naszym oczom ciągle ukazuje się stara, brzydka baza. Jak więc zmienić nasze df na wyczyszczoną wersję? Tak jak zawsze przypisujemy wartości w R – operatorem <-. Nasz kod na zmianę brudnej bazy w czystą ostatecznie przyjmie postać:\n\ndf <- df %>%\n    filter(Płeć == \"Mężczyzna\") %>%\n    select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%\n    set_names(\"id\", \"wiek\", \"wyksztalcenie\", paste(\"H\", 1:10, sep = \"_\")) %>%\n    mutate(\n        wiek = parse_number(wiek),\n        across(H_1:H_10, parse_number),\n        across(c(H_5, H_7), ~ 7 - .x),\n        H_suma = rowSums(pick(H_1:H_10)),\n        wyksztalcenie_grupa = case_when(\n            wyksztalcenie == \"Średnie\" ~ \"Ponadpodstawowe\",\n            wyksztalcenie == \"Zawodowe\" ~ \"Ponadpodstawowe\",\n            .default = wyksztalcenie\n        ),\n        wyksztalcenie = factor(\n            wyksztalcenie,\n            levels = c(\"Podstawowe\", \"Zawodowe\", \"Średnie\", \"Wyższe\"),\n            ordered = TRUE\n            )\n    ) %>%\n    arrange(desc(wyksztalcenie), wiek) %>%\n    relocate(H_suma, .before = H_1)\n\nKod ten możemy uruchomić dla dowolnej ilości danych, w dowolnym momencie. Jest wielokrotnego użytku i spokojnie możemy go wykorzystać, kiedy baza się rozrośnie. Nie musimy go wtedy pisać od nowa, a wystarczy, że go uruchomimy. Co więcej, mogę wpaść jeszcze na jakiś pomysł i dopisać linijkę na samym początku, nie musząc całej reszty robić od nowa. Sprawmy sobie tę przyjemność i zerknijmy na naszą wyczyszczoną bazę.\n\ndf\n\n#> # A tibble: 45 × 15\n#>       id  wiek wyksztal…¹ H_suma   H_1   H_2   H_3   H_4   H_5   H_6   H_7   H_8\n#>    <dbl> <dbl> <ord>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#>  1    54    21 Wyższe         44     5     5     5     5     2     5     2     5\n#>  2    33    22 Wyższe         43     5     5     4     5     2     5     2     5\n#>  3    30    23 Wyższe         45     6     5     5     5     2     5     3     5\n#>  4    49    23 Wyższe         45     6     6     6     6     1     6     1     6\n#>  5    31    24 Wyższe         39     3     4     4     4     3     4     4     4\n#>  6    38    25 Wyższe         44     5     5     5     5     2     5     2     5\n#>  7    46    25 Wyższe         33     5     5     1     5     2     1     3     5\n#>  8    43    26 Wyższe         45     6     6     6     6     1     6     1     6\n#>  9    35    29 Wyższe         50     6     6     6     6     1     6     1     6\n#> 10     2    52 Wyższe         44     5     5     5     5     2     5     2     5\n#> # … with 35 more rows, 3 more variables: H_9 <dbl>, H_10 <dbl>,\n#> #   wyksztalcenie_grupa <chr>, and abbreviated variable name ¹​wyksztalcenie\n\n\n\nPo zapisaniu zmiennej df, tracimy naszą starą bazę danych, która była w niej zapisana. To jest tak, jakbyśmy kopiowali plik do folderu, w którym znajduje się już plik o takiej samej nazwie. Operator <- nadpisuje starą zmienną.\nTym samym, jeśli uruchomilibyśmy nasz kod jeszcze raz, ale już na nowej zmiennej df, wyskoczy nam błąd. W końcu nowa zmienna nie ma tych samych kolumn, co stara zmienna. Co więcej, takiej operacji przypisania nie da się w prosty sposób cofnąć. Jeśli chcemy dostać swoją starą, brudną bazę, musimy ponownie załadować ją z pliku. To prowadzi nas do ważnego wniosku co do pisania skryptów – powinniśmy pisać je tak, żeby dało się z nich odtworzyć wszystko, co robiliśmy od samego początku24. Dzięki temu, jeśli chcemy się z czegoś wycofać, zaznaczamy i wykonujemy cały kod przed interesującym nas momentem. Brak skrótu Ctrl+Z jest jedną z ważniejszych różnic między analizą w programach typu SPSS czy Statistica a analizą w językach programowania typu R czy Python. Wbrew pozorom idzie się przyzwyczaić. Ta sama właściwość pozwala na zachowanie przejrzystości w nauce – pokaż mi swój kod, a będę wiedział bardzo dokładnie, jak prowadziłeś(-aś) swoją analizę."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-summarise",
    "href": "posts/podstawy_R.html#sec-summarise",
    "title": "Podstawy programowania w R",
    "section": "5.7 Grupowanie (dplyr::group_by) i agregowanie (dplyr::summarise)",
    "text": "5.7 Grupowanie (dplyr::group_by) i agregowanie (dplyr::summarise)\nGdy mamy już bazę, zazwyczaj chcemy policzyć pewne statystyki dla podgrup osób badanych, np. dla osób różniących się wykształceniem, płcią czy jakąś manipulacją. Chcemy na przykład poznać średnią homofobię osób o różnym wykształceniu, sprawdzić liczebność naszych podgrup czy policzyć inne zbiorcze statystyki. Możemy, oczywiście, odfiltrować najpierw osoby o wykształceniu podstawowym, policzyć dla nich, potem osoby o wykształceniu średnim itd. Są jednak prostsze sposoby, a obejmują one użycie group_by i summarise25. Te dwie funkcje zazwyczaj idą ze sobą w parze i zgrupowane dane od razu trafiają do summarise. Poniżej przykład.\n\ndf %>%\n    group_by(wyksztalcenie) %>%\n    summarise(\n        n = n(),\n        H_M = mean(H_suma),\n        H_SD = sd(H_suma),\n        H_Me = median(H_suma),\n        V = H_SD / H_M\n    )\n\n#> # A tibble: 4 × 6\n#>   wyksztalcenie     n   H_M  H_SD  H_Me      V\n#>   <ord>         <int> <dbl> <dbl> <dbl>  <dbl>\n#> 1 Podstawowe        3  47    3.61    48 0.0767\n#> 2 Zawodowe          2  46    2.83    46 0.0615\n#> 3 Średnie          29  42.3  5.00    43 0.118 \n#> 4 Wyższe           11  42.9  4.35    44 0.101\n\n\n\nJak widzimy, dostaliśmy tabelkę z wykształceniem i wskazanymi statystykami. Funkcja n zliczyła nam przypadki osób z poszczególnym wykształceniem, mean policzyła średnią, sd odchylenie standardowe, a median medianę. V to tzw. współczynnik zmienności. Co to jest, nie jest teraz szczególnie ważne. Policzyłem to tutaj, żeby pokazać, że w obliczeniach możemy też wpisywać niestandardowe operacje (jak dzielenie) bez żadnych strasznych funkcji anonimowych, a także że możemy wziąć wartości z innych kolumn jako argumenty do naszych przekształceń. Tutaj V to odchylenie standardowe średniej homofobii (H_SD) podzielone przez samą średnią (H_M). Każdą kolumnę mogliśmy nazwać wedle życzenia. Jak dowiemy się w podrozdziale 6.1, istnieją funkcje, które najpopularniejsze zastawy statystyk opisowych liczą za nas.\nTak robiliśmy to zawsze, jednak dplyr 1.1.0. wprowadził inny sposób grupowania. Jeśli nie chcemy zapisywać grup w naszej bazie danych na później (czyli w większości przypadków), nie musimy w ogóle używać funkcji group_by. Zamiast tego summarise dostał argument .by, za pomocą którego możemy wskazać grupy jednorazowo, tylko na potrzeby tego jednego podsumowania. Więcej na temat argumentu .by można znaleźć w dokumentacji. Poniżej przykład z innego zbioru danych, w którym pojawia się średnia liczba krzyków w piosence, w zależności od typu piosenki i jej autora (Field, Miles, & Field, 2012). Przy okazji pokazuję też, że można grupować na podstawie wielu zmiennych naraz.\n\n# załadowanie danych z sieci\ndf_scream <- read_csv(\"https://raw.githubusercontent.com/profandyfield/discovr/master/data-raw/csv_files/escape.csv\")\n\n#> Rows: 68 Columns: 4\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (3): id, song_type, songwriter\n#> dbl (1): screams\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n# podejrzenie, jak dane wyglądają\nglimpse(df_scream)\n\n#> Rows: 68\n#> Columns: 4\n#> $ id         <chr> \"271\", \"q5b\", \"23x\", \"1ai\", \"7st\", \"fug\", \"v28\", \"64f\", \"c3…\n#> $ song_type  <chr> \"Fly song\", \"Fly song\", \"Fly song\", \"Fly song\", \"Fly song\",…\n#> $ songwriter <chr> \"Andy\", \"Andy\", \"Andy\", \"Andy\", \"Andy\", \"Andy\", \"Andy\", \"An…\n#> $ screams    <dbl> 5, 7, 3, 5, 7, 7, 7, 11, 6, 8, 4, 10, 8, 5, 5, 6, 5, 6, 8, …\n\n\n\n# pogrupowanie i zliczenie średniej liczby krzyków\ndf_scream %>%\n    summarise(\n        M = mean(screams),\n        .by = c(song_type, songwriter)\n    )\n\n#> # A tibble: 4 × 3\n#>   song_type songwriter     M\n#>   <chr>     <chr>      <dbl>\n#> 1 Fly song  Andy        6.41\n#> 2 Fly song  Malcolm     6   \n#> 3 Symphony  Andy        9.53\n#> 4 Symphony  Malcolm     7.06\n\n\n\nKolumny do grupowania podałem jako zestaw, czyli wewnątrz c(). Zgrupowane w ten sposób dane pokazują nam, że Andy pisze bardziej krzykliwe piosenki od Malcolma, ale różnica powiększa się, gdy chodzi o piosenki symfoniczne."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-pivot",
    "href": "posts/podstawy_R.html#sec-pivot",
    "title": "Podstawy programowania w R",
    "section": "5.8 Format długi i szeroki z tidyr::pivot_*",
    "text": "5.8 Format długi i szeroki z tidyr::pivot_*\nFormat długi i szeroki to coś, co rzadko pojawia się w tekstach wprowadzających i nie mam pojęcia czemu. To jest naprawdę ważne. Przełożenie danych z jednego formatu na drugi to często podstawowa operacja, jaką musimy wykonać, kiedy chcemy coś policzyć. Nie mam chyba ani jednego projektu, w którym bym tego nie robił. Do tego współczesne komendy, które to robią, są naprawdę proste. Tym bardziej zaskakujące jest, że np. w Excelu wykonać taką operację jest trudno, jeśli nie umie się korzystać z Power Query. Zacznijmy jednak od tego, co to jest format długi i szeroki.\nTerminy te odnoszą się do sposobu, w jaki składujemy dane. Format szeroki jest tym, co odruchowo tworzymy, kiedy robimy czyste tabelki. Jeden wiersz to jedna obserwacja. Wszystkie dane o konkretnej osobie badanej znajdują się w tym jednym wierszu. Każda kolumna to jedna zebrana dana, np. odpowiedź na konkretne pytanie. W takim formacie znajduje się teraz nasza baza. Weźmy z niej kilka kolumn, po czym użyjmy head, żeby zobaczyć pierwszych pięć wierszy.\n\ndf_wide <- df %>% # zapiszę to jako df_wide, na później\n    select(id, H_1:H_5) %>%\n    mutate(id = 1:nrow(df)) %>% # poprawiam id, żeby były kolejne liczby, zmiana kosmetyczna\n    arrange(id) # sortuję wg id\n\ndf_wide %>% # zapisane dane trzeba jeszcze wyświetlić\n    head(n = 5) # tylko 5 pierwszych wierszy\n\n#> # A tibble: 5 × 6\n#>      id   H_1   H_2   H_3   H_4   H_5\n#>   <int> <dbl> <dbl> <dbl> <dbl> <dbl>\n#> 1     1     5     5     5     5     2\n#> 2     2     5     5     4     5     2\n#> 3     3     6     5     5     5     2\n#> 4     4     6     6     6     6     1\n#> 5     5     3     4     4     4     3\n\n\n\nSą to typowe dane w formacie szerokim. Żeby jednak zrozumieć różnicę, między formatem długim, a szerokim, trzeba jeszcze zobaczyć dane długie. Stwórzmy więc takie.\n\ndf_long <- df_wide %>%\n    pivot_longer(H_1:H_5, names_to = \"pytanie\", values_to = \"ocena\")\n\ndf_long %>%\n    head(n = 10)\n\n#> # A tibble: 10 × 3\n#>       id pytanie ocena\n#>    <int> <chr>   <dbl>\n#>  1     1 H_1         5\n#>  2     1 H_2         5\n#>  3     1 H_3         5\n#>  4     1 H_4         5\n#>  5     1 H_5         2\n#>  6     2 H_1         5\n#>  7     2 H_2         5\n#>  8     2 H_3         4\n#>  9     2 H_4         5\n#> 10     2 H_5         2\n\n\n\nZacznę od skomentowania samych danych, a potem wyjaśnię funkcję. Dane w formacie długim mają oddzielne kolumny na numer pytania i odpowiedź. Pięć kolumn z odpowiedziami na pytania z formatu szerokiego zmieniliśmy w dwie. Powoduje to jednak, że każda osoba badana ma teraz pięć wierszy – w każdym odpowiedź na tylko jedno pytanie. Najpierw następuje 5 wierszy osoby z id 1, potem 5 wierszy osoby z id 2 itd. Widać więc dlaczego formaty te nazywają się szeroki i długi. Szeroki ma wiele kolumn, a mało wierszy (1 na osobę), długi mało kolumn, a wiele wierszy (1 na każde pytanie).\nPo co nam taki format? Zawiera te same informacje, co format szeroki, a trudniej się to czyta. Po pierwsze umożliwia nam to policzenie niektórych rzeczy, których nie policzylibyśmy z formatu szerokiego. Dla przykładu teraz mogę grupować dane według pytań, żeby sprawdzić, czy na każde pytanie badani odpowiadają podobnie. Jeśli moja skala jest dobra i każde pytanie rzeczywiście mierzy to samo, to odpowiedzi na wszystkie pytania powinny być podobne. Być może zrobiłem jakieś kontrowersyjne pytanie, na które wszyscy odpowiadają nisko, mimo że nie różnią się, w tym przykładzie, rzeczywistym poziomem homofobii. Mogę więc, na oko, sprawdzić rzetelność pozycji testowych26. Formatu długiego wymagają też niektóre testy statystyczne.\n\ndf_long %>%\n    summarise(\n        M = mean(ocena),\n        SD = sd(ocena),\n        .by = c(pytanie)\n    )\n\n#> # A tibble: 5 × 3\n#>   pytanie     M    SD\n#>   <chr>   <dbl> <dbl>\n#> 1 H_1      5.16 0.767\n#> 2 H_2      5    0.929\n#> 3 H_3      4.47 1.46 \n#> 4 H_4      5.49 0.661\n#> 5 H_5      1.53 0.694\n\n\n\nNawet częściej, niż do grupowania po pytaniach, wykorzystujemy format długi do wykresów. Jak się przekonamy dalej (w podrozdziale 7), w gramatyce grafik (The Grammar of Graphics) do jednego obiektu na wykresie możemy przypisać tylko jedną kolumnę. Jeśli więc chcemy zrobić wykres słupkowy np. wyników przed i po, to do osi X przypiszemy kolumnę z etykietami, a do osi Y kolumnę z wynikami. Nie da się więc sensownie zrobić wykresu, jeśli wyniki przed i po mamy w osobnych kolumnach.\nOmówmy więc funkcję, której użyłem do zmiany formatu. Kiedyś robiło się to skomplikowanymi funkcjami melt i cast, które często można znaleźć w innych językach programowania. Dziś w R, na szczęście, mamy intuicyjne funkcje pivot_wider i pivot_longer. Tej pierwszej używamy zmieniając format na szeroki, tą drugą zmieniamy format na długi. Na przykładzie powyżej można stwierdzić, że pivot_longer przyjmuje trzy argumenty. Pierwszy to zbiór kolumn, do jakich chcemy tę funkcję zastosować, jakie chcemy zwinąć. Można tu skorzystać z funkcji pomocniczych typu starts_with() czy everything(). Kolejne dwa argumenty funkcji pivot_longer to names_to i values_to. Są to nazwy kolumn, do których mają trafić, jak nazwa wskazuje, nazwy i wartości z naszych obecnych kolumn. W naszym przykładzie etykiety H_1, H_2 itd. trafiły do kolumny pytanie, zaś same odpowiedzi na te pytania do kolumny ocena.\n\ndf_long %>%\n    pivot_wider(names_from = \"pytanie\", values_from = \"ocena\")\n\npivot_wider ma prostszą składnię, ponieważ nie trzeba w niej wskazywać zakresu kolumn do rozwinięcia, a jedynie gdzie znajdują się nazwy kolumn, a gdzie ich wartości. Robimy to odpowiednio argumentami names_from i values_from. Jeśli jakiejś wartości nie ma w formacie długim (np. gdy osoba z numerem 4 nie odpowiedziała na pytanie 2, to w formacie długim może nie być wiersza 4 H_2), to pivot_wider automatycznie wstawi w tę komórkę NA27. Zdarza się, że funkcji tej musimy użyć dlatego, że niektóre programy generują dane w formacie długim."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-join",
    "href": "posts/podstawy_R.html#sec-join",
    "title": "Podstawy programowania w R",
    "section": "5.9 Retesty czyli złączenia (joins)",
    "text": "5.9 Retesty czyli złączenia (joins)\nZłączenia (joins) to, jak nazwa wskazuje, metoda łączenia dwóch baz danych. Jest to jedna z podstawowych operacji na bazach danych, znana co najmniej od lat 70. i instrukcji JOIN w SQL. Jest to także jedna z operacji niedostępnych w Excelu bez Power Query. W praktyce badawczej może być ona konieczna, gdy mamy badanie wieloczęściowe, w którym musimy stosować wiele baz danych (np. jedną tworzą pomiary z eyetrackera, drugą wyniki w ankiecie, a trzecią test szybkości reakcji). Często zdarza się to też w prostych badaniach ankietowych, w których po jakimś czasie musimy wykonać retest. W obu tych przypadkach lądujemy z dwiema (lub więcej) bazami, które – miejmy nadzieję – mają jakąś wspólną kolumnę, identyfikator osoby badanej, taki sam w każdej z trzech baz28.\nJak więc takie bazy połączyć? Wykorzystajmy tutaj dwie bazy zawierające test i retest, zrobione podczas walidacji kwestionariusza o nazwie KTR. Składał się on z dwóch skal oznaczonych tutaj literkami O i W. Standardową procedurą przy projektowaniu kwestionariusza jest powtórzenie pomiaru po jakimś czasie, żeby sprawdzić, na ile wyniki są stabilne. My taką procedurę wykonaliśmy, przez co dysponujemy dwiema oddzielnymi bazami. Zerknijmy na nie.\n\ndb_test <- read_csv(\"./dane/podstawy-R/join-test.csv\", show_col_types = FALSE)\ndb_retest <- read_csv(\"./dane/podstawy-R/join-retest.csv\", show_col_types = FALSE)\n\ndb_test\n\n#> # A tibble: 76 × 3\n#>    ID    KTR_O KTR_W\n#>    <chr> <dbl> <dbl>\n#>  1 B3RP     26    30\n#>  2 v4Eb     31    36\n#>  3 j3vB     20    31\n#>  4 wced     27    37\n#>  5 RhPy     15    31\n#>  6 aoEF     32    31\n#>  7 CjRB     23    28\n#>  8 bYhC     28    41\n#>  9 zCdZ     17    27\n#> 10 wspA     21    34\n#> # … with 66 more rows\n\n\n\ndb_retest\n\n#> # A tibble: 66 × 3\n#>    Subject KTR_O KTR_W\n#>    <chr>   <dbl> <dbl>\n#>  1 j3vB       23    31\n#>  2 wced       25    38\n#>  3 aoEF       33    31\n#>  4 CjRB       24    34\n#>  5 bYhC       29    41\n#>  6 zCdZ       17    28\n#>  7 wspA       24    29\n#>  8 GGwI       18    35\n#>  9 L9ZW       23    35\n#> 10 1stk       24    33\n#> # … with 56 more rows\n\n\n\nPierwsza rzecz, która może zwrócić naszą uwagę, to znacznie mniejsza liczba osób badanych przy reteście. Jest to naturalne, jako że wiele osób, mimo wcześniejszych deklaracji, nie wypełnia naszego testu po raz drugi. Widzimy też, że każdy wiersz posiada jakiegoś rodzaju kolumnę z unikatowym identyfikatorem osoby badanej. W języku relacyjnych baz danych takie unikatowe kolumny określa się jako PRIMARY KEY. W bazie danych z pierwszego testu kolumna ta nosi nazwę ID, a w bazie danych z retestu nazywa się ona Subject. Od razu wychodzi na jaw, że identyfikatory są spreparowane, bo nikt się nie pomylił, nie robił dopisków ani nie zdecydował się z jakiegoś powodu NaGlE pIsAć TaK. Moja praktyczna porada jest taka, żeby przed łączeniem baz danych zastosować na kolumnach z id funkcje str_to_lower i str_trim, które odpowiednio zmienią pisownię na same małe litery i usuną ewentualne spacje na początku i na końcu id. Ewentualnie można wykorzystać str_replace_all do usunięcia wszystkich spacji. Resztę identyfikatorów można poprawić ręcznie funkcją case_when (patrz 5.4.2).\nŻeby połączyć nasze bazy, musimy najpierw zdecydować, jak chcemy to zrobić. Możemy albo przyłączyć wyniki z retestu do bazy z testem, albo przyłączyć wyniki z testu do bazy z retestem. Jest to o tyle istotne, że jeśli przyłączymy retest do testu, to będziemy mieli puste wartości u tych osób, które nie wypełniły retestu. Jeśli zrobimy odwrotnie, to z założenia każda osoba, która wypełniła retest, wcześniej wypełniła test, a więc figuruje w pierwotnej bazie. W praktyce bywa różnie. Na przykład ludzie kłamią, że wypełnili test, a jak dostaną link do retestu, to myślą, że w takim razie chociaż to wypełnią. Tak czy inaczej, ta decyzja determinuje typ złączenia, jaki wybierzemy. Najbardziej powszechnym typem jest LEFT JOIN, który do każdego wiersza jednej bazy (pisanej jako pierwszej, czyli po lewej) przypisuje pasujący wiersz drugiej bazy (pisanej jako drugiej, czyli po prawej). Jeśli jakiś wiersz w lewej bazie nie ma odpowiednika w prawej bazie, otrzymujemy puste wartości. Jeśli jakiś wiersz w bazie po prawej nie został przypisany do żadnego wiersza po lewej, nie jesteśmy o tym informowani. Więcej o różnych typach złączeń (np. pozwalających uzyskać wszystkie możliwe kombinacje wierszy) można przeczytać i zobaczyć na obrazkach na przykład tutaj.\nJa przyłączę retest do bazy z wynikami pierwszego testu. Widzę jednak dwa problemy, które będę musiał rozwiązać. Po pierwsze, kolumna z identyfikatorem osoby badanej nazywa się inaczej w obu bazach. Po drugie, kolumny KTR_O i KTR_W nazywają się tak samo w obu bazach. Będę więc musiał wskazać R, na podstawie jakich kolumn ma dokonać złączenia, a także jak ma nazwać kolumny w gotowej bazie, żebym wiedział, które wyniki dotyczą pierwszego testu, a które retestu.\n\ndb_joined <- db_test %>%\n    left_join(\n        db_retest,\n        by = join_by(ID == Subject),\n        suffix = c(\"\", \"_retest\")\n    )\n\ndb_joined\n\n#> # A tibble: 76 × 5\n#>    ID    KTR_O KTR_W KTR_O_retest KTR_W_retest\n#>    <chr> <dbl> <dbl>        <dbl>        <dbl>\n#>  1 B3RP     26    30           NA           NA\n#>  2 v4Eb     31    36           NA           NA\n#>  3 j3vB     20    31           23           31\n#>  4 wced     27    37           25           38\n#>  5 RhPy     15    31           NA           NA\n#>  6 aoEF     32    31           33           31\n#>  7 CjRB     23    28           24           34\n#>  8 bYhC     28    41           29           41\n#>  9 zCdZ     17    27           17           28\n#> 10 wspA     21    34           24           29\n#> # … with 66 more rows\n\n\n\nPierwszy problem rozwiązałem za pomocą argumentu by. Od wersji dplyr 1.1.0 przyjmuje on inną funkcję o nazwie join_by. W jej nawiasach precyzujemy, na podstawie jakich kolumn należy dokonać złączenia. Identyczne kolumny łączymy znakiem ==. Drugi problem rozwiązałem dodając w argumencie suffix przyrostki do nazw kolumn. Zawsze zapisuje się je jako zestaw, czyli wewnątrz c() i zawsze najpierw jest w cudzysłowie przyrostek lewej bazy (u nas db_test), a potem przyrostek prawej bazy (u nas db_retest). Ja chciałem, by kolumny pierwotnej bazy nie miały przyrostka, więc za przyrostek dałem pusty ciąg znaków (czyli po prostu nic w cudzysłowie), zaś do kolumn bazy z retestem dodałem przyrostek \"_retest\". Efekt widać na wydruku z konsoli – 5 kolumn i puste wartości u osób, które nie wypełniły retestu.\nZłączenia to zaskakująco szeroki temat, który daje duże możliwości. Omówiona tu funkcja left_join jest najczęściej stosowana, ale warto zerknąć do dokumentacji i w tutoriale, żeby chociaż dowiedzieć się, co możemy za pomocą złączeń zrobić."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-get_summary_stats",
    "href": "posts/podstawy_R.html#sec-get_summary_stats",
    "title": "Podstawy programowania w R",
    "section": "6.1 Statystyki opisowe z rstatix::get_summary_stats",
    "text": "6.1 Statystyki opisowe z rstatix::get_summary_stats\n\nDo liczenia statystyk opisowych w rstatix wykorzystujemy funkcję get_summary_stats. Dobrze współpracuje ona z tidyverse, potokami i funkcją group_by. Ma też bardzo prostą składnię. Jedyne, co musimy zrobić, to wrzucić do naszej funkcji naszą bazę danych, a otrzymamy rozległą tabelę ze statystykami opisowymi dla wszystkich zmiennych. Szczegóły, wyjaśnienia i ewentualne możliwości modyfikacji poszczególnych statystyk znajdują się w dokumentacji. Jeśli do podstawowych statystych chcielibyśmy doliczyć coś niestandardowego, jak współczynnik zmienności z podrozdziału 5.7, zawsze możemy na gotowej tabeli ze statystykami opisowymi użyć użyć mutate.\n\nlibrary(\"rstatix\")\n\nget_summary_stats(df) %>%\n    mutate(v = sd / mean) # dodaję współczynnik zmienności\n\n#> # A tibble: 13 × 14\n#>    variable     n   min   max median    q1    q3   iqr   mad  mean     sd    se\n#>    <fct>    <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>\n#>  1 id          45     1    55     31    18    43    25 19.3  30.1  15.8   2.36 \n#>  2 wiek        45    17    64     21    20    23     3  1.48 23.2   8.04  1.20 \n#>  3 H_suma      45    30    50     43    40    46     6  4.45 42.9   4.77  0.712\n#>  4 H_1         45     3     6      5     5     6     1  1.48  5.16  0.767 0.114\n#>  5 H_2         45     1     6      5     5     6     1  0     5     0.929 0.139\n#>  6 H_3         45     1     6      5     4     6     2  1.48  4.47  1.46  0.217\n#>  7 H_4         45     4     6      6     5     6     1  0     5.49  0.661 0.099\n#>  8 H_5         45     1     4      1     1     2     1  0     1.53  0.694 0.103\n#>  9 H_6         45     1     6      5     4     6     2  1.48  4.73  1.34  0.199\n#> 10 H_7         45     1     6      2     1     2     1  1.48  1.87  1.08  0.161\n#> 11 H_8         45     2     6      5     5     6     1  1.48  5.13  0.991 0.148\n#> 12 H_9         45     1     6      5     4     6     2  1.48  4.49  1.47  0.219\n#> 13 H_10        45     1     6      5     5     6     1  1.48  5.07  1.29  0.192\n#> # … with 2 more variables: ci <dbl>, v <dbl>\n\n\n\nJeśli chcemy otrzymać statysyki opisowe dla zgrupowanych danych, czyli np. osobno dla każdego poziomu wykształcenia, wystarczy, że przed użyciem funkcji get_summary_stats zgrupujemy dane funkcją group_by. W chwili, kiedy to piszę, funkcje rstatix nie posiadają argumentu .by. Jako przykład wykorzystam bazę df_scream z podrozdziału 5.7.\n\ndf_scream %>%\n    group_by(songwriter, song_type) %>%\n    get_summary_stats()\n\n#> # A tibble: 4 × 15\n#>   song_…¹ songw…² varia…³     n   min   max median    q1    q3   iqr   mad  mean\n#>   <chr>   <chr>   <fct>   <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#> 1 Fly so… Andy    screams    17     3    11      6     5     7     2  1.48  6.41\n#> 2 Sympho… Andy    screams    17     7    13     10     8    10     2  2.96  9.53\n#> 3 Fly so… Malcolm screams    17     3    11      6     5     7     2  1.48  6   \n#> 4 Sympho… Malcolm screams    17     4    11      7     6     8     2  1.48  7.06\n#> # … with 3 more variables: sd <dbl>, se <dbl>, ci <dbl>, and abbreviated\n#> #   variable names ¹​song_type, ²​songwriter, ³​variable"
  },
  {
    "objectID": "posts/podstawy_R.html#sec-freq_table",
    "href": "posts/podstawy_R.html#sec-freq_table",
    "title": "Podstawy programowania w R",
    "section": "6.2 Tabele liczności z rstatix::freq_table",
    "text": "6.2 Tabele liczności z rstatix::freq_table\nDla danych kategorialnych (np. płeć, wykształcenie, klasa) nie liczymy statystyk opisowych, a tabele liczności. Chcemy na przykład wiedzieć, ile w naszej bazie mamy osób z wykształceniem wyższym, ile ze średnim itd. W podrozdziale 5.7 pokazałem, jak to zrobić ręcznie funkcjami summarise i n. Pakiet rstatix ma dla nas gotową funkcję freq_table właśnie do tego celu. Wymaga ona jedynie podania, które kolumny z naszej tabeli zliczyć. Robimy to tak samo, jak zrobilibyśmy w funkcji select (patrz 5.1.2) czy across (patrz 5.3.1).\n\nfreq_table(df, wyksztalcenie)\n\n#> # A tibble: 4 × 3\n#>   wyksztalcenie     n  prop\n#>   <ord>         <int> <dbl>\n#> 1 Podstawowe        3   6.7\n#> 2 Zawodowe          2   4.4\n#> 3 Średnie          29  64.4\n#> 4 Wyższe           11  24.4"
  },
  {
    "objectID": "posts/podstawy_R.html#sec-cor_mat",
    "href": "posts/podstawy_R.html#sec-cor_mat",
    "title": "Podstawy programowania w R",
    "section": "6.3 Macierze korelacji i ich istotność z rstatix::cor_mat",
    "text": "6.3 Macierze korelacji i ich istotność z rstatix::cor_mat\nW ramach eksploracji chcemy czasami zrobić macierz korelacji całego naszego zestawu danych. Może nam do tego posłużyć funkcja cor_mat z pakietu rstatix. Zobaczmy to na przykładzie bazy db_joined z podrozdziału 5.9.\n\n(korelacje <- cor_mat(db_joined, -ID))\n\n#> # A tibble: 4 × 5\n#>   rowname      KTR_O KTR_W KTR_O_retest KTR_W_retest\n#> * <chr>        <dbl> <dbl>        <dbl>        <dbl>\n#> 1 KTR_O         1     0.43         0.79         0.45\n#> 2 KTR_W         0.43  1            0.35         0.71\n#> 3 KTR_O_retest  0.79  0.35         1            0.39\n#> 4 KTR_W_retest  0.45  0.71         0.39         1\n\n\n\nUżycie, jak widać, jest bardzo proste. Jedyna dodatkowa informacja, jaką sprecyzowałem, to żeby nie brać pod uwagę kolumny ID. W tym wypadku mógłbym też użyć starts_with(\"KTR\"). Efektem działania funkcji jest macierz korelacji. Możemy z niej wyczytać m.in., że korelacja KTR_O i KTR_W z ich retestami wyniosła odpowiednio KTR_O_retest i 0,45. Nie są to jakoś oszałamiające wyniki jak na testy, które mają mierzyć względnie stałe cechy.\nMożna zwrócić uwagę na to, że powyższa komenda wyświetliła nam macierz korelacji, pomimo że normalnie musiałbym jeszcze wywołać samą zmienną korelacje, do której ją zapisałem. Tak to robiliśmy wcześniej. Wykorzystałem tutaj wygodą sztuczkę – jeśli weźmie się całe przypisanie w nawiasy, R potraktuje to jako „przypisz i wyświetl”.\nKorelacje mają swoją istotność, którą możemy chcieć poznać. Jeśli policzyliśmy już macierz korelacji, możemy ją wrzucić do funkcji cor_get_pval. Ewentualnie możemy samą bazę wrzucić do funkcji cor_pmat. Efekt jest ostatecznie ten sam.\n\nkorelacje_p_1 <- cor_get_pval(korelacje)\n\nkorelacje_p_2 <- cor_pmat(db_joined, -ID)\n\nidentical(korelacje_p_1, korelacje_p_2)\n\nkorelacje_p_1\n\nFunkcja identical informuje nas, że obiekty stworzone obiema funkcjami rzeczywiście są identyczne. Powstała nam macierz istotności korelacji. Może być mylące, że korelacje wyświetlają się w notacji naukowej, co jest wygodnym sposobem oznaczania bardzo małych lub bardzo dużych liczb. Zasada jest tu prosta: \\(1,22e-4 = 1,22 \\times 10^{-4} = 0,000122\\). Jeśli jednak chcemy dostać tę informację w przyjaźniejszej formie, możemy użyć funkcji cor_mark_significant29, do której wrzucamy macierz korelacji (nie macierz istotności).\n\ncor_mark_significant(korelacje)\n\n#>        rowname    KTR_O    KTR_W KTR_O_retest KTR_W_retest\n#> 1        KTR_O                                            \n#> 2        KTR_W  0.43***                                   \n#> 3 KTR_O_retest 0.79****   0.35**                          \n#> 4 KTR_W_retest  0.45*** 0.71****       0.39**\n\n\n\nOtrzymujemy naszą macierz korelacji wzbogaconą o gwiazdki. Domyślnie są to zwykłe swiazdki30 z dodatkiem **** oznaczającym mniej niż 0,0001. Gwiazdki możemy dostosowywać, a szczegóły znajdują się w dokumentacji."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-aes",
    "href": "posts/podstawy_R.html#sec-aes",
    "title": "Podstawy programowania w R",
    "section": "7.1 Mapowanie estetyk (aes)",
    "text": "7.1 Mapowanie estetyk (aes)\nPrzejdźmy więc do praktyki. Pakietu ggplot2 nie musimy ładować osobno, bo wchodzi w skład, a jakże, tidyverse. Żeby zacząć tworzyć wykres, musimy zacząć od wywołania funkcji ggplot() (ważne – nie ggplot2, ggplot2 to nazwa pakietu, funkcja to ggplot). W jej obrębie wskazujemy na zbiór danych, na którym chcemy pracować i dokonujemy mapowania estetyk, czyli mówimy naszej funkcji, jakie kolumny mają przełożyć się na jakie elementy wizualne. Wykorzystajmy sobie tutaj jeden z klasycznych zbiorów danych o nazwie diamonds, który automatycznie powinien stać się dostępny po załadowaniu ggplot2. Zerknijmy na niego.\n\nglimpse(diamonds)\n\n\n#> Rows: 53,940\n#> Columns: 10\n#> $ carat   <dbl> 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n#> $ cut     <ord> Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n#> $ color   <ord> E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n#> $ clarity <ord> SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n#> $ depth   <dbl> 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n#> $ table   <dbl> 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n#> $ price   <int> 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n#> $ x       <dbl> 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n#> $ y       <dbl> 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n#> $ z       <dbl> 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n\n\n\ndiamonds to zbiór różnych danych na temat 53 940 brylantów. Szczegółowe dane na jego temat można uzyskać wpisując w konsoli ?diamonds. Ponieważ jest to gigantyczny zbiór, wybierzmy sobie losowo 100 diamentów za pomocą funkcji slice_sample. Użyję jeszcze funkcji set.seed, żeby wyniki losowania były za każdym razem takie same. Nie jest ona obowiązkowa, ale użycie jej sprawi że Twoje wykresy bedą identyczne jak moje.\n\nset.seed(123)\n\ndf_diamonds <- slice_sample(diamonds, n = 100)\n\nZnacznie lepiej. Zrobimy sobie prosty wykres ceny diamentu od jego masy w karatach. Pierwsza rzecz, którą musimy wykonać, to mapowanie kolumn carat i price do osi X i Y. Estetyki mapujemy wrzucając je do funkcji aes – najpierw X, potem Y.\n\nggplot(df_diamonds, aes(carat, price))\n\n\n\n\nJak widzimy, powstał nam pusty wykres. To jest właśnie układ współrzędnych, o którym mówiłem wcześniej.\nPoza estetykami X i Y mamy do dyspozycji mnóstwo innych estetyk, m.in. colour, fill, alpha (przeźroczystość), size, linewidth, linetype, shape. Estetyki mają jedną wspólną cechę – są powiązane z jakimiś danymi. Jeśli stwierdzę, że wszystkie moje punkty mają być czerwone, to nie będzie to estetyka, tylko atrybut. O estetyce będę mógł mówić wtedy, gdy kolor będzie zależał np. od przejrzystości diamentu. To rozróżnienie, że atrybuty to stałe właściwości wyglądu, a estetyki to związek wyglądu z danymi, jest o tyle ważne, że nieco inaczej się je definiuje, jak zobaczymy za chwilę."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-geom",
    "href": "posts/podstawy_R.html#sec-geom",
    "title": "Podstawy programowania w R",
    "section": "7.2 Obiekty geom_*",
    "text": "7.2 Obiekty geom_*\nPusty układ współrzędnych to jeszcze nie wykres. Musimy jeszcze dodać jakiegoś rodzaju geom. W naszym przypadku będą to punkty, gdzie każdy punkt będzie reprezentował inny brylant. Ściąga do ggplot2 zawiera świetną rozpiskę, jakie można stworzyć wykresy, w zależności od typu zmiennych, jakimi dysponujemy. Może się ona przydać nawet wtedy, gdy robimy wykresy w innym programie.\nDo tworzenia wykresów punktowych mamy dwa rodzaje obiektów geom – geom_point i geom_jitter. geom_point to typowy wykres punktowy. geom_jitter przydaje się wtedy, kiedy mamy wiele danych o tych samych współrzędnych, np. wiele brylantów o masie dokładnie 0,2 karata i cenie dokładnie $ 300. W takim wypadku wszystkie te punkty nałożyłyby się na siebie, ukryły jeden pod drugim i wydawałoby się, że mamy mniej danych, niż w rzeczywistości mamy. geom_jitter rozwiązuje ten problem odrobinkę przesuwając każdy punkt w losowym kierunku. Lekko tracimy wtedy na dokładności, ale widzimy wszystkie nasze dane. Żeby do naszego wykresu dołożyć kolejne elementy, używamy znaku +.\n\nggplot(df_diamonds, aes(carat, price)) +\n    geom_point()\n\n\n\n\nWygląda na to, że im większy diament, tym droższy. Bez zaskoczenia. Możemy do naszego wykresy dołożyć linię trendu jako kolejny geom – geom_smooth. Jeśli chcemy mieć prostą linię, musimy ustawić argument method = \"lm\", co jest skrótem od linear model.\n\nggplot(df_diamonds, aes(carat, price)) +\n    geom_point() +\n    geom_smooth(method = \"lm\")\n\n#> `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nSzare pole wokół niebieskiej linii to przedział ufności. Możemy go wyłączyć ustawiając se = FALSE. Przy tej okazji powiedzmy sobie jeszcze raz o estetykach i atrybutach. Mogę chcieć, żeby kolor mojego punktu zależał od jakości wyszlifowania brylantu z kolumny cut. Ponieważ jest to związek wyglądu z danymi, to jest to estetyka i ustawiam ją wewnątrz aes. Mogę to aes wrzucić albo do funkcji ggplot, jak robiłem wcześniej, albo też do funkcji geom_point, bo to jej mapowanie dotyczy. Zwyczajowo argumenty X i Y w aes mogą być nienazwane, ale wszystkie inne już powinny. Mogę też zmienić kolor linii trendu z niebieskiego na czarny i zrobić ją trochę cieńszą. Jest to zmiana wyglądu, ale arbitralna, bez związku z danymi. Jest to więc atrybut i ustawiam go poza aes, wewnątrz funkcji, której ten atrybut dotyczy. Zobaczmy to.\n\nggplot(df_diamonds, aes(carat, price, colour = cut)) +\n    geom_point() +\n    geom_smooth(method = \"lm\", se = FALSE, linewidth = 0.5, colour = \"black\")\n\n#> `geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/podstawy_R.html#sec-labs",
    "href": "posts/podstawy_R.html#sec-labs",
    "title": "Podstawy programowania w R",
    "section": "7.3 Tytuły osi i wykresu (labs)",
    "text": "7.3 Tytuły osi i wykresu (labs)\nKolejną rzeczą, którą moglibyśmy chcieć zmienić, są tytuły osi. Możemy też dodać tytuł do samego wykresu. Najwygodniej jest to zrobić dodając kolejny element, labs, w którym dopiszemy nasze tytuły.\n\nggplot(df_diamonds, aes(carat, price, colour = cut)) +\n    geom_point() +\n    geom_smooth(method = \"lm\", se = FALSE, linewidth = 0.5, colour = \"black\") +\n    labs(\n        x = \"Masa [karaty]\",\n        y = \"Cena [$]\",\n        colour = \"Szlif\",\n        title = \"Cena brylantu w zależności od masy\"\n    )\n\n#> `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nJeśli chcemy zmienić etykiety wartości z legendy, mamy dwie opcje – albo przekodujemy te etykiety bezpośrednio w bazie danych, chociażby zaprzęgając do pracy questionr (zob. 5.5.1.1.1), albo użyjemy jednej z funkcji scale_*_discrete i jej argumentu labels, gdzie zamiast gwiazdki piszemy nazwę naszej estetyki. Szlif naszych diamentów jest zmapowany do estetyki colour, więc użyjemy funkcji scale_colour_discrete.\n\nggplot(df_diamonds, aes(carat, price, colour = cut)) +\n    geom_point() +\n    geom_smooth(method = \"lm\", se = FALSE, linewidth = 0.5, colour = \"black\") +\n    labs(\n        x = \"Masa [karaty]\",\n        y = \"Cena [$]\",\n        colour = \"Szlif\",\n        title = \"Cena brylantu w zależności od masy\"\n    ) +\n    scale_colour_discrete(labels = c(\"Zadowalający\", \"Dobry\", \"Bardzo dobry\", \"Premium\", \"Idealny\"))\n\n#> `geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/podstawy_R.html#sec-theme",
    "href": "posts/podstawy_R.html#sec-theme",
    "title": "Podstawy programowania w R",
    "section": "7.4 Wygląd wykresów (theme_*)",
    "text": "7.4 Wygląd wykresów (theme_*)\nWykres ma wszystkie elementy na miejscu, ale nie oszukujmy się, nie jest to dzieło sztuki. Żeby poprawić wygląd naszego wykresu, sięgniemy po dwa narzędzia. Po pierwsze ustalimy jego ogólny styl za pomocą jednego z motywów (themes), a potem poprawimy szczegóły z użyciem dodatku do RStudio esquisse.\nOgólny styl wykresu ustala się za pomocą elementów zaczynających się słówkiem theme_. ggplot2 ma wbudowane osiem takich motywów, które można przejrzeć tutaj. W Internecie roi się jednak od niestandardowych motywów, które mogą zaczarować nasze wykresy. Kluczowym ich źródłem może być pakiet ggthemes, motywy z którego można zobaczyć tutaj. Ja jednak chciałem pokazać dwa inne – theme_apa z pakietu papaja i theme_Publication z repozytorium na GitHubie koundy/ggplot_theme_Publication.\npapaja to skrótowiec od Preparing APA Journal Articles i jest to rozległy pakiet pomagający pisać artykuły zgodne ze standardami Amerykańskiego Towarzystwa Psychologicznego (APA). Z tych standardów korzystają nie tylko psychologowie, ale też wiele czasopism z zakresu nauk przyrodniczych. Daje nam on dostęp m.in. do motywu theme_apa dostosowującego wykres do standardów APA.\n\nlibrary(\"papaja\")\n\nggplot(df_diamonds, aes(carat, price, colour = cut)) +\n    geom_point() +\n    geom_smooth(method = \"lm\", se = FALSE, linewidth = 0.5, colour = \"black\") +\n    labs(\n        x = \"Masa [karaty]\",\n        y = \"Cena [$]\",\n        colour = \"Szlif\",\n        title = \"Cena brylantu w zależności od masy\"\n    ) +\n    scale_colour_discrete(\n        labels = c(\"Zadowalający\", \"Dobry\", \"Bardzo dobry\", \"Premium\", \"Idealny\")\n    ) +\n    theme_apa()\n\n\n\n\nDrugi motyw nie jest szałowo popularny w społeczności, ale bardzo go lubię. Żeby zadziałał, musimy wcześniej zainstalować u siebie pakiety grid, scales i ggthemes. Spojrzenie w repozytorium pozwoli nam stwierdzić, że nie jest to pakiet, a po prostu zbiór plików. Wchodzimy więc w plik ggplot_theme_Publication-2.R, klikamy raw i kopiujemy link. Następnie użyjemy komendy source, która pozwala nam uruchamiać kod z innych plików .R w naszym skrypcie, jak podamy ich ścieżkę lub link do nich. Cały kod mógłby więc wyglądać tak:\n\nsource(\"https://raw.githubusercontent.com/koundy/ggplot_theme_Publication/master/ggplot_theme_Publication-2.R\")\n\nggplot(df_diamonds, aes(carat, price, colour = cut)) +\n    geom_point() +\n    geom_smooth(method = \"lm\", se = FALSE, linewidth = 0.5, colour = \"black\") +\n    labs(\n        x = \"Masa [karaty]\",\n        y = \"Cena [$]\",\n        colour = \"Szlif\",\n        title = \"Cena brylantu w zależności od masy\"\n    ) +\n    scale_colour_discrete(\n        labels = c(\"Zadowalający\", \"Dobry\", \"Bardzo dobry\", \"Premium\", \"Idealny\"),\n    ) +\n    theme_Publication()\n\n#> `geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/podstawy_R.html#sec-esquisse",
    "href": "posts/podstawy_R.html#sec-esquisse",
    "title": "Podstawy programowania w R",
    "section": "7.5 esquisse",
    "text": "7.5 esquisse\nWykres w takiej formie można już uznać za zadowalający. Ale co jeśli chcemy poprawić jakieś szczegóły? Na przykład dostosować kolory? Są na to odpowiednie funkcje, ale jeśli mam być szczery, jest ich na tyle dużo, a w tutorialach tak bardzo przeplatają się stare i nowe metody, że bez gruntownego wyszkolenia (którego na przykład ja nie posiadam) bardzo łatwo jest się zgubić i bez zrozumienia kopiować kod znaleziony w Internecie. Na szczęście istnieje pewne narzędzie, które może nam w tej sytuacji pomóc. Nazywa się esquisse i jest dodatkiem do RStudio.\nInstalujemy esquisse jak każdy inny pakiet (install.packages(\"esquisse\")). Po zainstalowaniu, jeśli jest taka potrzeba, można spróbować zmienić język na polski komendą set_i18n(\"pl\")31. Po zainstalowaniu pakietu, w menu Addins na górnej belce, powinniśmy uzyskać dostęp do opcji ggplot2 builder32, które jest narzędziem do interaktywnego konstruowania wykresów. Pozwala na stworzenie kodu w wygodnym, graficznym interfejsie. Polecam zapoznać się z tym interfejsem, ale nie będę go omawiał, ponieważ jest dość intiucyjny. Po wygenerowaniu naszego wykresu możemy skopiować gotowy kod do skryptu.\n\nggplot(df_diamonds) +\n    aes(x = carat, y = price, colour = clarity) +\n    geom_point(shape = \"diamond\", size = 2L) +\n    scale_color_brewer(palette = \"YlOrRd\", direction = 1) +\n    labs(\n        x = \"Masa [karaty]\",\n        y = \"Cena [$]\",\n        title = \"Cena diamentów od ich masy według szlifu\",\n        caption = \"Źródło danych: ggplot2\",\n        color = \"Przejrzystość\"\n    ) +\n    theme_bw() +\n    theme(\n        legend.position = \"bottom\",\n        plot.title = element_text(face = \"bold\")\n    ) +\n    facet_wrap(vars(cut))\n\n\n\n\nPowyżej wykres, który stworzyłem w equisse. Warto jednak zwrócić uwagę na jego niedoskonałości, takie jak brak polskich tłumaczeń typów szlifu. Pewnym wyjaśnieniem może być dla nas nazwa francuskiego słowa equisse – szkic. Takie narzędzia jak equisse nie zwalniają nas całkowicie z umiejętności kodowania wykresów, ale pozwalają wygodnie tworzyć szkice naszego kodu. Ten szkic mogę pozmieniać, np. zamieniając theme_bw na theme_Publication i dodając polskie tłumaczenia. Nieco inaczej, niż wcześniej, bo facet_wrap nie jest estetyką, więc sposób dodawania do niego niestandardowych etykiet znalazłem w dokumentacji.\n\nggplot(df_diamonds) +\n    aes(x = carat, y = price, colour = clarity) +\n    geom_point(shape = \"diamond\", size = 2L) +\n    scale_color_brewer(palette = \"YlOrRd\", direction = 1) +\n    labs(\n        x = \"Masa [karaty]\",\n        y = \"Cena [$]\",\n        title = \"Cena diamentów od ich masy według szlifu\",\n        caption = \"Źródło danych: ggplot2\",\n        color = \"Przejrzystość\"\n    ) +\n    theme_Publication() +\n    theme(\n        legend.position = \"bottom\",\n        plot.title = element_text(face = \"bold\")\n    ) +\n    facet_wrap(\n        vars(cut),\n        labeller = labeller(cut = c(\n            \"Fair\" = \"Zadowalający\",\n            \"Good\" = \"Dobry\",\n            \"Very Good\" = \"Bardzo dobry\",\n            \"Premium\" = \"Premium\",\n            \"Ideal\" = \"Idealny\"\n            )\n        )\n    )\n\n\n\n\nWykresy to olbrzymi temat, który tutaj tylko liznęliśmy z wierzchu. Sądzę jednak, że ta wiedza wystarczy, żeby – z pomocą dokumentacji i Google – być w stanie powoli rozbudowywać swoje umiejętności z zakresu ggplot2. Zwłaszcza, że tworzenie dobrych wykresów do trudna sztuka, co skutecznie udowadnia plebiscyt na najgorszy wykres roku organizowany przez dr. Przemysława Biecka na jego stronie. W tym miejscu mogę polecić jego książkę „Wykresy od kuchni”, dostępną za darmo i okraszoną kodem R, który posłużył do wygenerowania jego wykresów."
  },
  {
    "objectID": "posts/podstawy_R.html#sec-broom",
    "href": "posts/podstawy_R.html#sec-broom",
    "title": "Podstawy programowania w R",
    "section": "8.1 Czyste wyniki, czyli pakiet broom",
    "text": "8.1 Czyste wyniki, czyli pakiet broom\nDlaczego nie jest to dobry format? Bo jest niejednolity i chaotyczny. Nie tylko w widocznej postaci, ale też pod maską, co przeszkadza nam, kiedy chcemy wejść głębiej z programowaniem albo pisać automatyczne raporty. Niestandardowe wykresy również mogą być wtedy problemem. Odpowiedzią na te problemy stał się pakiet broom. Należy on do świata tidyverse, ale nie jest ładowany z pakietem tidyverse, więc trzeba załadować go ręcznie. Rdzeniem tego pakietu jest specjalny słownik, standard tworzenia modeli, w którym kolumny zawierające określone informacje muszą nazywać się w określony sposób. Kolumny, bo wyczyszczony model ma zawsze postać tabeli. Dla przykładu kolumna z wartością \\(p\\) zawsze musi nazywać się p.value, a kolumna z wartością współczynnika – estimate. Wymusza to spójność i zapewnia przewidywalność obiektów zawierających modele. Wiele współczesnych pakietów do modelowania od razu dostosowuje swoje modele do wymogów czystych danych.\nbroom nie jest jednak tylko standardem – to także pakiet zawierający trzy funkcje czyszczące modele. Co więcej zawsze są to te same trzy funkcje, które zawsze przyjmują tak samo nazywające się argumenty. Ta spójność i zapewnienie spójności to najlepsze, co daje nam broom. Omówmy sobie teraz te trzy funkcje i zobaczmy je w akcji.\n\n8.1.1 glance\nPierwszą funkcją czyszczącą jest glance (nie mylić z glimpse). Służy ona do tworzenia czystych opisów samego modelu w pojedynczym wierszu. Będą to takie rzeczy jak statystyka \\(F\\) czy \\(R^2\\). Jak każda funkcja broom, jako pierwszy argument przyjmuje ona nasz model.\n\nlibrary(\"broom\")\n\nglance(lm_price)\n\n#> # A tibble: 1 × 12\n#>   r.squared adj.r.squa…¹ sigma stati…²  p.value    df logLik   AIC   BIC devia…³\n#>       <dbl>        <dbl> <dbl>   <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl>\n#> 1     0.868        0.866 0.646    482. 2.74e-65     2  -146.  300.  312.    61.4\n#> # … with 2 more variables: df.residual <int>, nobs <int>, and abbreviated\n#> #   variable names ¹​adj.r.squared, ²​statistic, ³​deviance\n\n\n\nWidzimy tutaj ogólne podsumowanie skuteczności naszego modelu z całą serią statystyk. Co ciekawe mamy też takie statystyki jak AIC i BIC, których summary nie wyświetla. W ten sposób broom nie tylko czyści nasz model, ale także dostarcza nam nowych informacji.\n\n\n8.1.2 tidy\nFunkcja tidy wyświetla nam najważniejsze elementy modelu. Dla wszelkich regresji będą to przede wszystkim współczynniki regresji, choć dokładna zawartość wynikowej tabeli naturalnie zależy od tego, jaki model czyściliśmy. Zobaczmy to.\n\ntidy(lm_price)\n\n#> # A tibble: 3 × 5\n#>   term         estimate std.error statistic  p.value\n#>   <chr>           <dbl>     <dbl>     <dbl>    <dbl>\n#> 1 (Intercept)     -2.52    0.563      -4.48 1.48e- 5\n#> 2 Sepal.Length     1.78    0.0644     27.6  5.85e-60\n#> 3 Sepal.Width     -1.34    0.122     -10.9  9.43e-21\n\n\n\nWidzimy więc, że oba współczynniki (estimate) są istotne statystycznie, z czego długość działki kielicha ma współczynnik dodatni, a szerokość ujemny.\n\n\n8.1.3 augment\nOstania funkcja czyszcząca nie do końca cokolwiek czyści. Pozwala ona na dodanie do oryginalnej bazy danych informacji zaczerpniętych z modelu, m.in. jaką wartość przewiduje model dla tego przypadku, jaka jest wartość resztkowa (residual), zwykła i standaryzowana, jaki jest dystans Cooka i hat value itd. Dokładne możliwości funkcji augment zależą od rodzaju modelu. Są to informacje użyteczne chociażby kiedy chcemy zidentyfikować outliery. Wszystkie dodane kolumny mają nazwy zaczynające się kropką.\n\naugment(lm_price)\n\n#> # A tibble: 150 × 9\n#>    Petal.Length Sepal.…¹ Sepal…² .fitted   .resid   .hat .sigma .cooksd .std.r…³\n#>           <dbl>    <dbl>   <dbl>   <dbl>    <dbl>  <dbl>  <dbl>   <dbl>    <dbl>\n#>  1          1.4      5.1     3.5    1.85 -0.446   0.0177  0.648 2.91e-3 -0.695  \n#>  2          1.4      4.9     3      2.16 -0.760   0.0159  0.646 7.54e-3 -1.18   \n#>  3          1.3      4.7     3.2    1.54 -0.237   0.0196  0.648 9.15e-4 -0.370  \n#>  4          1.5      4.6     3.1    1.49  0.00677 0.0218  0.649 8.34e-7  0.0106 \n#>  5          1.4      5       3.6    1.53 -0.134   0.0222  0.649 3.34e-4 -0.210  \n#>  6          1.7      5.4     3.9    1.84 -0.143   0.0324  0.649 5.63e-4 -0.225  \n#>  7          1.4      4.6     3.4    1.09  0.308   0.0243  0.648 1.94e-3  0.483  \n#>  8          1.5      5       3.4    1.80 -0.302   0.0167  0.648 1.25e-3 -0.471  \n#>  9          1.4      4.4     2.9    1.41 -0.00584 0.0292  0.649 8.43e-7 -0.00917\n#> 10          1.5      4.9     3.1    2.03 -0.526   0.0154  0.647 3.50e-3 -0.820  \n#> # … with 140 more rows, and abbreviated variable names ¹​Sepal.Length,\n#> #   ²​Sepal.Width, ³​.std.resid"
  },
  {
    "objectID": "posts/podstawy_R.html#sec-rstatix",
    "href": "posts/podstawy_R.html#sec-rstatix",
    "title": "Podstawy programowania w R",
    "section": "8.2 Swiss Army Knife w R, czyli rstatix",
    "text": "8.2 Swiss Army Knife w R, czyli rstatix\nNiezwykłe możliwości i giętkość pakietu rstatix były już w tym tekście wychwalane i pokazywane. Tutaj jednak chciałbym powiedzieć o głównej zawartości rstatix czy funkcjach wykonujących testy statystyczne.\nR posiada dużą bibliotekę domyślnych funkcji do testów statystycznych, takich jak t.test czy cor.test. I one liczą dobrze, ale w wielu przypadkach są niewygodne. Nie ma się co dziwić, to są stare funkcje, swoją historią sięgające roku 2000, czyli początków R. Nie było wtedy dplyr, RStudio, potoków i całego dobrodziejstwa, które sprawia, że współczesny kod R średnio przypomina klasyczny kod, którego tu nie omawiam, ale który ciągle działa i buduje fundamenty tego języka. Dlatego właśnie wyniki tych testów są niewystandaryzowane, wymagają one niewygodnego wskazywania kolumn jako wektorów33 i mają argument data na drugim miejscu, przez co potoki zawsze wymagają używania ..\nrstatix jest odpowiedzią na te problemy. Poza tym, że dodaje mnóstwo przyjaznych funkcji od siebie, to uwspółcześnia stare funkcje, naprawiając w nich wszystko, co złe, m.in. poprawiając pracę z potokami. Dodatkowo wykorzystuje sprytną nomenklaturę, która ułatwia uczenie się – jeśli w klasycznym R funkcja nazywa się t.test, to w rstatix nazywa się t_test, cor.test zmienia się w cor_test i tak dalej. Jest to zgodne z ogólnym standarem tidyverse, żeby współczesne funkcje zawsze były pisane snake_case (więcej o formatowaniu kodu w podrozdziale 9). Większość funkcji pozwala też na wykonywanie wielu testów jednocześnie i radzi sobie ze zgrupowanymi danymi.\n\n# test korelacji Pearsona\ncor_test(diamonds, price, carat)\n\n#> # A tibble: 1 × 8\n#>   var1  var2    cor statistic     p conf.low conf.high method \n#>   <chr> <chr> <dbl>     <dbl> <dbl>    <dbl>     <dbl> <chr>  \n#> 1 price carat  0.92      551.     0    0.920     0.923 Pearson\n\n\n\n# test t-Studenta\nt_test(df_scream, screams ~ songwriter)\n\n#> # A tibble: 1 × 8\n#>   .y.     group1 group2     n1    n2 statistic    df      p\n#> * <chr>   <chr>  <chr>   <int> <int>     <dbl> <dbl>  <dbl>\n#> 1 screams Andy   Malcolm    34    34      2.70  62.2 0.0089\n\n\n\n# test korelacji na zgrupowanych danych\niris %>%\n    group_by(Species) %>%\n    cor_test(Sepal.Length, Sepal.Width)\n\n#> # A tibble: 3 × 9\n#>   Species    var1         var2       cor stati…¹        p conf.…² conf.…³ method\n#>   <fct>      <chr>        <chr>    <dbl>   <dbl>    <dbl>   <dbl>   <dbl> <chr> \n#> 1 setosa     Sepal.Length Sepal.W…  0.74    7.68 6.71e-10   0.585   0.846 Pears…\n#> 2 versicolor Sepal.Length Sepal.W…  0.53    4.28 8.77e- 5   0.290   0.702 Pears…\n#> 3 virginica  Sepal.Length Sepal.W…  0.46    3.56 8.43e- 4   0.205   0.653 Pears…\n#> # … with abbreviated variable names ¹​statistic, ²​conf.low, ³​conf.high\n\n\n\n# ANOVA\nanova_test(diamonds, price ~ cut + color + clarity)\n\n\n#> ANOVA Table (type II tests)\n#> \n#>    Effect DFn   DFd       F         p p<.05   ges\n#> 1     cut   4 53922  93.715  1.42e-79     * 0.007\n#> 2   color   6 53922 298.044  0.00e+00     * 0.032\n#> 3 clarity   7 53922 192.094 1.30e-282     * 0.024\n\n\n\n# testy post-hoc\ntukey_hsd(diamonds, price ~ cut + color + clarity)\n\n#> # A tibble: 59 × 9\n#>    term  group1    group2    null.value estim…¹ conf.…² conf.…³    p.adj p.adj…⁴\n#>  * <chr> <chr>     <chr>          <dbl>   <dbl>   <dbl>   <dbl>    <dbl> <chr>  \n#>  1 cut   Fair      Good               0  -430.   -732.   -128.  9.86e- 4 ***    \n#>  2 cut   Fair      Very Good          0  -377.   -656.    -97.9 2.13e- 3 **     \n#>  3 cut   Fair      Premium            0   225.    -51.5   503.  1.72e- 1 ns     \n#>  4 cut   Fair      Ideal              0  -901.  -1173.   -629.  6.68e-14 ****   \n#>  5 cut   Good      Very Good          0    52.9  -125.    231.  9.28e- 1 ns     \n#>  6 cut   Good      Premium            0   655.    481.    830.  4.22e-14 ****   \n#>  7 cut   Good      Ideal              0  -471.   -638.   -305.  1.4 e-13 ****   \n#>  8 cut   Very Good Premium            0   602.    471.    734.  0        ****   \n#>  9 cut   Very Good Ideal              0  -524.   -644.   -405.  0        ****   \n#> 10 cut   Premium   Ideal              0 -1127.  -1241.  -1012.  0        ****   \n#> # … with 49 more rows, and abbreviated variable names ¹​estimate, ²​conf.low,\n#> #   ³​conf.high, ⁴​p.adj.signif\n\n\n\n# wielkość efektu d Cohena\ncohens_d(df_scream, screams ~ songwriter)\n\n#> # A tibble: 1 × 7\n#>   .y.     group1 group2  effsize    n1    n2 magnitude\n#> * <chr>   <chr>  <chr>     <dbl> <int> <int> <ord>    \n#> 1 screams Andy   Malcolm   0.655    34    34 moderate\n\n\n\n# wielkość efektu eta^2\ndiamonds %>%\n    aov(price ~ cut + color + clarity, .) %>%\n    eta_squared()\n\n#>        cut      color    clarity \n#> 0.01286207 0.02971211 0.02329457\n\n\n\nDodatkowo rstatix dostarcza nam wygodą funkcję add_significance, która do obiektu z modelem zgodnym z broom dodaje kolumnę z gwiazdkami istotności wartości \\(p\\). Domyślne ustawienia są takie same jak dla funkcji cor_mark_significance34 i również można je modyfikować (por. 6.3).\n\nlm_price %>%\n    tidy() %>%\n    add_significance()\n\n#> # A tibble: 3 × 6\n#>   term         estimate std.error statistic  p.value p.value.signif\n#>   <chr>           <dbl>     <dbl>     <dbl>    <dbl> <chr>         \n#> 1 (Intercept)     -2.52    0.563      -4.48 1.48e- 5 ****          \n#> 2 Sepal.Length     1.78    0.0644     27.6  5.85e-60 ****          \n#> 3 Sepal.Width     -1.34    0.122     -10.9  9.43e-21 ****\n\n\n\nNie są to wszystkie funkcje, które oferuje rstatix i zachęcam do zerknięcia do repozytorium rstatix na GitHubie, gdzie autor umieścił długą listę dostępnych funkcji ze streszczeniem ich działania."
  },
  {
    "objectID": "posts/podstawy_R.html#styler",
    "href": "posts/podstawy_R.html#styler",
    "title": "Podstawy programowania w R",
    "section": "9.1 styler",
    "text": "9.1 styler\nPierwszy z tych narzędzi to styler, który sam poprawia wiele aspektów kodu, w tym wiele oczywistych błędów. Instalujemy go jak każdy inny pakiet (install.packages(\"styler\")). Po zainstalowaniu menu Addins wzbogaca się o kilka opcji, z których najważniejsza to style active file35. Podczas pracy uruchamiam to co jakiś czas i zazwyczaj znajdują się jakieś przeoczenia.\n\n\n\nRysunek 4: Przykład wykorzystania styler"
  },
  {
    "objectID": "posts/podstawy_R.html#lintr",
    "href": "posts/podstawy_R.html#lintr",
    "title": "Podstawy programowania w R",
    "section": "9.2 lintr",
    "text": "9.2 lintr\nstyler nie poprawia wszystkich błędów, bo byłoby to zbyt destrukcyjne. Na szczęście lintr może nam większość z nich wypomnieć. Dla każdego naszego projektu powinniśmy raz uruchomić komendę lintr::use_lintr(type = \"tidyverse\"). Spowoduje to wytworzenie w folderze pliku o nazwie .lintr. Zawiera on konfigurację lintr dla danego projektu. Za jego pomocą będziemy mogli tę konfigurację również zmieniać.\n\n\n\nRysunek 5: Przykład wykorzystania lintr\n\n\nZmiana dokonuje się przez wpisanie do pliku .lintr36 odpowiednich opcji. Szczegóły omawia dokumentacja (vignette(\"lintr\")), ale na pewno chciałbym wskazać jedną, której zmiana jest wręcz konieczna. Domyślnie lintr uznaje za za długie linie powyżej 80 znaków. To jest strasznie mało! Ja zazwyczaj ustawiam ten limit to na 120-150 znaków. Zmodyfikujmy to. Domyślna zawartość pliku .lintr wygląda tak:\n\nlinters: linters_with_defaults()\nencoding: \"UTF-8\"\n\nBy zmienić limit znaków, należy przekształcić go w ten sposób:\n\nlinters: linters_with_defaults(\n    line_length_linter(120)\n)\nencoding: \"UTF-8\"\n\nGdzie 120 to nowy limit znaków. W podobny sposób możemy zmienić wymagany styl nazywania obiektów. Standardem tidyverse jest snake_case, czyli nazywanie małymi literami, oddzielając słowa podkreślnikiem. Poza tym wyróżniamy jeszcze camelCase, czyli każde słowo składowe wielką literą poza pierwszym, PascalCase, czyli każde słowo wielką literą (choć czasem Pascal case też nazywa się camel case lub upper camel case), kebab-case, czyli oddzielanie słów myślnikiem i dot.notation, czyli oddzielanie słów kropką, żeby wymienić te bardziej znane. Żaden ze stylów nie jest zły, jednal jak już się zdecydujemy na jeden, powinniśmy się go trzymać.\nOba te pakiety, lintr i styler, są bardzo użyteczne, jednak ostatecznie nie zastępują ludzkiej decyzji. Nie wystarczy więc tylko mieć te pakiety, trzeba też – choć pobieżnie – znać same standardy."
  }
]