{
  "hash": "4b772aea53d545fa106595bc20644ca1",
  "result": {
    "markdown": "---\ntitle: \"Nie pisz (prawie) tego samego 100 razy\"\nsubtitle: \"Automatyzacja powtarzalnego tekstu za pomocą pythona\"\ndescription: \"Wspominałem już, że nie znoszę mechanicznej pracy. A królową wśród prac mechanicznych jest pisanie wiele razy prawie tego samego tekstu, który różni się tylko w szczegółach. Zdarza się to non-stop. Jednocześnie jest to ten rodzaj pracy, który można niskim kosztem zautomatyzować. W tym wpisie postaram się pokazać, jak można uniknąć góry bezsensownej pracy za pomocą prostych pętli i funkcji `print()` w pythonie.\"\ndate: \"2023-05-12\"\nimage: ./headers/powtarzalny-tekst.webp\ntwitter-card:\n    image: \"/headers/powtarzalny-tekst.jpeg\"\ncategories:\n    - Python\n    - Nauka\n    - Narzędzia\nfreeze: auto\n---\n\nW tym tekście opisuję generowanie nowego tekstu o określonej strukturze. Do wyszukiwania i zmieniania określone rzeczy w *istniejącym* już tekście służą wyrażenia regularne (RegEx), o których piszę w [tym](./posts/regex.qmd) tekście. Łącznie to bardzo proste, a jednocześnie bardzo potężne narzędzia, które pozwalają szybko i niskim kosztem odjąć dużo bezsensownej, mechanicznej pracy każdemu. Nie tylko naukowcom czy studentom, ale każdemu, kto pisze tekst na komputerze.\n\nTo, co tutaj opiszę, pierwszy raz poważnie wykorzystałem, gdy pomagałem swojej siostrze w pracy. Miała ona wydłużyć plik, w którym zapisywane były teksty, jakie mają pojawić się w live'ie tego dnia (siostra pracuje przy kanale na YouTube). Plik ten miał prostą strukturę.\n\n```         \nData:11.05.2023\nI\n\nII\n\nIII\n```\n\nGdy całość się kończyła, osoba odpowiedzialna dopisywała tę strukturę na ileś dni do przodu i tak co jakiś czas. Jest to ten rodzaj pracy, którego nie znoszę i który jest łatwy do zautomatyzowania. Można to zrobić z kilku powodów, z których najważniejszy jest ten -- plik miał **przewidywalną, z góry określoną strukturę**. Miał konkretne stałe elementy i konkretne elementy zmienne. Tutaj elementem zmiennym była data, która zmienia się w sposób przewidywalny[^1]. Mamy więc określony wzór, schemat, który tylko musimy wypełnić datami. To też zrobiłem i w ten sposób wygenerowałem dla siostry plik dla rok do przodu. Powiedziała w pracy, że miała trochę czasu, to dopisała więcej. Podobno się zdziwili.\n\n[^1]: Ciekawostką może być tutaj wczesny kalendarz hebrajski. Kalendarz hebrajski jest księżycowy, ma 12 miesięcy, ale w latach przestępnych dodawany jest 13. miesiąc -- adar szeni. Takich lat przestępnych musi przypaść 7 w ciągu 19 lat. Obecnie jest to skodyfikowane (zob. cykl Metona), ale początkowo nie wiadomo było, które konkretnie lata w cyklu mają być przestępne i było to *ad hoc* ustalane przez społeczność żydowską. Tym samym lata przestępne pojawiały się znienacka i data wcale nie zmieniała się w przewidywalny sposób. Miało to poważne konsekwencje dla daty Wielkanocy, bo zanim został ustalony stabilny wzór (Wielkanocy, nie lat przestępnych w kalendarzu żydowskim, to nadeszło później), nigdy nie wiadomo było, kiedy wypadnie 14 nisan, czyli rocznica śmierci Jezusa według kalendarza żydowskiego.\n\nTa cecha, tzn. przewidywalność jakiegoś tekstu, pozwala nam zautomatyzować jego pisanie. Nieważne, czy tym tekstem są oznaczenia kolumn (`MMPI_1`, `MMPI_2`, ..., `MMPI_567`), czy złożone zagnieżdżone struktury np. pytań i odpowiedzi w ankiecie, **jeśli tekst jest przewidywalny, da się go wygenerować**.\n\n# Python\n\nW tym tekście wykorzystamy sobie język programowania o nazwie python. Tego typu praca z tekstem jest tak podstawowa, że można ją wykonać w prawie każdym języku programowania (w tym w R za pomocą `paste()` czy `paste0()`), ale tutaj wykorzystamy pythona, bo to chyba najpopularniejszy język programowania w ogóle, drugi najpopularniejszy w statystyce, a przy tym jest to język ogólnego przeznaczenia. A także ma nazwę od Monty'ego Pythona, więc wiadomo, że warto. Specjalistą od pythona nie jestem, moim pierwszym językiem programowania jest R, ale co tam, żyje się raz.\n\nŻeby móc robić cokolwiek w pythonie, musimy zainstalować sobie interpreter [stąd](https://www.python.org/). Interpreter to coś w rodzaju programu, który potrafi czytać i wykonywać kod w danym języku. Można powiedzieć w pewnym uproszczeniu, że instalujemy sobie pythona. Koniecznie zaznaczcie w trakcie instalacji, żeby **dodać pythona do PATH**. Teoretycznie tyle wystarczy, ale żeby uprzyjemnić proces pisania, fajnie jest przygotować sobie jakieś IDE (program do programowania), np. [Visual Studio Code](https://code.visualstudio.com/) albo chociaż porządny edytor tekstu w stylu [Notepad++](https://notepad-plus-plus.org/).\n\nGdy to zrobimy, możemy dotrzeć do pythona na kilka sposobów. Podstawowy to wejście w terminal (w Windowsie PowerShell albo wiersz polecenia) i wpisanie tam `python`. Gdy potwierdzimy enterem, dostaniemy konsolę pythona, gdzie możemy wpisywać komendy. Drugi sposób, przez IDE, to stworzenie pliku z rozszerzeniem .py (np. „skrypt.py\" albo „znowu_dają_mi_bezsensowna_robote.py\") zapisywanie w nim naszych komend. Drugi sposób przyda się, gdy chcemy sobie komendy zachować na przyszłość albo piszemy coś bardziej skomplikowanego, na wiele linijek. IDE często mają specjalny guzik do uruchomienia takiego kodu[^2]. Możemy też w wierszu polecenia wpisać `python C:\\ścieżka\\do\\pliku.py`, np. `python \"C:\\Users\\Jakub\\Desktop\\RSES.py\"`. Ważne -- w „suchym\\\" wierszu polecenia, nie w konsoli pythona.\n\n[^2]: Instrukcję, jak uruchamiać takie pliki bezpośrednio w Notepad++, znajdziemy np. [tutaj](https://www.delftstack.com/howto/python/notepad++-run-python/).\n\n![Konsola pythona w PowerShell](ilustracje/powtarzalny-tekst/python-powershell.png)\n\n![Konsola pythona w konsoli w Linuxie](ilustracje/powtarzalny-tekst/python-w-konsoli.png)\n\n# `print()` i *f-strings*\n\nTeraz możemy pisać nasz kod w pythonie. Będę zakładał, że piszemy nasz kod w pliku, ale równie dobrze można to pisać na szybko w konsoli. Często tak robię, jak mam do wygenerowania prostą zbitkę i nie chce mi się tworzyć na to specjalnie pliku. W takim wypadku każdą linijkę kodu wpisujemy w konsolę osobno i osobno zatwierdzamy enterem. Zazwyczja pierwszym, co się pisze, gdy zaczyna się uczyć nowego języka, jest program, który wyświetla tekst „Hello world!\". W pythonie robimy to funkcją `print()`.\n\n::: {#303ce8d3 .cell execution_count=1}\n``` {.python .cell-code}\nprint(\"Hello world!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world!\n```\n:::\n:::\n\n\nFunkcja `print()` w większości wystarczy, żebyśmy uzyskali to, co chcemy dziś uzyskać. Wbrew pozorom, jeśli połączymy ją z pętlami, będzie ona potrafiła całkiem sporo. Funkcje w programowaniu zazwyczaj mają po sobie nawiasy, do których wrzucamy różne rzeczy, z którymi funkcja ma coś zrobić. Tak tutaj wrzucamy w te nawiasy tekst, który funkcja ma pokazać w konsoli. Dosłowny tekst zawsze piszemy w cudzysłowie.\n\nJeśli potrzebujemy, możemy po przecinku dorzucić argument `end`, który mówi, co funkcja ma dodać na koniec danego ciągu znaków. Domyślnie jest to nowa linia, którą w informatyce zapisujemy zazwyczaj `\\n`. Nie robimy rzeczywistej nowej linii! Na przykład możemy zmienić jedną pustą linię na dwie, trzy. Możemy też zamienić nową linię na spację, ale po co, to wyjaśnię później. Możemy też wymyślić coś całkiem szalonego, jeśli mamy taką potrzebę.\n\n::: {#e3366931 .cell execution_count=2}\n``` {.python .cell-code}\nprint(\"Hello world!\", end=\"\\n\\n-----\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world!\n\n-----\n\n```\n:::\n:::\n\n\nNabierze to więcej sensu, kiedy dojdziemy do pętli i będziemy wyświetlać wiele tekstów, jeden pod drugim. Podobnie więcej sensu nabierze coś, co omówimy teraz, czyli tzw. *f-strings*. W informatyce słowem *string* oznacza się dosłowny ciąg znaków. *f-strings* to sposób, jak do naszego ciągu znaków wrzucić wartość jakiejś *zmiennej*. Co to znaczy? Jak powiedziałem wyżej, tekst, który chcemy wygenerować, zawiera elementy stałe i elementy zmienne. Elementem zmiennym może być na przykład liczba. Jak połączyć elementy stałe ze zmiennymi? Właśnie za pomocą *f-string*. Zmienne definiujemy w pythonie za pomocą znaku `=`.\n\n::: {#11df761e .cell execution_count=3}\n``` {.python .cell-code}\ni = 23\n\nprint(f\"MMPI_{i}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMMPI_23\n```\n:::\n:::\n\n\nW kodzie powyżej najpierw przypisuję wartość 23 do zmiennej `i` (zmienne mogę nazywać jak chcę). Dzięki temu, od tego momentu, gdy napiszę `i`, python zrozumie to jako 23. Można spróbować tego w konsoli. Jeśli po zadeklarowaniu zmiennej wpiszemy w konsolę `i` i zatwierdzimy, zobaczymy liczbę 23. Jeśli piszę to w konsoli, a nie w pliku, to najpierw wpisuję `i = 23`, klikam enter i dopiero potem odpowiednią funkcję `print()`. Następnie do funkcji `print()` wrzucam tekst `\"MMPI_{i}\"`. Python wie, że zamiast `{i}` musi podstawić prawdziwą wartość zmiennej `i`, czyli w tym wypadku 23. Żeby to jednak wiedział, musimy przed samym ciągiem znaków dodać literkę `f`, jak *format*. Dlatego właśnie napisałem `f\"MMPI_{i}\"` i dlatego nazywa się to *f-string*. Jeśli chcielibyśmy w naszym tekście dodać dosłowne nawiasy klamrowe, np. uzyskać „{MMPI_23}\", takie nawiasy klamrowe piszemy podwójnie -- `{{` w *f-string* zmieni się w dosłowny znak `{`.\n\n::: {#f2a79488 .cell execution_count=4}\n``` {.python .cell-code}\ni = 23\n\nprint(f\"{{MMPI_{i}}}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{MMPI_23}\n```\n:::\n:::\n\n\nZawartość zmiennej `i` możemy w nawiasach klamrowych też modyfikować.\n\n::: {#309aa055 .cell execution_count=5}\n``` {.python .cell-code}\ni = 23\n\nprint(f\"MMPI_{i + 2}\")\n\nzawod = \"skrybą\"\nprint(f\"Jak to jest być {zawod.upper()}?\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMMPI_25\nJak to jest być SKRYBĄ?\n```\n:::\n:::\n\n\n# Pętle\n\nPętle to w językach programowania sposób, żeby wiele razy zrobić to samo albo prawie to samo. W (prawie) każdym języku programowania znajdziemy dwa rodzaje pętli -- `for` i `while`.\n\n## Pętla `for`\n\nPętla `for` jest najprostszym rodzajem pętli i tym, z czego będziemy stale korzystać. Omówmy sobie ją na przykładzie generowania nazw kolumn.\n\n::: {#3ea7cf53 .cell execution_count=6}\n``` {.python .cell-code}\nfor i in range(1, 11):\n    print(f\"MMPI_{i}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMMPI_1\nMMPI_2\nMMPI_3\nMMPI_4\nMMPI_5\nMMPI_6\nMMPI_7\nMMPI_8\nMMPI_9\nMMPI_10\n```\n:::\n:::\n\n\n`i` jest nazwą dla zmiennej, która po kolei przyjmie wartości od 1 do 10. Najpierw wszystko, co znajduje się w pętli, wykona się tak, jakby `i` miało wartość 1. Potem wykona się to znowu, ale z `i = 2` itd. To jest podstawowy sposób działania zmiennej `for`. Potem mamy słowo `in`, a za nim zbiór wartości, które `i` ma po kolei przyjmować. W tym wypadku tym zbiorem jest funkcja `range()`, która sama generuje nam liczby od 1 do 10.\n\nDlaczego jednak napisałem `range(1, 11)` a nie `range(1, 10)`? Python działa tutaj specyficznie. Wynika to z faktu, że w informatyce liczy się od 0, nie od 1. Jeśli do funkcji `range()` wrzucę tylko jedną liczbę, czyli na przykład `range(10)`, to dostanę 10 elementów. Ponieważ jednak pierwszy element to 0, to będą to liczby od 0 do 9. Mogę podać dwie liczby, żeby powiedzieć funkcji `range()`, od czego ma zacząć, ale wtedy muszę mieć w głowie, że skoro `range(0, 10)` oznacza 10 liczb od 0 do 9, to liczby od 1 do 10 muszę zapisać jako `range(1, 11)`. Innymi słowy koniec skali nie wlicza się do zakresu.\n\nJeśli piszemy to w konsoli, a nie w pliku, możemy zapisać taką pętlę w jednej linijce -- `for i in range(1, 11): print(f\"MMPI_{i}\")`. Możemy też zapisać samo `for i in range(1, 11):` (nie zapominając o dwukropku) i potwierdzić enterem. W obu wypadkach wyświetli nam się w konsoli wielokropek i będziemy mogli dopisywać kolejne komendy z pętli. Gdy będziemy usatysfakcjonowani, klikamy enter po raz kolejny, a pętla wykonuje się.\n\nTak jak wspomniałem, domyślnie `print()` wyrzuca do konsoli to, co tej funkcji podaliśmy, dodając na koniec nową linię. Możemy jednak chcieć, żeby nasze elementy pojawiły się po przecinku albo oddzielone spacjami (albo jedno i drugie) i wtedy możemy zmienić argument `end`.\n\n::: {#31ba347d .cell execution_count=7}\n``` {.python .cell-code}\nfor i in range(1, 11):\n    print(f\"MMPI_{i}\", end = \", \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMMPI_1, MMPI_2, MMPI_3, MMPI_4, MMPI_5, MMPI_6, MMPI_7, MMPI_8, MMPI_9, MMPI_10, \n```\n:::\n:::\n\n\nCo prawda po ostatnim elemencie też dostajemy przecinek i spację, ale to już możemy usunąć ręcznie. W pythonie też da się to zaprogramować, ale nie chcę za bardzo gmatwać.\n\n## Pętla `while`\n\nPętla `while` to bardziej podstawowy, prosty rodzaj pętli. Większość pętli `while` da się napisać w formie pętli `for`, dlatego nie będę się nad tym jakoś szczególnie rozwodził, ale warto wiedzieć, że coś takiego istnieje. Napiszmy przykład z poprzedniej sekcji w postaci pętli `while`.\n\n::: {#c5155d0a .cell execution_count=8}\n``` {.python .cell-code}\ni = 1\nwhile i <= 10:\n    print(f\"MMPI_{i}\")\n    i = i + 1  # ewentualnie i += 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMMPI_1\nMMPI_2\nMMPI_3\nMMPI_4\nMMPI_5\nMMPI_6\nMMPI_7\nMMPI_8\nMMPI_9\nMMPI_10\n```\n:::\n:::\n\n\nW pętli `while` potrzebujemy jakiejś wcześniej określonej zmiennej, w tym wypadku `i`. Pierwszą rzeczą, którą `while` robi, jest sprawdzenie, czy warunek jest prawdziwy. Prawdą jest, że 1 jest mniejsze lub równe 10, więc `while` puszcza wszystko, co znajduje się w środku pętli. Instrukcja `print()` jest identyczna. Kolejna linijka może wydawać się nieco tajemnicza. Służy ona powiększeniu `i` o 1. Matematycznie zapis `i = i + 1` może wydawać się dziwny, ale trzeba pamiętać, że `=` nie oznacza tutaj porównania (to się robi poprzez `==`), tylko przypisanie. Można więc tę komendę przeczytać „Niech `i` przyjmie wartość równą **aktualnej** wartości `i` plus jeden\". W skrócie możemy to zapisać jako `i += 1`. Po co to robimy? Bo w następnym kroku pętla `while` znów sprawdzi, czy warunek jest prawdziwy. Teraz `i = 2`, a 2 to ciągle mniej niż 10, więc pętla wykona się znów. Tak będzie robić aż do momentu, w którym warunek nie będzie prawdziwy, a wiec w tym wypadku aż `i` nie przyjmie wartości 11. Jeśli nie umieściłbym w kodzie linijki `i = i + 1`, warunek `i <= 10` byłby **zawsze** prawdziwy i pętla działałaby wiecznie. Czy raczej do wyczerpania pamięci.\n\n# Generowanie tekstu\n\nWeźmy sobie na warsztat bardziej złożony przykład. Niedawno musiałem generować bardzo skomplikowany tekst, który stał się częścią ankiety w [PsyToolKit](https://www.psytoolkit.org/). Jest to świetne narzędzie do prowadzenia ankiet i eksperymentów, głównie psychologicznych. Jego największą zaletą -- według mnie -- jest to, że zarówno ankiety, jak i eksperymenty mogą być pisane w postaci zwykłego tekstu[^3]. Pozwala to na olbrzymią giętkość, jaką zapewniają języki programowania, ale także daje duże możliwości automatyzacji. O PsyToolKit na pewno jeszcze w przyszłości napiszę.\n\n[^3]: Jest też *easy mode*, który przypomina generatory na stronach typu Formularze Google.\n\n## Ankieta w PsyToolKit\n\nPokażę teraz, jak sprawnie przerobić kwestionariusz na ankietę w PsyToolKit. Najsprawniej byłoby, co prawda, użyć programiku [PsyToolKit Questionnaire Formatter](https://github.com/jakub-jedrusiak/Psytoolkit-Questionnaire-Formatter), który opiera się na tym, co tutaj opisuję. Poznajmy ten mechanizm od kuchni, żeby w razie czego móc go dopasować do własnych, specyficznych celów, niekoniecznie związanych w ogóle z PsyToolKit.\n\nZałóżmy, że chcielibyśmy wykorzystać w naszym badaniu kwestionariusz samooceny Rosenberga (1965). Musimy go w takim razie zapisać tak, jak PsyToolKit każe nam formatować pytania do ankiety. Struktura pytania w PsyToolKit wygląda tak:\n\n\n```{YAML}\nl: RSES_1\nt: radio\nq: I feel that I am a person of worth, at least on an equal plane with others.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n```\n\n\nPo pierwsze mamy `l`, czyli *label*. Posłuży nam to jako wewnętrzna „nazwa\" pozycji testowej i nagłówek kolumny w bazie danych. Dalej mamy `t`, czyli *type*, gdzie `radio` oznacza pytanie jednokrotnego wyboru. Inne typy znajdziemy w [dokumentacji](https://www.psytoolkit.org/doc3.4.4/online-survey-syntax.html#questiontypes). Następnie mamy `q`, czyli *question*, właściwa treść pozycji testowej i pod nią odpowiedzi wypisane od myślników. Możemy tu dodawać inne rzeczy (np. `o: random`, żeby kolejność odpowiedzi była losowa), ale załóżmy, że na ten moment tyle nam wystarczy.\n\nPo pierwsze spróbujmy zidentyfikować, co w naszym schemacie jest stałe i co się zmienia. Tutaj zmieniają się dwie rzeczy -- treść pozycji testowej i numerek przy `RSES`. Cała reszta jest identyczna dla każdej pozycji testowej.\n\nSkoro musimy mieć w naszych pytaniach treść pozycji testowej, musimy nasz kwestionariusz wkleić do skryptu. Zapiszemy go w postaci listy.\n\n::: {#fa7c7b63 .cell execution_count=9}\n``` {.python .cell-code}\nRSES = [\n    \"I feel that I am a person of worth, at least on an equal plane with others.\",\n    \"I feel that I have a number of good qualities.\",\n    \"All in all, I am inclined to feel that I am a failure.\",\n    \"I am able to do things as well as most other people.\",\n    \"I feel I do not have much to be proud of.\",\n    \"I take a positive attitude toward myself.\",\n    \"On the whole, I am satisfied with myself.\",\n    \"I wish I could have more respect for myself.\",\n    \"I certainly feel useless at times.\",\n    \"At times I think I am no good at all.\"\n]\n```\n:::\n\n\nCała lista jest nawiasach kwadratowych, każdy item jest w cudzysłowie, zaś itemy rozdzielone są przecinkami. Całą listę zapisałem do zmiennej o nazwie `RSES`. Teraz możemy powiedzieć pythonowi, żeby zrobił całą serię pytań w stylu PsyToolKit, gdzie po `q` za każdym razem wstawi jedną z pozycji testowych.\n\n::: {#89edd139 .cell execution_count=10}\n``` {.python .cell-code}\nfor item in RSES:\n    print(\"l: RSES_1\")\n    print(\"t: radio\")\n    print(f\"q: {item}\")\n    print(\"- Strongly Agree\\n- Agree\\n- Disagree\\n- Strongly Disagree\")\n    print() # pusta linijka\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nl: RSES_1\nt: radio\nq: I feel that I am a person of worth, at least on an equal plane with others.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_1\nt: radio\nq: I feel that I have a number of good qualities.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_1\nt: radio\nq: All in all, I am inclined to feel that I am a failure.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_1\nt: radio\nq: I am able to do things as well as most other people.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_1\nt: radio\nq: I feel I do not have much to be proud of.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_1\nt: radio\nq: I take a positive attitude toward myself.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_1\nt: radio\nq: On the whole, I am satisfied with myself.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_1\nt: radio\nq: I wish I could have more respect for myself.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_1\nt: radio\nq: I certainly feel useless at times.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_1\nt: radio\nq: At times I think I am no good at all.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\n```\n:::\n:::\n\n\nJak widzimy, nasza zmienna w pętli (1) nie musi nazywać się `i` oraz (2) nie musi być liczbą. Jak widzimy, możemy wykonać pętlę za każdym razem przypisując do zmiennej kolejny tekst z listy. Każdą linijkę możemy zapisać w osobnej komendzie `print()` lub też całość wpisać w jedną komendę, zaznaczając nowe linijki za pomocą `\\n`. Tak zrobiłem w przedostatniej linijce.\n\nNasz wynik ma jednak problem -- każde pytanie nazywa się `RSES_1`. Liczba po `RSES_` musi się zmieniać. Tym razem jest to trudniejsze niż wcześniej, bo `item` nie jest tutaj liczbą, tylko treścią pytania, więc nie możemy zapisać `RSES_{item}`. Z pomocą przychodzi nam jednak funkcja `enumerate()`. Pozwala ona przerobić listę na tzw. krotki (ang. *tuples*, tutaj *2-tuples* czyli dwukrotki). Każda taka dwukrotka zawiera numer pozycji na liście (licząc od 0) oraz samą pozycję. Numer jest pierwszy, więc dostaniemy się do niego pisząc `item[0]`. Jeśli chcemy dostać treść pozycji testowej, zapiszemy `item[1]`. Całość wyglądałaby więc tak:\n\n::: {#883d3fee .cell execution_count=11}\n``` {.python .cell-code}\nfor item in enumerate(RSES):\n    print(f\"l: RSES_{item[0] + 1}\")\n    print(\"t: radio\")\n    print(f\"q: {item[1]}\")\n    print(\"- Strongly Agree\\n- Agree\\n- Disagree\\n- Strongly Disagree\")\n    print() # pusta linijka\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nl: RSES_1\nt: radio\nq: I feel that I am a person of worth, at least on an equal plane with others.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_2\nt: radio\nq: I feel that I have a number of good qualities.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_3\nt: radio\nq: All in all, I am inclined to feel that I am a failure.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_4\nt: radio\nq: I am able to do things as well as most other people.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_5\nt: radio\nq: I feel I do not have much to be proud of.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_6\nt: radio\nq: I take a positive attitude toward myself.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_7\nt: radio\nq: On the whole, I am satisfied with myself.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_8\nt: radio\nq: I wish I could have more respect for myself.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_9\nt: radio\nq: I certainly feel useless at times.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\nl: RSES_10\nt: radio\nq: At times I think I am no good at all.\n- Strongly Agree\n- Agree\n- Disagree\n- Strongly Disagree\n\n```\n:::\n:::\n\n\nZwróćmy uwagę, że w pierwszym `print()` napisałem `item[0] + 1`. `item[0]` to numer pozycji testowej, ale czemu `+ 1`? Bo liczenie w informatyce zaczyna się od 0 (co ciągle powoduje problemy u całej reszty ludzkości), więc jeśli chcę mieć numerację od 1 do 10 zamiast od 0 do 9, to do każdego numeru muszę dodać 1.\n\n## Zapisywanie do pliku\n\nWynik działania takiej funkcji możemy od razu zapisać do pliku tekstowego za pomocą specjalnego operatora `>` w PowerShell[^4]. Da się to zrobić nie wychodząc z pythona, ale to niepotrzebnie skomplikowane. Druga opcja to po prostu skopiować wygenerowany tekst z konsoli. Jeśli ktoś rzadko z niej korzysta, to ostrzegam, że do kopiowania i wklejania zamiast Ctrl+C i Ctrl+V w konsoli używamy Ctrl+Shift+C i Ctrl+Shift+V. Głównie dlatego, że Ctrl+C ma tam inną funkcję -- przerywa aktualnie wykonywane zadanie. Ten sposób może jednak nie być odpowiedni, jeśli tekst jest długi, bo wtedy konsola może zjeść nam kilka (lub bardzo dużo) linijek. Jak więc wykorzystać `>`? W PowerShell (nie w konsoli pythona! w zwykłym, gołym PowerShell) wpisujemy coś takiego:\n\n[^4]: Sam korzystam z linuksa (*I use arch, BTW*), ale nie łudzę się -- większość osób, które to czytają, to windowsiarze. W linuksie operator `>` działa identycznie.\n\n```         \npython \"C:\\ścieżka\\do\\skryptu.py\" > \"C:\\ścieżka\\do\\pliku.txt\"\n```\n\nJako podpowiedź mogę podrzucić, że Windows 11 pozwala kopiować ścieżki po kliknięciu na plik prawym przyciskiem myszy. W Windowsie 10 też możemy sobie w ten sposób ułatwić życie, tylko klikając prawy przycisk myszy musimy jeszcze przytrzymać shift. Ostateczna komenda mogłaby więc wyglądać tak:\n\n```         \npython \"C:\\Users\\Jakub\\Desktop\\RSES.py\" > \"C:\\Users\\Jakub\\Desktop\\RSES.txt\"\n```\n\nPowoduje to zapisanie tego, co normalnie skrypt wydrukowałby w konsoli, w pliku `RSES.txt` na pulpicie. Rozszerzenie `.txt` jest konieczne. Oczywiście jeśli Twoja nazwa użytkownika to Jakub. Niestety wpisywanie własnych ścieżek jest konieczne.\n\n## Daty\n\nWróćmy do pierwotnego przykładu z plikiem mojej siostry. Jest to przykład o tyle specyficzny, że zmiennym elementem jest tam data. Daty zmieniają się przewidywalne, ale potrzebują specjalnych funkcji, które ogarną takie rzeczy jak to, że różne miesiące mają różną liczbę dni, istnieją lata przestępne itd. Kiedy rzeczywiście miałem ten problem, użyłem funkcji `date` w Linuksie, która sama z siebie pozwala na robienie takich rzeczy. Większość osób (niestety) nie korzysta z linuksa, dlatego na potrzeby tego wpisu zaadaptuję to rozwiązanie do pythona. Albo chociaż spróbuję.\n\nŻeby operować na datach, musimy na szczycie skryptu (lub najpierw w konsoli) zapisać:\n\n::: {#99e65b4d .cell execution_count=12}\n``` {.python .cell-code}\nimport datetime\n```\n:::\n\n\nZaładuje to pakiet `datetime` pozwalający operować na datach. Robimy to tylko raz na daną sesję, czyli jak raz załadujemy ten pakiet, możemy z niego korzystać dopóty, dopóki nie wyjdziemy z pythona. Jeśli chcemy dostać się do funkcji z pakietu `datetime`, musimy zapisać je z „przedrostkiem\\\" `datetime.`, jak zobaczymy za chwilę.\n\nPrzypomnijmy strukturę pliku, który chcemy stworzyć:\n\n```         \nData:11.05.2023\nI\n\nII\n\nIII\n```\n\nPo pierwsze musimy ustalić, od jakiej daty chcemy zacząć. Możemy wykorzystać dzisiejszą datę wpisując `datetime.date.today()`. Możemy też wybrać datę początkową arbitralnie, używając czegoś w rodzaju `datetime.date(2023, 5, 11)`. Data jest w kolejności ISO 8601, czyli rok, miesiąc, dzień.\n\nPo drugie będziemy musieli dodawać do naszej daty dni. Robimy to funkcją `datetime.timedelta(days = 1)`. W tej formie do naszej daty dodamy jeden dzień. Takie coś rzeczywiście do daty dodajemy, czyli piszemy na przykład `datetime.date(2023, 5, 11) + datetime.timedelta(days = 1)`. Wynikiem będzie tutaj 12 maja 2023 roku.\n\nPo trzecie nasza data musi być w określonym formacie, w tym wypadku DD.MM.RRRR. Domyślnie daty wyświetlają się w formacie ISO 8601, czyli RRRR-MM-DD. Formatować daty można metodą `strftime()`. Metody to szczególny rodzaj funkcji, który wykorzystujemy tak, że doklejamy je po kropce do nazwy naszego obiektu np. z datą. Najlepiej będzie to widać w przykładzie. Do samej metody wrzucamy zakodowany format, w jakim datę chcemy uzyskać. Wykorzystamy tutaj specjalne kody, których listę możemy znaleźć [tutaj](https://www.w3schools.com/python/gloss_python_date_format_codes.asp). Potrzebny nam format zakodujemy jako `\"%d.%m.%Y\"`.\n\nZbierając to wszystko do kupy uzyskujemy coś takiego:\n\n::: {#81d1eda7 .cell execution_count=13}\n``` {.python .cell-code}\nimport datetime\n\nstart_date = datetime.date(2023, 5, 11)\n\nfor i in range(7):\n    date = start_date + datetime.timedelta(days = i)\n    date_formatted = date.strftime(\"%d.%m.%Y\")\n    print(f\"Data:{date_formatted}\")\n    print(\"I\\n\\nII\\n\\nIII\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData:11.05.2023\nI\n\nII\n\nIII\n\n\nData:12.05.2023\nI\n\nII\n\nIII\n\n\nData:13.05.2023\nI\n\nII\n\nIII\n\n\nData:14.05.2023\nI\n\nII\n\nIII\n\n\nData:15.05.2023\nI\n\nII\n\nIII\n\n\nData:16.05.2023\nI\n\nII\n\nIII\n\n\nData:17.05.2023\nI\n\nII\n\nIII\n\n\n```\n:::\n:::\n\n\nWykorzystałem tutaj kilka zmiennych, które nazwałem `start_date`, `date` i `date_formatted`. Nazwy zmiennych mogą być jakiekolwiek. Wybrałem takie, żeby to było czytelne. Jak to w programowaniu, możemy to napisać na parę sposobów. Dla przykładu tutaj datę już sformatowaną zapisałem w osobnej zmiennej, ale mógłbym też napisać:\n\n::: {#66049627 .cell execution_count=14}\n``` {.python .cell-code}\nimport datetime\n\nstart_date = datetime.date(2023, 5, 11)\n\nfor i in range(7):\n    date = start_date + datetime.timedelta(days = i)\n    print(f\"Data:{date.strftime('%d.%m.%Y')}\")\n    print(\"I\\n\\nII\\n\\nIII\\n\\n\")\n```\n:::\n\n\n...albo w ogóle wszystko zapisać już wewnątrz pętli:\n\n::: {#5ac6b01a .cell execution_count=15}\n``` {.python .cell-code}\nimport datetime\n\nfor i in range(7):\n    date = datetime.date(2023, 5, 11) + datetime.timedelta(days = i)\n    print(f\"Data:{date.strftime('%d.%m.%Y')}\")\n    print(\"I\\n\\nII\\n\\nIII\\n\\n\")\n```\n:::\n\n\n...i to też zadziała. Zależy co uznajemy za bardziej czytelne. Zwróćmy uwagę, że piszemy `days = i`, a nie `days = {i}`. Nawiasy klamrowe potrzebne są tylko w *f-strings*. Pamiętamy jeszcze, że domyślnie `range(7)` generuje liczby od 0 do 6, więc na początku `timedelta()` dodaje 0 dni, potem 1 dzień, 2 dni i aż do 6 dni. Tym razem jest to nam na rękę, bo dzięki temu pierwszą datą jest wybrana przez nas data, a nie dzień później. Uzyskujemy więc tydzień rozpiski. Siła automatyzacji polega na tym, że mając te 4 linijki kodu, taki sam nakład pracy potrzebny jest do zrobienia takiej rozpiski dla tygodnia, miesiąca czy 30 lat[^5].\n\n[^5]: Sprawdziłem, taki skrypt generuje u mnie 30 lat rozpiski w 47 milisekund (!), a gotowy plik ma 310 kB.\n\n# Podsumowanie\n\nOpanowanie automatyzacji wymaga sporo praktyki i początkowo może zajmować więcej czasu, niż wykonanie jakiejś pracy ręcznie. Jednak z doświadczeniem przychodzi efektywność. Już opanowanie podstaw sprawia, że często możemy oszczędzić sobie wielu, wielu godzin pracy, a jeśli poświęcimy na to trochę więcej, możemy wydłużyć sobie życie o naprawdę sporo wolnego. Podsumujmy to, czego się dziś nauczyliśmy.\n\n1.  Możemy automatyzować generowanie tekstu, w którym jakaś część podlega przewidywalnym zmianom.\n\n2.  Za wyświetlanie tekstu odpowiada funkcja `print()`.\n\n3.  Możemy powtórzyć jakiś tekst określoną liczbę razy i zaplanować ewentualne zmiany w tym tekście za pomocą pętli `for`.\n\n4.  Możemy podstawić do ciągu znaków wartości zmiennych za pomocą *f-strings*, np. `f\"MMPI_{i}\"`.\n\n5.  Ciągi liczb do pętli generujemy funkcją `range()`, przy czym domyślnie liczy ona od 0. Możemy do niej wrzucić jedną liczbę albo koniec i początek ciągu, który chcemy uzyskać. Koniec domyślnie nie wlicza się do ciągu.\n\n6.  Daty to szczególne wartości, którymi zawiadują funkcje z pakietu `datetime`.\n\n7.  Zmienne z datami tworzymy za pomocą `date()`, różnice w datach liczymy za pośrednictwem `timedelta()`, a także możemy formatować daty poprzez metodę `strftime()`.\n\n8.  Wyniki działania takich skryptów zapisujemy do plików operatorem `>`. Robimy to w konsoli systemowej (np. PowerShell), a nie w konsoli pythona.\n\n",
    "supporting": [
      "powtarzalny-tekst_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}