{
  "hash": "ed76ac0af7a9455a46d83c67625dfdd6",
  "result": {
    "markdown": "---\ntitle: \"Kombinatoryka\"\ndescription: \"Ile wykonano uścisków dłoni w pomieszczeniu, w którym jest 100 osób? Omawiam tutaj trzy podstawowe pojęcia kombinatoryki -- wariacje, kombinacje i permutacje.\"\ndate: \"2023-02-17\"\nimage: ./headers/kombinatoryka.webp\ncategories:\n    - Matematyka\nfreeze: true\neditor: source\n---\n\n::: {#cell-setup #setup .cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Pokaż kod\"}\nimport itertools\nimport pandas as pd\n\ndef variations(iterable, subset_length):\n    '''Kombinacje w wierszach, permutacje w kolumnach, wszystko razem to wariacje'''\n    df = pd.DataFrame([list(itertools.permutations(x)) for x in itertools.combinations(iterable, subset_length)])\n    df.index = range(1, len(df.index) + 1)\n    df.columns = range(1, len(df.columns) + 1)\n    return df\n```\n:::\n\n\nKombinatoryka to część matematyki zajmująca się modyfikacjami zbiorów. Weźmy sobie zbiór 5 pierwszych liter alfabetu i nazwijmy go Z jak zbiór. Zacznę od skomplikowanie brzmiącego wstępu, a potem wyjaśnię to na przykładach.\n\n::: {#da56fd35 .cell execution_count=2}\n``` {.python .cell-code}\nZ = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n```\n:::\n\n\nZ tym zbiorem mogę zrobić kilka rzeczy. Mogę go zacząć rozbijać na mniejsze zbiory. Mogę zacząć przestawiać w nim elementy. Mogę najpierw rozbić go na mniejsze zbiory, a potem przestawiać elementy w tych małych zbiorach. Każda z tych akcji ma swoją własną nazwę. Jeżeli mówię, że:\n\n- **permutuję** – zmieniam kolejność elementów;\n- **kombinuję** – rozbijam swój zbiór na mniejsze zbiory (*combine* – łączyć; łączę stare elementy na nowo).\n\nKiedy robię permutacje, z góry zakładam, że kolejność ma znaczenie. Jest wiele sytuacji, w których kolejność ma znaczenie, ale są też sytuacje, w których liczy się tylko to, *jakie* mam elementy, a nie *w jakiej są kolejności*. Dla przykładu nieważne, czy w losowaniu Lotto wyciągnięto 2, 5, 7 czy 7, 5, 2 – jeśli mamy te liczby na swoim kuponie, możemy dostać nagrodę. Jeśli kolejność ma znaczenie, mówimy o wariacjach, a jeśli znaczenia nie ma, mówimy o kombinacjach.\n\nPrzed chwilą mówiłem, że zmiana kolejności to permutacja, a potem nagle używam słowa wariacja. Istnieje pomiędzy nimi pewna różnica, polegająca na tym, czy zmieniam kolejność w całym naszym zbiorze, czy wcześniej rozbijam go na mniejsze zbiory. Słowem *permutacja* określamy zmiany kolejności w całym zbiorze, zaś o *wariacjach* mówimy wtedy, gdy przed zmianą kolejności rozbijamy nasz zbiór na mniejsze zbiory.\n\n# Permutacje\n\nOmówmy to na przykładzie naszego zbioru liter od A do E. Permutacja tego zbioru będzie wyglądała tak:\n\n::: {#b43332ce .cell execution_count=3}\n``` {.python .cell-code}\npd.DataFrame(itertools.permutations(Z))\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>B</td>\n      <td>C</td>\n      <td>D</td>\n      <td>E</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A</td>\n      <td>B</td>\n      <td>C</td>\n      <td>E</td>\n      <td>D</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A</td>\n      <td>B</td>\n      <td>D</td>\n      <td>C</td>\n      <td>E</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A</td>\n      <td>B</td>\n      <td>D</td>\n      <td>E</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A</td>\n      <td>B</td>\n      <td>E</td>\n      <td>C</td>\n      <td>D</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>E</td>\n      <td>D</td>\n      <td>A</td>\n      <td>C</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>116</th>\n      <td>E</td>\n      <td>D</td>\n      <td>B</td>\n      <td>A</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>117</th>\n      <td>E</td>\n      <td>D</td>\n      <td>B</td>\n      <td>C</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>118</th>\n      <td>E</td>\n      <td>D</td>\n      <td>C</td>\n      <td>A</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>119</th>\n      <td>E</td>\n      <td>D</td>\n      <td>C</td>\n      <td>B</td>\n      <td>A</td>\n    </tr>\n  </tbody>\n</table>\n<p>120 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\nZe zbioru 5 liter możemy zatem wytworzyć 120 zbiorów, każdy z inną kolejnością liter. Policzyć jest to dość łatwo. Mamy 5 miejsc i 5 liter, które możemy tam umieścić: $P_5 = \\_ \\times \\_ \\times \\_ \\times \\_ \\times \\_$. Na pierwszym miejscu możemy umieścić 5 liter: $P_5 = 5 \\times \\_ \\times \\_ \\times \\_ \\times \\_$. Ponieważ jedną literę już zużyliśmy, do drugiego miejsca możemy wsadzić tylko jedną z 4 pozostałych liter: $P_5 = 5 \\times 4 \\times \\_ \\times \\_ \\times \\_$. Uzupełniając nasz schemacik dalej otrzymujemy równanie $P_5 = 5\\times 4 \\times 3 \\times 2 \\times 1 = 5! = 120$. 5! (*czyt.* pięć silnia) to skrótowy zapis mnożenia liczb od 1 do 5. Powstaje nam z tego wzór na liczbę możliwych permutacji *n* elementów:\n\n$$\nP_n = n!\n$$\n\n# Wariacje\n\nCiekawie zaczyna się robić, gdy przed zmianą kolejności chcemy jeszcze rozbić nasz zbiór na mniejsze zbiory. Dla przykładu możemy sobie wyobrazić, że chcemy z naszego zbioru 5 liter wybrać wszystkie możliwe zbiory po 2 litery, np. AB, AC, AD itd. Mamy do dyspozycji mniej miejsca, niż liter w zbiorze. Liczenie czegoś takiego jest analogiczne. Na pierwszym miejscu może pojawić się 1 z 5 liter, na drugim tylko 1 z 4: $V^2_5 = 5 \\times 4 = 20$. Powinno więc istnieć 20 takich zbiorów. Wypiszmy je wszystkie.\n\n::: {#9d1d158a .cell execution_count=4}\n``` {.python .cell-code}\nvariations(Z, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>(A, B)</td>\n      <td>(B, A)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>(A, C)</td>\n      <td>(C, A)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>(A, D)</td>\n      <td>(D, A)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>(A, E)</td>\n      <td>(E, A)</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>(B, C)</td>\n      <td>(C, B)</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>(B, D)</td>\n      <td>(D, B)</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>(B, E)</td>\n      <td>(E, B)</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>(C, D)</td>\n      <td>(D, C)</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>(C, E)</td>\n      <td>(E, C)</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>(D, E)</td>\n      <td>(E, D)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nŻeby wyprowadzić wzór na takie wariacje, musimy zwrócić uwagę na fakt, że nasze obliczenie $5 \\times 4$ wygląda jak kawałek silni. Brakuje tylko $3 \\times 2 \\times 1$. Moglibyśmy więc zapisać to w taki sposób:\n\n$$\nV^2_5 = 5 \\times 4 = \\frac{5 \\times 4 \\times 3 \\times 2 \\times 1}{3 \\times 2 \\times 1} = \\frac{5!}{3!}\n$$\n\nW taki sposób $3 \\times 2 \\times 1$ skróci się i zostanie tylko $5 \\times 4$. Jeśli mielibyśmy 3 miejsca, chcielibyśmy uzyskać $5 \\times 4 \\times 3$, a więc w mianowniku zapisalibyśmy tylko $2 \\times 1$, czyli ostatecznie $\\frac{5!}{2!}$. Powstaje nam z tego następujący wzór na liczbę wariacji *n* elementów po *k* elementów (czyli rozbicie w podzbiory po *k* elementów):\n\n$$\nV^k_n = \\frac{n!}{(n-k)!}\n$$\n\nSpróbujmy wypisać wariacje naszego zbioru po 3 elementy.\n\n::: {#800fa1f7 .cell execution_count=5}\n``` {.python .cell-code}\nvariations(Z, 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>(A, B, C)</td>\n      <td>(A, C, B)</td>\n      <td>(B, A, C)</td>\n      <td>(B, C, A)</td>\n      <td>(C, A, B)</td>\n      <td>(C, B, A)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>(A, B, D)</td>\n      <td>(A, D, B)</td>\n      <td>(B, A, D)</td>\n      <td>(B, D, A)</td>\n      <td>(D, A, B)</td>\n      <td>(D, B, A)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>(A, B, E)</td>\n      <td>(A, E, B)</td>\n      <td>(B, A, E)</td>\n      <td>(B, E, A)</td>\n      <td>(E, A, B)</td>\n      <td>(E, B, A)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>(A, C, D)</td>\n      <td>(A, D, C)</td>\n      <td>(C, A, D)</td>\n      <td>(C, D, A)</td>\n      <td>(D, A, C)</td>\n      <td>(D, C, A)</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>(A, C, E)</td>\n      <td>(A, E, C)</td>\n      <td>(C, A, E)</td>\n      <td>(C, E, A)</td>\n      <td>(E, A, C)</td>\n      <td>(E, C, A)</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>(A, D, E)</td>\n      <td>(A, E, D)</td>\n      <td>(D, A, E)</td>\n      <td>(D, E, A)</td>\n      <td>(E, A, D)</td>\n      <td>(E, D, A)</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>(B, C, D)</td>\n      <td>(B, D, C)</td>\n      <td>(C, B, D)</td>\n      <td>(C, D, B)</td>\n      <td>(D, B, C)</td>\n      <td>(D, C, B)</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>(B, C, E)</td>\n      <td>(B, E, C)</td>\n      <td>(C, B, E)</td>\n      <td>(C, E, B)</td>\n      <td>(E, B, C)</td>\n      <td>(E, C, B)</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>(B, D, E)</td>\n      <td>(B, E, D)</td>\n      <td>(D, B, E)</td>\n      <td>(D, E, B)</td>\n      <td>(E, B, D)</td>\n      <td>(E, D, B)</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>(C, D, E)</td>\n      <td>(C, E, D)</td>\n      <td>(D, C, E)</td>\n      <td>(D, E, C)</td>\n      <td>(E, C, D)</td>\n      <td>(E, D, C)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTabela jest bardziej rozbudowana, ale wszystko zgadza się z naszymi poprzednimi wnioskami:\n\n$$\n\\displaylines{\nV^3_5 = \\frac{5!}{(5-3)!} = \\frac{5!}{2!} = \\\\\n= \\frac{5 \\times 4 \\times 3 \\times 2 \\times 1}{2 \\times 1} = \\\\\n= 5 \\times 4 \\times 3 = 20 \\times 3 = 60\n}\n$$\n\nCzyli wariacji po 3 elementy jest w naszym przykładzie 3 razy więcej, niż wariacji po 2 elementy.\n\n# Kombinacje\n\nMożemy zwrócić uwagę, że tabela powyżej ma ściśle określoną strukturę. W pierwszym wierszu wszystkie podzbiory składają się z literek A, B i C ułożonych na różne sposoby. Można więc powiedzieć, że podzbiory w każdym wierszu są dla siebie *permutacjami*, bo składają się z tych samych elementów, różnią się tylko kolejnością. Każda kolumna zawiera unikalne zestawy literek. Widzimy więc, że ze zbioru 5 literek możemy wybrać 10 różnych zestawów literek, a w każdym z tych zestawów można ułożyć literki na 6 sposobów, co daje łącznie 60 wariacji. Wariacje możemy więc uzyskać tak, że weźmiemy wszystkie unikalne mniejsze zestawy literek, a potem rozpiszemy permutacje każdego z tych zestawów. Takie unikalne zestawy literek, bez zwracania uwagi na ich kolejność, to *kombinacje*. W tabeli każdy wiersz to pełny zestaw kombinacji. Wynika nam z tego inny wzór na liczbę wariacji:\n\n$$\nV^k_n = C^k_n \\times P_k\n$$\n\nSą to w rzeczywistości wymiary naszej tabeli. Liczba kombinacji (tj. unikalnych zestawów) to liczba wierszy, a liczba permutacji to liczba kolumn. Tabela powyżej ma wymiary $10 \\times 6$, bo mamy 10 unikalnych zestawów po 3 elementy i każdy taki zestaw da się ułożyć na 6 różnych sposobów, co ostatecznie daje 60 komórek.\n\nŻeby wyprowadzić wzór na liczbę kombinacji, możemy wykorzystać fakt, że wiemy, jak się liczy liczbę wariacji i permutacji. W powyższej tabeli mamy 60 wariacji, a każda kombinacja ma 6 możliwych permutacji. Żeby więc pozbyć się informacji o permutacjach, musimy podzielić 60 wariacji na 6. Podstawiając do wzoru:\n\n$$\n\\displaylines{\nV^3_5 = C^3_5 \\times P_3 \\\\\n60 = C^3_5 \\times 6\\ |\\div 6 \\\\\nC^3_5 = \\frac{60}{6} = 10\n}\n$$\n\nCzyli jeśli mamy tabelę z 6 kolumnami i ilomaś wierszami, która ma 60 komórek, to wierszy musi być 10.\n\nMożemy do naszego nowego wzoru podstawić wzory na liczbę wariacji i permutacji i w ten sposób uzyskać ogólny wzór na liczbę kombinacji:\n\n$$\n\\displaylines{\nV^k_n = C^k_n \\times P_k \\\\\n\\frac{n!}{(n-k)!} = C^k_n \\times k! \\ |\\div k! \\\\\nC^k_n = \\frac{\\frac{n!}{(n-k)!}}{k!} = \\frac{n!}{k!(n-k)!} = \\binom{n}{k}\n}\n$$\n\nWzór ten doczekał się nawet własnego symbolu zwanego dwumianem Newtona $\\binom{n}{k}$ (*czyt.* en nad ka). Dla przykładu liczba kombinacji 5 elementów po 3 elementy oznacza się jako 5 nad 3 i liczy tak:\n\n$$\n\\displaylines{\n\\binom{5}{3} = \\frac{5!}{3!(5-3)!} = \\\\\n= \\frac{5!}{3!2!} = \\frac{5 \\times 4 \\times 3 \\times 2 \\times 1}{(3 \\times 2 \\times 1) \\times (2 \\times 1)} = \\\\\n= 10\n}\n$$\n\n# Powtórzenia\n\nDo tej pory omówiliśmy wariacje i kombinacje bez powtórzeń. Innymi słowy litera raz użyta nie mogła zostać użyta ponownie. Spotykaliśmy zbiory ABC, ale nie spotkaliśmy zbioru AAA. Wariacje i kombinacje mogą pozwalać na takie powtórzenia. Wariacje możemy policzyć jak zawsze kreskami. W zbiorze Z mamy 5 liter i chcemy zrobić z niego podzbiory po 2 elementy ze zwracaniem (czyli po wylosowaniu wraca do puli, czyli z powtórzeniami). Na pierwszym miejscu może być 5 liter, ale na drugim miejscu także może być 5 liter, bo litery się nie zużywają. Wychodzi nam więc takie działanie:\n\n$$\n\\bar{V}^2_5 = 5 \\times 5 = 5^2 = 25\n$$\n\nWychodzi nam z tego prosty wzór na liczbę wariacji *n* elementów po *k* elementów z powtórzeniami:\n\n$$\n\\bar{V}^k_n = n^k\n$$\n\nWzór na kombinacje z powtórzeniami podaję raczej *pro forma*, bo rzadko jest używany.\n\n$$\n\\bar{C}^k_n = \\binom{k+n-1}{k} = \\frac{(k+n-1)!}{k!(n-1)!}\n$$\n\n# Podsumowanie\n\nPermutacje to zmiany kolejności, kombinacje to unikalne podzbiory. Jeśli zaczniemy robić permutacje unikalnych podzbiorów, wyjdą nam wariacje. Albo patrząc inaczej – permutacje to wariacje $V^n_n$. Permutacje i wariacje możemy liczyć kreskami i silnią. Liczbę kombinacji uzyskamy dzieląc liczbę wariacji po *k* elementów przez liczbę permutacji *k*. Powstały wzór oznacza się symbolem Newtona $\\binom{n}{k}$. Pomocny może okazać się poniższy schemat.\n\n<!-- ![](./ilustracje/kombinatoryka-flowchart.svg){fig-align=\"center\"} -->\n\n\n```{mermaid}\n%%| fig-responsive: true\n%%| fig-width: 80%\n%%| echo: fenced\n%%| code-fold: true\n%%| code-summary: \"Pokaż kod\"\nflowchart TD\n    START(START) --> zbior\n    zbior[/Mam zbiór, z którym chcę coś zrobić/] -->\n    kolejnosc{Czy kolejność ma znaczenie?}\n    kolejnosc -->|Nie| C[kombinacja]\n        C --> C_powtorzenia{Czy elementy mogą się powtarzać?}\n        C_powtorzenia -->|Tak| C_powtorzenia_koniec(kombinacja z powtórzeniami)\n        C_powtorzenia -->|Nie| C_koniec(kombinacja bez powrótrzeń)\n    kolejnosc -->|Tak| V[wariacja]\n        V --> V_calosc{Czy wykorzystuję cały zbiór?}\n        V_calosc -->|Tak| P(permutacja)\n        V_calosc -->|Nie| V_powtorzenia{Czy elementy mogą się powtarzać?}\n        V_powtorzenia -->|Tak| V_powtorzenia_koniec(wariacja z powtórzeniami)\n        V_powtorzenia -->|Nie| V_koniec(wariacja bez powrótrzeń)\n```\n\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"Licencja Creative Commons\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><br />Ten utwór jest dostępny na <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">licencji Creative Commons Uznanie autorstwa-Użycie niekomercyjne-Na tych samych warunkach 4.0 Międzynarodowe</a>.\n\n",
    "supporting": [
      "kombinatoryka_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}