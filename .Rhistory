ggplot(df_diamonds, aes(carat, price, colour = cut)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5, colour = "black") +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
colour = "Szlif",
title = "Cena brylantu z zależności od masy"
) +
scale_colour_discrete(
labels = c("Zadowalający", "Dobry", "Bardzo dobry", "Premium", "Idealny")
) +
theme_apa()
source("https://github.com/koundy/ggplot_theme_Publication/blob/master/ggplot_theme_Publication-2.R?raw=true")
ggplot(df_diamonds, aes(carat, price, colour = cut)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5, colour = "black") +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
colour = "Szlif",
title = "Cena brylantu z zależności od masy"
) +
scale_colour_discrete(
labels = c("Zadowalający", "Dobry", "Bardzo dobry", "Premium", "Idealny"),
) +
theme_Publication()
ggplot(df_diamonds) +
aes(x = carat, y = price, colour = clarity) +
geom_point(shape = "diamond", size = 2L) +
scale_color_brewer(palette = "YlOrRd", direction = 1) +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
title = "Cena diamentów od ich masy według szlifu",
caption = "Źródło danych: ggplot2",
color = "Przejrzystość"
) +
theme_bw() +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold")
) +
facet_wrap(vars(cut))
ggplot(df_diamonds) +
aes(x = carat, y = price, colour = clarity) +
geom_point(shape = "diamond", size = 2L) +
scale_color_brewer(palette = "YlOrRd", direction = 1) +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
title = "Cena diamentów od ich masy według szlifu",
caption = "Źródło danych: ggplot2",
color = "Przejrzystość"
) +
theme_Publication() +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold")
) +
facet_wrap(
vars(cut),
labeller = labeller(cut = c(
"Fair" = "Zadowalający",
"Good" = "Dobry",
"Very Good" = "Bardzo dobry",
"Premium" = "Premium",
"Ideal" = "Idealny"
)
)
)
glimpse(diamonds)
?diamonds
seq(5, 62, 3)
seq(from = 5, to = 62, by = 3)
seq(to = 62, by = 3, from = 5) # jeśli nazywamy argumenty, kolejność nie ma znaczenia
seq(5, by = 3, length.out = 10) # daj mi 10 kolejnych liczb zaczynając od 5 i co 3
seq(1, 100, length.out = 10) # podaj 10 liczb między 1 a 100
# Przygotowanie ----
## Ładowanie danych ----
# kod ładujący dane
## Ładowanie bibliotek ----
# kod ładujący biblioteki
library("tidyverse")
df <- read_csv("dane/podstawy-R/complex_database.csv")
df
paste("H", 1:10, sep = "_")
odejmij_od_7 <- function(wynik) {
7 - wynik
}
odejmij_od_7(3)
odejmij_od_7(12)
odejmij_od <- function(wynik, od_czego) {
od_czego - wynik
}
odejmij_od(3, 7)
odejmij_od(2, od_czego = 4)
df <- df %>%
filter(Płeć == "Mężczyzna") %>%
select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%
set_names("id", "wiek", "wyksztalcenie", paste("H", 1:10, sep = "_")) %>%
mutate(
wiek = parse_number(wiek),
across(H_1:H_10, parse_number),
across(c(H_5, H_7), ~ 7 - .x),
H_suma = rowSums(pick(H_1:H_10)),
wyksztalcenie_grupa = case_when(
wyksztalcenie == "Średnie" ~ "Ponadpodstawowe",
wyksztalcenie == "Zawodowe" ~ "Ponadpodstawowe",
.default = wyksztalcenie
),
wyksztalcenie = factor(
wyksztalcenie,
levels = c("Podstawowe", "Zawodowe", "Średnie", "Wyższe"),
ordered = TRUE
)
) %>%
arrange(desc(wyksztalcenie), wiek) %>%
relocate(H_suma, .before = H_1)
df
df %>%
group_by(wyksztalcenie) %>%
summarise(
n = n(),
H_M = mean(H_suma),
H_SD = sd(H_suma),
H_Me = median(H_suma),
V = H_SD / H_M
)
# załadowanie danych z sieci
df_scream <- read_csv("https://github.com/profandyfield/discovr/blob/master/data-raw/csv_files/escape.csv?raw=true")
# podejrzenie, jak dane wyglądają
glimpse(df_scream)
# pogrupowanie i zliczenie średniej liczby krzyków
df_scream %>%
summarise(
M = mean(screams),
.by = c(song_type, songwriter)
)
df_wide <- df %>% # zapiszę to jako df_wide, na później
select(id, H_1:H_5) %>%
mutate(id = 1:nrow(df)) %>% # poprawiam id, żeby były kolejne liczby, zmiana kosmetyczna
arrange(id) # sortuję wg id
df_wide %>% # zapisane dane trzeba jeszcze wyświetlić
head(n = 5) # tylko 5 pierwszych wierszy
df_long <- df_wide %>%
pivot_longer(H_1:H_5, names_to = "pytanie", values_to = "ocena")
df_long %>%
head(n = 10)
df_long %>%
summarise(
M = mean(ocena),
SD = sd(ocena),
.by = c(pytanie)
)
db_test <- read_csv("./dane/podstawy-R/join-test.csv", show_col_types = FALSE)
db_retest <- read_csv("./dane/podstawy-R/join-retest.csv", show_col_types = FALSE)
db_test
db_retest
db_joined <- db_test %>%
left_join(
db_retest,
by = join_by(ID == Subject),
suffix = c("", "_retest")
)
db_joined
#| warning: false
library("rstatix")
get_summary_stats(df)
df_scream %>%
group_by(songwriter, song_type) %>%
get_summary_stats()
freq_table(df, wyksztalcenie)
(korelacje <- cor_mat(db_joined, -ID))
cor_mark_significant(korelacje)
glimpse(diamonds)
set.seed(123)
df_diamonds <- slice_sample(diamonds, n = 100)
ggplot(df_diamonds, aes(carat, price))
ggplot(df_diamonds, aes(carat, price)) +
geom_point()
ggplot(df_diamonds, aes(carat, price)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(df_diamonds, aes(carat, price, colour = cut)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5, colour = "black")
ggplot(df_diamonds, aes(carat, price, colour = cut)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5, colour = "black") +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
colour = "Szlif",
title = "Cena brylantu z zależności od masy"
)
ggplot(df_diamonds, aes(carat, price, colour = cut)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5, colour = "black") +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
colour = "Szlif",
title = "Cena brylantu z zależności od masy"
) +
scale_colour_discrete(labels = c("Zadowalający", "Dobry", "Bardzo dobry", "Premium", "Idealny"))
#| warning: false
library("papaja")
ggplot(df_diamonds, aes(carat, price, colour = cut)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5, colour = "black") +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
colour = "Szlif",
title = "Cena brylantu z zależności od masy"
) +
scale_colour_discrete(
labels = c("Zadowalający", "Dobry", "Bardzo dobry", "Premium", "Idealny")
) +
theme_apa()
source("https://github.com/koundy/ggplot_theme_Publication/blob/master/ggplot_theme_Publication-2.R?raw=true")
ggplot(df_diamonds, aes(carat, price, colour = cut)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5, colour = "black") +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
colour = "Szlif",
title = "Cena brylantu z zależności od masy"
) +
scale_colour_discrete(
labels = c("Zadowalający", "Dobry", "Bardzo dobry", "Premium", "Idealny"),
) +
theme_Publication()
ggplot(df_diamonds) +
aes(x = carat, y = price, colour = clarity) +
geom_point(shape = "diamond", size = 2L) +
scale_color_brewer(palette = "YlOrRd", direction = 1) +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
title = "Cena diamentów od ich masy według szlifu",
caption = "Źródło danych: ggplot2",
color = "Przejrzystość"
) +
theme_bw() +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold")
) +
facet_wrap(vars(cut))
ggplot(df_diamonds) +
aes(x = carat, y = price, colour = clarity) +
geom_point(shape = "diamond", size = 2L) +
scale_color_brewer(palette = "YlOrRd", direction = 1) +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
title = "Cena diamentów od ich masy według szlifu",
caption = "Źródło danych: ggplot2",
color = "Przejrzystość"
) +
theme_Publication() +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold")
) +
facet_wrap(
vars(cut),
labeller = labeller(cut = c(
"Fair" = "Zadowalający",
"Good" = "Dobry",
"Very Good" = "Bardzo dobry",
"Premium" = "Premium",
"Ideal" = "Idealny"
)
)
)
(lm_price <- lm(price ~ carat + clarity + color * cut, data = diamonds))
iris
?iris
# zerkamy w bazę
glimpse(iris)
#tworzymy model
(lm_price <- lm(Petal.Length ~ Sepal.Length + Sepal.Width, data = iris))
summary(lm_price)
seq(5, 62, 3)
seq(from = 5, to = 62, by = 3)
seq(to = 62, by = 3, from = 5) # jeśli nazywamy argumenty, kolejność nie ma znaczenia
seq(5, by = 3, length.out = 10) # daj mi 10 kolejnych liczb zaczynając od 5 i co 3
seq(1, 100, length.out = 10) # podaj 10 liczb między 1 a 100
# Przygotowanie ----
## Ładowanie danych ----
# kod ładujący dane
## Ładowanie bibliotek ----
# kod ładujący biblioteki
library("tidyverse")
df <- read_csv("dane/podstawy-R/complex_database.csv")
df
paste("H", 1:10, sep = "_")
odejmij_od_7 <- function(wynik) {
7 - wynik
}
odejmij_od_7(3)
odejmij_od_7(12)
odejmij_od <- function(wynik, od_czego) {
od_czego - wynik
}
odejmij_od(3, 7)
odejmij_od(2, od_czego = 4)
df <- df %>%
filter(Płeć == "Mężczyzna") %>%
select(ID, `Wiek (ukończony w latach)`, Wykształcenie, 9:18) %>%
set_names("id", "wiek", "wyksztalcenie", paste("H", 1:10, sep = "_")) %>%
mutate(
wiek = parse_number(wiek),
across(H_1:H_10, parse_number),
across(c(H_5, H_7), ~ 7 - .x),
H_suma = rowSums(pick(H_1:H_10)),
wyksztalcenie_grupa = case_when(
wyksztalcenie == "Średnie" ~ "Ponadpodstawowe",
wyksztalcenie == "Zawodowe" ~ "Ponadpodstawowe",
.default = wyksztalcenie
),
wyksztalcenie = factor(
wyksztalcenie,
levels = c("Podstawowe", "Zawodowe", "Średnie", "Wyższe"),
ordered = TRUE
)
) %>%
arrange(desc(wyksztalcenie), wiek) %>%
relocate(H_suma, .before = H_1)
df
df %>%
group_by(wyksztalcenie) %>%
summarise(
n = n(),
H_M = mean(H_suma),
H_SD = sd(H_suma),
H_Me = median(H_suma),
V = H_SD / H_M
)
# załadowanie danych z sieci
df_scream <- read_csv("https://github.com/profandyfield/discovr/blob/master/data-raw/csv_files/escape.csv?raw=true")
# podejrzenie, jak dane wyglądają
glimpse(df_scream)
# pogrupowanie i zliczenie średniej liczby krzyków
df_scream %>%
summarise(
M = mean(screams),
.by = c(song_type, songwriter)
)
df_wide <- df %>% # zapiszę to jako df_wide, na później
select(id, H_1:H_5) %>%
mutate(id = 1:nrow(df)) %>% # poprawiam id, żeby były kolejne liczby, zmiana kosmetyczna
arrange(id) # sortuję wg id
df_wide %>% # zapisane dane trzeba jeszcze wyświetlić
head(n = 5) # tylko 5 pierwszych wierszy
df_long <- df_wide %>%
pivot_longer(H_1:H_5, names_to = "pytanie", values_to = "ocena")
df_long %>%
head(n = 10)
df_long %>%
summarise(
M = mean(ocena),
SD = sd(ocena),
.by = c(pytanie)
)
db_test <- read_csv("./dane/podstawy-R/join-test.csv", show_col_types = FALSE)
db_retest <- read_csv("./dane/podstawy-R/join-retest.csv", show_col_types = FALSE)
db_test
db_retest
db_joined <- db_test %>%
left_join(
db_retest,
by = join_by(ID == Subject),
suffix = c("", "_retest")
)
db_joined
#| warning: false
library("rstatix")
get_summary_stats(df)
df_scream %>%
group_by(songwriter, song_type) %>%
get_summary_stats()
freq_table(df, wyksztalcenie)
(korelacje <- cor_mat(db_joined, -ID))
cor_mark_significant(korelacje)
glimpse(diamonds)
set.seed(123)
df_diamonds <- slice_sample(diamonds, n = 100)
ggplot(df_diamonds, aes(carat, price))
ggplot(df_diamonds, aes(carat, price)) +
geom_point()
ggplot(df_diamonds, aes(carat, price)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(df_diamonds, aes(carat, price, colour = cut)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5, colour = "black")
ggplot(df_diamonds, aes(carat, price, colour = cut)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5, colour = "black") +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
colour = "Szlif",
title = "Cena brylantu z zależności od masy"
)
ggplot(df_diamonds, aes(carat, price, colour = cut)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5, colour = "black") +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
colour = "Szlif",
title = "Cena brylantu z zależności od masy"
) +
scale_colour_discrete(labels = c("Zadowalający", "Dobry", "Bardzo dobry", "Premium", "Idealny"))
#| warning: false
library("papaja")
ggplot(df_diamonds, aes(carat, price, colour = cut)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5, colour = "black") +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
colour = "Szlif",
title = "Cena brylantu z zależności od masy"
) +
scale_colour_discrete(
labels = c("Zadowalający", "Dobry", "Bardzo dobry", "Premium", "Idealny")
) +
theme_apa()
source("https://github.com/koundy/ggplot_theme_Publication/blob/master/ggplot_theme_Publication-2.R?raw=true")
ggplot(df_diamonds, aes(carat, price, colour = cut)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5, colour = "black") +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
colour = "Szlif",
title = "Cena brylantu z zależności od masy"
) +
scale_colour_discrete(
labels = c("Zadowalający", "Dobry", "Bardzo dobry", "Premium", "Idealny"),
) +
theme_Publication()
ggplot(df_diamonds) +
aes(x = carat, y = price, colour = clarity) +
geom_point(shape = "diamond", size = 2L) +
scale_color_brewer(palette = "YlOrRd", direction = 1) +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
title = "Cena diamentów od ich masy według szlifu",
caption = "Źródło danych: ggplot2",
color = "Przejrzystość"
) +
theme_bw() +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold")
) +
facet_wrap(vars(cut))
ggplot(df_diamonds) +
aes(x = carat, y = price, colour = clarity) +
geom_point(shape = "diamond", size = 2L) +
scale_color_brewer(palette = "YlOrRd", direction = 1) +
labs(
x = "Masa [karaty]",
y = "Cena [$]",
title = "Cena diamentów od ich masy według szlifu",
caption = "Źródło danych: ggplot2",
color = "Przejrzystość"
) +
theme_Publication() +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold")
) +
facet_wrap(
vars(cut),
labeller = labeller(cut = c(
"Fair" = "Zadowalający",
"Good" = "Dobry",
"Very Good" = "Bardzo dobry",
"Premium" = "Premium",
"Ideal" = "Idealny"
)
)
)
# zerkamy w bazę
glimpse(iris)
# tworzymy model
iris %>%
lm_price <- lm(Petal.Length ~ Sepal.Length + Sepal.Width, data = .)
iris %>%
lm_price <- lm(Petal.Length ~ Sepal.Length + Sepal.Width, data = .)
iris <- iris
iris %>%
lm_price <- lm(Petal.Length ~ Sepal.Length + Sepal.Width, data = .)
?%>%
?`%>%`
# zerkamy w bazę
glimpse(iris)
# tworzymy model
lm_price <- iris %>%
lm(Petal.Length ~ Sepal.Length + Sepal.Width, data = .)
# próbujemy wyświetlić
lm_price
