---
title: "Jak wspólnie pisać analizę statystyczną?"
subtitle: "Git, GitHub i integracja z RStudio"
description: "Przestawienie się z programu typu SPSS na R daje nam wiele korzyści, w tym umożliwia łatwe wspólne pisanie analiz statystycznych. W końcu kod to tekst, skoro możemy w Google Docs wspólnie tworzyć dokumenty, to czemu nie mielibyśmy wspólnie pisać analizy statystycznej? Do współpracy przy kodzie nie wykorzystujemy jednak Google Docs, ale specjalny protokół znany jako Git."
image: ./headers/git.webp
categories:
    - Narzędzia
    - R
draft: true
---

Kiedyś (a niekiedy do dziś) wspólne pisanie dokumentów czy prezentacji polegało na wysyłaniu sobie serii załączników mailem. Gdy zespół liczył więcej niż 2 osoby, szybko kolejne wersje danego pliku stawały się trudne do śledzenia. Podobnie gdy pisaliśmy coś na więcej niż jednym komputerze. Te problemy w większości odeszły w niepamięć, gdy nastała era chmury i współpracy online. Znacznie wcześniej powstawały jednak inne rozwiązania tego problemu -- systemy kontroli wersji, spośród których monopol na rynku zdobyło otwartoźródłowe dzieło Linusa Torvaldsa (twórcy Linuksa) o nazwie Git.

# Systemy kontroli wersji

Systemy kontroli wersji najogólniej polegają na tym, że śledzą zmiany w plikach. Jeśli dopisaliśmy akapit do naszego pliku i zatwierdziliśmy tę zmianę, system kontroli wersji będzie wiedział kto i kiedy wprowadził daną zmianę. Jeśli kilku użytkowników wprowadziło zmiany, które ze sobą nie konfliktują, system kontroli wersji potrafi takie zmienione pliki połączyć w jeden. Możemy dzięki temu prześledzić historię danego pliku, a także upewnić się, że wszyscy pracują na najnowszej wersji.

Jednocześnie jest to zrobione w sposób dostosowany do pisania kodu. Gdy piszemy kod, zazwyczaj wprowadzamy jakieś zmiany, testujemy, zazwyczaj nie działa, poprawiamy i tak aż nie zadziała. Jeśli mielibyśmy jeden wspólny plik, jak w Google Docs, nasze testy skutecznie uniemożliwiłyby wszystkim innym korzystanie z naszego kodu. Dlatego właśnie Git wymaga od nas, żeby zmiany w kodzie zatwierdzać i dopiero wtedy możemy udostępnić je innym. Dzięki temu tworzy się balans między współpracą i niewchodzeniem sobie w paradę.

Powstaje nam więc stabilny workflow -- wprowadź poprawki w kodzie, przetestuj, zatwierdź, opublikuj. Jak to zrobić w praktyce?

# Przygotowanie

Przygotowanie do korzystania z Gita może wyglądać bardzo różnie. Tutaj zaproponuję serię programów, które, mam nadzieję, uczynią ten proces jak najbardziej bezbolesnym. Postaram się też do minimum ograniczyć potrzebę korzystania z konsoli.

## Git

Żeby móc korzystać z dobrodziejstw Gita, musimy go sobie najpierw zainstalować. Chyba że korzystamy z dystrybucji Linuksa, wtedy mamy Git od początku. Nic dziwnego, Git powstał po to, żeby cała społeczność mogła dołożyć cegiełkę do [jądra Linuksa](https://github.com/torvalds/linux). Jeśli korzystamy z Windowsa, możemy pobrać podstawowy pakiet [stąd](https://git-scm.com/).

Gdy Git zostanie zainstalowany, musimy dokonać podstawowej konfiguracji, do której **my wykorzystamy GitHub CLI** i zrobimy ją w kolejnym podrozdziale. Jeśli jednak nie chcemy korzystać z jakiegoś powodu z GitHub CLI, możemy się skonfigurować lokalnie. W tym celu otwieramy konsolę (PowerShell lub wiersz polecenia w Windowsie) i wpisujemy tam dwie komendy, jedną po drugiej. **Nie polecam tego robić, jeśli nie ma się powodu.** Pierwsza komenda przypisze do lokalnego Gita nasz email:

```{bash}
git config --global user.email "adres@email.com"
```

Oczywiście za adres\@email.com podstawiamy nasz własny adres. Powinien to być ten sam adres, **którego potem użyjemy do założenia konta na GitHubie**. Komendę zatwierdzamy enterem. Jeśli konsola nie znajduje polecenia `git`, trzeba sprawdzić, czy na pewno zainstalowaliśmy git oraz zrestartować komputer. Druga komenda ustawia nazwę użytkownika.

```{bash}
git config --global user.name "nazwa-uzytkownika"
```

Ponownie, powinna być to taka sama nazwa użytkownika, jaką będziemy mieć na GitHubie. W razie czego zawsze można ją zmienić tą samą komendą.

## GitHub i GitHub CLI

Git to protokół działający lokalnie. Innymi słowy nasz własny Git jest w naszym własnym folderze i inni ludzie nie mają do niego dostępu. To jest ok, jeśli chcemy robić kontrolę wersji do własnego użytku. Jeśli jednak chcemy współpracować z innymi albo mieć dostęp do naszego kodu na różnych komputerach, potrzebujemy jakiegoś rodzaju usługi internetowej, z którą każdy może się połączyć. Podstawowym *de facto* hostingiem tego typu jest [GitHub](https://github.com/). To jest więc dobry moment, żeby wejść na GitHuba i założyć tam konto.

To jest moment na szybkie wtrącenie, które może nam ułatwić życie w późniejszej konfiguracji RStudio. Warto jest w tym momencie wejść w ustawienia RStudio, tam w zakładkę Git/SVN i sprawdzić, czy RStudio podaje jakąś ścieżkę dla SSH key. Jeśli nie, klikamy „Create SSH key" i zatwierdzamy. Nie musimy wpisywać hasła.

GitHub dysponuje też wersją konsolową, GitHub CLI, która pozwoli nam bezboleśnie połączyć naszego lokalnego Gita z kontem na GitHubie. GitHub CLI pobieramy [stąd](https://cli.github.com/). Po zainstalowaniu (i ewentualnym restarcie komputera) możemy skonfigurować Git. W tym celu otwieramy konsolę (PowerShell lub wiersz polecenia w Windowsie) i wpisujemy tam:

```{bash}
gh auth login
```

Po zatwierdzeniu komendy enterem powinien uruchomić się kreator, który bezboleśnie przeprowadzi nas przez proces logowania. Najpierw wybieramy, że chcemy się się logować do zwykłego GitHub.com. Następnie musimy wybrać protokół. Na ogół łatwiejszy do ogarnięcia jest HTTPS, jednak na potrzeby RStudio lepiej jest wybrać SSH. Jeśli wytworzyliśmy wcześniej klucz SSH w RStudio, GitHub CLI zapyta nas teraz, czy wysłać ów klucz na serwer. Tak, to jest dokładnie to, co chcemy zrobić. Następnie klucz tytułujemy jak chcemy (lub klikamy enter, jeśli odpowiada nam tytuł GitHub CLI) i wybieramy logowanie za pomocą przeglądarki. W tym momencie wyświetli nam się kod, który powinniśmy skopiować. Jeśli chcesz użyć skrótu klawiaturowego, **nie używaj Ctrl+C**, bo wyłączysz GitHub CLI. Użyj Ctrl+Shift+C. Możesz też użyć myszki. Po kliknięciu enter otworzy nam się okno przeglądarki, gdzie wklejamy wcześniej skopiowany kod i zatwierdzamy.

W ten sposób dokonaliśmy konfiguracji GitHub CLI. Pozostaje nam jeszcze połączyć GitHub CLI z naszym lokalnym Gitem za pomocą prostej komendy:

```{bash}
gh auth git-setup
```

## GitHub Desktop i GitKraken

Domyślnie Git jest narzędziem konsolowym. Dla większości świeżych użytkowników jest to nie do przejścia. Sam widok okna terminala może wywoływać obfite pocenie, przyspieszenie akcji serca i wyrzut kortyzolu do krwi. Na szczęście istnieją przynajmniej dwa narzędzia, które mogą nam oszczędzić męki uczenia się poleceń konsolowych.

Pierwsze z nich to [GitHub Desktop](https://desktop.github.com/), który jest intuicyjnym programem pozwalającym nam na szybkie zarządzanie Gitem i synchronizację z GitHubem. Jest to narzędzie darmowe i [otwartoźródłowe](https://github.com/desktop/desktop). Pozwala nam nie tylko zatwierdzać, wysyłać i odbierać zmiany, ale także możemy za jego pomocą zarządzać *pull requests* (więcej o tym później).

![](ilustracje/git/GitHub-Desktop.png)

Druga możliwość to GitKraken. Potężne narzędzie do zarządzania Gitem z wieloma zaawansowanymi możliwościami jak wyświetlanie wykresów commitów i modyfikacje na miejscu. Niestety GitKraken to program płatny, ale dostępny za darmo dla studentów i pracowników naukowych w ramach [GitHub Education](https://education.github.com/discount). Nie jest to jedyna korzyść płynąca z tego programu (inne to np. GitHub Copilot), także polecam się zainteresować.

![](ilustracje/git/GitKraken.png)