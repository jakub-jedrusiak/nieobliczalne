<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Nieobliczalne</title>
<link>https://nieobliczalne.pl/</link>
<atom:link href="https://nieobliczalne.pl/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.39</generator>
<lastBuildDate>Sat, 28 Oct 2023 22:00:00 GMT</lastBuildDate>
<item>
  <title>Rozkłady próbkowania i rozkłady \(t\)</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/rozklady-probkowania.html</link>
  <description><![CDATA[ 




<p>Sięgnijmy pamięcią do przykładu z <a href="../posts/p-value.html">tekstu o wartości <img src="https://latex.codecogs.com/png.latex?p"></a>. Na tym tekście będziemy budować, więc zachęcam, żeby z nim zapoznać się w pierwszej kolejności. Konieczne jest też rozumienie podstaw rozkładu normalnego. Jeśli nie potrafisz obliczyć, powiedzmy, jaka część populacji ma inteligencję między 85 a 115, zachęcam do nadrobienia <a href="../posts/gestosc-prawdopodobienstwa.html">tekstu o rozkładach normalnych</a>. Nie jest to <em>niezbędne</em> do zrozumienia większości tego tekstu, ale bardzo pomoże.</p>
<p>Sprawdzaliśmy tam między innymi kontrowersyjną (i fałszywą) hipotezę, że kobiety są mniej inteligentne od mężczyzn. Zbadaliśmy 100 kobiet i 100 mężczyzn i wyszło nam, że tak istotnie jest – mężczyźni osiągnęli średnią 101, kobiety 99. Wiedzeni nieufnością powtórzyliśmy nasze badanie i – ku naszemu zdumieniu – tym razem kobiety osiągnęły średnią 101 a mężczyźni 98. Po głębszym zastanowieniu możemy stwierdzić, że nie ma w tym nic dziwnego. W końcu całkowicie losowo mogę trafić na bardziej lub mniej inteligentną próbkę mężczyzn. Jakie jednak mogę mieć zaufanie do swoich wyników? Jak to, że moi mężczyźni osiągnęli średnią 98 ma się do rzeczywistej średniej <em>wszystkich</em> mężczyzn? Czy muszę zbadać ich wszystkich, żeby mieć pewność? To zgłębimy tutaj.</p>
<p>Cały sens statystyki polega na tym, żeby być w stanie pobrać próbkę i na jej podstawie powiedzieć coś na temat populacji, z której ją pobraliśmy <span class="citation" data-cites="wackerly2008">(Wackerly, Mendenhall, &amp; Scheaffer, 2008)</span>. Nie muszę więc badać wszystkich mężczyzn świata, żeby coś o nich (jako o zbiorowości) powiedzieć. Statystyka jest jednak lepsza od chłopskiego rozumu nie tylko w tym, że daje bardziej obiektywne dane, niż chłopski rozum (wbrew temu, co mogliśmy słyszeć od wujków przy rodzinnym stole), ale też pozwala powiedzieć, jak bardzo pewni możemy być naszych wniosków. Kluczowe pytanie na ten moment będzie więc brzmiało – skoro w mojej próbce 100 mężczyzn wyszła średnia 98, to jak to ma się do średniej inteligencji wszystkich mężczyzn?</p>
<section id="populacja-i-próba" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Populacja i próba</h1>
<p>Populacja to taka abstrakcja, oznaczająca mniej więcej „wszyscy”. Jeśli badamy żubry w Puszczy Białowieskiej, naszą populacją są żubry z Puszczy Białowieskiej. Jeśli interesują nas konkretnie biol-chemy z 3C, to nasza populacja to biol-chemy z 3C. Ale jeśli badamy biol-chemy z 3C, żeby powiedzieć coś o wszystkich biol-chemach w kraju, to po pierwsze nie mamy dobrej próbki, a po drugie naszą populacją stają się wszystkie biol-chemy w kraju. Populacją jest więc to, o czym chcemy wyciągać wnioski. Zbadanie całej populacji jest drogie, czasochłonne i często po prostu niepotrzebne. Zdarza się to, jak w odbywającym się co 10 lat spisie powszechnym, jednak możemy wyciągać sensowne wnioski na temat całych populacji na podstawie ich wycinków. Takie wycinki to <strong>próby</strong>.</p>
<p>Dobieranie próby do badań to jest całe duże zagadnienie w metodologii. Mówiąc jednak ogólnie, dobra próba powinna być po pierwsze liczna, a po drugie możliwie losowa.</p>
<p>Liczność próby to wymóg dość intuicyjny. Jak w starym kawale. Ja jestem biały, mój tato jest biały, moja mama jest biała, moja siostra jest biała, moi koledzy z klasy są biali, czyli nie ma czarnych ludzi. Tutaj również ujawnia się wyższość statystyki nad przemyśleniami wujka, który o stanie narodu z pozycji autorytetu wnioskuje na podstawie kolegów z wojska, a o stanie męskości na podstawie chłopaka w ciasnych spodniach, którego widział w supermarkecie. Może się to wydawać oczywiste, ale uznawana (choć powoli niknąca) psychoanaliza, olbrzymi system przekonań właściwie o wszystkim, co tkwi w człowieku, powstała na bazie sylwetek 38 pacjentów <span class="citation" data-cites="borch-jacobsen2021">(Borch-Jacobsen, 2021)</span>. Związek liczności z pewnością wyrazimy tu matematycznie.</p>
<p>Próbka jest jednak dobra wtedy, kiedy jest losowa. Jeśli chcemy sprawdzić, ile książek rocznie czytają Polacy, to nie zaczaimy się z sondą uliczną pod biblioteką. Jeśli próbka jest rzeczywiście losowa, to nawet jeśli ktoś z tej próbki odstaje w jedną stronę, to prawdopodobnie ktoś inny odstaje podobnie w drugą stronę i ostatecznie się wyrównują. Pod warunkiem, że próba jest rozsądnie liczna.</p>
</section>
<section id="rozkład-zmiennej-w-próbie" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Rozkład zmiennej w próbie</h1>
<p>Załóżmy, że mamy losową próbę 100 mężczyzn i wszystkim mierzymy inteligencję. Niektórzy z tych mężczyzn mają współczynniki inteligencji 100, inni 95, jeszcze inni 105 itd. Wiedząc nieco o skali inteligencji nawet intuicyjnie będziemy czuć, że więcej ludzi będzie miało raczej przeciętną inteligencję, czyli około 100, niż 130 (co jest progiem przyjęcia do Mensy). Częstość poszczególnych wyników możemy przedstawić na histogramie (a potem dorzucić wykres gęstości, o czym mówiliśmy w <a href="../posts/gestosc-prawdopodobienstwa.html">tekście o gęstości prawdopodobieństwa</a>).</p>
<div class="cell">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(iq, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(iq)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray60"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(iq<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iq)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(iq<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iq) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(iq<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iq), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(iq<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iq) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(iq<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iq)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlim</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Liczba przypadków"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_main</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/rozklady-probkowania_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Widzimy, że najwięcej osób wykazało inteligencję blisko środka rozkładu. Średnia inteligencja wyniosła <strong>w tej konkretnej próbie</strong> 97.6, co zaznaczyłem pionową kreską. To, co widzimy na rysunku, to <strong>rozkład zmiennej</strong> w próbie. Pobraliśmy próbkę, zmierzyliśmy inteligencję, narysowaliśmy rozkład. To, co widzimy na obrazku, odnosi się tylko do naszej konkretnej próby. Może przypominać rzeczywisty rozkład inteligencji w populacji (i przypomina), ale może to odwzorowanie może być dalekie od doskonałości. Istnieje więc jakiś <strong>rozkład zmiennej w populacji</strong>, który staramy się przybliżyć za pomocą <strong>rozkładu zmiennej w próbie</strong>. Im próba bardziej liczna, tym rozkład zmiennej bliższy prawdziwemu rozkładowi w populacji. Wydaje się to naturalne.</p>
<p>Poza średnią rozkład ma swoje odchylenie standardowe. Jest to podstawowe pojęcie, chociaż nieintuicyjne przy pierwszym kontakcie. W szczegółach omawiam je w <a href="../posts/procent-wariancji.html">tekście o wariancji</a>, ale w uproszczeniu mówi nam ono o tym, gdzie znajduje się większość ludzi. Odchylenie standardowe w naszej próbie wyniosło 15.2, więc większość ludzi ma inteligencję między 82.4 a 112.8, czyli średnia ± odchylenie standardowe. Jeśli teraz usłyszymy, że ktoś w teście inteligencji uzyskał wynik 130, to możemy sobie pomyśleć „dużo, aż 2 odchylenia standardowe od średniej”. Tutaj zakres jednego odchylenia standardowego od średniej zaznaczyłem przerywanymi kreskami. Jeśli odchylenie standardowe jest niewielkie, to średnia ma nieduży błąd, pojedyncze obserwacje są blisko niej. Jeśli jest ono duże, możemy się spodziewać większego rozstrzału.</p>
<p>Losowanie osób do naszego badania możemy sobie wyobrazić jako <strong>losowanie z rozkładu zmiennej w populacji</strong>. Rozkład zmiennej w populacji mówi nam, jakie wyniki są częstsze, jakie rzadsze. Gdy wychodzimy na ulicę i pytamy ludzi, czy chcą wziąć udział w badaniu naukowym, mówiąc po statystycznemu <strong>losujemy z rozkładu</strong>. Osoba jest częścią populacji, więc losuję z rozkładu zmiennej w populacji. Rozkład budują ludzie. Gdy biorę losowego człowieka i mierzę jego inteligencję, statystyka każe nam patrzeć na to tak, jakbym wylosował wynik z rozkładu inteligencji w populacji. Powtarzam się, bo to naprawdę dziwne przejście z konkretnego, namacalnego zaczepiania ludzi na ulicy do matematycznej abstrakcji. Spróbuj oswoić się z tą perspektywą, nim przejdziesz dalej, bo przyda nam się w kolejnym podrozdziale.</p>
</section>
<section id="rozkład-próbkowania" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Rozkład próbkowania</h1>
<p>Wiemy jednak, że każda próbka może trochę różnić się średnią. W niektórych próbkach wyjdzie nam 102, w innych 98. Możemy jednak intuicyjnie czuć, że znacznie trudniej przez przypadek zebrać próbkę o średniej 130 albo 70. Raczej średnie każdej jednej próbki będą krążyć dookoła prawdziwej średniej, czyli w tym wypadku 100. Zazwyczaj nie wiemy, jaka jest prawdziwa średnia z populacji, ale jak sobie z tym poradzić powiemy później. Średnie bliżej 100 powinny pojawiać się częściej, a średnie dalej od 100 rzadziej, możemy więc zrobić 100 próbek, każda po 100 osób i zobaczyć, jak często losują nam się jakie średnie. Możemy to nanieść na histogram.</p>
<div class="cell">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">iq_pop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iq =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))))</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(iq_pop, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(iq)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray60"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(iq_pop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iq)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(iq_pop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iq) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(iq_pop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iq), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(iq_pop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iq) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(iq_pop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iq)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Średnie IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Liczba przypadków"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_main</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/rozklady-probkowania_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Wylosowaliśmy więc 100 różnych próbek, w każdej zmierzyliśmy średnią inteligencję. Na histogramie widać, że średnie w pobliżu 100 rzeczywiście pojawiały się częściej, niż te dalsze od 100. Średnia średnia wyniosła tutaj 99.9, zaś jej odchylenie standardowe 1.5, czyli zazwyczaj próbki miały średnią między 98.5 a 101.4. Zwróćmy jednak uwagę, że robiąc ten wykres, spłaszczyliśmy każdą próbkę 100 osób do jednej tylko liczby – średniej inteligencji. Ten wykres nie mówi nam więc nic na temat tego, jak wyglądał rozkład zmiennej w każdej próbce. On nam mówi tylko i aż tyle, jak często próbka 100 osób miała jaką średnią. Taki rozkład nazywamy <strong>rozkładem próbkowania</strong>. Rozkład próbkowania to rozkład średnich z <strong>różnych prób</strong> i jest czymś zupełnie innym niż rozkład zmiennej w próbie czy w populacji. I to rozróżnienie jest powalająco istotne.</p>
<p>Rozkład zmiennej w próbie przypomina rozkład zmiennej w populacji. Im więcej osób w próbie, tym bardziej. Rozkład próbkowania nie musi przypominać rozkładu zmiennej w populacji, ani się do niego nie zbliża. Rozkład zmiennej w próbie składa się z pojedynczych pomiarów, rozkład próbkowania składa się ze <strong>średnich</strong>. Rozkład zmiennej w próbie mówi nam, jak wiele osób w naszej próbce wpada w określone widełki. Rozkład próbkowania mówi nam o tym, jak łatwo wylosować próbkę o określonej średniej. Wykorzystajmy więc perspektywę, którą podpowiedziałem na koniec poprzedniego podrozdziału. Gdy losujemy osobę z ulicy i mierzymy jej inteligencję, to losujemy ją z rozkładu zmiennej w populacji. Gdy losujemy 100 osób z ulicy i liczymy ich średnią inteligencję, to losujemy średnią z rozkładu próbkowania. <strong>O średniej każdej próbki można myśleć jako o wylosowanej z rozkładu próbkowania</strong>, tak jak każda osoba ze swoją inteligencją jest wylosowana z rozkładu inteligencji w populacji.</p>
<p>Rozkładów próbkowania zazwyczaj się nie rysuje. Gdy pobieramy próbę, mamy tylko jedną średnią, nie ma sensu robić histogramu z jednej liczby. Rozkład próbkowania to pewna abstrakcja. Tak jak można sobie teoretycznie wyobrazić, że zbadaliśmy wszystkich członków populacji, by uzyskać rozkład zmiennej, tak możemy sobie wyobrazić, że zbadaliśmy wszystkie możliwe próbki po 100 osób, by uzyskać rozkład próbkowania. Dlaczego to jest istotne? Bo mówi nam, jak wiele zaufania możemy mieć do pojedynczej średniej z próby. W jaki sposób?</p>
<p>Załóżmy, że rozkład próbkowania ma średnią 100 i odchylenie standardowe 5. <strong>Odchylenie standardowe rozkładu próbkowania to coś zupełnie innego niż odchylenie standardowe rozkładu zmiennej!</strong> Odchylenie standardowe rozkładu inteligencji wynosi 15, ale rozkład próbkowania nie mówi nam o inteligencji pojedynczych ludzi, tylko o średniej inteligencji grup ludzi. To są dwa różne odchylenia! Za to <strong>średnia rozkładu próbkowania jest równa średniej z populacji</strong>. Wracając. Jeśli średnia rozkładu próbkowania wynosi 100, a odchylenie standardowe 5, to nagminnie powinniśmy się spodziewać średnich między 95 a 105. Średnia 115 powinna nas zdziwić znacznie bardziej. Jeśli w takim wypadku wyszłoby nam, że w naszej próbce kobiety mają inteligencję 100, a mężczyźni 115, to bylibyśmy bardziej skłonni stwierdzić, że coś jest na rzeczy. Intuicyjnie możemy też czuć, że średnie 100 i 102 nie zrobiłyby na nas takiego wrażenia, bo naprawdę łatwo uzyskać je przez przypadek, bo większość średnich będzie między 95 a 105.</p>
</section>
<section id="centralne-twierdzenie-graniczne" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Centralne Twierdzenie Graniczne</h1>
<p>Teraz się zacznie robić ciekawie. Trzymaj się, już za niedługo będą przykłady. Do tej pory rozkład próbkowania był tylko abstrakcją. Czymś, co równie trudno zmierzyć, jak prawdziwą średnią z populacji. Na co dzień myślę dość konkretnie, abstrakcje są mi potrzebne wtedy, gdy mogę je wykorzystać do myślenia czy w innym celu. Po co mi więc taka abstrakcja jak rozkład próbkowania? Bo mając pojedynczą próbkę, jej średnią i odchylenie standardowe, wbrew pozorom, można całkiem sporo powiedzieć o rozkładzie próbkowania, z którego ta średnia pochodzi. Pozwala nam na to przepotężne prawo, leżące u podstaw całej statystyki, zwane <strong>Centralnym Twierdzeniem Granicznym</strong> (<em>Central Limit Theorem</em>).</p>
<section id="normalność" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="normalność"><span class="header-section-number">4.1</span> Normalność</h2>
<p>Twierdzenie to mówi nam o dwóch piekielnie ważnych rzeczach. Po pierwsze, jeśli próba jest odpowiednio duża<sup>1</sup>, to <strong>każdy rozkład próbkowania jest normalny</strong>. Odpowiednio duża oznacza tutaj według większości autorów minimum 15 osób, chociaż co bardziej konserwatywni autorzy mówią 20 albo nawet 30 osób. Podkreślam tutaj słowo <strong>każdy</strong>. Oznacza to, że nieważne, jak wygląda rozkład zmiennej, czy jest normalny, czy nie. Rozkład próbkowania będzie normalny. Wyobraźmy sobie, że rozkład poniżej to rozkład zarobków w pewnym państwie. Większość ludzi zarabia niedużo, ale jest też niewielka ilość ludzi zarabiająca bardzo dużo.</p>
<div class="cell">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rexp</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0007</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">income =</span> .) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(income)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray60"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dochód"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Liczba przypadków"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_main</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/rozklady-probkowania_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Z pobieram z tego rozkładu losową próbkę 100 osób. Wychodzi mi średni dochód 1185. Spoko. Pobieram kolejne 100 osób i tym razem dostaję średni dochód 1448. Robię tak jeszcze bardzo dużo razy, więc ostatecznie mam zapisane w Excelu bardzo dużo średnich. Gdy z tych średnich, nie z pojedynczych obserwacji, zrobię histogram, dostanę coś takiego.</p>
<div class="cell">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">income <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">income =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rexp</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0007</span>))))</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(income, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(income)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray60"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(income<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>income)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(income<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>income) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(income<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>income), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(income<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>income) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(income<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>income)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Średni dochód"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Liczba przypadków"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_main</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/rozklady-probkowania_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Ten rozkład wygląda zupełnie inaczej, niż rozkład wyjściowy. Dlaczego? Bo rozkład wyjściowy to rozkład zmiennej, a to na obrazku to rozkład średnich, jakie wychodzą w różnych próbkach, czyli rozkład próbkowania. Wielkość pojedynczej próbki wynosi 100, czyli więcej niż 15, a więc rozkład próbkowania wyszedł normalny. To jest pierwsze, co mówi nam CLT.</p>
<p>Jest to założenie o tyle ważne, że idzie na przekór popularnym w naukowym świecie nieporozumieniom. W części testów (np. w teście <img src="https://latex.codecogs.com/png.latex?t">) istnieje założenie o normalności. Ta normalność dotyczy jednak nie rozkładu <em>zmiennej</em>, ale rozkładu <em>próbkowania</em>. Dane wcale nie muszą rozkładać się normalnie! Jeśli mamy te minimum 15-30 osób, to rozkład próbkowania i tak jest normalny na mocy centralnego twierdzenia granicznego. Owszem, możemy sprawdzić, czy dane rozkładają się normalnie, bo jeśli tak, to rozkład próbkowania też jest normalny, ale nawet najbardziej szalone rozkłady zmiennej mają normalne rozkłady próbkowania, o ile liczność próbki jest wystarczająca.</p>
<p>Jeśli czytałeś(-aś) <a href="../posts/gestosc-prawdopodobienstwa.html">tekst o rozkładach normalnych</a>, możesz się już domyślać, dlaczego to jest ważne. Jeśli wiemy, że rozkład jest normalny, to moglibyśmy powiedzieć, np. „OK, w mojej próbce dzieci karmionych kalarepą średnia inteligencja wynosi wynosi 110. Rozkład próbkowania ma średnią 100 i odchylenie standardowe 5, więc szansa na to, że taka <em>lub wyższa</em> średnia wylosuje się z rozkładu normalnego przez przypadek wynosi <img src="https://latex.codecogs.com/png.latex?%5Cint_%7B110%7D%5E%7B%5Cinfty%7D%20%5Cmathcal%20N(x;%5C%20100,%5C%205%5E2)%20=%201%20-%20pnorm(110,%5C%20mean%20=%20100,%5C%20sd%20=%205)%20%5Capprox%202,3%5C%25">, a więc raczej nie jest to przypadek”. Skąd jednak mam wiedzieć, jaką średnią i odchylenie standardowe ma rozkład próbkowania, jak mam tylko jedną próbkę?</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Zadanie
</div>
</div>
<div class="callout-body-container callout-body">
<p>Szybka powtórka z rozkładów normalnych i rozgrzewka w myśleniu o rozkładach próbkowania.</p>
<ol type="1">
<li><p>Twoja próbka 40 osób ma średnią 121. Rozkład próbkowania ma średnią 100 i odchylenie standardowe 7. Jaka jest szansa, że próbka 40 osób będzie miała średnią 121 lub wyższą?</p></li>
<li><p>Twoja próbka 120 osób ma średnią -0,78. Rozkład próbkowania ma średnią 0 i odchylenie standardowe 0,5. Jaka jest szansa, że próbka 120 osób będzie miała średnią taką lub niższą?</p></li>
<li><p>Twoja próbka 300 osób ma średnią 5,7. Rozkład próbkowania ma średnią 5,5 i odchylenie standardowe 0,65. Różnica między Twoją średnią a średnią rozkładu próbkowania wynosi 0,2. Jaka jest szansa wylosowania próbki o takim lub większym odchyleniu (czyli mniej niż 5,3 lub więcej niż 5,7)?</p></li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Odpowiedź
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?1%20-%20pnorm(121,%5C%20mean%20=%20100,%5C%20sd%20=%207)%20%5Capprox%200,13%5C%25"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?pnorm(-0.78,%5C%200,%5C%200.5)%20%5Capprox%205,9%5C%25"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?1%20-%20pnorm(5.7,%5C%205.5,%5C%200.65)%20+%20pnorm(5.3,%5C%205.5,%5C%200.65)%20%5Capprox%2075,8%5C%25"></p></li>
</ol>
</div>
</div>
</div>
</section>
<section id="błąd-standardowy" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="błąd-standardowy"><span class="header-section-number">4.2</span> Błąd standardowy</h2>
<p>Druga rzecz, na którą pozwala nam CLT to dokładnie rozwiązanie naszego problemu. Mówi nam ono, że możemy oszacować odchylenie standardowe rozkładu próbkowania dzieląc odchylenie standardowe naszej próbki przez pierwiastek z liczby osób badanych.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0ASE%20=%20%5Cfrac%7BSD%7D%7B%5Csqrt%7BN%7D%7D%0A"></p>
<p>Rozszyfrujmy to sobie i podajmy przykład. Skrót <img src="https://latex.codecogs.com/png.latex?SE"> oznacza <strong>błąd standardowy</strong>. Jest to specjalna nazwa na <strong>odchylenie standardowe rozkładu próbkowania</strong>. Pozwala ona odróżnić łatwo odchylenie standardowe rozkładu zmiennej, od odchylenia standardowego rozkładu próbkowania. <img src="https://latex.codecogs.com/png.latex?N"> to liczba osób w próbce. <img src="https://latex.codecogs.com/png.latex?SD"> w tym wzorze odnosi się do odchylenia standardowego <em>zmiennej</em>. Jeśli znamy prawdziwe odchylenie standardowe w populacji, to możemy je wykorzystać, ale jeśli nie (czyli zazwyczaj), to możemy je zastąpić odchyleniem standardowym naszej próbki. Jeśli sięgniesz pamięcią do wzoru na odchylenie standardowe, to możesz sobie przypomnieć, że sumę odchyleń podniesionych do kwadratu dzieliliśmy przez <img src="https://latex.codecogs.com/png.latex?N%20-%201"> zamiast przez <img src="https://latex.codecogs.com/png.latex?N">. Jest to takie zabezpieczenie wbudowane we wzór na odchylenie standardowe, dzięki któremu odchylenie standardowe z próby bardziej przypomina to z populacji. Dzięki temu, że dzieliliśmy przez <img src="https://latex.codecogs.com/png.latex?N%20-%201"> zamiast przez <img src="https://latex.codecogs.com/png.latex?N">, teraz możemy podstawiać do wzoru na błąd standardowy odchylenie standardowe z próby.</p>
<p>Zaczęliśmy od wylosowania próbki 100 mężczyzn i zmierzeniu ich inteligencji. Wiemy, że rozkład inteligencji ma średnią 100, a więc rozkład próbkowania również ma średnią 100. Odchylenie standardowe wynosi 15, co również wiemy dlatego, że wiemy odrobinę o inteligencji. Możemy więc oszacować błąd standardowy, czyli odchylenie standardowe rozkładu próbkowania.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0ASE%20=%20%5Cfrac%7BSD%7D%7B%5Csqrt%7BN%7D%7D%20=%20%5Cfrac%7B15%7D%7B%5Csqrt%7B100%7D%7D%20=%201,5%0A"></p>
<p>Przypomnijmy, że wcześniej zrobiliśmy symulację rozkładu próbkowania, losując 100 próbek po 100 osób i licząc średnie. Tak uzyskany rozkład próbkowania miał odchylenie standardowe 1.45. Jak widzimy, było to w miarę rozsądne oszacowanie, ale jeśli zamiast 100 próbek pobralibyśmy 1000, 10 000 czy 100 000, to nasz symulowany rozkład miałby odchylenie standardowe coraz bliższe 1,5. Poniżej przedstawiam 3 wykresy gęstości, które pokazują, że im więcej próbek włączymy do symulacji, tym rozkład staje się bardziej normalny, a jego odchylenie standardowe bliższe prawdziwemu. Oznacza to, że symulacja symulacją, ale pod spodem czai się jakiś <em>prawdziwy</em> rozkład próbkowania, który ma średnią 100 (równą prawdziwej średniej z populacji) i odchylenie standardowe 1,5.</p>
<p>W naszym drugim przykładzie z dochodami nie znamy prawdziwego odchylenia standardowego, ale możemy je oszacować. Załóżmy, że wylosowałem 100 osób, zapytałem o dochody i wyszło mi odchylenie standardowe 1753,93. Możemy oszacować błąd standardowy:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0ASE%20=%20%5Cfrac%7B1753,93%7D%7B%5Csqrt%7B100%7D%7D%20%5Capprox%20175%0A"></p>
<p>Jeśli wiedziałbym, że prawdziwa średnia wynosi, powiedzmy 1600 (ze średnią poradzimy sobie potem), to próbki ze średnią między 1425 i 1775 mogę uznać za zupełnie typowe (ok. 67% przypadków według prawa trzech sigm), zaś próbki ze średnią między 1250 a 1950 za zupełnie typowe (ok. 95% przypadków według prawa trzech sigm). Jeśli dzieci karmione kalarepą osiągałyby średni dochód na poziomie 2000, to miałbym mniej niż 5% szans, że ten wynik jest przypadkowy.</p>
<p>Z tego wzoru wynika też ważny wniosek – <strong>im większa próbka, tym mniejszy błąd standardowy</strong>. Możemy to sobie przedstawić na wykresach. Poniżej nałożyłem na siebie 3 histogramy. Każdy histogram to</p>
<p>95% próbek 100 osób będzie miało średnią inteligencję między 97 a 103 (<img src="https://latex.codecogs.com/png.latex?100%20%5Cpm%202%20%5Ctimes%201,5">), co policzyliśmy wyżej. Różnica między 100 a 101 będzie więc typowa, bo bardzo łatwo uzyskać ją przez przypadek. Jeśli jednak nasza próbka wyniesie nie 100, a 1000 osób, to błąd standardowy spadnie do <img src="https://latex.codecogs.com/png.latex?SE%20=%20%5Cfrac%7B15%7D%7B%5Csqrt%7B1000%7D%7D%20%5Capprox%200,47">, a więc 95% próbek będzie miało średnią między 99,06 a 100,94. Tym samym średnia 101 staje się bardziej podejrzana. Ba! Staje się istotnie różna od 100, bo szansa na uzyskanie jej przez przypadek w próbie 1000 osób jest mniejsza niż 5%<sup>2</sup>. Takie widełki nazywamy <strong>95% przedziałem ufności</strong>. Jeśli chcemy uzyskać dokładnie 95% pewności, będziemy mnożyć błąd standardowy nie przez 2, jak zrobiłem to wyżej, a przez 1,96 (patrz <a href="../posts/gestosc-prawdopodobienstwa.html#sec-inverse-norm">odwrotna dystrybuanta rozkładu normalnego</a>).</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Zadanie
</div>
</div>
<div class="callout-body-container callout-body">
<p>Pewna zmienna ma rozkład o średniej 5,5. 25 dzieci karmionych kalarepą uzyskuje średnią 5,8 z odchyleniem standardowym 0,5. Jaka jest szansa, że wynik jest przypadkowy? Załóż hipotezę prawostronną (tj. że średnia u dzieci jest 5,8 albo wyższa). Oblicz 95% przedział ufności dla średniej 5,5.</p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Odpowiedź
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<section id="błąd-standardowy-1" class="level3" data-number="4.2.1">
<h3 data-number="4.2.1" class="anchored" data-anchor-id="błąd-standardowy-1"><span class="header-section-number">4.2.1</span> Błąd standardowy</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0ASE%20=%20%5Cfrac%7B0,5%7D%7B%5Csqrt%7B25%7D%7D%20=%20%5Cfrac%7B0,5%7D%7B5%7D%20=%200,1%0A"></p>
</section>
<section id="wartość-p" class="level3" data-number="4.2.2">
<h3 data-number="4.2.2" class="anchored" data-anchor-id="wartość-p"><span class="header-section-number">4.2.2</span> Wartość <img src="https://latex.codecogs.com/png.latex?p"></h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A1%20-%20pnorm(5.8,%5C%205.5,%5C%200.1)%20=%200,13%5C%25%0A"></p>
</section>
<section id="przedział-ufności" class="level3" data-number="4.2.3">
<h3 data-number="4.2.3" class="anchored" data-anchor-id="przedział-ufności"><span class="header-section-number">4.2.3</span> Przedział ufności</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A5,5%20%5Cpm%201,96%20%5Ctimes%200,1%20=%205,5%20%5Cpm%200,196%20=%205,304%20%5Ctext%7B%20i%20%7D%205,696%0A"></p>
</section>
</div>
</div>
</div>
</section>
</section>
<section id="rozkłady-t" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Rozkłady <em>t</em></h1>
<p>Centralne Twierdzenie Graniczne pozwala nam sobie wyobrazić rozkład możliwych średnich, jakie da nam próbka o określonej wielkości. Co więcej, pozwala liczyć prawdopodobieństwo. Załóżmy, że mam próbkę o odchyleniu standardowym 20 i średniej 10. Próbka liczyła 100 osób, więc błąd standardowy wynosi <img src="https://latex.codecogs.com/png.latex?SE%20=%2020%20%5Cdivsymbol%20%5Csqrt%7B100%7D%20=%202">. Oznacza to, że np. średnią 12 lub większą wylosuję z prawdopodobieństwem <img src="https://latex.codecogs.com/png.latex?%5Cint%5E%5Cinfty_%7B12%7D%20%5Cmathcal%7BN%7D(x;%5C%2010,%5C%202%5E2)%20dx%20%5Capprox%2015,87%5C%25">. Jeśli jednak moja próbka będzie miała 1000 osób (i takie samo odchylenie standardowe i średnią), to mój błąd standardowy wyniesie już <img src="https://latex.codecogs.com/png.latex?SE%20=%2020%20%5Cdivsymbol%20%5Csqrt%7B1000%7D%20%5Capprox%200,63">. W tym momencie szansa na wylosowanie próbki o średniej 12 lub więcej spada praktycznie do zera (zachęcam do policzenia). Pojawia się jednak pewien problem. Cicho założyłem tutaj, że średnia 10 naprawdę jest średnią&nbsp;z populacji. Ale w rzeczywistości przecież nie musi tak być! Średnia z mojej konkretnej próbki przecież jest obarczona losowym błędem. Może być wyższa od prawdziwej albo niższa od prawdziwej. Skąd ja mam to wiedzieć? A jeśli nie znam prawdziwej średniej, to czy rzeczywiście mogę powiedzieć cokolwiek o rozkładzie próbkowania, skoro średnia rozkładu próbkowania jest równa średniej <em>z populacji</em>? Jest na to metoda.</p>
<p>Przypomnijmy sobie, że (jeśli próbka jest odpowiednio duża) rozkład próbkowania jest normalny. Rozkłady normalne opisują dwie liczby – średnia i odchylenie standardowe. Odchylenie standardowe rozkładu próbkowania to błąd standardowy i, jak już mówiliśmy, możemy je policzyć dzieląc odchylenie standardowe <em>z populacji</em> przez pierwiastek z wielkości próby ($SE = $). Odchylenia standardowego z populacji nie mamy, ale wzór na odchylenie standardowe z próby ma zabezpieczenie, które pozwala użyć odchylenia standardowego z próbki zamiast tego z populacji. Chodzi o tajemnicze dzielenie przez <img src="https://latex.codecogs.com/png.latex?N%20-%201"> zamiast przez <img src="https://latex.codecogs.com/png.latex?N">. Dzięki temu zabiegowi możemy <em>szacować</em> błąd standardowy za pomocą tego odchylenia standardowego, które rzeczywiście mamy. To, że coś jest <em>oszacowane</em><sup>3</sup> możemy oznaczyć daszkiem – <img src="https://latex.codecogs.com/png.latex?%5Chat%7BSE%7D%20=%20%5Cfrac%7B%5Chat%7B%5Csigma%7D%7D%7B%5Csqrt%7BN%7D%7D">. Czyli odchylenie standardowe rozkładu próbkowania (błąd standardowy) mamy oszacowane, ale średnia takiego zabezpieczenia nie zawiera. Jeśli chcemy wykorzystać średnią z próby zamiast prawdziwej średniej z populacji musimy skorzystać z pewnej sztuczki – zamiast zwykłego rozkładu normalnego wykorzystamy rozkład <em>t</em>.</p>
<p>Rozkład<sup>4</sup> <em>t</em> to trochę zmodyfikowany rozkład normalny, który bierze pod uwagę fakt, że nie mamy prawdziwej średniej z populacji, tylko obarczoną losowym błędem średnią z próby. Działa on (i wygląda) bardzo podobnie do rozkładu normalnego. Ma też swoją dystrybuantę, z której możemy korzystać identycznie, jak z dystrybuanty rozkładu normalnego. W R dostaniemy się do niej funkcją <code>pt()</code> albo możemy wykorzystać jakiś <a href="https://www.danielsoper.com/statcalc/calculator.aspx?id=41">kalkulator online</a>. Większość kalkulatorów dystrybuanty rozkładu <em>t</em> wymaga jednak wartości <em>wystandaryzowanych</em>, czyli przemielonych wzorem <img src="https://latex.codecogs.com/png.latex?Z(x)%20=%20%5Cfrac%7Bx%20-%20M_x%7D%7BSD%7D">.</p>
<p>Do tego, rozkład <em>t</em>, poza średnią i odchyleniem standardowym wykorzystuje jeszcze trzeci parametr – stopnie swobody. Pomyślmy, zadaniem rozkładu <em>t</em> jest wziąć pod uwagę, że nasza średnia z próby ma w sobie jakiś błąd. Ale wydaje się naturalne, że średnia z próby 10 osób pewnie ma większy błąd niż średnia z próby 100 osób. Rozkład <em>t</em> musi więc wiedzieć, jak duża jest nasza próba, żeby określić, jak dużą poprawkę zastosować. Stopnie swobody to złożony matematyczny potworek, który spotkaliśmy już przy wzorze na odchylenie standardowe. Nie będę tłumaczył co to jest i dlaczego, ale żeby dostać liczbę stopni swobody dla rozkładu <em>t</em>, od wielkości naszej próby odejmujemy 1. Próba 100 osób ma więc 99 stopni swobody. W praktyce jest to okienko w kalkulatorze, które trzeba uzupełnić.</p>
<p>Przeróbmy to na przykładzie. Weźmy naszą poprzednią próbkę 100 osób o średniej 10 i odchyleniu standardowym 20. Błąd standardowy wynosi 2 na mocy Centralnego Twierdzenia Granicznego. Załóżmy, że zmierzyliśmy to samo u dzieci karmionych kalarepą i wyszła nam średnia 12. Jaka jest szansa, że to przypadek? Rozwiązywaliśmy już takie problemy za pomocą rozkładu normalnego, teraz jednak robimy to porządnie i wykorzystujemy rozkład <em>t</em>. Chcemy sprawdzić prawdopodobieństwo przypadkowego uzyskania średniej 12 lub więcej. Najpierw standaryzuję nasz wynik 12 i wychodzi <img src="https://latex.codecogs.com/png.latex?t%20=%20%5Cfrac%7B12%20-%2010%7D%7B2%7D%20=%201">. Liczba stopni swobody to <img src="https://latex.codecogs.com/png.latex?100%20-%201%20=%2099">. Następnie liczę <img src="https://latex.codecogs.com/png.latex?%5Cint%5E%5Cinfty_1%20t(x;%5C%2099)%20dx">. W R załatwi to komenda <code>pt(1, 99, lower.tail = FALSE)</code> albo <code>1 - pt(1, 99)</code>. Uzyskana wartość to <img src="https://latex.codecogs.com/png.latex?p%20=%2015,99%5C%25">, czyli odrobinę wyższa niż ta z rozkładu normalnego. To zawyżenie prawdopodobieństwa to właśnie poprawka na fakt, że nie mamy średniej <em>z populacji</em>, tylko z próby. Jak widać różnica nie jest duża, a to wynika z faktu, że jeśli nasza próbka to jakieś 100 lub więcej osób, to rozkłady <em>t</em> stają się naprawdę bardzo podobne do rozkładów normalnych.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Test <em>t</em>-Studenta
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Policz błąd standardowy.</p></li>
<li><p>Wystandaryzuj różnicę. Załóż, że prawdziwa jest średnia grupy kontrolnej.</p></li>
<li><p>Policz liczbę stopni swobody <img src="https://latex.codecogs.com/png.latex?N-1">.</p></li>
<li><p>Policz wartość dystrybuanty rozkładu <em>t</em>:</p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cint_%7B-%5Cinfty%7D%5E%7Bx%7D%20t(x;%5C%20df)%20dx"> – dla hipotezy kierunkowej zakładającej spadek.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cint%5E%7B%5Cinfty%7D_%7Bx%7D%20t(x;%5C%20df)%20dx"> – dla hipotezy kierunkowej zakładającej wzrost.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?1%20-%20%5Cint_%7B-x%7D%5E%7Bx%7D%20t(x;%5C%20df)%20dx"> albo inaczej <img src="https://latex.codecogs.com/png.latex?%5Cint_%7B-%5Cinfty%7D%5E%7B-x%7D%20t(x;%5C%20df)%20dx%20+%201%20-%20%5Cint_%7Bx%7D%5E%7B%5Cinfty%7D%20t(x;%5C%20df)%20dx"> – dla hipotezy bezkierunkowej.</p></li>
</ol></li>
</ol>
</div>
</div>
<p>W rzeczywistości jest kilka rzeczy, które można zrobić lepiej, żeby odpowiedzieć na to pytanie. Związane jest to z tym, jak się modeluje różnice. Jeśli średnia dzieci karmionych kalarepą się różni, ale odchylenie standardowe jest takie samo, to możemy policzyć to tak, jak pokazałem wyżej. Nazywa się to testem <em>t</em> Studenta. Jeśli jednak nie zakładamy, że odchylenia standardowe tych dwóch populacji (ogólnej i dzieci karmionych kalarepą) są identyczne, powinniśmy <strong>dodać wariancje</strong> tych dwóch rozkładów, żeby uzyskać wariancję rozkładu próbkowania <em>różnicy</em>. Innymi słowy tworzymy tutaj trzeci rozkład, który nie pokazuje nam średniej w populacji ogólnej, ani średniej w populacji dzieci karmionych kalarepą, ale mówi nam, jakie różnice między próbkami z tych dwóch populacji będziemy spotykać. Różnica tutaj wyniosła 2 (na plusie). Rozkład ten może nam powiedzieć, jak łatwo dostać różnicę 2 przez przypadek albo innymi słowy jak często będziemy spotykali taką lub większą różnicę. Tutaj i dzieci karmione standardowo, i dzieci karmione kalarepą wykazały błąd standardowy 2. Wariancja to odchylenie standardowe do kwadratu, więc <img src="https://latex.codecogs.com/png.latex?2%5E2%20+%202%5E2%20=%208">. Jeśli chcemy mieć znowu błąd standardowy (ale tym razem <em>różnicy</em>, nie żadnej średniej), wyciągamy z tego pierwiastek <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B8%7D%20=%202%20%5Csqrt%7B2%7D%20%5Capprox%202,83">. Różnicę 2 dzielimy więc przez nowo uzyskane odchylenie <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B2%7D%7B2,83%7D%20=%200,71">. I dopiero tę wartość wrzucamy do dystrybuanty <img src="https://latex.codecogs.com/png.latex?p%20=%201%20-%20pt(0.71,%5C%2099)%20%5Capprox%2024%5C%25">. W takiej wersji (niezakładającej różnych wariancji) ten test nazywa się testem <em>t</em> Welcha. W R jest to domyślny test <em>t</em>, przeprowadzany jeśli nie ustawimy tego inaczej.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Test <em>t</em>-Welcha
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Policz osobno błędy standardowe w obu grupach.</p></li>
<li><p>Podnieś je do kwadratu, żeby uzyskać wariancje i zsumuj je.</p></li>
<li><p>Wyciągnij z otrzymanej wariancji pierwiastek, żeby uzyskać błąd standardowy rozkładu różnic.</p></li>
<li><p>Wystandaryzuj różnicę. Załóż, że prawdziwa jest średnia grupy kontrolnej. Wykorzystaj błąd standardowy rozkładu różnic.</p></li>
<li><p>Policz liczbę stopni swobody <img src="https://latex.codecogs.com/png.latex?N-1">.</p></li>
<li><p>Policz wartość dystrybuanty rozkładu <em>t</em>:</p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cint_%7B-%5Cinfty%7D%5E%7Bx%7D%20t(x;%5C%20df)%20dx"> – dla hipotezy kierunkowej zakładającej spadek.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cint%5E%7B%5Cinfty%7D_%7Bx%7D%20t(x;%5C%20df)%20dx"> – dla hipotezy kierunkowej zakładającej wzrost.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?1%20-%20%5Cint_%7B-x%7D%5E%7Bx%7D%20t(x;%5C%20df)%20dx"> albo inaczej <img src="https://latex.codecogs.com/png.latex?%5Cint_%7B-%5Cinfty%7D%5E%7B-x%7D%20t(x;%5C%20df)%20dx%20+%201%20-%20%5Cint_%7Bx%7D%5E%7B%5Cinfty%7D%20t(x;%5C%20df)%20dx"> – dla hipotezy bezkierunkowej.</p></li>
</ol></li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Zadanie
</div>
</div>
<div class="callout-body-container callout-body">
<p>Załóżmy, że badamy, jak soplówka jeżowata (taki grzyb) wpływa na funkcje poznawcze. Wykorzystamy sobie prawdziwe dane z badań Moriego i współpracowników <span class="citation" data-cites="mori2009">(2009)</span>. Zbadaliśmy 2 grupy po 15 osób. Przez 16 tygodni jednej grupie podawaliśmy placebo, a drugiej soplówkę jeżowatą. Na koniec zmierzyliśmy ich funkcje poznawcze standaryzowanym testem. Po 16 tygodniach, w grupie eksperymentalnej średni wynik w teście funkcji poznawczych wyniósł <img src="https://latex.codecogs.com/png.latex?M_%7Beksp.%7D%20=%2027,4"> (<img src="https://latex.codecogs.com/png.latex?SD_%7Beksp.%7D%20=%201,6">), zaś w grupie kontrolnej <img src="https://latex.codecogs.com/png.latex?M_%7Bkont.%7D%20=%2025,4"> (<img src="https://latex.codecogs.com/png.latex?SD_%7Bkont.%7D%20=%204">). Czy różnica jest istotna statystycznie (czyli czy prawdopodobieństwo uzyskania tego wyniku przypadkowo wynosi mniej niż 5%)?</p>
<ol type="1">
<li><p>Policz z założeniem (ewidentnie fałszywym), że grupy mają identyczną wariancję równą wariancji grupy kontrolnej.</p>
<ol type="1">
<li><p>Załóż hipotezę kierunkową, że soplówka jeżowata <em>zwiększa</em> skuteczność w testach funkcji poznawczych (różnica taka jaka jest lub wyższa).</p></li>
<li><p>Załóż hipotezę bezkierunkową, że soplówka jeżowata <em>zmienia</em> skuteczność w testach funkcji poznawczych (różnica w dół lub w górę).</p></li>
</ol></li>
<li><p>Policz bez założenia o jednorodności wariancji.</p>
<ol type="1">
<li><p>Załóż hipotezę kierunkową.</p></li>
<li><p>Załóż hipotezę bezkierunkową.</p></li>
</ol></li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Odpowiedź
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<section id="section" class="level3" data-number="5.0.1">
<h3 data-number="5.0.1" class="anchored" data-anchor-id="section"><span class="header-section-number">5.0.1</span> 1.</h3>
<p>Najpierw liczę błąd standardowy: <img src="https://latex.codecogs.com/png.latex?%0ASE%20=%20%5Cfrac%7B4%7D%7B%5Csqrt%7B15%7D%7D%20=%201,03%0A"></p>
<p>Potem standaryzuję różnicę zakładając, że średnia z grupy kontrolnej jest prawdziwa: <img src="https://latex.codecogs.com/png.latex?%0At%20=%20%5Cfrac%7B27,4%20-%2025,4%7D%7B1,03%7D%20=%201,94%0A"></p>
<section id="section-1" class="level4" data-number="5.0.1.1">
<h4 data-number="5.0.1.1" class="anchored" data-anchor-id="section-1"><span class="header-section-number">5.0.1.1</span> 1.1</h4>
<p>Liczę wartość <img src="https://latex.codecogs.com/png.latex?p"> dla hipotezy kierunkowej: <img src="https://latex.codecogs.com/png.latex?%0A%5Cint_%7B1,94%7D%5E%7B%5Cinfty%7D%20t(x;%5C%2014)%20dx%20=%201%20-%20pt(1.94,%5C%2014)%20%5Capprox%203,6%5C%25%0A"></p>
<p>3,6% to mniej niż 5%, a więc różnica jest istotna statystycznie.</p>
</section>
<section id="section-2" class="level4" data-number="5.0.1.2">
<h4 data-number="5.0.1.2" class="anchored" data-anchor-id="section-2"><span class="header-section-number">5.0.1.2</span> 1.2</h4>
<p>Liczę wartość <img src="https://latex.codecogs.com/png.latex?p"> dla hipotezy bezkierunkowej: <img src="https://latex.codecogs.com/png.latex?%0A1%20-%20%5Cint_%7B-1,94%7D%5E%7B1,94%7D%20t(x;%5C%2014)%20dx%20=%20pt(-1.94,%5C%2014)%20+%201%20-%20pt(1.94,%5C%2014)%20%5Capprox%207,3%5C%25%0A"></p>
<p>7,3% to więcej niż 5%, więc różnica nie jest istotna statystycznie.</p>
</section>
</section>
<section id="section-3" class="level3" data-number="5.0.2">
<h3 data-number="5.0.2" class="anchored" data-anchor-id="section-3"><span class="header-section-number">5.0.2</span> 2.</h3>
<p>Liczę osobno błędy standardowe:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0ASE_%7Bkont.%7D%20&amp;=%20%5Cfrac%7B4%7D%7B%5Csqrt%7B15%7D%7D%20=%201,03%20%5C%5C%0ASE_%7Beksp.%7D%20&amp;=%20%5Cfrac%7B1,6%7D%7B%5Csqrt%7B15%7D%7D%20=%200,41%0A%5Cend%7Balign*%7D%0A"></p>
<p>Dodaję wariancje, żeby uzyskać wariancję rozkładu różnic: <img src="https://latex.codecogs.com/png.latex?%0A1,03%5E2%20+%200,41%5E2%20=%201,229%0A"></p>
<p>Wyciągam pierwiastek z wariancji, żeby uzyskać błąd standardowy rozkładu różnic:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csqrt%7B1,229%7D%20=%201,11%0A"></p>
<p>Standaryzuję wartość różnicy zakładając, że średnia z grupy kontrolnej jest prawdziwa:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0At%20=%20%5Cfrac%7B27,4%20-%2025,4%7D%7B1,11%7D%20=%201,8%0A"></p>
<section id="section-4" class="level4" data-number="5.0.2.1">
<h4 data-number="5.0.2.1" class="anchored" data-anchor-id="section-4"><span class="header-section-number">5.0.2.1</span> 2.1</h4>
<p>Liczę wartość <img src="https://latex.codecogs.com/png.latex?p"> dla hipotezy kierunkowej:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cint_%7B1,8%7D%5E%7B%5Cinfty%7D%20t(x;%5C%2014)%20dx%20=%201%20-%20pt(1.8,%5C%2014)%20%5Capprox%204,8%5C%25%0A"></p>
<p>4,8% to mniej niż 5%, czyli różnica jest istotna statystycznie.</p>
</section>
<section id="section-5" class="level4" data-number="5.0.2.2">
<h4 data-number="5.0.2.2" class="anchored" data-anchor-id="section-5"><span class="header-section-number">5.0.2.2</span> 2.2</h4>
<p>Liczę wartość <img src="https://latex.codecogs.com/png.latex?p"> dla hipotezy bezkierunkowej: <img src="https://latex.codecogs.com/png.latex?%0A1%20-%20%5Cint_%7B-1,8%7D%5E%7B1,8%7D%20t(x;%5C%2014)%20dx%20=%20pt(-1.8,%5C%2014)%20+%201%20-%20pt(1.8,%5C%2014)%20%5Capprox%209,3%5C%25%0A"></p>
<p>9,3% to więcej niż 5%, czyli różnica jest nieistotna statystycznie.</p>
</section>
</section>
</div>
</div>
</div>
</section>
<section id="podsumowanie" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Podsumowanie</h1>
<ol type="1">
<li><p>Rozkład zmiennej w próbie mówi nam tylko o danej konkretnej próbie. Rozkład próbkowania mówi nam, jak wyglądają średnie we wszystkich możliwych próbach i jak łatwo jest je uzyskać.</p></li>
<li><p>Jak mówi Centralne Twierdzenie Graniczne, rozkład próbkowania jest normalny, jeśli próba liczy minimum 15 (według niektórych 30) obserwacji. Średnia tego rozkładu równa jest prawdziwej średniej z populacji.</p></li>
<li><p>Rozkład próbkowania ma swoje odchylenie standardowe zwane błędem standardowym, liczone ze wzoru z Centralnego Twierdzenia Granicznego <img src="https://latex.codecogs.com/png.latex?SE%20=%20%5Cfrac%7B%5Csigma%7D%7B%5Csqrt%7BN%7D%7D"></p></li>
<li><p>Z tego wzoru wynika, że im większa próba, tym błąd standardowy mniejszy, a więc średnia z próby bardziej wiarygodna.</p></li>
<li><p>Wzór na odchylenie standardowe ma w sobie poprawkę, która pozwala używać go zamiast odchylenia standardowego z populacji. Jeśli chcemy użyć średniej z próby jako średniej z populacji, musimy wykorzystać rozkład <em>t</em>.</p></li>
<li><p>Istotność statystyczną, gdy wariancje są równe, możemy sprawdzić testem <em>t</em>-Studenta. Wartość <em>t</em> do dystrybuanty liczymy ze wzoru <img src="https://latex.codecogs.com/png.latex?t%20=%20%5Cfrac%7Bx%20-%20M%7D%7BSE%7D"></p></li>
<li><p>Istotność statystyczną, bez założenia jednorodności wariancji, możemy sprawdzić testem <em>t</em>-Welcha. Wartość <em>t</em> do dystrybuanty liczymy ze wzoru <img src="https://latex.codecogs.com/png.latex?t%20=%20%5Cfrac%7Bx%20-%20M%7D%7B%5Csqrt%7BSE_1%5E2%20+%20SE_2%5E2%7D%7D%20=%20%5Cfrac%7Bx%20-%20M%7D%7B%5Csqrt%7B%5Cfrac%7B%5Csigma_1%5E2%7D%7Bn_1%7D%20+%20%5Cfrac%7B%5Csigma_2%5E2%7D%7Bn_2%7D%7D%7D"></p></li>
</ol>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">Bibliografia</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-borch-jacobsen2021" class="csl-entry">
Borch-Jacobsen, M. (2021). <em>Freud’s patients: a book of lives</em>. London: Reaktion Books.
</div>
<div id="ref-mori2009" class="csl-entry">
Mori, K., Inatomi, S., Ouchi, K., Azumi, Y., &amp; Tuchida, T. (2009). Improving effects of the mushroom Yamabushitake ( <span><em>Hericium erinaceus</em></span> ) on mild cognitive impairment: a double-blind placebo-controlled clinical trial. <em>Phytotherapy Research</em>, <em>23</em>(3), 367–372. <a href="https://doi.org/10.1002/ptr.2634">https://doi.org/10.1002/ptr.2634</a>
</div>
<div id="ref-wackerly2008" class="csl-entry">
Wackerly, D. D., Mendenhall, W., &amp; Scheaffer, R. L. (2008). <em>Mathematical statistics with applications</em> (Seventh edition). Belmont: Thomson Brooks/Cole.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Przypisy</h2>

<ol>
<li id="fn1"><p>Sprawa jest nieco bardziej skomplikowana. Prawdą jest, że odpowiednio duża próbka <em>wystarczy</em>, żeby uznać, że rozkład próbkowania jest normalny, ale może on być normalny też dla mniejszych prób, jeśli rozkład <em>zmiennej</em> też jest normalny. I tak na przykład próbka 10 wyników w teście inteligencji też będzie miała normalny rozkład próbkowania, bo inteligencja rozkłada się normalnie. Ale w praktyce badań naukowych takie rozważania to bicie piany – nikt nie będzie robił badania ilościowego z próbką 10 osób. Jedyny moment, kiedy może się to przydać, to gdy niezbyt duża próbka zostanie jeszcze podzielona na podgrupy i okaże się np. że mężczyzn jest mniej niż 15 (w badaniach psychologicznych nierzadkie zjawisko!). Uzyskanie istotności statystycznej z taką próbką i tak będzie trudne, ale założenie normalności rozkładu próbkowania nie zostanie złamane.↩︎</p></li>
<li id="fn2"><p>A dokładnie wynosi <img src="https://latex.codecogs.com/png.latex?%5Cint_%7B101%7D%5E%5Cinfty%20%5Cmathcal%20N(x;%5C%20100,%5C%200,47)%20%5Capprox%201,7%5C%25">, jeśli chcemy znać szansę uzyskania średniej 101 lub większej albo <img src="https://latex.codecogs.com/png.latex?3,3%5C%25">, jeśli nie zakładamy, w którą stronę mężczyźni różnią się od kobiet i liczymy w obie strony.↩︎</p></li>
<li id="fn3"><p>Albo, w statystycznej nowomowie, <em>wyestymowane</em>.↩︎</p></li>
<li id="fn4"><p>W rzeczywistości rozkłady <em>t</em> to cała grupa nieco różniących się od siebie w szczegółach rozkładów, z których najbardziej znany jest rozkład <em>t</em>-Studenta. <em>Student</em> to pseudonim Williama S. Gosseta, który opracował ten rozkład, żeby móc testować partie piwa Guinness. Gosset chciał, żeby różnice między piwem wzorcowym a każdą partią wypuszczaną na rynek <em>nie były</em> istotne statystycznie.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Statystyka</category>
  <guid>https://nieobliczalne.pl/posts/rozklady-probkowania.html</guid>
  <pubDate>Sat, 28 Oct 2023 22:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/rozklady-probkowania.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Gęstość prawdopodobieństwa i rozkład normalny</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa.html</link>
  <description><![CDATA[ 




<p>Pomimo tego, że rozkład normalny jest podstawą statystyki jako takiej, <strong>nie trzeba go głęboko rozumieć, żeby używać statystyki</strong>. Jest to użyteczna wiedza, którą musimy posiąść, jeśli <em>naprawdę</em> chcemy rozumieć, co robimy. Jednak da się żyć i sprawnie wyciągać wnioski statystyczne i bez tej wiedzy. Ten wpis można potraktować więc jako spojrzenie w głębię statystyki, ale na pierwsze zetknięcie z tą dziedziną znacznie lepiej przeczytać wpisy o <a href="../posts/procent-wariancji.html">wariancji</a> i o <a href="../posts/p-value.html">wartości <img src="https://latex.codecogs.com/png.latex?p"></a>.</p>
<section id="histogramy-i-gęstość-prawdopodobieństwa" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Histogramy i gęstość prawdopodobieństwa</h1>
<p>Wyobraźmy sobie, że losujemy 2000 osób i robimy im test inteligencji, np. WAIS-R. Jedno takie badanie trwa 60-90 minut, więc po ponad roku nierobienia niczego innego mamy całą dużą bazę wyników surowych. Przeliczamy, jak naszym badanym poszło, patrzymy w tabelki z normami i dla każdej osoby badanej uzyskujemy wynik na specjalnej skali do wyrażania inteligencji. Skala ta jest zrobiona tak, żeby światowa średnia inteligencja zawsze wynosiła <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%20100">, a odchylenie standardowe <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%2015">. Na razie nie jest ważne, czym jest odchylenie standardowe matematycznie (zainteresowanym polecam <a href="../posts/procent-wariancji.html">wpis o wariancji</a>). Chodzi w nim mniej więcej o to, że większość populacji (około <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B2%7D%7B3%7D">) ma wyniki między 85 a 115, czyli 100±15. Wyniki przedstawiamy na histogramie.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">p_tys <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">IQ =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylim</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"liczba osób w próbce"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-histogram-1" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-histogram-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-histogram-1-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-histogram-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;1: Histogram inteligencji w próbie 2000 osób. Wynik na osi Y to liczba osób, których inteligencja mieści się w danych widełkach. Szerokość jednego słupka to 20 punktów.
</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylim</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"liczba osób w próbce"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-histogram-1-dark" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-histogram-1-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-histogram-1-dark-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-histogram-1-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;2: Histogram inteligencji w próbie 2000 osób. Wynik na osi Y to liczba osób, których inteligencja mieści się w danych widełkach. Szerokość jednego słupka to 20 punktów.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Jak czytać coś takiego? Każdy słupek to pewne widełki. Tutaj ustawiłem te widełki na szerokość 20 punktów. I tak na przykład środkowy słupek to widełki 90-110. Z osi Y naszego histogramu możemy odczytać, że takich osób w naszej próbce było trochę ponad 900. W widełkach 70-90 i 110-130 uplasowało się trochę po prawie 500 osób itd. Fakt, że w histogramie każdy słupek reprezentuje wartości od-do jest niepozorny, ale potem okaże się bardzo ważny.</p>
<p>Zamiast prezentować bezwzględne liczby możemy użyć proporcji. Trochę ponad 900 osób to w naszej próbce trochę mniej niż 50%. Jest to wygodne, ponieważ odcina trochę sam histogram od wielkości próby. Ponieważ próba ma być tylko przybliżeniem prawdziwej populacji, to ostatecznie nie interesuje nas, ile osób w próbie miało inteligencję między 90 a 110, tylko jaki procent osób w całej Polsce ma inteligencję między 90 a 110. Z naszej próby możemy wnioskować, że takich osób jest trochę mniej niż 50%.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(count))), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"odsetek osób w próbce"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-histogram-2" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-histogram-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-histogram-2-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-histogram-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;3: Tym razem na osi Y umieściłem nie liczebność danej grupy, a jaki procent stanowi ona w całej próbie.
</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(count))), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"odsetek osób w próbce"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-histogram-2-dark" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-histogram-2-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-histogram-2-dark-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-histogram-2-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;4: Tym razem na osi Y umieściłem nie liczebność danej grupy, a jaki procent stanowi ona w całej próbie.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Takie przedstawienie sprawy odblokowuje nam nowy sposób myślenia o tym rozkładzie – jeśli miałbym teraz losowo wybrać jedną osobę z tej grupy, to mam trochę mniej niż 50% szans, że będzie z widełek 90-110, trochę ponad 20%, że będzie z widełek 110-130 itd. Ta zmiana osi Y sprawiła, że możemy patrzeć na nasz histogram jako na <strong>histogram prawdopodobieństwa</strong>.</p>
<p>Słupki możemy też do siebie dodawać, np. skoro widełki 90-110 mają prawdopodobieństwo 47%, a widełki 110-130 mają prawdopodobieństwo 24%, to łącznie widełki 90-130 mają prawdopodobieństwo 71%.</p>
<p>Możemy jednak być niezadowoleni z tej dokładności. Co jeśli chcę określić, jaką mam szansę znaleźć osobę z węższych widełek, np. 95-105? Nasze słupki są zbyt szerokie, żeby to stwierdzić, ale możemy je zawęzić i uzyskać dokładniejszy obraz.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(count))), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"odsetek osób w próbce"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-histogram-3" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-histogram-3-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-histogram-3-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-histogram-3-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;5: Zmniejszenie szerokości słupków (tutaj do 10) sprawia, że histogram jest dokładniejszy. Każdy słupek z osobna ma też mniejsze prawdopodobieństwo.
</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(count))), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"odsetek osób w próbce"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-histogram-3-dark" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-histogram-3-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-histogram-3-dark-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-histogram-3-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;6: Zmniejszenie szerokości słupków (tutaj do 10) sprawia, że histogram jest dokładniejszy. Każdy słupek z osobna ma też mniejsze prawdopodobieństwo.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Na powyższym rysunku każdy słupek ma szerokość 10, więc nasze widełki skurczyły się do 95-105, 105-115, 115-130 itd. Warto też zwrócić uwagę, że każdy ze słupków stał się niższy. Łączne prawdopodobieństwo musi zawsze wynosić 100%, więc gdy rozbijam tę wartość na więcej kawałków, to każdy kawałek musi być, siłą rzeczy, mniejszy. Widać to na kolejnym rysunku, gdzie nakładam na siebie szerszy i węższy histogram.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(count))), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(count))), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray75"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"odsetek osób w próbce"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-histogram-4" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-histogram-4-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-histogram-4-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-histogram-4-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;7: Po nałożeniu na siebie histogramów widać, jak się różnią.
</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(count))), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(count))), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"odsetek osób w próbce"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-histogram-4-dark" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-histogram-4-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-histogram-4-dark-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-histogram-4-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;8: Po nałożeniu na siebie histogramów widać, jak się różnią.
</figcaption>
</figure>
</div>
</div>
</div>
<p>A co jeśli taka dokładność też mnie nie zadowala? Mogę spróbować zmniejszyć dokładność do jednego punktu. Wtedy będę mógł liczyć prawdopodobieństwo dla dowolnych widełek.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(count))), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"odsetek osób w próbce"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-histogram-5" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-histogram-5-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-histogram-5-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-histogram-5-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;9: Ten histogram ma już bardzo wąskie słupki, bo o szerokości zaledwie 1 punktu. Maksymalne prawdopodobieństwo wynosi już poniżej 3%.
</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(count))), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"odsetek osób w próbce"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-histogram-5-dark" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-histogram-5-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-histogram-5-dark-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-histogram-5-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;10: Ten histogram ma już bardzo wąskie słupki, bo o szerokości zaledwie 1 punktu. Maksymalne prawdopodobieństwo wynosi już poniżej 3%.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Super, może nie jest to zbyt wygodny wykres, ale dodając do siebie słupki możemy wyliczyć prawdopodobieństwo dowolnego wyniku, np. widełek 101-103. WAIS-R pozwala nam uzyskać wyniki z dokładnością do 1 punktu, więc niżej nie ma po co schodzić. Chyba że…</p>
<p>Owszem, nasze testy inteligencji dają wyniki z określoną dokładnością, ale zakładamy, że inteligencja istnieje naprawdę. Teoretycznie ludzie mogą się różnić inteligencją o pół punktu, ale nie mamy narzędzi, żeby to wykryć. Możemy też sobie wyobrazić, że mierzymy zmienne, które rzeczywiście są ciągłe, np. reakcję skórno-galwaniczną (wskaźnik stresu), rozszerzenie źrenic, tempo oddechu itd. Źrenice naprawdę mogą rozszerzyć się o kolejne 0,0001 mm i tylko od naszej aparatury pomiarowej zależy, czy będziemy w stanie to wykryć. Może więc istnieć sens zwężania naszych słupków jeszcze bardziej i bardziej i bardziej, aż w końcu będą one nieskończenie cienkie i zleją się&nbsp;ze sobą tworząc ciągłą linię. Taki wykres nazywamy <strong>wykresem gęstości</strong>. Gdy na osi Y mamy procenty, możemy mówić o <strong>wykresie gęstości prawdopodobieństwa</strong>.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-density-1" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-density-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-density-1-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-density-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;11: Wykres gęstości prawdopodobieństwa na podstawie naszej próbki, który możemy rozumieć jako histogram ze słupkami tak cienkimi, że zlewają się w jedno pole.
</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-density-1-dark" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-density-1-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-density-1-dark-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-density-1-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;12: Wykres gęstości prawdopodobieństwa na podstawie naszej próbki, który możemy rozumieć jako histogram ze słupkami tak cienkimi, że zlewają się w jedno pole.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Powyższy wykres gęstości jest ilustracją naszej próbki. Każda taka próbka będzie się różniła co do szczegółów, więc i wykresy gęstości mogą wyglądać różnie. Nasza próbka liczyła sobie 2000 osób, ale możemy się domyślać, że próbka 3000 osób da dokładniejsze wyniki. 4000 osób da jeszcze dokładniejsze wyniki. 10 000 osób jeszcze dokładniejsze itd. Ostatecznie taki rozkład będzie się zbliżał do równiutkiego, regularnego kształtu zwanego <strong>krzywą dzwonową</strong>. Rozkład o takim kształcie nazywamy <strong>rozkładem normalnym</strong>.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-density-2" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-density-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-density-2-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-density-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;13: Wykres gęstości prawdopodobieństwa z rozkładu normalnego ma kształt krzywej dzwonowej.
</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div id="fig-density-2-dark" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-density-2-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/fig-density-2-dark-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-density-2-dark-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;14: Wykres gęstości prawdopodobieństwa z rozkładu normalnego ma kształt krzywej dzwonowej.
</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="gęstość-prawdopodobieństwa-vs.-prawdopodobieństwo" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Gęstość prawdopodobieństwa <em>vs</em>. prawdopodobieństwo</h1>
<p>Dokładny wykres gęstości prawdopodobieństwa pozwala nam liczyć prawdopodobieństwo dla dowolnych zakresów z dowolną dokładnością. Zyskaliśmy więc olbrzymie możliwości! Czai się&nbsp;tutaj jednak pewna pułapka. Gdy patrzymy na nasz wykres gęstości, chciałoby się powiedzieć, że szansa na to, że ktoś będzie miał inteligencję równą 100 wynosi ok. 2,5%.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Z tym wnioskowaniem jest jednak pewien znaczący problem, który prezentuje tabela 1.</p>
<div class="cell">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(X, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kbl</span>(points, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">booktabs =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</details>
<div id="tbl-likelihood" class="cell quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-likelihood-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Tabela&nbsp;1: Wartości z osi Y dla IQ między 95 a 105 co 0.25.
</figcaption>
<div aria-describedby="tbl-likelihood-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<table class="do-not-create-environment cell caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th"></th>
<th style="text-align: right;" data-quarto-table-cell-role="th">X</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">1</td>
<td style="text-align: right;">95.00</td>
<td style="text-align: right;">0.0251589</td>
</tr>
<tr class="even">
<td style="text-align: left;">2</td>
<td style="text-align: right;">95.25</td>
<td style="text-align: right;">0.0252955</td>
</tr>
<tr class="odd">
<td style="text-align: left;">3</td>
<td style="text-align: right;">95.50</td>
<td style="text-align: right;">0.0254259</td>
</tr>
<tr class="even">
<td style="text-align: left;">4</td>
<td style="text-align: right;">95.75</td>
<td style="text-align: right;">0.0255498</td>
</tr>
<tr class="odd">
<td style="text-align: left;">5</td>
<td style="text-align: right;">96.00</td>
<td style="text-align: right;">0.0256671</td>
</tr>
<tr class="even">
<td style="text-align: left;">6</td>
<td style="text-align: right;">96.25</td>
<td style="text-align: right;">0.0257779</td>
</tr>
<tr class="odd">
<td style="text-align: left;">7</td>
<td style="text-align: right;">96.50</td>
<td style="text-align: right;">0.0258819</td>
</tr>
<tr class="even">
<td style="text-align: left;">8</td>
<td style="text-align: right;">96.75</td>
<td style="text-align: right;">0.0259792</td>
</tr>
<tr class="odd">
<td style="text-align: left;">9</td>
<td style="text-align: right;">97.00</td>
<td style="text-align: right;">0.0260695</td>
</tr>
<tr class="even">
<td style="text-align: left;">10</td>
<td style="text-align: right;">97.25</td>
<td style="text-align: right;">0.0261529</td>
</tr>
<tr class="odd">
<td style="text-align: left;">11</td>
<td style="text-align: right;">97.50</td>
<td style="text-align: right;">0.0262293</td>
</tr>
<tr class="even">
<td style="text-align: left;">12</td>
<td style="text-align: right;">97.75</td>
<td style="text-align: right;">0.0262986</td>
</tr>
<tr class="odd">
<td style="text-align: left;">13</td>
<td style="text-align: right;">98.00</td>
<td style="text-align: right;">0.0263608</td>
</tr>
<tr class="even">
<td style="text-align: left;">14</td>
<td style="text-align: right;">98.25</td>
<td style="text-align: right;">0.0264158</td>
</tr>
<tr class="odd">
<td style="text-align: left;">15</td>
<td style="text-align: right;">98.50</td>
<td style="text-align: right;">0.0264635</td>
</tr>
<tr class="even">
<td style="text-align: left;">16</td>
<td style="text-align: right;">98.75</td>
<td style="text-align: right;">0.0265040</td>
</tr>
<tr class="odd">
<td style="text-align: left;">17</td>
<td style="text-align: right;">99.00</td>
<td style="text-align: right;">0.0265371</td>
</tr>
<tr class="even">
<td style="text-align: left;">18</td>
<td style="text-align: right;">99.25</td>
<td style="text-align: right;">0.0265629</td>
</tr>
<tr class="odd">
<td style="text-align: left;">19</td>
<td style="text-align: right;">99.50</td>
<td style="text-align: right;">0.0265814</td>
</tr>
<tr class="even">
<td style="text-align: left;">20</td>
<td style="text-align: right;">99.75</td>
<td style="text-align: right;">0.0265925</td>
</tr>
<tr class="odd">
<td style="text-align: left;">21</td>
<td style="text-align: right;">100.00</td>
<td style="text-align: right;">0.0265962</td>
</tr>
<tr class="even">
<td style="text-align: left;">22</td>
<td style="text-align: right;">100.25</td>
<td style="text-align: right;">0.0265925</td>
</tr>
<tr class="odd">
<td style="text-align: left;">23</td>
<td style="text-align: right;">100.50</td>
<td style="text-align: right;">0.0265814</td>
</tr>
<tr class="even">
<td style="text-align: left;">24</td>
<td style="text-align: right;">100.75</td>
<td style="text-align: right;">0.0265629</td>
</tr>
<tr class="odd">
<td style="text-align: left;">25</td>
<td style="text-align: right;">101.00</td>
<td style="text-align: right;">0.0265371</td>
</tr>
<tr class="even">
<td style="text-align: left;">26</td>
<td style="text-align: right;">101.25</td>
<td style="text-align: right;">0.0265040</td>
</tr>
<tr class="odd">
<td style="text-align: left;">27</td>
<td style="text-align: right;">101.50</td>
<td style="text-align: right;">0.0264635</td>
</tr>
<tr class="even">
<td style="text-align: left;">28</td>
<td style="text-align: right;">101.75</td>
<td style="text-align: right;">0.0264158</td>
</tr>
<tr class="odd">
<td style="text-align: left;">29</td>
<td style="text-align: right;">102.00</td>
<td style="text-align: right;">0.0263608</td>
</tr>
<tr class="even">
<td style="text-align: left;">30</td>
<td style="text-align: right;">102.25</td>
<td style="text-align: right;">0.0262986</td>
</tr>
<tr class="odd">
<td style="text-align: left;">31</td>
<td style="text-align: right;">102.50</td>
<td style="text-align: right;">0.0262293</td>
</tr>
<tr class="even">
<td style="text-align: left;">32</td>
<td style="text-align: right;">102.75</td>
<td style="text-align: right;">0.0261529</td>
</tr>
<tr class="odd">
<td style="text-align: left;">33</td>
<td style="text-align: right;">103.00</td>
<td style="text-align: right;">0.0260695</td>
</tr>
<tr class="even">
<td style="text-align: left;">34</td>
<td style="text-align: right;">103.25</td>
<td style="text-align: right;">0.0259792</td>
</tr>
<tr class="odd">
<td style="text-align: left;">35</td>
<td style="text-align: right;">103.50</td>
<td style="text-align: right;">0.0258819</td>
</tr>
<tr class="even">
<td style="text-align: left;">36</td>
<td style="text-align: right;">103.75</td>
<td style="text-align: right;">0.0257779</td>
</tr>
<tr class="odd">
<td style="text-align: left;">37</td>
<td style="text-align: right;">104.00</td>
<td style="text-align: right;">0.0256671</td>
</tr>
<tr class="even">
<td style="text-align: left;">38</td>
<td style="text-align: right;">104.25</td>
<td style="text-align: right;">0.0255498</td>
</tr>
<tr class="odd">
<td style="text-align: left;">39</td>
<td style="text-align: right;">104.50</td>
<td style="text-align: right;">0.0254259</td>
</tr>
<tr class="even">
<td style="text-align: left;">40</td>
<td style="text-align: right;">104.75</td>
<td style="text-align: right;">0.0252955</td>
</tr>
<tr class="odd">
<td style="text-align: left;">41</td>
<td style="text-align: right;">105.00</td>
<td style="text-align: right;">0.0251589</td>
</tr>
</tbody>
</table>


</div>
</div>
</figure>
</div>
</div>
<p>To są dokładne wartości z osi Y dla 41 różnych punktów z osi X. Zaczynamy od 95 i dochodzimy do 105 co 0,25. Załóżmy, że chcemy policzyć prawdopodobieństwo, że losowa osoba znajdzie się w widełkach 95-105. Innymi słowy jaka część naszej próbki wykazała inteligencję między 95 a 105. Z wykresu 5. spodziewamy się, że wyjdzie około 25%. Dodajemy więc zgromadzone w tabeli wartości i wychodzi nam, że nasze prawdopodobieństwo wynosi 107%. Chwila, co?</p>
<p>Rzeczywiście nie ma to sensu. Nie dość, że prawdopodobieństwo jako takie nie może być większe niż 100%, to wychodzi też na to, że 107% naszej próbki miało inteligencję z przedziału 95-105. To nie tylko nie ma sensu, ale przecież jest jeszcze cała reszta rozkładu. Ba! między punktem 100 i 101 jest nieskończona liczba punktów! Jeśli zamiast co 0,25 wykorzystałbym krok 0,1, prawdopodobieństwo wzrosłoby do 264%, zaś przy kroku 0,01, wyniesie 2614%! Dlaczego tak się dzieje?</p>
<p>Przypomnijmy sobie rysunek 7. Zauważyliśmy na nim, że im węższe są nasze słupki, tym każdy pojedynczy słupek musi być niższy, żeby zawsze dodawały się one do 100%. Nagle jednak stwierdziłem, że zrobię słupki nieskończenie cienkie. Idąc wcześniejszą logiką, automatycznie powinny się one stać nieskończenie niskie. Jednak gdy program statystyczny liczy wykres gęstości prawdopodobieństwa, korzysta z zaawansowanych matematycznie narzędzi, które pozwalają uzyskać efekt ciągłej linii bez redukcji pojedynczych prawdopodobieństw do zera. I musimy o tym pamiętać, gdy korzystamy z tych wykresów.</p>
<p>To, co możemy odczytać z osi Y, określamy angielskim słowem <em>likelihood</em>, co bywa tłumaczone jako właśnie <em>gęstość&nbsp;prawdopodobieństwa</em> albo <em>wiarygodność</em>. Nas jednak nie obchodzi gęstość prawdopodobieństwa tylko prawdziwe prawdopodobieństwo! To, co intuicyjnie rozumiemy przez <em>prawdopodobieństwo</em>, oddaje angielski termin <em>probability</em> i jest zupełnie czymś innym niż <em>likelihood</em>. Dla poprawnego zrozumienia wykresów gęstości to rozróżnienie jest absolutnie kluczowe – <strong>gęstość prawdopodobieństwa i prawdopodobieństwo to dwie różne rzeczy</strong>! Gęstość prawdopodobieństwa możemy odczytać z osi Y, a skąd wziąć prawdopodobieństwo?</p>
<p>Wykres gęstości możemy wyobrazić sobie jako histogram. Jak w każdym histogramie, potrzebujemy jakichś widełek, żeby móc odczytywać dane. A niech będą cieniutkie, ale jakieś są potrzebne. W poprzednim przykładzie założyliśmy sobie widełki 95-105 i próbowaliśmy dodawać do siebie cienkie prostokąty między tymi wartościami. Istnieje jednak bardzo duża różnica pomiędzy cienkimi a nieskończenie cienkimi prostokątami! Skoro są nieskończenie cienkie, to jest ich też nieskończona liczba. A jak dodać do siebie nieskończoną liczbę nieskończenie cienkich prostokątów i przy okazji nie otrzymać nieskończenie wielkiej wartości? Wydaje się to niemożliwe, ale matematyka jest jak matka pięcioraczków – ma swoje sposoby.</p>
</section>
<section id="prawdopodobieństwo-z-wykresów-gęstości" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Prawdopodobieństwo z wykresów gęstości</h1>
<p>Tak jak wcześniej powiedziałem, jeśli chcemy z wykresu gęstości otrzymać prawdopodobieństwo, to – jak przy każdym histogramie – musimy mieć jakieś widełki. Normalnie są one określone szerokością słupka, ale tutaj możemy ustalić je samodzielnie. Mogą to być widełki pomiędzy określonymi wartościami, np. IQ 95-105, ale też nierówności typu „IQ mniejsze od 85” albo „IQ większe niż 130”. Najpierw nauczymy się takie prawdopodobieństwa szacować, potem zapisywać w sposób matematyczny, a na koniec nauczymy się liczyć je z większą dokładnością.</p>
<section id="szacowanie-prostokątami-riemanna" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="szacowanie-prostokątami-riemanna"><span class="header-section-number">3.1</span> Szacowanie prostokątami Riemanna</h2>
<p>Załóżmy ponownie, że chcemy policzyć, jaka część populacji wykazuje inteligencję między 95 a 105. Od razu podam odpowiedź – 26,11%. Nic nam po samej odpowiedzi, jeśli nie umiemy tego liczyć, ale miejmy to w głowie. Za moment będziemy określać te wartości z pewnym przybliżeniem, więc dobrze jest znać dokładną wartość, żeby móc stwierdzić, czy dobrze przybliżyliśmy. Zaznaczmy sobie na wykresie przestrzeń, o którą&nbsp;nam chodzi.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">normal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># definicja zmiennej `normal` w trybie dziennym</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Żeby odczytać prawdopodobieństwo z takiego wykresu, musimy oszacować, wielkość przestrzeni, którą zaznaczyłem na czerwono. Wielkość przestrzeni, czyli… pole. Na czerwono zaznaczony jest prawie prostokąt, tylko ma brzuszek na górze. Jeśli będę mógł oszacować pole tego prostokąta, to to <strong>pole właśnie będzie naszym prawdopodobieństwem</strong>. Jak więc to zrobić? Bardzo z grubsza możemy brzuszek zignorować i udawać, że jest to rzeczywiście prostokąt.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8F1A1A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8F1A1A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Szerokość tego prostokąta wynosi 10 (bo od 95 do 105 na osi X), zaś jego wysokość odczytujemy z osi Y, czyli jest taka, jak gęstość prawdopodobieństwa dla <img src="https://latex.codecogs.com/png.latex?x%20=%20100">. Odczytywanie tej wielkości z wykresu szybko robi się niepraktyczne, dlatego możemy ją wyliczyć. Możemy to zrobić podstawiając bezpośrednio do wzoru (który wygląda tak strasznie, że go nie pokażę), wykorzystując funkcję <code>dnorm(100, 100, 15)</code> w R (pierwszy argument to wartość, drugi to średnia, trzeci odchylenie standardowe), korzystając z <a href="https://www.danielsoper.com/statcalc/calculator.aspx?id=54">internetowego kalkulatora</a> albo kalkulatora naukowego. Możemy teraz skorzystać ze wzoru na pole prostokąta i, po wybiciu się&nbsp;z flashbacków ze szkoły podstawowej, otrzymać wynik:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP%20%5Capprox%200.02659%20%5Ctimes%2010%20=%200,2659%20=%2026,59%5C%25%0A"></p>
<p>Nieźle! Pomimo tak zgrubnego oszacowania, błąd wynosi mniej niż 1 punkt procentowy. Tworzy nam się więc schemat – wystarczy pomnożyć gęstość prawdopodobieństwa przez szerokość widełek i wyjdzie! Co nie? No i tak, i nie. Powyższy przykład pokazuje, że czasem to zadziała. Zobaczmy jednak, co się&nbsp;stanie, jak będziemy chcieli tak oszacować wartość dla szerszego przedziału 70-130.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8F1A1A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-23-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8F1A1A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Wysokość się nie zmieniła, zaś szerokość wzrosła do 60. Przemnożenie tych wartości da nam prawdopodobieństwo 159,58%. No.&nbsp;Przesadziliśmy odrobinę. Jak widać na wykresie, nasz prostokąt wystaje poza krzywą tak bardzo, że aż jego pole jest większe niż 100%. To może zmieńmy strategię i wciśnijmy nasz prostokąt pod krzywą, żeby na pewno nie wystawał?</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8F1A1A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-25-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8F1A1A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-26-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Wysokość tego prostokąta równa jest gęstości prawdopodobieństwa w punktach 70 i 130. Nie jest istotne, który wybierzemy, bo rozkład normalny jest symetryczny. Ponieważ oba te są tak samo oddalone od środka (o 30 punktów), mają taką samą wysokość. Policzenie pola naszego prostokąta ujawnia nam to, co widać już na oko, czyli że pole jest znacznie zaniżone, bowiem wychodzi <img src="https://latex.codecogs.com/png.latex?P%20%5Capprox%2060%20%5Ctimes%200,0036%20=%200,216%20=%2021,6%5C%25">. Wiemy więc tyle, że nasze pole jest nie mniejsze niż 0,216 i nie większe niż 1,6. Super. Tyle to widzę na oko.</p>
<p>Możemy jednak zmienić strategię i zamiast wyznaczać pole jednego dużego prostokąta, podzielić go wiele małych. Na przykład nasz przedział możemy rozbić na 7 prostokątów po 10<sup>1</sup>. W ten sposób wykres gęstości zaczyna trochę przypominać histogram, ale trzeba pamiętać, że po to rysujemy prostokąty, żeby policzyć pole. Wartość z osi Y ciągle nie jest prawdopodobieństwem.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">riemann <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(X, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))</span>
<span id="cb26-2"></span>
<span id="cb26-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> riemann, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(X, Y), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8F1A1A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resolution</span>(riemann<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>X)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-27-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># definicja zmiennej `riemann` w trybie dziennym</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> riemann, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(X, Y), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8F1A1A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resolution</span>(riemann<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>X)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-28-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Nasze prostokąty mają środki w punktach 70, 80, 90, 100, 110, 120 i 130. Gdy policzymy gęstość prawdopodobieństwa dla każdego z tych punktów i przemnożymy przez szerokość 10, to wychodzi nam pole <img src="https://latex.codecogs.com/png.latex?P%20%5Capprox%200,9826%20=%2098,26%5C%25">. Wartość prawdziwa to <img src="https://latex.codecogs.com/png.latex?P%20%5Capprox%200,9545">, więc błąd ewidentnie zmalał. I maleje bardziej, gdy narysujemy jeszcze cieńsze prostokąty.</p>
<p>Wróćmy pamięcią do tabeli 1. Zaznaczyłem tam 41 punktów od 95 do 105 licząc co 0,25. Następnie zsumowałem te wartości i otrzymałem 107%. Ale wyobraźmy sobie to, co zrobiłem, nieco inaczej. Wyznaczyłem wysokość 41 prostokątów, z których każdy miał szerokość 0,25. Następnie dodałem wszystkie wysokości, ale zignorowałem szerokość. Jeśli teraz uwzględnię, że liczę pole i każdy prostokąt<sup>2</sup> przemnożę przez 0,25, to powinienem otrzymać niezłe oszacowanie! I rzeczywiście, 41 prostokątów o szerokości 0,25 pozwala nam oszacować powierzchnię między 95 a 105 na 26,74%. W porównaniu z prawdziwą wartością 26,11%, wygląda to całkiem przyzwoicie.</p>
</section>
<section id="zapis-całkowy" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="zapis-całkowy"><span class="header-section-number">3.2</span> Zapis całkowy</h2>
<p>Szacowanie pola pod krzywą za pomocą prostokątów Riemanna, czyli to, co zrobiliśmy wyżej, to stara i skuteczna metoda. Jeśli chcemy otrzymać naprawdę dokładne wartości, możemy dzielić pole na setki, tysiące, miliony prostokątów i uzyskać przez to dowolną dokładność naszego oszacowania. Technicznie jednak żadna z tych wartości nie będzie doskonale dokładna. Nie ma to praktycznego znaczenia, ale jeśli chcemy zachować matematyczną czystość, musimy skorzystać z pewnego szczególnego zapisu.</p>
<p>Wiemy już, że prostokąty pod krzywą są nieskończenie cienkie. Wiemy też, że wzór na pole prostokąta to długość razy szerokość. Spójrzmy na taki „nieskończenie” cienki prostokąt.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8F1A1A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">99.9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100.1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-29-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rect"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8F1A1A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">99.9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100.1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-30-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Wysokość tego prostokąta to gęstość prawdopodobieństwa dla <img src="https://latex.codecogs.com/png.latex?IQ%20=%20100">. Możemy zapisać to pewną przerażająco wyglądającą notacją <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D(100;%5C%20100,%5C%2015%5E2)">. Oznacza to „wartość rozkładu normalnego o średniej <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%20100"> i wariancji <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2%20=%2015%5E2"> w punkcie <img src="https://latex.codecogs.com/png.latex?x%20=%20100">”. Każdy rozkład normalny daje się dokładnie opisać dwiema liczbami – średnią i odchyleniem standardowym. Jak znam te dwie rzeczy, mogę liczyć. Warto zwrócić uwagę, że podajemy w tej notacji wariancję, a nie odchylenie standardowe, ale (jak pamiętamy z wpisu o <a href="../posts/procent-wariancji.html">wariancji</a>) wariancja to odchylenie standardowe podniesione do kwadratu.</p>
<p>Szerokość naszego prostokąta jest nieskończenie mała, co możemy zapisać jako <img src="https://latex.codecogs.com/png.latex?dx">. W uproszczeniu w matematyce tak oznaczamy nieskończenie małą wartość z osi X albo nieskończenie małą <em>zmianę</em> wartości z osi X.</p>
<p>Pole takiego prostokąta zapisalibyśmy więc jako <img src="https://latex.codecogs.com/png.latex?P%20=%20%5Cmathcal%7BN%7D(100;%5C%20100,%5C%2015%5E2)%20%5Ctimes%20dx">. Ponieważ taki prostokąt jest nieskończenie cienki, to <img src="https://latex.codecogs.com/png.latex?dx"> to właściwie zero, więc i pole jednego takiego prostokąta jest zerowe. Ale jeśli dodamy nieskończoną liczbę takich prostokątów, może coś nam z tego wyjdzie. Oczywiście w praktyce one nigdy nie będą <em>nieskończenie cienkie</em>, ale gdy zawężamy je coraz bardziej, to nasz wynik <em>zbliża się</em> do prawdziwego wyniku.</p>
<p>Matematyka pozwala nam zapisać nasze zamiary w dokładny sposób. Możemy na przykład zapisać coś w rodzaju „dodaję pola wszystkich nieskończenie małych prostokątów między 95 a 105”. W praktyce takie dodawanie musi mieć jakąś konkretną szerokość tych prostokątów. Jeśli założylibyśmy sobie szerokość 0,001, nasze obliczenia mogłyby wyglądać tak:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AP%20&amp;%20%5Capprox%20%5Cmathcal%7BN%7D(95;%5C%20100,%5C%2015%5E2)%20%5Ctimes%200.001%20+%20%5C%5C%0A&amp;%20+%20%5Cmathcal%7BN%7D(95,001;%5C%20100,%5C%2015%5E2)%20%5Ctimes%200.001%20+%20%5C%5C%0A&amp;%20+%20%5Cmathcal%7BN%7D(95,002;%5C%20100,%5C%2015%5E2)%20%5Ctimes%200.001%20+%20%5C%5C%0A&amp;%20+%20%5Cdots%20+%20%5C%5C%0A&amp;%20+%20%5Cmathcal%7BN%7D(105;%5C%20100,%5C%2015%5E2)%20%5Ctimes%200.001%0A%5Cend%7Balign*%7D%0A"></p>
<p>Matematyka pozwala nam jednak naprawdę zapisać, że dodajemy <em>wszystkie</em>, naprawdę <em>nieskończenie</em> cienkie prostokąty. Dla przedziału między 95 a 105 zapis taki wygląda następująco:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP%20=%20%5Cint%5E%7B105%7D_%7B95%7D%20%5Cmathcal%7BN%7D(x;%5C%20100,%5C%2015%5E2)%20dx%0A"></p>
<p>Rozciągnięta litera S oznacza sumę nieskończenie małych prostokątów, liczby w jej indeksach mówią, odkąd dokąd suma się dzieje, zaś to, co następuje dalej to to, co ma zostać zsumowane – pole prostokąta o wysokości równej gęstości prawdopodobieństwa w punkcie i nieskończenie małej szerokości. Nazywamy to <strong>całką oznaczoną</strong>. Oznaczona, bo ma jakieś konkretne granice, konkretny przedział, w którym ma robić wykonać sumowanie. Teraz i Ty możesz śmiać się słysząc, że wchodzi całka oznaczona do wagonu, a to nie jej przedział.</p>
<p>Żeby lepiej było widać, co to oznacza w naszym wypadku, zapiszę to jeszcze w taki sposób:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP%20(95%20%3C%20IQ%20%3C%20105)%20=%20%5Cint%5E%7B105%7D_%7B95%7D%20%5Cmathcal%7BN%7D(IQ;%5C%20100,%5C%2015%5E2)%20dIQ%0A"></p>
</section>
</section>
<section id="dystrybuanta-rozkładu-normalnego" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Dystrybuanta rozkładu normalnego</h1>
<p>Wiemy więc już, jak zapisywać i jak szacować wartości prawdopodobieństwa z rozkładu normalnego. Jest to jednak czynność na tyle powszechna, że ma swoje własne, szczególne drogi na skróty. Najważniejszą z nich jest tak zwana <strong>dystrybuanta</strong>. Za tą straszną nazwą kryje się w miarę prosta idea, jaką jest suma krocząca prawdopodobieństwa. Co to znaczy? Załóżmy, że chcemy policzyć prawdopodobieństwo wylosowania osoby z IQ poniżej 85. Na wykresie ta powierzchnia wygląda to tak:</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(p_tys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>IQ), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-31-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(p_tys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>IQ), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-32-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Możemy wykorzystać nowo poznaną notację całkową, żeby wyrazić, co chcemy zrobić:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(IQ%20%3C%2085)%20=%20%5Cint%5E%7B85%7D_%7B-%5Cinfty%7D%20%5Cmathcal%7BN%7D(x;%5C%20100,%5C%2015%5E2)%20dx%0A"></p>
<p>…czyli policz pole od <img src="https://latex.codecogs.com/png.latex?-%5Cinfty">, czyli tak bardzo w lewo, jak sięgniesz, do 85. Jak wiemy, prawdopodobieństwo z wykresu gęstości to właśnie pole.</p>
<p>To jest dokładnie to, co robi dystrybuanta. Dystrybuanta to taka funkcja, co jak do niej wrzucę 85, to ona mi powie, jakie jest prawdopodobieństwo, że wylosuję 85 <em>lub niżej</em>. Dystrybuanta często jest oznaczana jako CDF od <em>cumulative distribution function</em> i można ją znaleźć w wielu kalkulatorach, w Excelu, w R występuje jako funkcja <code>pnorm()</code>, znajdziemy ją na jednej z setek <a href="https://www.danielsoper.com/statcalc/calculator.aspx?id=53">stron internetowych</a>, a także… drukowaną w książkach.</p>
<section id="mniejsze-niż" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="mniejsze-niż"><span class="header-section-number">4.1</span> Mniejsze niż</h2>
<p>Spróbujmy wykorzystać współczesne narzędzia<sup>3</sup>, żeby odpowiedzieć na zadane pytanie – jakie jest prawdopodobieństwo, że losowo wybrana z populacji osoba będzie miała inteligencję 85 albo mniejszą?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.1586553</code></pre>
</div>
</div>
<p>W ten prosty sposób otrzymaliśmy odpowiedź, że jest to około <img src="https://latex.codecogs.com/png.latex?15,87%5C%25">.</p>
</section>
<section id="większe-niż" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="większe-niż"><span class="header-section-number">4.2</span> Większe niż</h2>
<p>Możemy też odpowiadać na pytania odwrotne, np. jakie jest prawdopodobieństwo, że losowo wybrany człowiek klasyfikuje się do Mensy (czyli ma IQ <em>powyżej</em> 130)? Na wykresie wygląda to tak:</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb34-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb34-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(p_tys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>IQ))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb34-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb34-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb34-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb34-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-34-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(p_tys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>IQ))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Możemy to ugryźć na dwa sposoby. Jeśli nasz kalkulator nam to umożliwia, możemy przełączyć dystrybuantę na jej lustrzane odbicie, czyli wprost powiedzieć, żeby wyrzuciła nam wartości <em>większe</em> niż 130 zamiast zwyczajnych mniejszych. W R możemy to zrobić ustawiając argument <code>lower.tail = FALSE</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lower.tail =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.02275013</code></pre>
</div>
</div>
<p>Bardziej klasyczny sposób opiera się na tym, że prawdopodobieństwo sumarycznie <em>musi</em> wynosić 1. Możemy więc (ze zwykłej dystrybuanty) policzyć prawdopodobieństwo, że IQ wynosi <em>mniej niż</em> 130, a następnie otrzymaną wartość odjąć od 1. Tak też możesz zrobić korzystając z kalkulatora internetowego.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.02275013</code></pre>
</div>
</div>
<p>Swoją drogą przypomnę, że prawdopodobieństwo odpowiada tutaj odsetkowi osób w próbie lub w populacji. Możemy więc policzyć na przykład, ilu potencjalnych Mensan zamieszkuje całą Polskę.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># liczba mieszkańców Polski (2022) razy odsetek potencjalnych Mensan</span></span>
<span id="cb40-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37766327</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lower.tail =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 859188.9</code></pre>
</div>
</div>
</section>
<section id="sec-pomiedzy" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="sec-pomiedzy"><span class="header-section-number">4.3</span> Między danymi wartościami</h2>
<p>Na początku tego wpisu powiedziałem, że odchylenie standardowe <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%2015"> oznacza, że około <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B2%7D%7B3%7D"> populacji znajduje się w widełkach 85-115, czyli 100±15. Skąd to wiedziałem? Cóż, możemy to policzyć.</p>
<p>Wiele kalkulatorów pozwala na policzenie wartości według danych widełek, ale część pozwala tylko na liczenie czystej dystrybuanty czyli prawdopodobieństwa, że wartość będzie <em>mniejsza</em> niż zadana. Na wykresie od naszej wartości w lewo. Możemy jednak wykorzystać dystrybuantę do policzenia odsetka populacji <em>pomiędzy</em> jakimiś wartościami. Robimy to w dwóch krokach.</p>
<p>Po pierwsze, liczymy wartość dystrybuanty dla górnych widełek, czyli w naszym przypadku 115.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(p_tys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>IQ), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-39-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(p_tys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>IQ), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-40-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Następnie liczymy dystrybuantę&nbsp;dla dolnych widełek, czyli w tym wypadku 85.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(p_tys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>IQ), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3DDB6A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(p_tys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>IQ), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-41-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(p_tys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>IQ), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3DDB6A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(p_tys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>IQ), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-42-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>A na koniec odejmujemy jedno od drugiego.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-43-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(p_tys, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(IQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exec</span>(geom_area, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>normal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQ"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-44-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>W R możemy to zrobić tak:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.6826895</code></pre>
</div>
</div>
<p>Jak widzimy, można z grubsza powiedzieć, że w rozkładzie normalnym ±1 odchylenie standardowe przekłada się na <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B2%7D%7B3%7D"> populacji albo <img src="https://latex.codecogs.com/png.latex?P(%5Cmu%20%5Cpm%201%5Csigma)%20=%2068,2%5C%25">. Na tej samej zasadzie <img src="https://latex.codecogs.com/png.latex?P(%5Cmu%20%5Cpm%202%5Csigma)%20=%2095,4%5C%25"> i <img src="https://latex.codecogs.com/png.latex?P(%5Cmu%20%5Cpm%203%5Csigma)%20=%2099,5%5C%25">. Ta intuicja bywa nazywana <strong>prawem trzech sigm</strong>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://commons.wikimedia.org/wiki/File:Standard_deviation_diagram.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/8/8c/Standard_deviation_diagram.svg" title="M. W. Toews, CC BY 2.5 <https://creativecommons.org/licenses/by/2.5>, via Wikimedia Commons" class="img-fluid figure-img" style="width:100.0%" alt="Standard deviation diagram"></a></p>
<figcaption>Rycina ilustrująca prawo trzech sigm na Wikipedii</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Zadanie
</div>
</div>
<div class="callout-body-container callout-body">
<p>Jakie jest prawdopodobieństwo wylosowania osoby o inteligencji:</p>
<ol type="1">
<li><p>mniejszej niż -2 odchylenia standardowe (czyli <img src="https://latex.codecogs.com/png.latex?100%20-%202%20%5Ctimes%2015%20=%2070">),</p></li>
<li><p>większej niż +1 odchylenie standardowe,</p></li>
<li><p>między -1 odchyleniem standardowym a średnią,</p></li>
<li><p>dokładnie 100.</p></li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Odpowiedź
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?P(IQ%20%3C%2070)%20=%20%5Cint%5E%7B70%7D_%7B-%5Cinfty%7D%20%5Cmathcal%7BN%7D(x;%5C%20100,%5C%2015%5E2)%20dx%20%5Capprox%200,02275013%20%5Capprox%202,28%5C%25"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?P(IQ%20%3E%20115)%20=%20%5Cint%5E%7B%5Cinfty%7D_%7B115%7D%20%5Cmathcal%7BN%7D(x;%5C%20100,%5C%2015%5E2)%20dx%20%5Capprox%200,1586553%20%5Capprox%2015,87%5C%25"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?P(85%20%3E%20IQ%20%3E%20100)%20=%20%5Cint%5E%7B100%7D_%7B85%7D%20%5Cmathcal%7BN%7D(x;%5C%20100,%5C%2015%5E2)%20dx%20%5Capprox%200,3413447%20%5Capprox%2034,13%5C%25"></p></li>
<li><p>Do tego pytania można podejść dwojako. Możemy stwierdzić, że dokładnie 100 to jest pojedynczy nieskończenie cienki prostokąt, a więc prawdopodobieństwo (jego pole) wynosi zero. Lepiej to widać na rozszerzeniu źrenic – dokładnie 7 mm oznacza brak nawet jednej milionowej odchylenia, więc jest właściwie niemożliwe. Pamiętaj – wykres gęstości działa jak histogram, więc potrzebuje widełek. Możemy jednak stwierdzić, że wyniki między 99,5 a 100,5 zaokrąglają się do 100 i to uznać za odpowiedź. W takim wypadku <img src="https://latex.codecogs.com/png.latex?P(IQ%20%5Capprox%20100)%20=%20%5Cint%5E%7B100,5%7D_%7B99,5%7D%20%5Cmathcal%7BN%7D(x;%5C%20100,%5C%2015%5E2)%20dx%20%5Capprox%200.02659123%20%5Capprox%202,66%5C%25">.</p></li>
</ol>
</div>
</div>
</div>
</section>
<section id="sec-inverse-norm" class="level2" data-number="4.4">
<h2 data-number="4.4" class="anchored" data-anchor-id="sec-inverse-norm"><span class="header-section-number">4.4</span> Odwrotna dystrybuanta</h2>
<p>Każda funkcja ma swoją funkcję odwrotną<sup>4</sup>. Tak samo dystrybuanta. Do dystrybuanty wrzucamy jakąś wartość z rozkładu (np. IQ), a ona zwraca, jaki procent populacji cechuje taka lub niższa wartość. Do odwrotnej dystrybuanty wrzucamy, jaki procent populacji chcemy objąć, a ona wyrzuca maksymalną wartość z rozkładu.</p>
<p>Załóżmy, że chcemy do projektu naukowego włączyć ludzi z górnych 10% rozkładu inteligencji. Czyli jak dobrze musi wypaść w teście inteligencji dana osoba, żeby zostać włączona do projektu? Jakie minimalne IQ musi uzyskać? Na takie właśnie pytania odpowiada odwrotna dystrybuanta. Przykładowy kalkulator można znaleźć <a href="https://planetcalc.com/4987/">tutaj</a>, zaś w R odpowiada za nią funkcja <code>qnorm()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># patrząc od lewej</span></span>
<span id="cb50-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qnorm</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 119.2233</code></pre>
</div>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># patrząc od prawej</span></span>
<span id="cb52-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qnorm</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lower.tail =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 119.2233</code></pre>
</div>
</div>
</section>
<section id="tablice-statystyczne" class="level2" data-number="4.5">
<h2 data-number="4.5" class="anchored" data-anchor-id="tablice-statystyczne"><span class="header-section-number">4.5</span> Tablice statystyczne</h2>
<p>Zanim komputery stały się oczywiste, dystrybuantę rozkładu normalnego odczytywano z drukowanych tablic. Do dziś można je znaleźć w podręcznikach do statystyki czy tablicach do zadań. Warto umieć je czytać, dlatego omówię je krótko. Jest to też świetna wymówka, by omówić proces standaryzacji.</p>
<section id="standaryzacja" class="level3" data-number="4.5.1">
<h3 data-number="4.5.1" class="anchored" data-anchor-id="standaryzacja"><span class="header-section-number">4.5.1</span> Standaryzacja</h3>
<p>Każdy rozkład normalny jest opisywany przez swoją średnią i odchylenie standardowe. Możemy wymyślać dowolne rozkłady normalne manipulując tymi dwiema wartościami. Cały ten wpis posługiwaliśmy się skalą inteligencji, a więc rozkładem normalnym o parametrach <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%20100"> i <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%2015">. Istnieją jeszcze inne rozkłady stosowane w psychologii, np. steny (m.in. wyniki NEO-PI-R, czyli testu osobowości wg Wielkiej Piątki) z parametrami <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%205,5"> i <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%202"> czy teny (m.in. potężny kliniczny test MMPI) z parametrami <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%2050"> i <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%2010">. Matką wszystkich rozkładów normalnych jest jednak tzw. <strong>standardowy rozkład normalny</strong>, czyli rozkład wyliczony tak, by jego średnia wynosiła <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%200">, a odchylenie standardowe <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%201">.</p>
<p>Wynik z dowolnej skali normalnej da się przeliczyć na standardowy rozkład normalny, co zresztą często się&nbsp;robi. Prawo trzech sigm pokazuje, że człowiek może nauczyć się myśleć w odchyleniach standardowych i naukowcy prowadzący obliczenia statystyczne często myślą raczej w odchyleniach standardowych niż w jednostkach.</p>
<p>Ponieważ standardowy rozkład normalny jest… standardowy, to wszystkie tablice są skalibrowane pod niego. By móc skorzystać ze zwykłych tablic statystycznych, musimy umieć <strong>wystandaryzować</strong> daną wartość, czyli przedstawić ją w postaci odchyleń standardowych. Istnieją do tego <a href="https://www.danielsoper.com/statcalc/calculator.aspx?id=22">kalkulatory</a>, ale wzór na to jest naprawdę prosty. Od wyniku odejmujemy średnią naszego wyjściowego rozkładu, dzięki czemu będzie on dodatni, jeśli jest wyższy od średniej i ujemny, jeśli jest niższy. Potem dzielimy otrzymaną liczbę przez odchylenie standardowe i już. Tak otrzymaną wartość oznaczamy zwykle literą <img src="https://latex.codecogs.com/png.latex?Z"> (tzw. <em>Z-score</em>).</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AZ(x)%20=%20%5Cfrac%7Bx%20-%20%5Cmu%7D%7B%5Csigma%7D%0A"></p>
</section>
</section>
<section id="korzystanie" class="level2" data-number="4.6">
<h2 data-number="4.6" class="anchored" data-anchor-id="korzystanie"><span class="header-section-number">4.6</span> Korzystanie</h2>
<div class="cell">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">norm_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.09</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb54-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb54-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb54-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb54-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb54-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dimnames =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb54-7">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decimal.mark =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>),</span>
<span id="cb54-8">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0,0"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb54-9">        )</span>
<span id="cb54-10">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb54-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb54-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decimal.mark =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>)</span>
<span id="cb54-13"></span>
<span id="cb54-14">norm_table[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1,6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0,07"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cell_spec</span>(norm_table[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1,6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0,07"</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bold =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb54-15">norm_table[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1,3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0,03"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cell_spec</span>(norm_table[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1,3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0,03"</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bold =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb54-16"></span>
<span id="cb54-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kbl</span>(norm_table, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">escape =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb54-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">column_spec</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bold =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</details>
<div id="tbl-tablica-rozkladu-normalnego" class="cell quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-tablica-rozkladu-normalnego-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Tabela&nbsp;2: Przykładowa tablica dystrybuanty rozkładu normalnego z zaznaczonymi wartościami dla <em>Z</em> = 1,67 i <em>Z</em> = 1,33.
</figcaption>
<div aria-describedby="tbl-tablica-rozkladu-normalnego-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<table class="do-not-create-environment cell caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th">0,00</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">0,01</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">0,02</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">0,03</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">0,04</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">0,05</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">0,06</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">0,07</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">0,08</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">0,09</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">0,0</td>
<td style="text-align: left;">0,5000</td>
<td style="text-align: left;">0,5040</td>
<td style="text-align: left;">0,5080</td>
<td style="text-align: left;">0,5120</td>
<td style="text-align: left;">0,5160</td>
<td style="text-align: left;">0,5199</td>
<td style="text-align: left;">0,5239</td>
<td style="text-align: left;">0,5279</td>
<td style="text-align: left;">0,5319</td>
<td style="text-align: left;">0,5359</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">0,1</td>
<td style="text-align: left;">0,5398</td>
<td style="text-align: left;">0,5438</td>
<td style="text-align: left;">0,5478</td>
<td style="text-align: left;">0,5517</td>
<td style="text-align: left;">0,5557</td>
<td style="text-align: left;">0,5596</td>
<td style="text-align: left;">0,5636</td>
<td style="text-align: left;">0,5675</td>
<td style="text-align: left;">0,5714</td>
<td style="text-align: left;">0,5753</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">0,2</td>
<td style="text-align: left;">0,5793</td>
<td style="text-align: left;">0,5832</td>
<td style="text-align: left;">0,5871</td>
<td style="text-align: left;">0,5910</td>
<td style="text-align: left;">0,5948</td>
<td style="text-align: left;">0,5987</td>
<td style="text-align: left;">0,6026</td>
<td style="text-align: left;">0,6064</td>
<td style="text-align: left;">0,6103</td>
<td style="text-align: left;">0,6141</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">0,3</td>
<td style="text-align: left;">0,6179</td>
<td style="text-align: left;">0,6217</td>
<td style="text-align: left;">0,6255</td>
<td style="text-align: left;">0,6293</td>
<td style="text-align: left;">0,6331</td>
<td style="text-align: left;">0,6368</td>
<td style="text-align: left;">0,6406</td>
<td style="text-align: left;">0,6443</td>
<td style="text-align: left;">0,6480</td>
<td style="text-align: left;">0,6517</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">0,4</td>
<td style="text-align: left;">0,6554</td>
<td style="text-align: left;">0,6591</td>
<td style="text-align: left;">0,6628</td>
<td style="text-align: left;">0,6664</td>
<td style="text-align: left;">0,6700</td>
<td style="text-align: left;">0,6736</td>
<td style="text-align: left;">0,6772</td>
<td style="text-align: left;">0,6808</td>
<td style="text-align: left;">0,6844</td>
<td style="text-align: left;">0,6879</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">0,5</td>
<td style="text-align: left;">0,6915</td>
<td style="text-align: left;">0,6950</td>
<td style="text-align: left;">0,6985</td>
<td style="text-align: left;">0,7019</td>
<td style="text-align: left;">0,7054</td>
<td style="text-align: left;">0,7088</td>
<td style="text-align: left;">0,7123</td>
<td style="text-align: left;">0,7157</td>
<td style="text-align: left;">0,7190</td>
<td style="text-align: left;">0,7224</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">0,6</td>
<td style="text-align: left;">0,7257</td>
<td style="text-align: left;">0,7291</td>
<td style="text-align: left;">0,7324</td>
<td style="text-align: left;">0,7357</td>
<td style="text-align: left;">0,7389</td>
<td style="text-align: left;">0,7422</td>
<td style="text-align: left;">0,7454</td>
<td style="text-align: left;">0,7486</td>
<td style="text-align: left;">0,7517</td>
<td style="text-align: left;">0,7549</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">0,7</td>
<td style="text-align: left;">0,7580</td>
<td style="text-align: left;">0,7611</td>
<td style="text-align: left;">0,7642</td>
<td style="text-align: left;">0,7673</td>
<td style="text-align: left;">0,7704</td>
<td style="text-align: left;">0,7734</td>
<td style="text-align: left;">0,7764</td>
<td style="text-align: left;">0,7794</td>
<td style="text-align: left;">0,7823</td>
<td style="text-align: left;">0,7852</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">0,8</td>
<td style="text-align: left;">0,7881</td>
<td style="text-align: left;">0,7910</td>
<td style="text-align: left;">0,7939</td>
<td style="text-align: left;">0,7967</td>
<td style="text-align: left;">0,7995</td>
<td style="text-align: left;">0,8023</td>
<td style="text-align: left;">0,8051</td>
<td style="text-align: left;">0,8078</td>
<td style="text-align: left;">0,8106</td>
<td style="text-align: left;">0,8133</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">0,9</td>
<td style="text-align: left;">0,8159</td>
<td style="text-align: left;">0,8186</td>
<td style="text-align: left;">0,8212</td>
<td style="text-align: left;">0,8238</td>
<td style="text-align: left;">0,8264</td>
<td style="text-align: left;">0,8289</td>
<td style="text-align: left;">0,8315</td>
<td style="text-align: left;">0,8340</td>
<td style="text-align: left;">0,8365</td>
<td style="text-align: left;">0,8389</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">1,0</td>
<td style="text-align: left;">0,8413</td>
<td style="text-align: left;">0,8438</td>
<td style="text-align: left;">0,8461</td>
<td style="text-align: left;">0,8485</td>
<td style="text-align: left;">0,8508</td>
<td style="text-align: left;">0,8531</td>
<td style="text-align: left;">0,8554</td>
<td style="text-align: left;">0,8577</td>
<td style="text-align: left;">0,8599</td>
<td style="text-align: left;">0,8621</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">1,1</td>
<td style="text-align: left;">0,8643</td>
<td style="text-align: left;">0,8665</td>
<td style="text-align: left;">0,8686</td>
<td style="text-align: left;">0,8708</td>
<td style="text-align: left;">0,8729</td>
<td style="text-align: left;">0,8749</td>
<td style="text-align: left;">0,8770</td>
<td style="text-align: left;">0,8790</td>
<td style="text-align: left;">0,8810</td>
<td style="text-align: left;">0,8830</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">1,2</td>
<td style="text-align: left;">0,8849</td>
<td style="text-align: left;">0,8869</td>
<td style="text-align: left;">0,8888</td>
<td style="text-align: left;">0,8907</td>
<td style="text-align: left;">0,8925</td>
<td style="text-align: left;">0,8944</td>
<td style="text-align: left;">0,8962</td>
<td style="text-align: left;">0,8980</td>
<td style="text-align: left;">0,8997</td>
<td style="text-align: left;">0,9015</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">1,3</td>
<td style="text-align: left;">0,9032</td>
<td style="text-align: left;">0,9049</td>
<td style="text-align: left;">0,9066</td>
<td style="text-align: left;"><span style=" font-weight: bold;    ">0,9082</span></td>
<td style="text-align: left;">0,9099</td>
<td style="text-align: left;">0,9115</td>
<td style="text-align: left;">0,9131</td>
<td style="text-align: left;">0,9147</td>
<td style="text-align: left;">0,9162</td>
<td style="text-align: left;">0,9177</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">1,4</td>
<td style="text-align: left;">0,9192</td>
<td style="text-align: left;">0,9207</td>
<td style="text-align: left;">0,9222</td>
<td style="text-align: left;">0,9236</td>
<td style="text-align: left;">0,9251</td>
<td style="text-align: left;">0,9265</td>
<td style="text-align: left;">0,9279</td>
<td style="text-align: left;">0,9292</td>
<td style="text-align: left;">0,9306</td>
<td style="text-align: left;">0,9319</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">1,5</td>
<td style="text-align: left;">0,9332</td>
<td style="text-align: left;">0,9345</td>
<td style="text-align: left;">0,9357</td>
<td style="text-align: left;">0,9370</td>
<td style="text-align: left;">0,9382</td>
<td style="text-align: left;">0,9394</td>
<td style="text-align: left;">0,9406</td>
<td style="text-align: left;">0,9418</td>
<td style="text-align: left;">0,9429</td>
<td style="text-align: left;">0,9441</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">1,6</td>
<td style="text-align: left;">0,9452</td>
<td style="text-align: left;">0,9463</td>
<td style="text-align: left;">0,9474</td>
<td style="text-align: left;">0,9484</td>
<td style="text-align: left;">0,9495</td>
<td style="text-align: left;">0,9505</td>
<td style="text-align: left;">0,9515</td>
<td style="text-align: left;"><span style=" font-weight: bold;    ">0,9525</span></td>
<td style="text-align: left;">0,9535</td>
<td style="text-align: left;">0,9545</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">1,7</td>
<td style="text-align: left;">0,9554</td>
<td style="text-align: left;">0,9564</td>
<td style="text-align: left;">0,9573</td>
<td style="text-align: left;">0,9582</td>
<td style="text-align: left;">0,9591</td>
<td style="text-align: left;">0,9599</td>
<td style="text-align: left;">0,9608</td>
<td style="text-align: left;">0,9616</td>
<td style="text-align: left;">0,9625</td>
<td style="text-align: left;">0,9633</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">1,8</td>
<td style="text-align: left;">0,9641</td>
<td style="text-align: left;">0,9649</td>
<td style="text-align: left;">0,9656</td>
<td style="text-align: left;">0,9664</td>
<td style="text-align: left;">0,9671</td>
<td style="text-align: left;">0,9678</td>
<td style="text-align: left;">0,9686</td>
<td style="text-align: left;">0,9693</td>
<td style="text-align: left;">0,9699</td>
<td style="text-align: left;">0,9706</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">1,9</td>
<td style="text-align: left;">0,9713</td>
<td style="text-align: left;">0,9719</td>
<td style="text-align: left;">0,9726</td>
<td style="text-align: left;">0,9732</td>
<td style="text-align: left;">0,9738</td>
<td style="text-align: left;">0,9744</td>
<td style="text-align: left;">0,9750</td>
<td style="text-align: left;">0,9756</td>
<td style="text-align: left;">0,9761</td>
<td style="text-align: left;">0,9767</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">2,0</td>
<td style="text-align: left;">0,9772</td>
<td style="text-align: left;">0,9778</td>
<td style="text-align: left;">0,9783</td>
<td style="text-align: left;">0,9788</td>
<td style="text-align: left;">0,9793</td>
<td style="text-align: left;">0,9798</td>
<td style="text-align: left;">0,9803</td>
<td style="text-align: left;">0,9808</td>
<td style="text-align: left;">0,9812</td>
<td style="text-align: left;">0,9817</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">2,1</td>
<td style="text-align: left;">0,9821</td>
<td style="text-align: left;">0,9826</td>
<td style="text-align: left;">0,9830</td>
<td style="text-align: left;">0,9834</td>
<td style="text-align: left;">0,9838</td>
<td style="text-align: left;">0,9842</td>
<td style="text-align: left;">0,9846</td>
<td style="text-align: left;">0,9850</td>
<td style="text-align: left;">0,9854</td>
<td style="text-align: left;">0,9857</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">2,2</td>
<td style="text-align: left;">0,9861</td>
<td style="text-align: left;">0,9864</td>
<td style="text-align: left;">0,9868</td>
<td style="text-align: left;">0,9871</td>
<td style="text-align: left;">0,9875</td>
<td style="text-align: left;">0,9878</td>
<td style="text-align: left;">0,9881</td>
<td style="text-align: left;">0,9884</td>
<td style="text-align: left;">0,9887</td>
<td style="text-align: left;">0,9890</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">2,3</td>
<td style="text-align: left;">0,9893</td>
<td style="text-align: left;">0,9896</td>
<td style="text-align: left;">0,9898</td>
<td style="text-align: left;">0,9901</td>
<td style="text-align: left;">0,9904</td>
<td style="text-align: left;">0,9906</td>
<td style="text-align: left;">0,9909</td>
<td style="text-align: left;">0,9911</td>
<td style="text-align: left;">0,9913</td>
<td style="text-align: left;">0,9916</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">2,4</td>
<td style="text-align: left;">0,9918</td>
<td style="text-align: left;">0,9920</td>
<td style="text-align: left;">0,9922</td>
<td style="text-align: left;">0,9925</td>
<td style="text-align: left;">0,9927</td>
<td style="text-align: left;">0,9929</td>
<td style="text-align: left;">0,9931</td>
<td style="text-align: left;">0,9932</td>
<td style="text-align: left;">0,9934</td>
<td style="text-align: left;">0,9936</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">2,5</td>
<td style="text-align: left;">0,9938</td>
<td style="text-align: left;">0,9940</td>
<td style="text-align: left;">0,9941</td>
<td style="text-align: left;">0,9943</td>
<td style="text-align: left;">0,9945</td>
<td style="text-align: left;">0,9946</td>
<td style="text-align: left;">0,9948</td>
<td style="text-align: left;">0,9949</td>
<td style="text-align: left;">0,9951</td>
<td style="text-align: left;">0,9952</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">2,6</td>
<td style="text-align: left;">0,9953</td>
<td style="text-align: left;">0,9955</td>
<td style="text-align: left;">0,9956</td>
<td style="text-align: left;">0,9957</td>
<td style="text-align: left;">0,9959</td>
<td style="text-align: left;">0,9960</td>
<td style="text-align: left;">0,9961</td>
<td style="text-align: left;">0,9962</td>
<td style="text-align: left;">0,9963</td>
<td style="text-align: left;">0,9964</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">2,7</td>
<td style="text-align: left;">0,9965</td>
<td style="text-align: left;">0,9966</td>
<td style="text-align: left;">0,9967</td>
<td style="text-align: left;">0,9968</td>
<td style="text-align: left;">0,9969</td>
<td style="text-align: left;">0,9970</td>
<td style="text-align: left;">0,9971</td>
<td style="text-align: left;">0,9972</td>
<td style="text-align: left;">0,9973</td>
<td style="text-align: left;">0,9974</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">2,8</td>
<td style="text-align: left;">0,9974</td>
<td style="text-align: left;">0,9975</td>
<td style="text-align: left;">0,9976</td>
<td style="text-align: left;">0,9977</td>
<td style="text-align: left;">0,9977</td>
<td style="text-align: left;">0,9978</td>
<td style="text-align: left;">0,9979</td>
<td style="text-align: left;">0,9979</td>
<td style="text-align: left;">0,9980</td>
<td style="text-align: left;">0,9981</td>
</tr>
<tr class="even">
<td style="text-align: left; font-weight: bold;">2,9</td>
<td style="text-align: left;">0,9981</td>
<td style="text-align: left;">0,9982</td>
<td style="text-align: left;">0,9982</td>
<td style="text-align: left;">0,9983</td>
<td style="text-align: left;">0,9984</td>
<td style="text-align: left;">0,9984</td>
<td style="text-align: left;">0,9985</td>
<td style="text-align: left;">0,9985</td>
<td style="text-align: left;">0,9986</td>
<td style="text-align: left;">0,9986</td>
</tr>
<tr class="odd">
<td style="text-align: left; font-weight: bold;">3,0</td>
<td style="text-align: left;">0,9987</td>
<td style="text-align: left;">0,9987</td>
<td style="text-align: left;">0,9987</td>
<td style="text-align: left;">0,9988</td>
<td style="text-align: left;">0,9988</td>
<td style="text-align: left;">0,9989</td>
<td style="text-align: left;">0,9989</td>
<td style="text-align: left;">0,9989</td>
<td style="text-align: left;">0,9990</td>
<td style="text-align: left;">0,9990</td>
</tr>
</tbody>
</table>


</div>
</div>
</figure>
</div>
</div>
<p>Spróbujmy wykorzystać tablicę 2, żeby rozwiązać problem z prawdopodobieństwem wylosowania osoby z IQ między 80 a 125. Najpierw musimy przeliczyć wartości naszych widełek ze skali IQ na skalę standardową.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AZ(125)%20&amp;%20=%20%5Cfrac%7B125%20-%20100%7D%7B15%7D%20=%20%5Cfrac%7B25%7D%7B15%7D%20%5Capprox%201,67%20%5C%5C%0AZ(80)%20&amp;%20=%20%5Cfrac%7B80%20-%20100%7D%7B15%7D%20=%20%5Cfrac%7B-20%7D%7B15%7D%20%5Capprox%20-1,33%0A%5Cend%7Balign*%7D%0A"></p>
<p>Teraz możemy odczytać stosowne wartości dystrybuanty z tabeli. Zacznijmy od górnych widełek. Z lewej strony szukam wartości 1,6 i patrzę w kolumnę oznaczoną 0,07, bo razem daje to 1,67. Więcej problemu sprawi wartość -1,33, bo jest ujemna, zaś tabela składa się&nbsp;z wartości dodatnich. Jednak wiemy, że rozkład normalny jest symetryczny, czyli wartość przy <img src="https://latex.codecogs.com/png.latex?Z%20=%20-1,33"> będzie taka sama, jak odwrotność wartości dla <img src="https://latex.codecogs.com/png.latex?Z%20=%201,33">. Słowny opis jest mało zrozumiały, więc posłużmy się wykresem.</p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(X)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.33</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.33</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.33</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.33</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-48-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(X)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb56-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb56-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.33</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb56-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.33</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb56-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb56-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb56-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb56-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.33</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.33</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb56-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-49-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Obszary zaznaczone na czerwono są identyczne. Możemy więc policzyć wartość dla -1,33 stosując sztuczkę z podrozdziału 4.3. – wziąć wartość dla 1,33 i odjąć ją od jedności. Otrzymamy w ten sposób powierzchnię z prawej, która jest taka sama, jak powierzchnia z lewej.</p>
<p>W ten sposób możemy odczytać, że górne widełki mają wartość dystrybuanty <img src="https://latex.codecogs.com/png.latex?P(x%20%3C%201,67)%20=%200,9525">, zaś dolne <img src="https://latex.codecogs.com/png.latex?P(x%20%3C%20-1,33)%20=%201%20-%200,9082%20=%200,0918">. Teraz możemy odjąć jedno od drugiego, żeby otrzymać prawdopodobieństwo, że wylosowane IQ będzie między 80 a 125.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AP(80%20%3C%20IQ%20%3C%20125)%20&amp;%20=%20%5C%5C%0A=%20P(-1,33%20%3C%20Z(IQ)%20%3C%201,67)%20&amp;%20=%20%5C%5C%0A&amp;%20=%200,9525%20-%200,0918%20=%20%5C%5C%0A&amp;%20=%200,8607%0A%5Cend%7Balign*%7D%0A"></p>
<div class="cell light-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(X)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray95"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.33</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.67</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-50-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(X)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#595959"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#DB3D3D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.33</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.67</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gęstość prawdopodobieństwa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark_blue</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa_files/figure-html/unnamed-chunk-51-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Jak wygląda dokładność tego wyniku w porównaniu do tego wyrzucanego przez R? Całkiem nieźle. Rozbieżności pojawiają się&nbsp;dopiero na czwartym miejscu po przecinku.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ze standardowego rozkładu normalnego</span></span>
<span id="cb59-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.67</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.33</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.8607812</code></pre>
</div>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># z rozkładu inteligencji</span></span>
<span id="cb61-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.8609984</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Zadanie
</div>
</div>
<div class="callout-body-container callout-body">
<p>Korzystając z tablic rozkładu normalnego oblicz, jakie jest prawdopodobieństwo, że losowo wybrana osoba będzie miała IQ typu „tak blisko!”, czyli między 125 a 129. Zanim sprawdzisz odpowiedź niżej, spróbuj otrzymać ją na kalkulatorze lub w R.</p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Odpowiedź
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">129</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.02119278</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="podsumowanie" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Podsumowanie</h1>
<ol type="1">
<li><p>Słupki histogramu funkcjonują definiują nam widełki – pokazują jaka część próbki (lub populacji) ma nasilenie danej cechy między wartością <img src="https://latex.codecogs.com/png.latex?a">, a wartością <img src="https://latex.codecogs.com/png.latex?b">. Im słupki węższe, tym dokładniejszy histogram, ale pojedyncze słupki niższe.</p></li>
<li><p>Jeśli oś Y histogramu przedstawimy jako procenty, możemy rozumieć histogram jako wykres prawdopodobieństwa, że wylosowana z populacji osoba nasilenie danej cechy będzie miała w obrębie widełek. Inny sposób patrzenia to uznanie wartości procentowej za odsetek osób w populacji lub w próbie, które łapią się do określonych widełek.</p></li>
<li><p>Wykres gęstości można rozumieć jako histogram z nieskończenie cienkimi słupkami. Nie są one przy okazji nieskończenie niskie dzięki technikom matematycznym używanym do ich tworzenia.</p></li>
<li><p>Dla inteligencji (i wielu innych cech) wykres gęstości z bardzo dużej próbki ma kształt krzywej dzwonowej. Innymi słowy rozkład inteligencji jest normalny. Inteligencję zwyczajowo przedstawia się na skali normalnej ze średnią <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%20100"> i odchyleniem standardowym <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%2015">.</p></li>
<li><p>Z osi Y wykresu gęstości prawdopodobieństwa możemy odczytać <em>gęstość&nbsp;prawdopodobieństwa</em> (<em>likelihood</em>), ale nie prawdopodobieństwo (<em>probability</em>). <strong>Gęstość prawdopodobieństwa i prawdopodobieństwo to dwie różne rzeczy!</strong></p></li>
<li><p>Prawdopodobieństwo na wykresach gęstości to <strong>pole pod krzywą gęstości</strong>, czyli suma pól nieskończenie cienkich prostokątów, z których jest ono zbudowane. Zapisać to możemy jako <img src="https://latex.codecogs.com/png.latex?%5Cint_a%5Eb%20%5Cmathcal%7BN%7D(x;%5C%20%5Cmu,%5C%20%5Csigma%5E2)dx">. Zawsze jednak potrzebujemy jakichś widełek, choćby bardzo wąskich; nie możemy policzyć pola pod punktem.</p></li>
<li><p>Możemy oszacować pole pod krzywą dzwonową (czyli prawdopodobieństwo) dzieląc je na prostokąty. Szerokość takiego prostokąta ustalamy sami, zaś wysokość to gęstość prawdopodobieństwa w danym punkcie. Pola takich prostokątów możemy policzyć i dodać. Im prostokąty cieńsze, tym dokładniejsze oszacowanie.</p></li>
<li><p>Zazwyczaj do określania prawdopodobieństwa z rozkładu służy funkcja zwana dystrybuantą. Wrzuca się do niej wartość (np. IQ lub Z), a ona zwraca prawdopodobieństwo wylosowania wartości takiej <strong>lub niższej</strong>. W R dystrybuanta rozkładu normalnego ma postać <code>pnorm(x, mean = 0, sd = 1)</code>.</p></li>
<li><p>Za pomocą dystrybuanty możemy policzyć prawdopodobieństwo, że wartość jest <em>wyższa</em> od zadanej odejmując wartość dystrybuanty w punkcie od 1. Możemy też policzyć prawdopodobieństwo wylosowania wartości z określonych widełek najpierw licząc widełki górne, a potem widełki dolne i odejmując dolne od górnych.</p></li>
<li><p>Standardowy rozkład normalny ma średnią <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%200"> i odchylenie standardowe <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%201">. Wartość wyrażona na tej skali oznaczana jest jako <img src="https://latex.codecogs.com/png.latex?Z">. Każdą skalę normalną możemy przeliczyć na skalę standardową od wartości odejmując średnią i dzieląc wynik przez odchylenie standardowe. <img src="https://latex.codecogs.com/png.latex?Z(x)%20=%20%5Cfrac%7Bx%20-%20%5Cmu%7D%7B%5Csigma%7D"></p></li>
</ol>
<p>Dla osób chcących poćwiczyć, zostawiam ćwiczenia z Khan Academy:</p>
<ol type="1">
<li><p><a href="https://pl.khanacademy.org/math/integral-calculus/ic-integration/ic-riemann-sums/v/simple-riemann-approximation-using-rectangles">Aproksymacja sumami Riemanna</a>,</p></li>
<li><p><a href="https://en.khanacademy.org/math/statistics-probability/modeling-distributions-of-data">Modeling data distributions</a>.</p></li>
</ol>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Przypisy</h2>

<ol>
<li id="fn1"><p>Zakładając, że prostokąty mają dotykać wykresu środkiem górnej krawędzi, skrajne prostokąty będą wystawały poza krzywą 5 punktów w prawo i 5 punktów w lewo, stąd dodatkowe 10 na przedziale. Inne metody szacowania obejmują prostokąty dotykające wykresu rogiem (prawym lub lewym) albo nawet zastąpienie prostokątów trapezami.↩︎</p></li>
<li id="fn2"><p>Albo pomnożę wcześniej uzyskaną sumę przez 0,25. Wynika to z tego, że 0,25 można wyciągnąć przed nawias: <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%20P%20&amp;%20=%20a%20%5Ctimes%20b_1%20+%20a%20%5Ctimes%20b_2%20+%20%5Cdots%20+%20a%20%5Ctimes%20b_%7B41%7D%20=%20%5C%5C%20&amp;%20=%20a%20%5Ctimes%20(b_1%20+%20b_2%20+%20%5Cdots%20+%20b_%7B41%7D)%5Cend%7Balign*%7D">↩︎</p></li>
<li id="fn3"><p>Ja wykorzystam tutaj R, ale możesz skorzystać z podlinkowanego <a href="https://www.danielsoper.com/statcalc/calculator.aspx?id=53">kalkulatora</a>. Przy tej okazji polecam swoje <a href="../posts/podstawy_R.html">wprowadzenie do R</a> oraz rozważenie kupna kalkulatora naukowego z opcją liczenia dystrybuanty. Ja używam Casio fx-991CEX i sobie chwalę. Teraz zastępuje go druga edycja Casio fx-991ES PLUS.↩︎</p></li>
<li id="fn4"><p>Nie biorę żadnej odpowiedzialności za to stwierdzenie.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Statystyka</category>
  <category>Matematyka</category>
  <guid>https://nieobliczalne.pl/posts/gestosc-prawdopodobienstwa.html</guid>
  <pubDate>Sat, 26 Aug 2023 22:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/gestosc-prawdopodobienstwa.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Funkcje matematyczne</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/funkcje.html</link>
  <description><![CDATA[ 




<p>Czy masz czasem wrażenie, że rzeczy w matematyce nazywają się bez sensu? To jest bardzo słuszne wrażenie. Dziś na warsztat weźmiemy funkcje, które są zmorą uczniów liceów ze względu na nową, dziwną notację typu <img src="https://latex.codecogs.com/png.latex?f(x)">, cały pozornie chaotyczny język, który odrywa funkcje od reszty matematyki, a także wrażenie, że nijak nie idzie tego spotkać w „prawdziwym życiu”, cokolwiek to jest. Ja właśnie spędzam wieczór z prawdziwego życia na pisaniu o funkcjach. Do czegoś mi się jednak przydały. Zaczynając jednak od nazwy – dlaczego „funkcja”? Bo Leibniz źle rozumiał to słowo. A że raz przyjęte konwencje trzymają się mocno, to do dzisiaj, właściwie przypadkowo, nazywamy tę&nbsp;rzeczy funkcjami.</p>
<section id="maszyny-matematyczne" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Maszyny matematyczne</h1>
<p>Skorzystam tutaj z metafory pożyczonej od Jasona Wilkesa, której używał w swojej książce „Spal pracownię matematyczną”.</p>
<p>Wyobraź sobie maszynę. Wielka, opasła maszyna z wlotem u góry i wyjściem z boku. Do maszyny dołączony jest zestaw metalowych cyferek wybitych na grubych blaszkach. Bierzesz do ręki pierwszą z brzegu blaszkę z wartością 4. Wrzucasz do wejścia przypominającego wlot na monety w automacie z kawą. Maszyna zaczyna buczeć, wydawać metaliczne dźwięki, łupnięcia, stukoty, a po chwili rozlega się dźwięk dzwoneczka i z wylotu wypada blaszka z numerkiem 7.</p>
<p>„Hmm, ciekawe, co się stanie, kiedy wrzucę inną liczbę?” – myślisz.</p>
<p>Wrzucasz bierzesz więc blaszkę z numerkiem 8, wrzucasz ją do maszyny i po chwili otrzymujesz 11. Może Ci się już w głowie rodzić pomysł, jak nasza maszyna działa. Żeby go przetestować wrzucasz do maszyny przed chwilą wyciągniętą blaszkę z numerem 11 i po chwili dostajesz z powrotem blaszkę z numerem 14. Domyślasz się już, co się stanie, jak wrzucisz do maszyny 2? Najprawdopodobniej wyrzuci ona 5. Gratuluję, rozgryzłeś(-aś) tajemnicę mojej maszyny – jakąkolwiek liczbę w niej nie umieścisz, dostaniesz liczbę o 3 większą.</p>
<p>Wrzucasz do maszyny kolejne liczby i patrzysz, jak Twoja hipoteza się uwiarygadnia:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A1%20%5Crightarrow%204%0A"> <img src="https://latex.codecogs.com/png.latex?%0A15%20%5Crightarrow%2018%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A-10%20%5Crightarrow%20-7%0A"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Zadanie
</div>
</div>
<div class="callout-body-container callout-body">
<p>Co maszyna z siebie wyrzuci, jak wrzucę do niej:</p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?18"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?45"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?-20"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?0"></p></li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Odpowiedź
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?18%20%5Crightarrow%2021"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?45%20%5Crightarrow%2048"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?-20%20%5Crightarrow%20-17"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?0%20%5Crightarrow%203"></p></li>
</ol>
</div>
</div>
</div>
<p>Z zadowoleniem bierzesz marker i na maszynie piszesz „Maszyna dodająca 3”. Pięknie. Patrzysz jednak w dalsze części hali i widzisz dziesiątki maszyn do przetestowania. Zaczynasz się więc zastanawiać, czy nie da się tego zapisać jakoś zwięźlej?</p>
</section>
<section id="skróty" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Skróty</h1>
<p>Stajemy przed zadaniem, by w zwięzły sposób opisać działanie naszej maszyny dodającej 3. W tym celu musimy wymyślić kilka skrótów na oznaczenie:</p>
<ol type="1">
<li><p>Nazwy maszyny.</p></li>
<li><p>Tego, co wrzucamy do maszyny.</p></li>
<li><p>Tego, co maszyna wypluwa.</p></li>
<li><p>Tego, co maszyna konkretnie robi (tzn. że dodaje 3).</p></li>
</ol>
<p>Naszą maszynę najprościej nazwać <img src="https://latex.codecogs.com/png.latex?m"> jak maszyna albo <img src="https://latex.codecogs.com/png.latex?t"> jak trzy. Mógłbym użyć całego słowa <img src="https://latex.codecogs.com/png.latex?maszyna"> lub <img src="https://latex.codecogs.com/png.latex?trzy">, ale komu chce się to pisać? Dalej, to, co wrzucamy do maszyny mogę nazwać <img src="https://latex.codecogs.com/png.latex?l"> jak liczba, <img src="https://latex.codecogs.com/png.latex?b"> jak blaszka albo <img src="https://latex.codecogs.com/png.latex?c"> jak… coś. Moglibyśmy wymyślać tak dalej, ale żeby nie utonąć w alfabecie arbitralnych skojarzeń, możemy też wykorzystać dwa już ustalone skróty do stworzenia dwóch kolejnych.</p>
<p>W jaki sposób? Weźmy na tapet 4. skrót, czyli opis działania maszyny. Wiem, że maszyna dodaje 3 do dowolnej liczby, którą do niej wrzucę. Jeśli wrzucę 5, to dostanę 8, jeśli wrzucę 12, to dostanę 15 itd. Ustaliłem jednak, że to, co wrzucam do maszyny, mogę określić literką <img src="https://latex.codecogs.com/png.latex?b">. To, że maszyna dodaje 3 mogę&nbsp;więc zapisać jako <img src="https://latex.codecogs.com/png.latex?b%20+%203">. Skoro <img src="https://latex.codecogs.com/png.latex?b"> to <strong>dowolna liczba</strong>, to <img src="https://latex.codecogs.com/png.latex?b%20+%203"> to ta liczba powiększona o 3.</p>
<p>Mając te skróty uzyskałem już całkiem zwięzły sposób opisu naszych maszyn. Zamiast słów mógłbym napisać na maszynie:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am%20=%20b%20+%203%0A"></p>
<p>Prawda? Niby prawda, ale ten zapis ma kilka wad. Po pierwsze znak <img src="https://latex.codecogs.com/png.latex?="> oznacza w matematyce „to jest to samo, co”. Jeśli <img src="https://latex.codecogs.com/png.latex?m"> to nazwa naszej maszyny, to stwierdzamy, że „maszyna to jest to samo, co dowolna liczba dodać trzy”. Jako skrót myślowy działa to nieźle, ale nie o to dokładnie nam chodzi. Maszyna nie jest dowolną liczbą powiększoną o trzy, maszyna to <em>robi</em>, ale nie <em>jest</em> tym. Tak jak maszynka do mielenia mięsa nie jest tym samym, co zmielone mięso.</p>
<p>Czepiam się, wiem, ale ten zapis utrudnia nam też inną rzecz – załóżmy, że chcemy zapisać, że wrzuciliśmy do maszyny 5 i wypluła ona 8. Jak to zrobić w tej konwencji? <img src="https://latex.codecogs.com/png.latex?5%20=%208">? To już trochę krok za daleko. Matematycznej inkwizycji nie ma, ale jakby była, to taki zapis byłby heretycki. Możemy jednak wykorzystać nieco zgrabniejszą konwencję i od razu zawrzeć w niej skrót numer 3., czyli oznaczenie tego, co maszyna z siebie wypluwa. Proponuję zapisać to tak:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am(5)%20=%208%0A"></p>
<p>Ten nawias nawet wygląda jak kieszonka. Sama część <img src="https://latex.codecogs.com/png.latex?m(5)"> wskazuje, że do maszyny <img src="https://latex.codecogs.com/png.latex?m"> wrzuciliśmy liczbę 5. Po znaku równa się piszemy to, co maszyna z siebie wypluła. Teraz wielkie technikalium – sam skrót <img src="https://latex.codecogs.com/png.latex?m(5)"> dosłownie nie oznacza samego aktu włożenia 5 do maszyny <img src="https://latex.codecogs.com/png.latex?m">, ale to, co maszyna <img src="https://latex.codecogs.com/png.latex?m"> wypluje, kiedy wrzucę do niej 5. Rozróżnienie to brzmi jak sztuka dla sztuki i czepialstwo i trochę się zgadzam, ale pozwala nam to na kilka rzeczy. Po pierwsze, znika problem ze znakiem <img src="https://latex.codecogs.com/png.latex?="> – <img src="https://latex.codecogs.com/png.latex?m(5)"> rzeczywiście <em>jest</em> tym, co maszyna z siebie wypluje, jak wrzucę do niej 5, czyli <img src="https://latex.codecogs.com/png.latex?m(5)"> to <em>jest</em> 8 na takiej samej zasadzie, jak <img src="https://latex.codecogs.com/png.latex?5%20+%203"> to <em>jest</em> 8. Dzięki temu mogę też zapisać coś takiego:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A10%20+%20m(5)%20=%2018%0A"></p>
<p>Ponieważ <img src="https://latex.codecogs.com/png.latex?m(5)"> to <em>jest</em> 8, to mogę zamiast 8 zapisać <img src="https://latex.codecogs.com/png.latex?m(5)">.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Zadanie
</div>
</div>
<div class="callout-body-container callout-body">
<p>Spróbuj to policzyć:</p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?m(2)%20+%204"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?10%20-%20m(6)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?2%20%5Ctimes%20m(-5)%20+%201"></p></li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Odpowiedź
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?m(2)%20+%204%20=%205%20+%204%20=%209"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?10%20-%20m(6)%20=%2010%20-%209%20=%201"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?2%20%5Ctimes%20m(-5)%20+%201%20=%202%20%5Ctimes%20-2%20+%201%20=%20-4%20+%201%20=%20-3"></p></li>
</ol>
</div>
</div>
</div>
<p>Zbierzmy to więc do kupy i stwórzmy skrót ostateczny. Jak oznaczyć maszynę <img src="https://latex.codecogs.com/png.latex?m">, która bierze dowolną liczbę (oznaczoną jako <img src="https://latex.codecogs.com/png.latex?b">) i dodaje do niej 3? Proponuję coś takiego:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am(b)%20=%20b%20+%203%0A"></p>
<p>Ten zapis buduje na wszystkim, co ustaliliśmy do tej pory – do maszyny o nazwie <img src="https://latex.codecogs.com/png.latex?m"> wrzucam liczbę <img src="https://latex.codecogs.com/png.latex?b"> – <img src="https://latex.codecogs.com/png.latex?m(b)"> – a maszyna wyrzuca z siebie <img src="https://latex.codecogs.com/png.latex?b%20+%203">. Przypominam – <img src="https://latex.codecogs.com/png.latex?m"> i <img src="https://latex.codecogs.com/png.latex?b"> to tylko arbitralne literki. Równie dobrze mógłbym zapisać <img src="https://latex.codecogs.com/png.latex?a(z)%20=%20z%20+%203">, <img src="https://latex.codecogs.com/png.latex?r(k)%20=%20k%20+%203">, <img src="https://latex.codecogs.com/png.latex?%5Cdagger(%5Crceil)%20=%20%5Crceil%20+%203">, a czasem na matematyce z przekory pisałem <img src="https://latex.codecogs.com/png.latex?%C4%85(%C4%87)%20=%20%C4%87%20+%203">. Możemy opisywać nasze maszyny jak chcemy, ale najlepsze skróty to takie, które przypominają nam, co oznaczają.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Zadanie
</div>
</div>
<div class="callout-body-container callout-body">
<p>Spróbuj zakodować następujące maszyny:</p>
<ol type="1">
<li><p>Maszyna dodająca 4.</p></li>
<li><p>Maszyna mnożąca przez 3.</p></li>
<li><p>Maszyna mnożąca przez 2, a potem dodająca 1.</p></li>
<li><p>Maszyna najpierw dodająca 1, a potem mnożąca przez 2.</p></li>
<li><p>Maszyna dzieląca na 7.</p></li>
<li><p>Maszyna, która zawsze wyrzuca 5.</p></li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Odpowiedź
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?c(l)%20=%20l%20+%204"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?t(l)%20=%203%20l"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?d(l)%20=%202%20l%20+%201"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?j(l)%20=%20(l%20+%201)%20%5Ctimes%202"> lub po uproszczeniu <img src="https://latex.codecogs.com/png.latex?j(l)%20=%202%20l%20+%202"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?s(l)%20=%20%5Cfrac%7Bl%7D%7B7%7D"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?p(l)%20=%205"></p></li>
</ol>
</div>
</div>
</div>
</section>
<section id="maszyny-użytkowe" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Maszyny użytkowe</h1>
<p>Po co tworzymy maszyny? Żeby odwalały za nas czarną robotę. Dodawanie 3 nie jest jakoś szczególnie trudne, ale co jeśli musimy zrobić coś bardziej skomplikowanego? Albo dodać 3 do 10 000 różnych liczb? Właśnie po to korzystamy z maszyn – nikt nie chce się&nbsp;w to bawić ręcznie.</p>
<p>Załóżmy więc, że chcemy stworzyć maszynę liczącą pole kwadratu. Nazwijmy ją <img src="https://latex.codecogs.com/png.latex?k"> jak kwadrat. Jak do każdej maszyny, musimy coś do naszej maszyny wrzucić. Sama z siebie nic nie zrobi. Czego więc może potrzebować maszyna licząca pole kwadratu? Długości boku tego kwadratu. Oznaczmy go sobie jako <img src="https://latex.codecogs.com/png.latex?b">. Jak więc z długości boku policzyć pole? Podnieść ów bok do kwadratu. Spróbuj zebrać to do kupy i sprawdź, czy masz rację poniżej.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Maszyna licząca pole kwadratu
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://latex.codecogs.com/png.latex?%0Ak(b)%20=%20b%5E2%0A"></p>
</div>
</div>
</div>
<p>Każdy wzór matematyczny da się&nbsp;więc przerobić na maszynę. Mogło Ci się to zdarzyć, jeśli kiedykolwiek pisałeś(-aś) formuły w Excelu. Jeśli dostałbyś(-abyś) plik Excela z 1000 boków kwadratów i zadaniem przygotowania kolumny z polem kwadratu, prawdopodobnie użyłbyś(-abyś) formuły typu <code>= A1 * A1</code>, a potem przeciągnąłbyś(-abyś) ją tak, żeby policzyła pola wszystkich kwadratów.</p>
<section id="sec-programming" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="sec-programming"><span class="header-section-number">3.1</span> R i Python</h2>
<p>Wszystkie maszyny, które zapisaliśmy w poprzednim zadaniu, moglibyśmy rzeczywiście stworzyć. Może nie w formie pudełka przerabiającego blaszki, ale możemy łatwo je <em>zaprogramować</em>. Nie jest to konieczne do zrozumienia funkcji, ale bardzo polecam, żeby chociaż spróbować. Wczesne zainteresowanie programowaniem mnie osobiście mocno pomogło w późniejszej nauce matematyki.</p>
<p>Każdy język programowania pozwala nam stworzyć własne maszyny. Jeśli nie pozwala, to śmiem wątpić, czy w ogóle możemy mówić o języku programowania<sup>1</sup>. W naszym wypadku użyjemy jednego z dwóch języków programowania powszechnie używanych w nauce – <a href="https://www.programiz.com/r/online-compiler/">R</a> i <a href="https://www.programiz.com/python-programming/online-compiler/">Python</a>. Oba możemy uruchomić w przeglądarce. Jeśli czytasz to zamierzając uczyć się statystyki, polecam wybrać R<sup>2</sup>, a jeśli nie, to Python może być nieco bardziej przejrzysty.</p>
<p>Jak więc rzeczywiście stworzyć naszą maszynę? W Pythonie wykorzystamy następującą składnię:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> nazwa_funkcji(to_co_wrzucamy):</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> działanie funkcji</span></code></pre></div>
</div>
</div>
<p>W R składnia wygląda tak:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">nazwa_funkcji <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(to_co_wrzucamy) {</span>
<span id="cb2-2">    działanie funkcji</span>
<span id="cb2-3">}</span></code></pre></div>
</div>
</div>
<p>Możemy wykorzystać oznaczenia, które wcześniej wprowadziliśmy i stworzyć naszą maszynę dodającą 3:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> m(b):</span>
<span id="cb3-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(b) {</span>
<span id="cb4-2">  b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb4-3">}</span></code></pre></div>
</div>
</div>
<p>Gdzie to wpisać? Jeśli, za moją sugestią, korzystasz z Programiz, wpisz to w oknie po lewej stronie i kliknij guzik Run. Od teraz możesz po stronie prawej wywołać swoją funkcję. Jeśli wpiszesz np. <code>m(5)</code> i klikniesz enter, funkcja rzeczywiście wypluje z siebie wynik, czyli 8.</p>
<p>Możesz w ten sposób stworzyć dowolną liczbę maszyn, ale jeśli piszesz w Pythonie, uważaj na wcięcia. Jeśli tworzysz jedną maszynę pod drugą, słowo <code>def</code> drugiej maszyny nie może być poprzedzone spacjami.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/programiz_python.png" class="light-mode img-fluid"></p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/programiz_python_dark.png" class="dark-mode img-fluid"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Zadanie
</div>
</div>
<div class="callout-body-container callout-body">
<p>Spróbuj stworzyć maszyny z poprzedniego zadania w wybranym języku programowania.</p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?c(l)%20=%20l%20+%204"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?t(l)%20=%203%20l"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?d(l)%20=%202%20l%20+%201"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?j(l)%20=%20(l%20+%201)%20%5Ctimes%202"> lub po uproszczeniu <img src="https://latex.codecogs.com/png.latex?j(l)%20=%202%20l%20+%202"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?s(l)%20=%20%5Cfrac%7Bl%7D%7B7%7D"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?p(l)%20=%205"></p></li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Odpowiedź
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?c(l)%20=%20l%20+%204"></li>
</ol>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> c(l):</span>
<span id="cb5-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">cztery <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(l) { <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># w R jest już funkcja c(), więc trzeba zmienić nazwę</span></span>
<span id="cb6-2">  l <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb6-3">}</span></code></pre></div>
</div>
</div>
<ol start="2" type="1">
<li><img src="https://latex.codecogs.com/png.latex?t(l)%20=%203%20l"></li>
</ol>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> t(l):</span>
<span id="cb7-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> l</span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">trzy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(l) { <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># w R jest już funkcja t(), więc trzeba zmienić nazwę</span></span>
<span id="cb8-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> l</span>
<span id="cb8-3">}</span></code></pre></div>
</div>
</div>
<ol start="3" type="1">
<li><img src="https://latex.codecogs.com/png.latex?d(l)%20=%202%20l%20+%201"></li>
</ol>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> d(l):</span>
<span id="cb9-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(l) {</span>
<span id="cb10-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> l <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-3">}</span></code></pre></div>
</div>
</div>
<ol start="4" type="1">
<li><img src="https://latex.codecogs.com/png.latex?j(l)%20=%20(l%20+%201)%20%5Ctimes%202"> lub po uproszczeniu <img src="https://latex.codecogs.com/png.latex?j(l)%20=%202%20l%20+%202"></li>
</ol>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> j(l):</span>
<span id="cb11-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lub po uproszczeniu</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> j(l):</span>
<span id="cb11-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(l) {</span>
<span id="cb12-2">  (l <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb12-3">}</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lub po uproszczeniu</span></span>
<span id="cb12-6"></span>
<span id="cb12-7">j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(l) {</span>
<span id="cb12-8">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> l <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb12-9">}</span></code></pre></div>
</div>
</div>
<ol start="5" type="1">
<li><img src="https://latex.codecogs.com/png.latex?s(l)%20=%20%5Cfrac%7Bl%7D%7B7%7D"></li>
</ol>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> s(l):</span>
<span id="cb13-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">s <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(l) {</span>
<span id="cb14-2">  l <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb14-3">}</span></code></pre></div>
</div>
</div>
<ol start="6" type="1">
<li><img src="https://latex.codecogs.com/png.latex?p(l)%20=%205"></li>
</ol>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> p(l):</span>
<span id="cb15-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(l) {</span>
<span id="cb16-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-3">}</span></code></pre></div>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="sec-nomenclature" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Nazewnictwo</h1>
<p>Święcie wierzę, że w matematyce połowa problemów na późniejszych etapach nauki bierze się z problemów z nazewnictwem. Nie da się zrobić zadania, jeśli się nie wie, o co pytają. Dodajmy do tego, że wszystko ma po kilka nazw oraz miesza się nazewnictwo algebraiczne i opisujące wykresy (o których później). Spróbujmy to więc uporządkować.</p>
<ul>
<li><p>To, co nazywaliśmy maszynami, uniwersalnie nazywa się <strong>funkcjami</strong>. Typową nazwą dla funkcji jest <img src="https://latex.codecogs.com/png.latex?f">, ale można je nazywać tak, jak się chce.</p></li>
<li><p>To, co wrzucamy do funkcji nazywa się <strong>argumentem</strong> albo <strong>miejscem</strong>. Zazwyczaj oznacza się to literą <img src="https://latex.codecogs.com/png.latex?x">.</p></li>
<li><p>To, co funkcja z siebie wyrzuca to <strong>wartość</strong> funkcji. Jeśli przyjmiemy poprzednie oznaczenia, wartość funkcji <img src="https://latex.codecogs.com/png.latex?f"> dla argumentu <img src="https://latex.codecogs.com/png.latex?x"> (czyli co funkcja zwróci, jak wrzucę do niej <img src="https://latex.codecogs.com/png.latex?x">) oznaczymy jako <img src="https://latex.codecogs.com/png.latex?f(x)">. Czasami, jeśli mamy tylko jedną funkcję, wartość bywa oznaczana literką <img src="https://latex.codecogs.com/png.latex?y">. Oznaczenia <img src="https://latex.codecogs.com/png.latex?y"> i <img src="https://latex.codecogs.com/png.latex?f(x)"> są wymienne.</p></li>
</ul>
<p>Przy okazji możemy wprowadzić pojęcie <strong>miejsca zerowego</strong>. Jest to miejsce (czyli argument, <img src="https://latex.codecogs.com/png.latex?x">), dla którego wartość funkcji wynosi 0. Innymi słowy, liczba, którą muszę wrzucić do funkcji, żeby funkcja wypluła 0. Dla maszyny dodającej 3 miejscem zerowym jest -3, bo <img src="https://latex.codecogs.com/png.latex?m(-3)%20=%200">. Podkreślam jeszcze raz – miejsce zerowe to jest <em>argument</em>, czyli to, co wrzucam do funkcji. To <em>wartość</em> musi wynosić 0.</p>
</section>
<section id="liczenie-w-praktyce" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Liczenie w praktyce</h1>
<p>W praktyce przy okazji mówienia o funkcjach liczymy jedną z dwóch rzeczy – co funkcja z siebie wyrzuca, kiedy włożę do niej <img src="https://latex.codecogs.com/png.latex?x"> albo co muszę włożyć do funkcji, żeby wypluła z siebie <img src="https://latex.codecogs.com/png.latex?y">.</p>
<p>Pierwszy scenariusz obejmuje to, co programowaliśmy w punkcie 3.1. Jeśli chcielibyśmy policzyć to ręcznie, wystarczy, że zamiast skrótu typu <img src="https://latex.codecogs.com/png.latex?l"> czy <img src="https://latex.codecogs.com/png.latex?x"> zapiszemy liczbę, którą wrzucamy do funkcji. Czyli jeśli <img src="https://latex.codecogs.com/png.latex?m(l)%20=%20l%20+%203">, to <img src="https://latex.codecogs.com/png.latex?m(5)%20=%205%20+%203">. Działa dokładnie tak samo też dla bardziej skomplikowanych funkcji.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Zadanie
</div>
</div>
<div class="callout-body-container callout-body">
<p>Poniżej przedstawiono kilka różnych funkcji oraz wartości do policzenia. Zwróć uwagę na nazwy i spróbuj rozwiązać przykłady.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aa(x)%20=%207%20+%20x%0A"> <img src="https://latex.codecogs.com/png.latex?%0Ab(z)%20=%205%20%5Ctimes%20z%0A"> <img src="https://latex.codecogs.com/png.latex?%0Ac(r)%20=%204%20%5Ctimes%20r%20+%2012%0A"> <img src="https://latex.codecogs.com/png.latex?%0Ad(g)%20=%20%5Cfrac%7B7%20g%20+%2021%7D%7B2%20g%20+%201%7D%0A"></p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?a(3)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?a(11)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?a(-10)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?a(-7)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?a(0)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?b(5)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?b(-12)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?b(0)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?c(6)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?c(-8)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?c(0)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?c(-3)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?d(2)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?d(0)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?d(-5)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?d(-3)"></p></li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Odpowiedź
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?a(3)%20=%2010"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?a(11)%20=%2018"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?a(-10)%20=%20-3"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?a(-7)%20=%200"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?a(0)%20=%207"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?b(5)%20=%2025"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?b(-12)%20=%20-60"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?b(0)%20=%200"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?c(6)%20=%2036"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?c(-8)%20=%20-20"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?c(0)%20=%2012"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?c(-3)%20=%200"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?d(2)%20=%207"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?d(0)%20=%2021"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?d(-5)%20=%201%20%5Cfrac%7B5%7D%7B9%7D"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?d(-3)%20=%200"></p></li>
</ol>
</div>
</div>
</div>
<p>W tym scenariuszu liczyliśmy wartość funkcji, ale czasem chcemy policzyć, jaki powinien być <em>argument</em>. Przypomnij sobie, co to jest miejsce zerowe – co muszę wrzucić do funkcji, żeby wypluła mi 0. To też da się liczyć. Bardziej realny przykład. Wyobraź sobie, że masz funkcję, która liczy, ile pieniędzy dostaniesz z rocznej lokaty, w zależności od tego, ile pieniędzy wyłożysz na lokatę. Pierwszy scenariusz to sprawdzanie dokładnie tego, czyli ile dostanę jak wpłacę 10 000 zł, a ile, jak wpłacę 30 000 zł. Drugi scenariusz to liczenie, ile muszę wpłacić, żeby otrzymać po roku 100 zł, a ile, żeby otrzymać 1000 zł.</p>
<p>W praktyce liczy się to według dość prostej logiki. Chcę wiedzieć, ile muszę włożyć do maszyny dodającej 3, żeby wypluła 7. Zapisując to matematycznie, chcę wiedzieć, kiedy wartość funkcji <img src="https://latex.codecogs.com/png.latex?m"> wynosi 7, czyli kiedy <img src="https://latex.codecogs.com/png.latex?m(x)%20=%207">. Jednocześnie wiem, że <img src="https://latex.codecogs.com/png.latex?m(x)"> to po prostu <img src="https://latex.codecogs.com/png.latex?x%20+%203">, bo tak działa funkcja dodająca 3. Wychodzi mi z tego proste równanie.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am(x)%20=%207%0A"> <img src="https://latex.codecogs.com/png.latex?%0Ax%20+%203%20=%207%0A"> <img src="https://latex.codecogs.com/png.latex?%0Ax%20=%204%0A"></p>
<p>Na tej samej zasadzie możemy rozwiązywać bardziej skomplikowane równania, np. znaleźć miejsce zerowe funkcji <img src="https://latex.codecogs.com/png.latex?y%20=%205x%20+%203"> (pamiętaj, <img src="https://latex.codecogs.com/png.latex?y"> to inne oznaczenie wartości funkcji).</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay%20=%200%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A5x%20+%203%20=%200%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A5x%20=%20-3%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ax%20=%20-%5Cfrac%7B3%7D%7B5%7D%0A"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Zadanie
</div>
</div>
<div class="callout-body-container callout-body">
<p>Weźmy funkcje z poprzedniego zadania. Odkryj, co musisz wrzucić do każdej z tych funkcji, żeby przyjęła każdą z podanych wartości (każdy przykład policz dla każdej z funkcji).</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aa(x)%20=%207%20+%20x%0A"> <img src="https://latex.codecogs.com/png.latex?%0Ab(z)%20=%205%20%5Ctimes%20z%0A"> <img src="https://latex.codecogs.com/png.latex?%0Ac(r)%20=%204%20%5Ctimes%20r%20+%2012%0A"> <img src="https://latex.codecogs.com/png.latex?%0Ad(g)%20=%20%5Cfrac%7B7%20g%20+%2021%7D%7B2%20g%20+%201%7D%0A"></p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?10"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?1"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?0"> (miejsce zerowe)</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?-4"></p></li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-13-contents" aria-controls="callout-13" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Odpowiedź
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-13" class="callout-13-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><strong>Funkcja</strong> <img src="https://latex.codecogs.com/png.latex?a"></p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?3"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?-6"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?-7"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?-11"></p></li>
</ol>
<p><strong>Funkcja</strong> <img src="https://latex.codecogs.com/png.latex?b"></p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?2"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B5%7D"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?0"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?-%5Cfrac%7B4%7D%7B5%7D"></p></li>
</ol>
<p><strong>Funkcja</strong> <img src="https://latex.codecogs.com/png.latex?c"></p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?-0,5"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?-2,75"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?-3"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?-4"></p></li>
</ol>
<p><strong>Funkcja</strong> <img src="https://latex.codecogs.com/png.latex?d"></p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B11%7D%7B13%7D"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?-4"></p></li>
<li><p>-<img src="https://latex.codecogs.com/png.latex?3"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?-1%5Cfrac%7B2%7D%7B3%7D"></p></li>
</ol>
</div>
</div>
</div>
</section>
<section id="wykresy" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Wykresy</h1>
<p>Nie da się zapisać na kartce wszystkich możliwych wartości funkcji. Między 0 a 1 jest nieskończenie wiele liczb i każdą z tych liczb można do funkcji wrzucić. Ciekawe rozwiązanie tego problemu stworzył jednak Kartezjusz. Tak, ten od „Myślę, więc jestem”. Kartezjusz narysował dwie linie przecinające się pod kątem prostym, a potem oznaczył siatkę.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/axes-empty.png" class="img-fluid"></p>
<p>Ten pozornie banalny pomysł, nieobcy nikomu, kto kiedykolwiek grał w statki, to wielka rewolucja. Dzięki niej możemy przedstawić nieskończenie wiele wartości danej funkcji oraz zyskać całkowicie nową perspektywę na funkcje. Teraz wystarczy, że umówimy się, że pozioma oś to argumenty, a pionowa to wartości. Co to znaczy?</p>
<p>Wyobraźmy sobie funkcję dodającą 1. Matematycznie możemy to zapisać np. jako <img src="https://latex.codecogs.com/png.latex?j(l)%20=%20l%20+%201">. Teraz wrzućmy do tej funkcji liczbę 1 – <img src="https://latex.codecogs.com/png.latex?j(1)%20=%201%20+%201%20=%202">. Ten sam wniosek możemy nanieść na wykres. Na osi poziomej znajdujemy liczbę, którą wrzuciliśmy do funkcji (tj. 1), a na osi pionowej liczbę, którą funkcja wypluła (tj. 2). Na przecięciu jednego z drugim możemy teraz postawić kropkę.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/axes-point.png" class="img-fluid"></p>
<p>Zróbmy to samo dla 0 i 2. <img src="https://latex.codecogs.com/png.latex?j(0)%20=%201"> i <img src="https://latex.codecogs.com/png.latex?j(2)%20=%203">. Zaznaczmy to.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/axes-points.png" class="img-fluid"></p>
<p>Ale po co się ograniczać? Zaznaczmy serię innych takich punktów.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/axes-pointed-line.png" class="img-fluid"></p>
<p>To, co otrzymaliśmy, to ewidentnie prosta linia. Połączmy więc te punkty.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/axes-line.png" class="img-fluid"></p>
<p>Tak naprawdę, żeby taką linię narysować, wystarczą dwa punkty. Gdy przykręcasz listwę do ściany, musisz ją przykręcić w dwóch miejscach, żeby się nie ruszała.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/axes-line-two-points.png" class="img-fluid"></p>
<p>Taka linia pozwala nam odczytywać wartości dla dowolnego argumentu. Dla przykładu, jeśli chcę sprawdzić, co funkcja wypluje, jak wrzucę do niej 2, to szukam 2 na osi poziomej i patrzę, jak wysoko jest tam moja linia. W tym wypadku przecięcie jest w punkcie <img src="https://latex.codecogs.com/png.latex?(2,%203)">. Identyczny wniosek otrzymamy licząc wartość funkcji algebraicznie <img src="https://latex.codecogs.com/png.latex?j(2)%20=%202%20+%201%20=%203">.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/axes-value.png" class="img-fluid"></p>
</section>
<section id="nazewnictwo-w-wykresach" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Nazewnictwo w wykresach</h1>
<p>Ten wynalazek w postaci <em>układu współrzędnych</em> pozwala nam patrzeć na funkcje z zupełnie innej perspektywy. Funkcja nie jest już tylko maszyną, która zjada i wypluwa liczby. Nagle funkcja (a właściwie jej wykres) ma <em>kształt</em> i <em>położenie</em>. Możemy mówić o funkcji na przykład, że ma kształt linii albo paraboli. Możemy o jakiejś funkcji powiedzieć, że jest bardziej nachylona niż inna funkcja. Możemy powiedzieć, że jedna funkcja jest wyżej, a inna niżej. Funkcje mogą się przecinać, albo przecinać się z osiami.</p>
<p>Jednak ta zmiana perspektywy potrafi też bardzo dużo namieszać. Jest naturalne dla np. zadań maturalnych, że opisują funkcję raz jak maszynę, a raz, jak wykres. W Księdze Rodzaju Bóg stwarza świat i porządkuje bezład przez rozdzielanie. Co prawda teraz siedzimy w odmętach matematycznego piekła, ale spróbować można. Rozdzielmy te dwa sposoby mówienia o funkcjach na graficzny i algebraiczny, a następnie spróbujmy jeden na drugi tłumaczyć.</p>
<section id="punkty" class="level2" data-number="7.1">
<h2 data-number="7.1" class="anchored" data-anchor-id="punkty"><span class="header-section-number">7.1</span> Punkty</h2>
<p><strong>Punkt</strong> to miejsce na wykresie opisywane przez parę liczb – jego współrzędne. Punkty zaznaczamy tam, gdzie argument przecina się z wartością. Para liczb typu <img src="https://latex.codecogs.com/png.latex?(2,%203)"> oznacza więc, że nasz punkt jest dwa oczka w prawo i trzy oczka do góry w układzie współrzędnych. Jeżeli nasz punkt leży na linii wykresu, mówimy, że <strong>punkt należy do wykresu funkcji</strong>. To jest opis graficzny, możemy zobaczyć to na wykresie. Co to znaczy w języku algebraicznym, czyli w języku maszyn?</p>
<p>Maszyny nie mają osi ani linii wykresu, one tylko przyjmują i wyrzucają liczby. Nie zapominajmy jednak, co oznaczają współrzędne. Pierwsza współrzędna to współrzędna pozioma (<img src="https://latex.codecogs.com/png.latex?x">), a druga to współrzędna pionowa (<img src="https://latex.codecogs.com/png.latex?y">). Współrzędne poziome oznaczają to, co wrzucam do funkcji, a pionowe to, co funkcja z siebie wypluwa. Stwierdzenie „Punkt <img src="https://latex.codecogs.com/png.latex?(2,%203)"> należy do wykresu funkcji.” oznacza ni mniej, ni więcej, jak „Jeżeli wrzucę do funkcji <img src="https://latex.codecogs.com/png.latex?2">, to wypluje ona <img src="https://latex.codecogs.com/png.latex?3">.” albo matematycznie <img src="https://latex.codecogs.com/png.latex?f(2)%20=%203">.</p>
<p>Jeżeli spotkasz się z zadaniem typu „Sprawdź, czy punkt <img src="https://latex.codecogs.com/png.latex?(5,%2011)"> należy do wykresu funkcji <img src="https://latex.codecogs.com/png.latex?y%20=%202x%20+%201">?“, to możesz to sobie przetłumaczyć z graficznego na algebraiczny – sprawdź, czy jak do funkcji <img src="https://latex.codecogs.com/png.latex?y%20=%202x%20+%201"> wrzucisz <img src="https://latex.codecogs.com/png.latex?5">, to wyjdzie ci <img src="https://latex.codecogs.com/png.latex?11">.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Zadanie
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Czy punkt <img src="https://latex.codecogs.com/png.latex?(21,%207)"> należy do wykresu funkcji <img src="https://latex.codecogs.com/png.latex?y%20=%20%5Cfrac%7Bx%7D%7B3%7D">?</p></li>
<li><p>Punkt <img src="https://latex.codecogs.com/png.latex?A"> ma współrzędną <img src="https://latex.codecogs.com/png.latex?x"> równą <img src="https://latex.codecogs.com/png.latex?7"> i należy do wykresu funkcji <img src="https://latex.codecogs.com/png.latex?f(x)%20=%203x%20-%2010">. Znajdź drugą współrzędną punktu <img src="https://latex.codecogs.com/png.latex?A">.<sup>3</sup></p></li>
<li><p>Punkt <img src="https://latex.codecogs.com/png.latex?B"> ma współrzędną <img src="https://latex.codecogs.com/png.latex?y"> równą 0 i należy do wykresu funkcji <img src="https://latex.codecogs.com/png.latex?y%20=%20-2x%20+%2020">. Znajdź pierwszą współrzędną punktu <img src="https://latex.codecogs.com/png.latex?B">.</p></li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-15-contents" aria-controls="callout-15" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Odpowiedź
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-15" class="callout-15-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Tak.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?f(7)%20=%203%20%5Ctimes%207%20-%2010%20=%2011">, więc <img src="https://latex.codecogs.com/png.latex?A(7,%2011)">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?f(10)%20=%20-2%20%5Ctimes%2010%20+%2020%20=%200">, więc <img src="https://latex.codecogs.com/png.latex?B(10,%200)">.</p></li>
</ol>
</div>
</div>
</div>
</section>
<section id="przecięcia" class="level2" data-number="7.2">
<h2 data-number="7.2" class="anchored" data-anchor-id="przecięcia"><span class="header-section-number">7.2</span> Przecięcia</h2>
<p>Bardzo często w zadaniach jesteśmy proszeni o wyznaczenie punktów przecięcia wykresu funkcji z osią X, rzadziej z osią Y. Co to znaczy w języku algebraicznym?</p>
</section>
<section id="przecięcie-z-osią-x" class="level2" data-number="7.3">
<h2 data-number="7.3" class="anchored" data-anchor-id="przecięcie-z-osią-x"><span class="header-section-number">7.3</span> Przecięcie z osią X</h2>
<p>Spójrz na ten wykres i powiedz, co wspólnego mają wszystkie te punkty?</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/x-axis.png" class="img-fluid"></p>
<p>Wszystkie leżą na osi X, to prawda. To jest opis w języku graficznym, gdzie istnieją punkty rozlokowane w przestrzeni. Teraz chcemy jednak przejść z opisu graficznego do algebraicznego, a punktem styku między jednym i drugim są <em>współrzędne</em>. Jaką współrzędną mają wspólną wszystkie te punkty? Po przeanalizowaniu wykresu dochodzimy do wniosku, że każdy z naszych punktów ma współrzędną <img src="https://latex.codecogs.com/png.latex?y%20=%200">. Różnią się natomiast współrzędnymi <img src="https://latex.codecogs.com/png.latex?x">.</p>
<p>Jeśli jesteśmy pytani o <strong>punkt przecięcia z osią X</strong>, innymi słowy jesteśmy pytani o takie miejsce, gdzie <img src="https://latex.codecogs.com/png.latex?y%20=%200">. Takim miejscem dla narysowanej na wykresie maszyny jest punkt o współrzędnych <img src="https://latex.codecogs.com/png.latex?(-1,%200)">. Jeśli sięgniesz pamięcią do punktu 4., zorientujesz się, że mamy specjalną nazwę na punkty, gdzie <img src="https://latex.codecogs.com/png.latex?y"> (czyli wartość funkcji) wynosi <img src="https://latex.codecogs.com/png.latex?0"> – <strong>miejsce zerowe</strong>. Pytanie o punkt przecięcia z osią X jest więc tak naprawdę znanym nam już pytaniem o miejsce zerowe, gdzie ewentualnie odpowiedź będzie trzeba zapisać jako <img src="https://latex.codecogs.com/png.latex?A(-1,%200)"> zamiast <img src="https://latex.codecogs.com/png.latex?f(-1)%20=%200">.</p>
</section>
<section id="przecięcie-z-osią-y" class="level2" data-number="7.4">
<h2 data-number="7.4" class="anchored" data-anchor-id="przecięcie-z-osią-y"><span class="header-section-number">7.4</span> Przecięcie z osią Y</h2>
<p>Podobne pytanie o wspólną współrzędną możemy sobie zadać dla punktów na osi Y.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/y-axis.png" class="img-fluid"></p>
<p>Tym razem pewnie szybciej możemy dojść do wniosku, że wszystkie zaznaczone punkty mają wspólną współrzędną <img src="https://latex.codecogs.com/png.latex?x">, a różnią się współrzędnymi <img src="https://latex.codecogs.com/png.latex?y">. Funkcja zaznaczona na rysunku ma punkt przecięcia z osią Y o współrzędnych <img src="https://latex.codecogs.com/png.latex?(0,%201)">. Pytanie o <strong>punkt przecięcia z osią Y</strong> jest więc niczym innym, jak pytaniem o wartość funkcji w zerze, czyli <img src="https://latex.codecogs.com/png.latex?f(0)">.</p>
</section>
</section>
<section id="funkcje-liniowe" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> Funkcje liniowe</h1>
<p>Najprostszy kształt, jaki może przyjąć funkcja to prosta linia. Funkcje potrafią być bardzo zwariowane i tworzyć różne zawijasy, ale wszystko zaczyna się od prostej linii. Jednak linia linii nierówna. Co prawda długość nie ma znaczenia, bo wszystkie funkcje liniowe są nieskończenie długie, ale istnieją dwa parametry, którymi różne linie proste mogą się różnić. Oba sobie tutaj omówimy.</p>
<section id="wyraz-wolny" class="level2" data-number="8.1">
<h2 data-number="8.1" class="anchored" data-anchor-id="wyraz-wolny"><span class="header-section-number">8.1</span> Wyraz wolny</h2>
<p>Zaczniemy od, być może, mniej istotnego i rewolucyjnego, ale który łatwiej jest zobaczyć. Narysujmy sobie 5 kolejnych funkcji: <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20x%20+%202">, <img src="https://latex.codecogs.com/png.latex?g(x)%20=%20x%20+%201">, <img src="https://latex.codecogs.com/png.latex?h(x)%20=%20x">, <img src="https://latex.codecogs.com/png.latex?i(x)%20=%20x%20-%201">, <img src="https://latex.codecogs.com/png.latex?j(x)%20=%20x%20-%202">.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/intercept.png" class="img-fluid figure-img"></p>
<figcaption>Czerwony – <img src="https://latex.codecogs.com/png.latex?f(x)">; pomarańczowy – <img src="https://latex.codecogs.com/png.latex?g(x)">; zielony – <img src="https://latex.codecogs.com/png.latex?h(x)">; niebieski – <img src="https://latex.codecogs.com/png.latex?i(x)">; fioletowy – <img src="https://latex.codecogs.com/png.latex?j(x)">.</figcaption>
</figure>
</div>
<p>Jeśli teraz porównamy te funkcje, to możemy dojść do wniosku, że są to równoległe linie (tak samo nachylone), ale niektóre są wyżej, inne niżej. Dodawanie do <img src="https://latex.codecogs.com/png.latex?x"> podnosi wykres, a odejmowanie go obniża. Najłatwiej skupić się tutaj na wartości w zerze, czyli na przecięciu z osią Y. Widzimy, że czerwona linia jest najwyżej, a każda kolejna o oczko niżej. Ten punkt, wartość w zerze, jest o tyle ciekawy, że jak spróbujemy podstawić 0 do funkcji, to <img src="https://latex.codecogs.com/png.latex?x"> nam znika i zostaje tylko to, co dodaliśmy, lub odjęliśmy. <img src="https://latex.codecogs.com/png.latex?f(0)%20=%200%20+%202%20=%202">.</p>
<p>Wbrew pozorom to bardzo ważny wniosek. Pozwala on bardzo szybko określić, co do <img src="https://latex.codecogs.com/png.latex?x"> było dodane, albo od niego odjęte. Spróbuj to zrobić na podstawie poniższej ryciny.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/intercept-identification.png" class="img-fluid"></p>
<p>Możemy iść taką logiką – skoro <img src="https://latex.codecogs.com/png.latex?x"> nie ma żadnego wpływu na wartość funkcji, jeśli wynosi 0 (bo zostaje tylko to, co dodajemy lub odejmujemy), to wystarczy spojrzeć na <img src="https://latex.codecogs.com/png.latex?f(0)">. Tutaj wynosi ta wartość <img src="https://latex.codecogs.com/png.latex?1,5"> i rzeczywiście, ta funkcja to <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20x%20+%201,5">. Nazywamy to <strong>wyraz wolny</strong> (ang. <em>intercept</em>) i najłatwiej go odczytać właśnie z przecięcia z osią Y. Wyraz wolny <em>zawsze</em> ma wartość równą <img src="https://latex.codecogs.com/png.latex?f(0)">. Wyraz wolny decyduje o tym, czy wykres funkcji jest wyżej, czy niżej.</p>
</section>
<section id="nachylenie" class="level2" data-number="8.2">
<h2 data-number="8.2" class="anchored" data-anchor-id="nachylenie"><span class="header-section-number">8.2</span> Nachylenie</h2>
<p>Drugi współczynnik trudniej jest zrozumieć, dlatego warto się tu skupić mocniej. Naszkicujmy 5 funkcji – <img src="https://latex.codecogs.com/png.latex?f(x)%20=%202x">, <img src="https://latex.codecogs.com/png.latex?g(x)%20=%201x">, <img src="https://latex.codecogs.com/png.latex?h(x)%20=%200x">, <img src="https://latex.codecogs.com/png.latex?i(x)%20=%20-1x">, <img src="https://latex.codecogs.com/png.latex?j(x)%20=%20-2x">.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/funkcje/slope.png" class="img-fluid figure-img"></p>
<figcaption>Czerwony – <img src="https://latex.codecogs.com/png.latex?f(x)">; pomarańczowy – <img src="https://latex.codecogs.com/png.latex?g(x)">; zielony – <img src="https://latex.codecogs.com/png.latex?h(x)">; niebieski – <img src="https://latex.codecogs.com/png.latex?i(x)">; fioletowy – <img src="https://latex.codecogs.com/png.latex?j(x)">.</figcaption>
</figure>
</div>
<p>Żeby się nie zgubić, porównajmy na początek funkcje zaznaczone na czerwono i pomarańczowo. Mam pytanie. Jeśli byłyby to schody, to po których wolał(a)byś wchodzić? Jeśli nie szukasz wszędzie okazji do fitnessu (to pisząc sięgam po kolejnego wafla z kremem orzechowym), to pewnie wybierzesz schody pomarańczowe. Są bowiem mniej <em>strome</em>. Innymi słowy mają mniejsze <em>nachylenie</em>.</p>
<p>Porównajmy teraz obie te funkcje do funkcji zaznaczonej na zielono. Zielona funkcja jest płaska. Ma zerowe nachylenie. Nie ma się co dziwić, po uproszczeniu jej wzór to <img src="https://latex.codecogs.com/png.latex?h(x)%20=%200"> – niezależnie, co wrzucimy, wyrzuci ona 0. Jej wartość jest stała. Następnie przechodzimy do funkcji niebieskiej i fioletowej – co do obu możemy zauważyć, że im bardziej przesuwamy palcem w prawo, tym niżej jesteśmy. Obie te funkcje są <em>malejące</em>, ale funkcja fioletowa maleje szybciej.</p>
<p>Zauważmy jednak, że wszystkie te funkcje przechodzą przez <img src="https://latex.codecogs.com/png.latex?(0,%200)">. Nachylenie nie ma więc związku z tym, czy wykres jest przesunięty w górę, czy w dół. To, jak już ustaliliśmy, kontroluje wyraz wolny. Rampa jest tak samo stroma na pokładzie samolotu i w piekle.</p>
<p>Nachylenie kontrolowane jest przez tzw. <strong>współczynnik kierunkowy</strong>, czyli liczbę, przez którą mnożę <img src="https://latex.codecogs.com/png.latex?x">. Im ta liczba większa, tym bardziej stromy wykres. Jeśli ta liczba jest ujemna, funkcja jest malejąca.</p>
</section>
<section id="wzór-ogólny" class="level2" data-number="8.3">
<h2 data-number="8.3" class="anchored" data-anchor-id="wzór-ogólny"><span class="header-section-number">8.3</span> Wzór ogólny</h2>
<p>Ustaliliśmy więc, że funkcje liniowe kontrolowane są przez dwie wartości:</p>
<ol type="1">
<li><p>Współczynnik kierunkowy, czyli liczbę, przez którą mnożę <img src="https://latex.codecogs.com/png.latex?x"> – kontroluje nachylenie.</p></li>
<li><p>Wyraz wolny, czyli liczbę, którą dodaję do <img src="https://latex.codecogs.com/png.latex?x"> – kontroluje położenie w pionie.</p></li>
</ol>
<p>Jeśli porwiemy się na to szaleństwo i połączymy mnożenie z dodawaniem, to otrzymamy wzór ogólny funkcji liniowej:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%20ax%20+%20b%0A"></p>
<p>Oczywiście oznaczenia, jak zawsze, są umowne. Równie dobrze mogę napisać <img src="https://latex.codecogs.com/png.latex?m(l)%20=%20sl%20+%20w"> albo nawet <img src="https://latex.codecogs.com/png.latex?m(l)%20=%20sl%20+%20m(0)">, bo <img src="https://latex.codecogs.com/png.latex?m"> to maszyna, <img src="https://latex.codecogs.com/png.latex?l"> to liczba, <img src="https://latex.codecogs.com/png.latex?s"> to stromizna, a <img src="https://latex.codecogs.com/png.latex?w"> to wyraz wolny, który zawsze ma wartość równą wartości funkcji w zerze. Niezależnie, jakie literki sobie wybierzemy, funkcje, które da się przedstawić jako mnożenie <img src="https://latex.codecogs.com/png.latex?x"> i dodawanie (lub odejmowanie<sup>4</sup>), będą miały kształt prostej linii. W standardowej notacji literką <img src="https://latex.codecogs.com/png.latex?a"> oznacza się współczynnik kierunkowy, zaś literką <img src="https://latex.codecogs.com/png.latex?b"> wyraz wolny.</p>
<p>Statystyczny spoiler: linie regresji to proste linie, dlatego one również mają taką postać. Zazwyczaj zapisywane są upiornie wyglądającą notacją typu <img src="https://latex.codecogs.com/png.latex?%5Cbeta_0%20+%20%5Cbeta_1%20X">, ale to cały czas to samo, tylko w odwrotnej kolejności i literkami greckimi. Nie dajcie się zwieść, to jest tylko po to, żeby Was przestraszyć.</p>
</section>
</section>
<section id="podsumowanie" class="level1" data-number="9">
<h1 data-number="9"><span class="header-section-number">9</span> Podsumowanie</h1>
<ol type="1">
<li>Funkcje to „maszyny matematyczne”, które przyjmują liczbę, wykonują na niej operację i zwracają wynik.</li>
<li>Nazewnictwo:
<ol type="1">
<li>Argument lub miejsce – to, co wrzucam do funkcji;</li>
<li>Wartość – to, co funkcja wypluwa.</li>
</ol></li>
<li>Oznacza się je serią skrótów stanowiących pojedyncze literki – nazwa funkcji (np. <img src="https://latex.codecogs.com/png.latex?f">), argument (np. <img src="https://latex.codecogs.com/png.latex?x">), wartość (np. <img src="https://latex.codecogs.com/png.latex?f(x)"> lub <img src="https://latex.codecogs.com/png.latex?y">) i definicja (np. <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20x%20+%203">).</li>
<li>Nieskończoną liczbę wartości funkcji można przedstawić na wykresie, gdzie na osi poziomej (zwanej X) zaznacza się argumenty, a na osi pionowej (zwanej Y) zaznacza się odpowiadające im wartości.</li>
<li>Wykresy odblokowują nowy sposób mówienia o funkcjach jako o rysunkach:
<ol type="1">
<li>„Punkt <img src="https://latex.codecogs.com/png.latex?A(2,%205)"> należy do wykresu funkcji <img src="https://latex.codecogs.com/png.latex?f">” to to samo, co „<img src="https://latex.codecogs.com/png.latex?f(2)%20=%205">“;</li>
<li>„Wykres funkcji <img src="https://latex.codecogs.com/png.latex?f"> przecina oś X w miejscu <img src="https://latex.codecogs.com/png.latex?5">” to to samo, co „<img src="https://latex.codecogs.com/png.latex?f(5)%20=%200">“;</li>
<li>„Wykres funkcji <img src="https://latex.codecogs.com/png.latex?f"> przecina oś Y z wartością <img src="https://latex.codecogs.com/png.latex?8">” to to samo, co „<img src="https://latex.codecogs.com/png.latex?f(0)%20=%208">“.</li>
</ol></li>
<li>Wszystkie funkcje o kształcie linii prostej dają się przedstawić jako <img src="https://latex.codecogs.com/png.latex?y%20=%20ax%20+%20b">, gdzie:
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?a"> – współczynnik kierunkowy, kontroluje nachylenie wykresu;</li>
<li><img src="https://latex.codecogs.com/png.latex?b"> – wyraz wolny, kontroluje przesunięcie wykresu w górę lub w dół i zawsze wynosi <img src="https://latex.codecogs.com/png.latex?f(0)">.</li>
</ol></li>
</ol>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Przypisy</h2>

<ol>
<li id="fn1"><p>W gimnazjum wciskali nam kit, że będziemy się uczyć programowania w HTML. Nie da się <em>programować</em>&nbsp;w HTML, bo HTML nie ma funkcji, pętli, zmiennych ani innych rzeczy, które pozwalają cokolwiek rzeczywiście zaprogramować. Jeśli chcemy programować cokolwiek na stronach internetowych, użyjemy JavaScript, gdzie wszystkie te rzeczy są.↩︎</p></li>
<li id="fn2"><p>Polecam też <a href="../posts/podstawy_R.html">wprowadzenie do R</a> na tej stronie.↩︎</p></li>
<li id="fn3"><p>Spróbuj to samo wyrazić językiem algebraicznym.↩︎</p></li>
<li id="fn4"><p>Używam terminu „dodawanie”, bo odejmowanie to dodawanie liczb ujemnych.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Statystyka</category>
  <category>Matematyka</category>
  <guid>https://nieobliczalne.pl/posts/funkcje.html</guid>
  <pubDate>Wed, 26 Jul 2023 22:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/funkcje.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Tworzenie pakietów w R</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/pakiety-w-R.html</link>
  <description><![CDATA[ 




<p>Pakiety to nic innego jak zbiory funkcji. Od zwykłych plików .R z funkcjami różnią się tym, że mają określoną strukturę, dzięki której można je potem zainstalować i szybko zacząć wykorzystywać. Pewnie pierwszym skojarzeniem z pisaniem pakietów jest udostępnianie ich całej społeczności przez CRAN. Owszem, można to zrobić, ale można mieć też prywatne pakiety trzymane na GitHubie. Wtedy taki pakiet może być chałupniczy, niepełny, nieelegancki, ale i tak jest lepszą drogą, niż luźne pliki z definicjami funkcji. Dzięki temu nie musimy od razu wszystkiego zrobić na tip-top, żeby każdy na świecie wygodnie korzystał z naszych trzech funkcji. Naszym celem jest w końcu <strong>oszczędzenie sobie pracy, nie dołożenie</strong>.</p>
<section id="przygotowanie" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Przygotowanie</h1>
<p>Do tworzenia pakietów wykorzystujemy inne pakiety. Najważniejszym z nich jest <code>devtools</code>, który ciągnie za sobą cały szereg innych pakietów typu <code>roxygen2</code>, <code>usethis</code> czy <code>testthat</code>. Możesz nawet mieć już zainstalowane <code>devtools</code>, bo to w jego skład wchodzi funkcja <code>install_github()</code>, dzięki której instalujemy pakiety z GitHuba<sup>1</sup>. Jeśli nie masz jeszcze zainstalowanego pakietu <code>devtools</code>, zainstaluj go teraz.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"devtools"</span>)</span></code></pre></div>
</div>
<p>W tym tekście będę używał pełnych nazw funkcji, np. <code>usethis::use_readme_md()</code>. Jeśli jednak na początku pracy załadujesz <code>devtools</code>, nie musisz później podawać nazw pakietów.</p>
<p>Najprostszym sposobem na utworzenie zrębu pakietu R jest wykorzystanie menu do tworzenia projektów w RStudio. Podczas tworzenia projektu możemy wybrać jego typ i nas interesuje <em>R package</em>. W wygodnym kreatorze wpisujemy nazwę pakietu. Warto też zaznaczyć, że chcemy mieć do tego repozytorium Git. Jeśli zabieramy się za tworzenie pakietu, powinniśmy umieć choć w podstawowym stopniu korzystać z Gita. Jeśli nie znasz Gita, zachęcam do przeczytania <a href="./posts/git.qmd">tego posta</a>.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/pakiety-w-R/RStudio-wizard.png" class="img-fluid"></p>
</section>
<section id="sec-structure" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Struktura pakietu</h1>
<p>Stworzony przez nas szkielet pakietu już ma określoną strukturę. W wybranym wcześniej folderze znajdziemy serię szczególnych plików i folderów, która potem będzie się rozrastać. Obecnie są to:</p>
<ul>
<li><p><code>.gitignore</code> – plik repozytorium mówiący, co Git ma ignorować (więcej o tym w <a href="./posts/git.qmd">tekście o Git</a>).</p></li>
<li><p><code>.Rbuildignore</code> – plik, w którym podajemy niestandardowe pliki, które z jakiegoś powodu znajdują się w folderze z naszym pakietem; jest to ważne, bo R-CMD-check (o którym więcej w podrozdziale 8) będzie na nas krzyczał, jeśli znajdzie niestandardowe pliki w nietypowych miejscach.</p></li>
<li><p><code>DESCRIPTION</code> – metadane naszego pakietu, przede wszystkim nazwa, wersja, autorzy i pakiety, których nasz pakiet wymaga do działania.</p></li>
<li><p><code>man</code> – folder z plikami .Rd z dokumentacją naszych funkcji; nie edytujemy ich ręcznie.</p></li>
<li><p><code>NAMESPACE</code> – plik z przestrzenią nazw naszego pakietu; nie edytujemy go ręcznie.</p></li>
<li><p><code>R</code> – folder, do którego wrzucamy pliki .R z naszymi funkcjami; najważniejsza część naszego pakietu.</p></li>
</ul>
<p>Do tego jeszcze znajdziemy tam plik z projektem RStudio. W miarę budowania naszego pakietu, nasz folder będzie się zaludniał nowymi plikami i podfolderami.</p>
<p>Już teraz warto jest uruchomić kilka komend z pakietu <code>usethis</code>, które ułatwią nam robotę w przyszłości. Są to funkcje, których zazwyczaj używamy tylko raz, one wykonują swoją robotę (coś tworzą, coś dopisują) i zapominamy o ich istnieniu, aż nie musimy stworzyć kolejnego pakietu.</p>
<p>Po pierwsze musimy przygotować nasz pakiet do używania <code>roxygen2</code>, czyli specjalnego standardu generującego dokumentację naszych funkcji. Dzięki niemu nie musimy ręcznie babrać się z plikami .Rd. Zaczynamy więc od <strong>usunięcia pliku <code>NAMESPACE</code></strong>, który wytworzyło RStudio. Dlaczego? Bo nasz plik <code>NAMESPACE</code> ma stworzyć <code>roxygen2</code>, a nie RStudio. Po usunięciu używamy komendy <code>roxygen2::roxygenise()</code>. Doda ona do pliku <code>DESCRIPTION</code> informację o używanej wersji <code>roxygen2</code> oraz stworzy nowy, piękny, prawie pusty plik <code>NAMESPACE</code>. Następnie używamy komendy <code>usethis::use_roxygen_md()</code><sup>2</sup>. Pozwoli ona używać nam wygodnej składni markdown w dokumentacji, np. **<strong>bold</strong>** wygeneruje nam pogrubiony tekst. Więcej o podstawach markdown przeczytamy na przykład <a href="https://quarto.org/docs/authoring/markdown-basics.html">tutaj</a>.</p>
</section>
<section id="description" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> <code>DESCRIPTION</code></h1>
<p>Plik <code>DESCRIPTION</code>, jak już wspomniałem, to opis naszego pakietu. Jeśli otworzymy go teraz, zobaczymy przygotowany wcześniej szkielet. Możemy w nim uzupełnić tytuł, wersję i opis pakietu. Jeśli opis zajmie więcej niż linijkę, kolejne linijki powinny zaczynać się wcięciem wielkości 4 spacji.</p>
<section id="autorzy" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="autorzy"><span class="header-section-number">3.1</span> Autorzy</h2>
<p>Jeśli chodzi o autorów pakietu, podajemy ich w dość specyficzny sposób. Najpierw jednak kasujemy całą linijkę <code>Maintainer</code>. To część starego standardu, dziś osobę odpowiedzialną za kod podajemy w polu autorów. Samych autorów podamy za pomocą funkcji <code>person()</code>. Pokażmy to sobie na przykładzie.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>DESCRIPTION</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">Authors<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">person</span>(</span>
<span id="cb2-2">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jakub"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jędrusiak"</span>,</span>
<span id="cb2-3">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kuba23031999@gmail.com"</span>,</span>
<span id="cb2-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aut"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cre"</span>),</span>
<span id="cb2-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb2-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ORCID =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0000-0002-6481-8210"</span>,</span>
<span id="cb2-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">affiliation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"University of Wrocław"</span></span>
<span id="cb2-8">        )</span>
<span id="cb2-9">      )</span></code></pre></div>
</div>
</div>
<p>Po pierwsze znacznik <code>Author</code> zmieniamy na <code>Authors@R</code> i to niezależnie od liczby autorów. Jeśli autor jest jeden, podajemy go za pomocą funkcji <code>person()</code>. Podstawowe informacje to imię w pierwszym argumencie<sup>3</sup>, nazwisko w drugim. Tych argumentów nie musimy nazywać. Dalej mamy inne informacje, które już nazwać warto. <code>email</code> jaki jest, każdy widzi. <code>role</code> to opis funkcji osoby w tworzeniu pakietu. Używamy tutaj kodów opisanych w dokumentacji funkcji <code>person()</code>. Kilka podstawowych kodów ról wymieniam w tabeli poniżej. Jak widać w przykładzie, każda osoba może mieć więcej niż jedną rolę. Kolejnym polem jest <code>comment</code>, który <em>zawsze</em> podajemy w postaci nazwanego wektora. Podstawowymi informacjami, które możemy tutaj umieścić, są numer ORCiD oraz afiliacja.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 66%">
</colgroup>
<thead>
<tr class="header">
<th>Kod</th>
<th>Funkcja</th>
<th>Opis</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>"aut"</code></td>
<td><em>Author</em></td>
<td>Pełny autor; wszystkie osoby, które pojawiają się w cytowaniu, powinny mieć przypisaną tę rolę.</td>
</tr>
<tr class="even">
<td><code>"cre"</code></td>
<td><em>Creator</em></td>
<td>Osoba odpowiedzialna za dbanie o kod w pakiecie (<em>maintainer</em>).</td>
</tr>
<tr class="odd">
<td><code>"ctb"</code></td>
<td><em>Contributor</em></td>
<td>Osoby, które wniosły jakiś istotny wkład w pakiet, ale za mały, by pojawiać się w cytowaniu.</td>
</tr>
<tr class="even">
<td><code>"cph"</code></td>
<td><em>Copyright holder</em></td>
<td>Osoba lub instytucja posiadająca prawa autorskie do pakietu.</td>
</tr>
</tbody>
</table>
<p>Jeśli autorów jest więcej niż jeden, podajemy ich w postaci wektora osób. Poniżej przykład.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>DESCRIPTION</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">Authors<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">person</span>(</span>
<span id="cb3-3">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boris"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Forthmann"</span>,</span>
<span id="cb3-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boris.forthmann@uni-muenster.de"</span>,</span>
<span id="cb3-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aut"</span>,</span>
<span id="cb3-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb3-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ORCID =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0000-0001-9755-7304"</span>,</span>
<span id="cb3-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">affiliation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"University of Münster"</span></span>
<span id="cb3-9">      )</span>
<span id="cb3-10">    ),</span>
<span id="cb3-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">person</span>(</span>
<span id="cb3-12">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maciej"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Karwowski"</span>,</span>
<span id="cb3-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maciej.karwowski@uwr.edu.pl"</span>,</span>
<span id="cb3-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aut"</span>,</span>
<span id="cb3-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb3-16">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ORCID =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0000-0001-6974-1673"</span>,</span>
<span id="cb3-17">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">affiliation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"University of Wrocław"</span></span>
<span id="cb3-18">      )</span>
<span id="cb3-19">    ),</span>
<span id="cb3-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">person</span>(</span>
<span id="cb3-21">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Roger"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E."</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Beaty"</span>,</span>
<span id="cb3-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rebeaty@psu.edu"</span>,</span>
<span id="cb3-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aut"</span>,</span>
<span id="cb3-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb3-25">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ORCID =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0000-0001-6114-5973"</span>,</span>
<span id="cb3-26">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">affiliation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pennsylvania State University"</span></span>
<span id="cb3-27">        )</span>
<span id="cb3-28">      ),</span>
<span id="cb3-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">person</span>(</span>
<span id="cb3-30">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jakub"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jędrusiak"</span>,</span>
<span id="cb3-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kuba23031999@gmail.com"</span>,</span>
<span id="cb3-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aut"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cre"</span>),</span>
<span id="cb3-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb3-34">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ORCID =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0000-0002-6481-8210"</span>,</span>
<span id="cb3-35">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">affiliation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"University of Wrocław"</span></span>
<span id="cb3-36">        )</span>
<span id="cb3-37">      )</span>
<span id="cb3-38">    )</span></code></pre></div>
</div>
</div>
</section>
<section id="citation" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="citation"><span class="header-section-number">3.2</span> <code>CITATION</code></h2>
<p>Jeśli chcemy, by nasz pakiet był cytowany w jakiś konkretny sposób, możemy wprost go wskazać w pliku <code>CITATION</code>. Wytwarzamy go już po uzupełnieniu koniecznych informacji w pliku <code>DESCRIPTION</code> za pomocą komendy <code>usethis::use_citation()</code>. Sam plik siedzi sobie w folderze <code>inst</code>. Umieszczamy w nim informacje o cytowaniu w formacie BibTeX (każdy generator potrafi taką wytworzyć), a jeśli chcemy, to także wersję tekstową. Decyduje to o sposobie, w jaki wyświetla się wynik funkcji <code>citation()</code>. Poniżej przykładowy plik <code>CITATION</code> i jego efekt.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>CITATION</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">citHeader</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"To cite mtscr in publications use:"</span>)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">citEntry</span>(</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">entry    =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Manual"</span>,</span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title    =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Multidimensional Top Scoring for Creativity Research"</span>,</span>
<span id="cb4-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">author   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boris Forthmann, Maciej Karwowski, Roger E. Beaty, Jakub Jędrusiak"</span>,</span>
<span id="cb4-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year     =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023"</span>,</span>
<span id="cb4-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/jakub-jedrusiak/mtscr"</span>,</span>
<span id="cb4-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">textVersion =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(</span>
<span id="cb4-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Forthmann, B., Karwowski, M., Beaty, R. E., Jędrusiak, J. (2023). Multidimensional Top Scoring for Creativity Research. Retrieved from: https://github.com/jakub-jedrusiak/mtscr"</span></span>
<span id="cb4-11">  )</span>
<span id="cb4-12">)</span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">citation</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtscr"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>To cite mtscr in publications use:

  Forthmann, B., Karwowski, M., Beaty, R. E., Jędrusiak, J. (2023).
  Multidimensional Top Scoring for Creativity Research. Retrieved from:
  https://github.com/jakub-jedrusiak/mtscr

Wpis BibTex dla użytkowników LaTeX to

  @Manual{,
    title = {Multidimensional Top Scoring for Creativity Research},
    author = {Boris Forthmann and Maciej Karwowski and Roger E. Beaty and Jakub Jędrusiak},
    year = {2023},
    url = {https://github.com/jakub-jedrusiak/mtscr},
  }</code></pre>
</div>
</div>
</section>
<section id="licencja" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="licencja"><span class="header-section-number">3.3</span> Licencja</h2>
<p>Swój kod warto wprost licencjonować, ale licencji nie dodajemy do pakietu ręcznie. Używamy tutaj odpowiedniej funkcji z pakietu <code>usethis</code>, np. dla licencji MIT będzie to <code>usethis::use_mit_license()</code>, a dla GPL v.3 <code>usethis::use_gpl3_license()</code>. Pełną listę dostępnych licencji można znaleźć <a href="https://usethis.r-lib.org/reference/licenses.html">tutaj</a>. Jaką licencję wybrać? Najprościej mówiąc, MIT to <em>de facto</em> pójście we w pełni wolny kod. Taki kod może np. stać się częścią płatnego programu, ale nasze prawa autorskie w stosunku do niego ciągle obowiązują. GPL natomiast wymusza, by programy oparte na naszym kodzie też były licencjonowane pod GPL, czyli by zawsze były darmowe. Większość pakietów R (ok. 70%) korzysta z licencji GPL.</p>
</section>
<section id="sec-dependencies" class="level2" data-number="3.4">
<h2 data-number="3.4" class="anchored" data-anchor-id="sec-dependencies"><span class="header-section-number">3.4</span> Zależności</h2>
<p>Najpewniej nie będziemy pisać całego naszego kodu w podstawowym R, a raczej będziemy wykorzystywać w nim inne pakiety. Żeby dodać jakiś pakiet jako zależność, używamy np. <code>usethis::use_package("rlang", "dplyr")</code>. Nie należy nigdy podawać <code>tidyverse</code> jako zależności, a raczej konkretne pakiety typu <code>dplyr</code> czy <code>stringr</code>. Do tego możemy wymusić wykorzystanie konkretnej minimalnej wersji danego pakietu argumentem <code>min_version</code>, np. pisząc <code>usethis::use_package("dplyr", min_version = "1.1.0")</code>.</p>
<p>Jeśli zerkniemy w plik <code>DESCRIPTION</code> po uruchomieniu takiej komendy, zobaczymy, że dodane pakiety znalazły się w sekcji <code>Imports</code>. Tak powinno być. Istnieją jednak inne możliwe sekcje. Jeśli dodajemy pakiet, który nie jest potrzebny do działania naszych funkcji, ale na przykład potrzebujemy go do uruchomienia przykładów (bo chociażby wykorzystujemy w nich dane <code>diamonds</code> z pakietu <code>ggplot2</code>, podczas gdy nie wykorzystujemy samego <code>ggplot2</code> w naszych funkcjach), dodajemy go w sekcji <code>Suggests</code>. Robimy to pisząc na przykład <code>usethis::use_package("ggplot2", type = "Suggests")</code>.</p>
<p>Istnieje seria zależności, które posiada większość pakietów i które można łatwo dodać poprzez specjalne funkcje z pakietu <code>usethis</code>. Wymieńmy sobie te najważniejsze:</p>
<ol type="1">
<li><p><code>usethis::use_pipe()</code> – dodaje obsługę potoków <code>%&gt;%</code> z pakietu <code>magrittr</code>.</p></li>
<li><p><code>usethis::use_tibble()</code> – dodaje obsługę <code>tibble</code> jako formy, w której nasze funkcje zwracają dane.</p></li>
<li><p><code>usethis::use_tidy_dependencies()</code> – standardowe zależności typu <code>rlang</code>, <code>cli</code> czy <code>glue</code>. Według mnie powinno się uruchamiać zawsze.</p></li>
<li><p><code>usethis::use_tidy_eval()</code> – podstawowe pakiety do <a href="./posts/metaprogramowanie.qmd">Tidy Eval</a>. Według mnie powinno się&nbsp;uruchamiać zawsze.</p></li>
<li><p><code>usethis::use_lifecycle()</code> – dodaje zależność od pakietu <code>lifecycle</code>, dzięki któremu możemy oznaczyć nasze funkcje jako eksperymentalne albo wycofane. Więcej informacji <a href="https://lifecycle.r-lib.org/index.html">tutaj</a>.</p></li>
</ol>
<p>Dodatkowo większość pakietów posiada wprost wskazaną zależność od samego R. Taka zależność musi pojawić się w sekcji <code>Depends</code> (zamiast standardowego <code>Imports</code>) i musi uwzględniać minimalną wersję co najmniej 3.5.0<sup>4</sup>. W praktyce najlepiej jest podawać minimalną wersję 4.1.0, bo w tej wersji dodano natywny potok <code>|&gt;</code>, a już w ogóle najlepiej nie cofać się przed 4.2.0, kiedy potoki wzbogacono o <code>_</code>, czyli informację, gdzie ma się znaleźć dany argument, jeśli nie na pierwszym miejscu (odpowiednik <code>.</code> w <code>magrittr</code>). Można to wykonać funkcją <code>usethis::use_package("R", type = "Depends", min_version = "4.2.0")</code>. Zwrócę tutaj uwagę, że trzecia liczba w zależności od R <strong>musi być zero</strong>. Nie można podać na przykład zależności z minimalną wersją&nbsp;<code>4.2.2</code>.</p>
</section>
</section>
<section id="readme" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> <code>README</code></h1>
<p>Każde repozytorium powinno mieć plik README, czyli opis, który wyświetli się na stronie pakietu na GitHubie. Gdy tworzymy pakiet R, mamy dwie możliwości, jakiego rodzaju plik README wytworzymy.</p>
<ol type="1">
<li><p><code>README.md</code> – opcja klasyczna, wytwarza zwykły plik markdown.</p></li>
<li><p><code>README.Rmd</code> – opcja fajniejsza, wytwarza plik .Rmd, w którym możemy dorzucać przykładowy kod w R razem z jego efektami.</p></li>
</ol>
<p>Pierwsza opcja wymaga użycia komendy <code>usethis::use_readme_md()</code>. Wytworzy ona zwykły plik .md, który możemy wypełnić korzystając z <a href="https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax">instrukcji na GitHubie</a>. Jeśli chcemy zyskać dostęp do możliwości oferowanych przez RMarkdown, używamy <code>usethis::use_readme_rmd()</code>. Wytworzy to plik .Rmd, w którym możemy pokazać, na co stać nasz pakiet. Dokładny opis składni znajdziemy <a href="https://rmarkdown.rstudio.com/">tutaj</a>, zaś poniżej przykład.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-overflow-wrap code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">The main function is <span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">`mtscr_scores()`</span> which can return a df with scores for each participant, each item or each participant-item combination. Scores come from two models – <span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">`all_max`</span> and <span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">`all_top2`</span>. A value for a participant is the maximum value predicted by the model for that participant.</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb7-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">library("mtscr")</span></span>
<span id="cb7-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">data("mtscr_creativity", package = "mtscr")</span></span>
<span id="cb7-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="light-mode">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/pakiety-w-R/Rmarkdown.png" class="img-fluid figure-img"></p>
<figcaption>Efekt działania kodu RMarkdown z ramki na GitHubie.</figcaption>
</figure>
</div>
</div>
<div class="dark-mode">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/pakiety-w-R/Rmarkdown_dark.png" class="img-fluid figure-img"></p>
<figcaption>Efekt działania kodu RMarkdown z ramki na GitHubie.</figcaption>
</figure>
</div>
</div>
<p>Jeśli zdecydujemy się na tę opcję, zawsze edytujemy plik <code>README.Rmd</code>, a nie <code>README.md</code>. GitHub nie potrafi go jednak odczytać, dlatego przed wysłaniem naszych plików na serwer musimy przekonwertować plik <code>README.Rmd</code> do pliku <code>README.md</code>. Robimy to prostą komendą <code>devtools::build_readme()</code>. Komenda <code>usethis::use_readme_rmd()</code> dodatkowo dodaje specjalną przypominajkę, która nie pozwala nam zrobić commitu, jeśli zmienialiśmy plik <code>README.Rmd</code>, a go nie wyeksportowaliśmy.</p>
<p>Na marginesie dodam, że RMarkdown jest powoli zastępowany przez bliźniaczy standard <a href="https://quarto.org/">Quarto</a>, ale w chwili, gdy to piszę, <code>usethis</code> <a href="https://github.com/r-lib/usethis/issues/1671">nie planuje go wdrażać</a>.</p>
<section id="odznaki" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="odznaki"><span class="header-section-number">4.1</span> Odznaki</h2>
<p>Bardzo często w repozytoriach znajdziemy odznaki. Są to elementy informacyjno-ozdobne, które mówią coś o naszym pakiecie, np. że przechodzi testy, że jest w CRAN albo ile razy w miesiącu ktoś go pobiera. Ciekawe odznaki obejmują:</p>
<ol type="1">
<li><p>Odznakę <code>R-CMD-check</code>, o której piszę w podrozdziale 5.1.</p></li>
<li><p>Odznakę <code>lifecycle</code>, którą możemy poinformować, że nasz pakiet jako całość jest eksperymentalny, stabilny lub wycofany. Możemy ją dodać wykorzystując komendę <code>usethis::use_lifecycle_badge("stable")</code>. Argument wybieramy jaki chcemy, zgodnie z listą dostępną <a href="https://lifecycle.r-lib.org/articles/stages.html">tutaj</a>.</p></li>
<li><p>Odznakę CRAN, która informuje, jaka wersja naszego pakietu dostępna jest w CRAN. Jeśli pakiet nie jest dostępny, to odznaka też może o tym poinformować. Dodajemy ją komendą <code>usethis::use_cran_badge()</code>.</p></li>
</ol>
<div class="light-mode">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/pakiety-w-R/badges.png" class="img-fluid figure-img"></p>
<figcaption>Kilka odznak w nagłówku pliku README na GitHubie.</figcaption>
</figure>
</div>
</div>
<div class="dark-mode">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/pakiety-w-R/badges_dark.png" class="img-fluid figure-img"></p>
<figcaption>Kilka odznak w nagłówku pliku README na GitHubie.</figcaption>
</figure>
</div>
</div>
<p>Odznaki nie są obowiązkową częścią pakietu, ale piszę o nich, bo lubię takie ładne pierdółki. Inne przykłady odznak znajdziemy na <a href="https://shields.io/">shields.io</a>, albo wykorzystując pakiet <a href="https://github.com/GuangchuangYu/badger"><code>badger</code></a>.</p>
</section>
</section>
<section id="github" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> GitHub</h1>
<p>Zazwyczaj swoje pakiety chcemy trzymać na GitHubie<sup>5</sup>, żeby łatwo je instalować. Żeby podłączyć nasze repozytorium do GitHuba, musimy użyć po kolei dwóch komend.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_git</span>()</span>
<span id="cb8-2">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_github</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">private =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>Pierwsza dostosuje nasze repozytorium do ogólnych dobrych standardów. Druga podłączy nas do GitHuba, wytwarzając nowe repozytorium. Jeśli chcemy, by było prywatne, ustawiamy <code>private = TRUE</code>.</p>
<section id="sec-GitHubActions" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="sec-GitHubActions"><span class="header-section-number">5.1</span> R-CMD-check na GitHubie</h2>
<p>Kolejną polecaną przeze mnie czynnością, która (według mnie) powinna zostać wykonana w każdym repozytorium, jest uruchomienie tej komendy:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_github_action_check_standard</span>()</span></code></pre></div>
</div>
<p>Dodaje ona kilka rzeczy. Po pierwsze sprawia ona, że po każdym naszym commicie GitHub wykonuje zestaw podstawowych testów zwanych R-CMD-check, o których więcej piszę w podrozdziale Sekcja&nbsp;8. W drugiej kolejności dodaje ona odznakę R-CMD-check do naszego pliku <code>README</code>, żebyśmy mogli błyszczeć przechodzeniem testów.</p>
</section>
</section>
<section id="pliki-z-funkcjami" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Pliki z funkcjami</h1>
<p>Przyszedł czas dodać jakieś rzeczywiste funkcje. Pisanie funkcji stanowiących część pakietu jest prawie identyczne jak pisanie zwyczajnych funkcji. Jak podam dalej, możemy chcieć postarać się bardziej i np. zabezpieczyć nasze funkcje przed błędami, ale znowu – nie musimy. Podstawowe pułapki przy pisaniu własnych funkcji w ogóle (nie tylko w pakietach) obejmują użeranie się z Tidy Eval, o którym piszę <a href="./posts/metaprogramowanie.qmd">tutaj</a>.</p>
<p>Żeby dodać jakieś funkcje do swojego pakietu, używamy funkcji <code>usethis::use_r()</code><sup>6</sup>, gdzie jako argument podajemy nazwę pliku z funkcją. W większości przypadków będzie to nazwa samej funkcji, np. jeśli chcemy stworzyć funkcję do liczenia statystyk opisowych, moglibyśmy napisać <code>usethis::use_r("opisowe")</code>. Możemy też zawrzeć kilka funkcji w jednym pliku, ale powinny być to bardzo blisko związane funkcje. Na tyle blisko związane, żeby mogły dzielić jedną stronę w dokumentacji. Przykładem takich funkcji może być na przykład rodzina <code>devtools::install_*()</code> albo <code>usethis::use_*_license()</code>. Wszystkie funkcje z tych zestawów są prawie identyczne, więc mogą być zgromadzone w jednym pliku.</p>
<p>Niezależnie jednak, czy robimy mały pakiecik do użytku własnego, czy może coś, co chcemy ostatecznie umieścić w CRAN, warto swoje funkcje udokumentować. Dokumentacja w R jest cudowna, łatwa w obsłudze i zawsze dostępna. Potraktuj swoją dokumentację jako ustrukturyzowane notatki, dzięki którym nie zapomnisz, na czym polegały Twoje funkcje i jak ich używać.</p>
<section id="sec-cran-checks" class="level2" data-number="6.1">
<h2 data-number="6.1" class="anchored" data-anchor-id="sec-cran-checks"><span class="header-section-number">6.1</span> Specyficzne wymogi CRAN i R-CMD-check</h2>
<p>Załóżmy, że napisaliśmy już własną funkcję, która liczy podstawowy zestaw statystyk opisowych i zwraca je w ulubionej przez nas formie. Wykorzystam tutaj funkcję z <a href="./posts/metaprogramowanie.qmd">tekstu o metaprogramowaniu</a>. Definicję zapisuję w pliku <code>opisowe.R</code>, jaki wytworzyłem w poprzednim akapicie w folderze <code>R</code>.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>opisowe.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">opisowe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, group, ...) {</span>
<span id="cb10-2">  kolumny_do_policzenia <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquos</span>(...)</span>
<span id="cb10-3"></span>
<span id="cb10-4">  df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>({{ group }}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb10-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb10-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>kolumny_do_policzenia),</span>
<span id="cb10-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb10-10">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)),</span>
<span id="cb10-11">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">M =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb10-12">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SD =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb10-13">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>skewness,</span>
<span id="cb10-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">K =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>kurtosis,</span>
<span id="cb10-15">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NA</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x))</span>
<span id="cb10-16">        )</span>
<span id="cb10-17">      )</span>
<span id="cb10-18">    )</span>
<span id="cb10-19">}</span></code></pre></div>
</div>
</div>
<p>Ponieważ jest to pakiet, musimy trochę przepisać naszą funkcję, jeśli nie chcemy, żeby R-CMD-check później na nas krzyczał. Jeśli nas to nie obchodzi, możemy to pominąć, ale lepiej jest od razu nabierać dobrych nawyków. Takie dopasowywanie funkcji dotyczy zazwyczaj tylko kilku rzeczy, z których najważniejsza to globalne definicje obiektów. R musi wiedzieć dokładnie, czym są pokazywane mu obiekty, żeby się nie buntował, niezależnie od tego, czy tym obiektem jest funkcja, czy baza danych.</p>
<ol type="1">
<li><p>Funkcje powinny być zapisane w postaci pełnych nazw, czyli np. <code>dplyr::group_by()</code>. Pakiety, z których pochodzą te funkcje, powinny być dodane jako zależności (por. podrozdział 3.4). Jeśli użyliśmy <code>usethis::use_tidy_eval()</code> (por. podrozdział 3.4), to funkcje z pakietu <code>rlang</code> są ładowane z automatu i nie potrzebują pełnych nazw.</p></li>
<li><p>Jeśli w funkcjach typu <code>mutate()</code> wykorzystujemy nazwy kolumn bez cudzysłowu, np. <code>mutate(iris, millimeters = Sepal.Length * 10)</code>, R-CMD-check będzie krzyczał, że <code>Sepal.Length</code> nie ma globalnej definicji. W takim wypadku używamy wyrażenia <code>.data</code> z <code>rlang</code> i piszemy <code>dplyr::mutate(iris, millimeters = .data$Sepal.Length * 10)</code>.</p></li>
<li><p>Jeśli w funkcjach wybierających kolumny (przede wszystkim <code>select()</code>) piszemy nazwy kolumn, to podajemy je w cudzysłowie. Powód jest taki, jak wyżej, brak globalnej definicji, ale <code>.data</code> nie nadaje się do <code>tidyselect</code>. Dla przykładu zamiast <code>select(iris, Sepal.Width, Sepal.Length)</code> powinniśmy napisać <code>dplyr::select(iris, "Sepal.Width", "Sepal.Length")</code>.</p></li>
<li><p>Na ogół lepiej używać natywnego potoku <code>|&gt;</code> niż <code>%&gt;%</code>. Jeśli chcemy używać potoku z <code>magrittr</code> używamy wcześniej <code>usethis::use_pipe()</code>. Natywny potok oszczędza nam dodatkowej zależności.</p></li>
</ol>
<p>Poprawiona funkcja mogłaby więc wyglądać tak:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>opisowe.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">opisowe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, group, ...) {</span>
<span id="cb11-2">  kolumny_do_policzenia <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquos</span>(...)</span>
<span id="cb11-3"></span>
<span id="cb11-4">  df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-5">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>({{ group }}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-6">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb11-7">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb11-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>kolumny_do_policzenia),</span>
<span id="cb11-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb11-10">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)),</span>
<span id="cb11-11">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">M =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb11-12">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SD =</span> \(x) stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb11-13">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>skewness,</span>
<span id="cb11-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">K =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>kurtosis,</span>
<span id="cb11-15">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NA</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x))</span>
<span id="cb11-16">        )</span>
<span id="cb11-17">      )</span>
<span id="cb11-18">    )</span>
<span id="cb11-19">}</span></code></pre></div>
</div>
</div>
</section>
<section id="dokumentowanie-z-roxygen2" class="level2" data-number="6.2">
<h2 data-number="6.2" class="anchored" data-anchor-id="dokumentowanie-z-roxygen2"><span class="header-section-number">6.2</span> Dokumentowanie z <code>roxygen2</code></h2>
<p>Gdy mamy już naszą funkcję napisaną, przyszedł czas ją udokumentować. Niezależnie, czy robimy mały pakiecik do użytku własnego, czy może coś, co chcemy ostatecznie umieścić w CRAN, warto tego nie zaniedbywać. Dokumentacja w R jest cudowna, łatwa w obsłudze i zawsze dostępna. Potraktuj swoją dokumentację jako ustrukturyzowane notatki, dzięki którym nie zapomnisz, na czym polegały Twoje funkcje i jak ich używać. Tworzymy ją za pomocą specjalnego szkieletu obsługiwanego przez pakiet <code>roxygen2</code>. Możemy albo napisać taki szkielet od podstaw, albo wejść kursorem tesktowym do naszej funkcji i w RStudio z menu Code wybrać Insert Roxygen Skeleton (skrót klawiaturowy Ctrl+Alt+Shift+R). Taki szkielet szkieletu uzupełniamy ręcznie. Pokażmy to sobie na przykładzie.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>opisowe.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Statystyki opisowe</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Funkcja licząca podstawowe statystyki opisowe: liczność, średnią, SD,</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' skośność, kurtozę i liczbę braków danych.</span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param df ramka danych z kolumnami do policzenia.</span></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param group kolumna do grupowania.</span></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param ... nazwy kolumn, dla których mają być policzone statystyki.</span></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return ramka danych z kolumnami `N`, `M`, `SD`, `A`, `K` i `NA`. Oryginalne nazwy</span></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'     kolumn w formie przedrostka.</span></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb12-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb12-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @examples</span></span>
<span id="cb12-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' opisowe(iris, Species, Sepal.Width, Sepal.Length)</span></span></code></pre></div>
</div>
</div>
<p>Pierwszym, co zwraca uwagę, jest fakt, że napisałem to po polsku. Owszem, można, ale jeśli chcemy udostępniać nasz kod na zewnątrz, lepiej dokumentować pakiet po angielsku.</p>
<p>Ten podstawowy opis funkcji zawiera kilka rzeczy:</p>
<ol type="1">
<li><p>Na samej górze znajduje się tytuł funkcji, który lapidarnie ale konkretnie opisuje jej przeznaczenie.</p></li>
<li><p>Dalej opis działania funkcji. Również powinien być krótki i konkretny. Jeśli potrzebujemy więcej niż jednego akapitu, musimy jawnie napisać <code>@description</code>. W innym wypadku wystarczy zejść linijkę poniżej tytułu, tak jak pokazałem w przykładzie.</p></li>
<li><p>Następnie mamy trzy tagi <code>@param</code>, z których każdy opisuje kolejny argument, jaki funkcja przyjmuje. Warto tutaj opisać postać, w jakiej argument musi zostać podany, np. <em>logical</em> albo <em>dataframe</em>.</p></li>
<li><p>Tag <code>@return</code> opisuje, co funkcja zwraca. W tym wypadku jest to opis stworzonej ramki danych ze statystykami opisowymi.</p></li>
<li><p>Tag <code>@export</code> nie zawiera żadnych informacji. Umieszcza się go w tych funkcjach, do których użytkownik powinien mieć dostęp.</p></li>
<li><p>Na samym końcu mamy <code>@examples</code>, czyli przykłady użycia funkcji. Przykłady są obowiązkowe i obowiązkowo muszą zadziałać. Jeśli jakiś przykład specjalnie zwraca błąd (możemy w końcu chcieć pokazać, jak naszej funkcji <em>nie</em> używać), należy go umieścić w klamrze <code>\dontrun{}</code>, np. <code>\dontrun{opisowe(iris)}</code>.</p></li>
</ol>
<p>Do wymienionych wyżej podstawowych tagów możemy dodać także m.in. sekcje <code>@details</code> czy <code>@seealso</code>. Poniżej przykład strony w dokumentacji generowanej przez podstawowe tagi.</p>
<div class="light-mode">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/pakiety-w-R/dokumentacja.png" class="img-fluid figure-img"></p>
<figcaption>Dokumentacja funkcji <code>opisowe()</code>.</figcaption>
</figure>
</div>
</div>
<div class="dark-mode">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/pakiety-w-R/dokumentacja_dark.png" class="img-fluid figure-img"></p>
<figcaption>Dokumentacja funkcji <code>opisowe()</code>.</figcaption>
</figure>
</div>
</div>
<p>Żeby przerobić szkielety <code>roxygen2</code> na rzeczywiste pliki dokumentacji (czyli pliki .Rd w folderze .man), należy uruchomić komendę <code>devtools::document()</code>. Tutaj zaczynają się ujawniać komendy, których warto używać często, a już zwłaszcza przed wysłaniem aktualizacji na GitHuba. Zbieram je wszystkie na końcu, w podsumowaniu.</p>
<p>W przykładzie widać teź, że mogę używać w swoich szkieletach formatowania markdown. Jest to jednak możliwe tylko, jeśli wcześniej użyłem <code>usethis::use_roxygen_md()</code>, o czym pisałem w podrozdziale 2.</p>
</section>
<section id="dokumentacja-całego-pakietu" class="level2" data-number="6.3">
<h2 data-number="6.3" class="anchored" data-anchor-id="dokumentacja-całego-pakietu"><span class="header-section-number">6.3</span> Dokumentacja całego pakietu</h2>
<p>Możemy dodać ogólną stronę w dokumentacji dotyczącą naszego pakietu jako całości. Wykonuje się to w specjalnym pliku .R, który można dodać funkcją <code>usethis::use_package_doc()</code>. Jeśli jednak użyłeś(-aś) wcześniej funkcji <code>usethis::use_tidy_dependencies()</code>, to wymusiła ona na Tobie wytworzenie takiego pliku. Niezależnie od wybranej drogi, po uruchomieniu jednej z tych komend znajdziesz w folderze <code>R</code> plik o nazwie typu typu <code>packagename-package.R</code>, gdzie możesz napisać dokumentację pakietu standardowo, jak w każdym innym pliku .R.</p>
</section>
</section>
<section id="sec-datafiles" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Załączanie danych</h1>
<p>Czasami chcemy załączyć do naszego pakietu dane. Mogą być one wartością samą w sobie (jak np. w pakiecie <code>datasets</code>), mogą służyć do ilustracji działania reszty naszego pakietu. Niezależnie od celu, pliki z danymi trzeba załączać w odpowiedni sposób, a także je dokumentować.</p>
<section id="surowe-dane-w-data-raw" class="level2" data-number="7.1">
<h2 data-number="7.1" class="anchored" data-anchor-id="surowe-dane-w-data-raw"><span class="header-section-number">7.1</span> Surowe dane w <code>data-raw</code></h2>
<p>Na początku potrzebujemy surowego pliku z danymi, np. w formacie .csv. Wrzucamy go do folderu <code>data-raw</code>, który tworzymy w głównym folderze naszego pakietu. Następnie tworzymy skrypt czyszczący. Najłatwiej wytworzyć go funkcją <code>usethis::use_data_raw()</code>, która za pierwszy argument przyjmuje nazwę, którą chcemy naszej bazie danych nadać. Mogłoby to być coś w stylu <code>usethis::use_data_raw("iris")</code>. Spowoduje to wytworzenie w folderze <code>data-raw</code> skryptu <code>iris.R</code>, który w tym momencie powinien nam się otworzyć w RStudio. Zawiera on tylko komentarz i jedną komendę <code>usethis::use_data()</code>. Powyżej tej komendy piszemy skrypt, który ładuje i czyści nasze surowe dane do takiej formy, którą chcemy załączyć w pakiecie. Gotowe dane zapisujemy do zmiennej o wybranej wcześniej nazwie. I to wystarczy. Podczas instalacji naszego pakietu zostaną załadowane też dane. Dostęp do nich możemy uzyskać za pomocą komendy, która w pełnej wersji ma postać <code>data("diamonds", package = "ggplot2")</code>. Poniżej przykład gotowego skryptu ładującego.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>mtscr_creativity.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">mtscr_creativity <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data-raw/study2.csv"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>response_nofill, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>item_nofill) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb13-4">    item <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb13-5">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"belt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brick"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"broom"</span>,</span>
<span id="cb13-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bucket"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"candle"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clock"</span>,</span>
<span id="cb13-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"comb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knife"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lamp"</span>,</span>
<span id="cb13-8">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pencil"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pillow"</span>,</span>
<span id="cb13-9">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sock"</span></span>
<span id="cb13-10">    ),</span>
<span id="cb13-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(SemDis_MEAN))</span>
<span id="cb13-12">  )</span>
<span id="cb13-13"></span>
<span id="cb13-14">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_data</span>(mtscr_creativity, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
</div>
</section>
<section id="dokumentacja-plików-z-danymi" class="level2" data-number="7.2">
<h2 data-number="7.2" class="anchored" data-anchor-id="dokumentacja-plików-z-danymi"><span class="header-section-number">7.2</span> Dokumentacja plików z danymi</h2>
<p>Jeśli załączamy w naszym pakiecie dane, to je również powinniśmy udokumentować. Tworzymy w tym celu specjalny plik <code>data.R</code> w folderze <code>R</code>, w którym opisujemy wszystkie nasze pliki z danymi. Pod szkieletem <code>roxygen2</code> umieszczamy nazwę naszej bazy danych w cudzysłowie. Poniżej skrócony przykład.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>data.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Creativity assessment through semantic distance dataset</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' A dataset from Forthmann, Karwowski &amp; Beaty ([2023](https://doi.org/10.1037/aca0000571)) paper.</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' It contains a set of responses in Alternative Uses Task for different items with their</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' semantic distance assessment.</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return a [tibble][tibble::tibble-package]</span></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @format ## `mtscr_creativity`</span></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' A `tibble` with 4585 rows and 3 columns:</span></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' \describe{</span></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   \item{id}{patricipants' unique identification number}</span></span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   \item{response}{response in AUT}</span></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   \item{item}{item for which alternative uses were searched for}</span></span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' }</span></span>
<span id="cb14-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb14-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @source &lt;https://osf.io/7rgsp/&gt;</span></span>
<span id="cb14-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtscr_creativity"</span></span></code></pre></div>
</div>
</div>
<p>Specyficzne tagi to <code>@format</code>, w którym opisujemy <strong>każdą kolumnę</strong> i <code>@source</code>, w którym podajemy źródło naszych danych. <code>\describe{}</code> to sposób na dodanie do dokumentacji listy.</p>
</section>
</section>
<section id="sec-r-cmd-check" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> R-CMD-check</h1>
<p>Jeśli piszemy pakiet, zazwyczaj chcemy, żeby działał. Nie mogę być pewny, ale to chyba rozsądne założenie. Zazwyczaj pierwszym krokiem jest ręczne sprawdzenie, czy wszystko działa, jak byśmy się tego spodziewali. Żeby uzyskać dostęp do swoich funkcji tu i teraz, używamy komendy <code>devtools::load_all()</code>.</p>
<p>Zestaw podstawowych czynności w kierunku sprawdzenia, czy nie występują podstawowe problemy z naszym kodem, czy czegoś nie zepsuliśmy, nie dopilnowaliśmy, jest zautomatyzowany i nazywa się R-CMD-check. Muszą go przejść wszystkie pakiety obecne w CRAN. Jeśli wykonaliśmy instrukcję z podrozdziału 5.1, po każdym commicie wykona go również GitHub i wynik pokaże na odznace.</p>
<p>Po pierwsze R-CMD-check sprawdzi, czy cały kod spełnia standardy, czyli czy wszystkie obiekty w kodzie mają globalne definicje (por. podrozdział 6.1), czy wszystkie przykłady wykonują się bez błędu, czy każda funkcja ma wszystkie niezbędne elementy dokumentacji, czy wszystkie używane pakiety zostały dodane jako zależności. Po drugie wykonane zostaną wszystkie testy, które opisuję w podrozdziale 10. Po trzecie, zostanie sprawdzona struktura repozytorium, czy nic się nie zepsuło, czy nie mamy jakichś plików, które nie powinny tam być. Do tego cała seria mniejszych lub większych rzeczy, które R może nam wytknąć jako błędy, ostrzeżenia lub informacje. Warto informacje wypluwane przez R-CMD-check przeczytać, bo są bardzo konkretne. Błędów być nie może, ostrzeżeń lepiej, żeby nie było, rzeczy wytykane w informacjach poprawiamy, kiedy mamy czas (albo gdy chcemy wysłać pakiet do CRAN).</p>
<p>Żeby wykonać R-CMD-check używamy komendy <code>devtools::check()</code>. Ta komenda na wstępie odnowi nam doumentację, więc jeśli jej używamy, to nie musimy już korzystać z <code>devtools::document()</code>. Informacje o przeprowadzanych testach wyświetlają się na bieżąco, ale jeśli pojawią się jakieś uchybienia, zostaną one zbiorczo wyświetlone na koniec. Komendę <code>devtools::check()</code> dobrze jest wykonać przed każdym wypchnięciem do GitHuba, żeby nie zdziwił nas wynik wykonany już w repozytorium.</p>
</section>
<section id="sprawdzanie-wejścia-i-informacje-o-błędach" class="level1" data-number="9">
<h1 data-number="9"><span class="header-section-number">9</span> Sprawdzanie wejścia i informacje o błędach</h1>
<p>Ten podrozdział i wszystkie kolejne, <strong>nie są niezbędne</strong>, żeby pakiet działał i był użyteczny. Są to rzeczy, które warto wiedzieć, ale przydadzą się przede wszystkim w pakietach dużych i/lub udostępnianych szerokiej publiczności. Małe pakiety albo użytkowane w wąskim gronie zazwyczaj nie potrzebują szerokiej kontroli wejścia czy złożonych informacji o błędach. Jedyne, nad czym bym się zastanowił, czy nie wprowadzać od początku, to testy z podrozdziału 10.</p>
<p>Dobre komendy są odporne, w tym znaczeniu, że zabezpieczają użytkownika przed nieprawidłowym wykorzystaniem. Debiloodporne, chciałoby się powiedzieć. Jeśli osoba popełnia błąd, na przykład podaje wektor zamiast ramki danych albo wskazuje kolumny, których nie ma, powinna dostać konkretną informację zwrotną (tj. błąd). Jeśli nie zabezpieczymy naszej funkcji przed nieprawidłowym wykorzystaniem, użytkownik dostanie informacje o błędach z funkcji, z których zbudowaliśmy naszą funkcję. Innymi słowy jeśli na przykład wykorzystujemy komendę <code>select()</code> i użytkownik pod kolumnę, która nie istnieje, zobaczy błąd wygenerowany w kolumnie <code>select()</code>. Czasem to dobrze, czasem to źle. Jeśli wykonujemy jakieś skomplikowane przekształcenia w naszej funkcji i gdzieś w środku wypłynie błąd, informacja o błędzie może po prostu nijak nie podpowiadać, co mogło ten błąd spowodować. Czasem jednak te informacje będą wystarczająco jasne, by nie musieć tworzyć ich samodzielnie.</p>
<p>Ogólnie dobrze jest zabezpieczać swoje funkcje, ale znowu – to <strong>nie jest konieczne, żeby pakiet działał</strong>. To będziemy robić, jak będziemy mieli czas albo poważnie będziemy chcieli ulepszyć nasz pakiet do użytku innych. My zazwyczaj znamy nasze funkcje bardzo dobrze, więc zazwyczaj będziemy je poprawnie wykorzystywać.</p>
<p>Zazwyczaj to zabezpieczenie dotyczy sprawdzania wejścia, czyli czy to, co użytkownik podał, spełnia wymogi naszej funkcji. Zazwyczaj robi się to na samym początku, dość prosto, bo za pomocą połączenia <code>if</code> i <code>stop()</code>. My tutaj jednak wykorzystamy ładniejsze informacje o błędach, które wdraża pakiet <code>cli</code> w połączeniu z <code>glue</code>. Oba te pakiety dodaliśmy już do zależności, jeśli wykorzystaliśmy <code>usethis::use_tidy_dependencies()</code>. Rodzina funkcji, które nam się tu przydadzą, to <code>cli::cli_abort()</code>, <code>cli::cli_warn()</code> lub <code>cli::cli_inform()</code>.</p>
<section id="typ-argumentu" class="level2" data-number="9.1">
<h2 data-number="9.1" class="anchored" data-anchor-id="typ-argumentu"><span class="header-section-number">9.1</span> Typ argumentu</h2>
<p>Zazwyczaj najpierw sprawdzamy, czy obiekt podany przez użytkownika jako argument ma odpowiedni typ. Na przykład jeśli naszym pierwszym argumentem jest ramka danych <code>df</code>, możemy chcieć upewnić się, czy to rzeczywiście jest ramka danych.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">winda_do_nieba <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coś, co nie jest ramką danych</span></span>
<span id="cb15-2"></span>
<span id="cb15-3">input_check <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df) {</span>
<span id="cb15-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(df)) {</span>
<span id="cb15-5">        cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_abort</span>(</span>
<span id="cb15-6">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb15-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.arg df} must be a data frame."</span>,</span>
<span id="cb15-8">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Provided {.arg df} is {.obj_type_friendly {df}}"</span></span>
<span id="cb15-9">            )</span>
<span id="cb15-10">        )</span>
<span id="cb15-11">    }</span>
<span id="cb15-12">}</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">input_check</span>(winda_do_nieba)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in `input_check()`:
! `df` must be a data frame.
✖ Provided `df` is a number</code></pre>
</div>
</div>
<p>Klamra <code>if</code> sprawdza, czy <code>df</code> <em>nie jest</em> ramką danych (zwróćmy uwagę na wykrzyknik <code>!</code>). Jeśli nie jest, uruchamiana jest funkcja <code>cli_abort()</code>. Zatrzymuje ona wykonywanie kodu i pokazuje w konsoli błąd w estetycznej formie.</p>
<p>Jak używać tej funkcji? Ma ona całkiem sporo możliwości. Najprostszą rzeczą, którą może przyjąć, jest sam komunikat z błędem. Może to być zwykły tekst. Mamy też dodatkowe możliwości formatowania, o których jednak później. Komunikat jest opatrzony ikonką, która zależy od tego, czy chcemy wyrzucić błąd, ostrzeżenie czy informację.</p>
</section>
<section id="punktory" class="level2" data-number="9.2">
<h2 data-number="9.2" class="anchored" data-anchor-id="punktory"><span class="header-section-number">9.2</span> Punktory</h2>
<p>Możemy jednak dokładać kolejne komunikaty i kolejne ikonki. W takim wypadku do funkcji <code>cli_abort()</code> wrzucamy wektor komunikatów. Pierwszy komunikat jest nienazwany, zaś w kolejnych wprost wskazujemy, jakie chcemy punktory. Cała lista dostępna jest w <a href="https://cli.r-lib.org/reference/cli_bullets.html">dokumentacji <code>cli::cli_bullet()</code></a>. Dostępne w chwili, gdy to piszę, pokazuję niżej.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_bullets</span>(</span>
<span id="cb17-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb17-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bez wcięcia"</span>,</span>
<span id="cb17-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wcięcie"</span>,</span>
<span id="cb17-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"punktor"</span>,</span>
<span id="cb17-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"strzałka"</span>,</span>
<span id="cb17-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sukces"</span>,</span>
<span id="cb17-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zagrożenie"</span>,</span>
<span id="cb17-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"!"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ostrzeżenie"</span>,</span>
<span id="cb17-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"informacja"</span></span>
<span id="cb17-11">    )</span>
<span id="cb17-12">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>bez wcięcia</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  wcięcie</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• punktor</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ strzałka</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ sukces</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✖ zagrożenie</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>! ostrzeżenie</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ informacja</code></pre>
</div>
</div>
</section>
<section id="formatowanie-z-glue" class="level2" data-number="9.3">
<h2 data-number="9.3" class="anchored" data-anchor-id="formatowanie-z-glue"><span class="header-section-number">9.3</span> Formatowanie z <code>glue</code></h2>
<p>Poza punktorami możemy dodatkowo formatować tekst korzystając ze składni dostarczanej przez <code>glue</code>. <code>cli</code> obsługuje ją automatycznie. Wszystkie szczegóły oraz jak to wygląda rzeczywiście w konsoli znajdziemy na <a href="https://cli.r-lib.org/reference/inline-markup.html">tej</a> stronie dokumentacji. Ja omówię tutaj same podstawy. Jeśli chodzi o to, jak formatować, jak to powinno wyglądać, osobiście często sprawdzam w <code>tidyverse</code>. Próbuję&nbsp;wywołać podobny błąd np. w funkcji <code>dplyr::select()</code> i patrzę, co mi wyskakuje. Traktuję to jako wzorzec, podpowiedź.</p>
<p>Tekst, który chcemy sformatować, bierzemy w nawiasy klamrowe. W nawiasie zaczynamy od określenia, w jaki sposób chcemy dany tekst sformatować. Poniżej lista możliwych formatów.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_li</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tekst {.emph kursywą}."</span>)</span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_li</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.strong Pogrubiony} tekst."</span>)</span>
<span id="cb26-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_li</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fragment kodu: {.code sum(a) / length(a)}."</span>)</span>
<span id="cb26-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_li</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nazwa pakietu: {.pkg cli}."</span>)</span>
<span id="cb26-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_li</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nazwa funkcji: {.fn cli_text}."</span>)</span>
<span id="cb26-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_li</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Klawisz: wciśnij {.kbd spację}."</span>)</span>
<span id="cb26-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_li</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nazwa lub ścieżka pliku: {.file /usr/bin/env}."</span>)</span>
<span id="cb26-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_li</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adres mailowy: {.email marylala@marylarodowicz.pl}."</span>)</span>
<span id="cb26-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_li</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adres WWW: {.url https://example.com}."</span>)</span>
<span id="cb26-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_li</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zmienna środowiskowa: {.envvar R_LIBS}."</span>)</span>
<span id="cb26-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_li</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Typ obiektu: `mtcars` is {.obj_type_friendly {mtcars}}"</span>)</span></code></pre></div>
</div>
<p>Jeśli chcemy, możemy wykonywać też operacje w nawiasach klamrowych. Zazwyczaj będziemy wtedy zagnieżdżać jedne nawiasy w drugich. Najlepiej pokazać to na przykładzie.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_warn</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Złamano {.strong {sum(365, 248)}} postanowień. Ostrzegam cię."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Złamano 613 postanowień. Ostrzegam cię.</code></pre>
</div>
</div>
<p>Wewnątrz klamry z pogrubieniem dołożyłem drugą klamrę, w której umieściłem funkcję sumującą. Umieszczenie funkcji w klamrze sprawiło, że w ostrzeżeniu pojawia nam się wynik, 613, a nie tekst <code>sum(365, 248)</code>. Nie jest to zbyt użytkowy przykład, ale dobrze jest wiedzieć, że tak się da. W kolejnym przykładzie zobaczymy, jak można tego użyć do dostosowywania informacji zwrotnych pod użytkownika.</p>
</section>
<section id="obecność-kolumn-w-bazie" class="level2" data-number="9.4">
<h2 data-number="9.4" class="anchored" data-anchor-id="obecność-kolumn-w-bazie"><span class="header-section-number">9.4</span> Obecność kolumn w bazie</h2>
<p>Poza sprawdzeniem typu argumentu, możemy chcieć się upewnić, że kolumny wskazane przez użytkownika rzeczywiście są obecne w bazie. Pomocna będzie tutaj funkcja <code>rlang::has_name()</code>, która dokładnie to sprawdza. Jeśli obiekt istnieje, <code>has_name()</code> wyrzuca <code>TRUE</code>, a jeśli nie, wyrzuca <code>FALSE</code>. Niestety <code>has_name()</code> wymaga nazwy kolumny w postaci string, dlatego musimy pobawić się trochę z Tidy Eval. Jeśli nie wiesz, jak to robić, odsyłam do <a href="./posts/metaprogramowanie.qmd">tego</a> tekstu.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">col_check <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, id_column) {</span>
<span id="cb29-2">    id_column <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(id_column)</span>
<span id="cb29-3"></span>
<span id="cb29-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_name</span>(df, rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_name</span>(id_column))) {</span>
<span id="cb29-5">        cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_abort</span>(</span>
<span id="cb29-6">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb29-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"All columns must exist in the data."</span>,</span>
<span id="cb29-8">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Column {.var {rlang::as_name(id_column)}} does not exist."</span>,</span>
<span id="cb29-9">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Check the spelling."</span></span>
<span id="cb29-10">            )</span>
<span id="cb29-11">        )</span>
<span id="cb29-12">    }</span>
<span id="cb29-13">}</span>
<span id="cb29-14"></span>
<span id="cb29-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_check</span>(iris, Sepal.Density)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in `col_check()`:
! All columns must exist in the data.
✖ Column `Sepal.Density` does not exist.
ℹ Check the spelling.</code></pre>
</div>
</div>
<p>W powyższym przykładzie widzimy też, do czego może nam się&nbsp;przydać zagnieżdżanie nawiasów klamrowych. Tutaj wykorzystuję je do zawarcia nazwy nieistniejącej kolumny w komunikacie o błędzie.</p>
</section>
</section>
<section id="sec-tests" class="level1" data-number="10">
<h1 data-number="10"><span class="header-section-number">10</span> Testy z <code>testthat</code></h1>
<p>Testy automatyczne to bardzo szeroki temat. Idea, która za nimi stoi, jest mniej więcej taka – jest wiele rzeczy, które mogą pójść źle, które można zepsuć. Nikomu się nie chce po każdych zmianach w kodzie sprawdzać, czy jakiś drobny aspekt przez te zmiany nie ucierpiał. W tym celu piszemy specjalne skrypty, które za nas sprawdzą, czy wszystko działa tak, jak powinno. W R testy piszemy z użyciem pakietu <code>testthat</code>. By móc z niego korzystać, uruchamiamy w naszym repozytorium komendę <code>usethat::use_testthat()</code>.</p>
<section id="struktura-testów" class="level2" data-number="10.1">
<h2 data-number="10.1" class="anchored" data-anchor-id="struktura-testów"><span class="header-section-number">10.1</span> Struktura testów</h2>
<p>Wszystkie testy znajdują się w folderze <code>tests</code>, w podfolderze <code>testthat</code>. Możemy je wytwarzać ręcznie, ale zazwyczaj będziemy wykorzystywać komendę <code>usethis::use_test()</code>. W domyśle jeden plik z funkcjami powinien mieć odpowiadający mu plik z testami. W RStudio komenda <code>usethis::use_test()</code> nie potrzebuje żadnych argumentów – domyślnie tworzy plik z testami dla aktualnie otwartego skryptu.</p>
<p>Nowo utworzony plik zawiera przykładowy test, który możemy spokojnie usunąć. Żeby napisać własny test wykorzystamy przede wszystkim komendę <code>test_that()</code> oraz komendy z rodziny <code>expect_*()</code>. Komenda <code>test_that()</code> przyjmuje dwie rzeczy – opis, co test robi (jako string) oraz komendy składające się na test zapisane w nawiasach klamrowych. Warto zauważyć, że nie musimy pisać <code>testthat::test_that()</code>. Cały pakiet jest dostępny od chwili użycia <code>usethat::use_testthat()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jakiś element działa jak należy"</span>, {</span>
<span id="cb31-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tutaj komendy składające się&nbsp;na test</span></span>
<span id="cb31-3">})</span></code></pre></div>
</div>
<p>W nawiasach klamrowych możemy zapomnieć, że jesteśmy wewnątrz funkcji i pisać kod normalnie. Możemy na przykład tworzyć przykładowe zbiory danych, na których będziemy wykonywać testy. Najważniejsze są jednak funkcje z rodziny <code>expect_*()</code>, za pomocą których mówimy, czego oczekujemy od danej funkcji. Rodzina ta jest szeroka, bo i funkcje do testowania są bardzo różne. W ramach jednej funkcji <code>test_that()</code> możemy użyć kilku tego typu komend, ale staramy się utrzymać porządek, żeby każda funkcja <code>test_that()</code> testowała coś konkretnego. Poniżej wymieniam kilka najważniejszych funkcji <code>expect_*()</code>, a bardziej rozszerzoną ich listę można znaleźć <a href="https://testthat.r-lib.org/reference/">tutaj</a>.</p>
<ol type="1">
<li><p><code>expect_identical()</code> i <code>expect_equal()</code> – czy zadane wartości są takie same? Można ustawić tolerancję błędu.</p></li>
<li><p><code>expect_length()</code> – czy obiekt ma określoną długość?</p></li>
<li><p><code>expect_names()</code> – czy nazwy kolumn (wartości) są takie, jakie mają być? Pozwala zignorować kolejność i wielkość liter.</p></li>
<li><p><code>expect_match()</code> – czy w wektorze tekstowym jest tekst odpowiadający <a href="./posts/regex.qmd">wyrażeniu regularnemu</a>?</p></li>
<li><p><code>expect_type()</code> – czy obiekt jest określonego typu?</p></li>
<li><p><code>expect_error()</code>, <code>expect_warning()</code> i <code>expect_message()</code> – jak nazwa wskazuje; czy dany kod generuje błąd/ostrzeżenie/informację? Pozwala też sprawdzać treść komunikatów za pomocą <a href="./posts/regex.qmd">wyrażeń regularnych</a>.</p></li>
<li><p><code>expect_true()</code> i <code>expect_false()</code> – najbardziej uniwersalne funkcje sprawdzające. Jednocześnie lepiej zastąpić je innymi, jeśli jest możliwość, żeby wyniki testów były bardziej czytelne.</p></li>
</ol>
</section>
<section id="przykładowe-testy" class="level2" data-number="10.2">
<h2 data-number="10.2" class="anchored" data-anchor-id="przykładowe-testy"><span class="header-section-number">10.2</span> Przykładowe testy</h2>
<p>Załóżmy, że chcemy napisać testy do naszej funkcji <code>opisowe()</code>. Przypomnijmy jej definicję.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>opisowe.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">opisowe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, group, ...) {</span>
<span id="cb32-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if df is a dataframe</span></span>
<span id="cb32-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(df)) {</span>
<span id="cb32-4">        cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_abort</span>(</span>
<span id="cb32-5">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb32-6">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.arg df} must be a data frame."</span>,</span>
<span id="cb32-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Provided {.arg df} is {.obj_type_friendly {df}}"</span></span>
<span id="cb32-8">            )</span>
<span id="cb32-9">        )</span>
<span id="cb32-10">    }</span>
<span id="cb32-11"></span>
<span id="cb32-12">    kolumny_do_policzenia <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquos</span>(...)</span>
<span id="cb32-13"></span>
<span id="cb32-14">    df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>({{ group }}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-16">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb32-17">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb32-18">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>kolumny_do_policzenia),</span>
<span id="cb32-19">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb32-20">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)),</span>
<span id="cb32-21">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">M =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb32-22">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SD =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb32-23">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>skewness,</span>
<span id="cb32-24">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">K =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>kurtosis,</span>
<span id="cb32-25">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NA</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x))</span>
<span id="cb32-26">                )</span>
<span id="cb32-27">            )</span>
<span id="cb32-28">        )</span>
<span id="cb32-29">}</span></code></pre></div>
</div>
</div>
<p>Dorzuciłem tutaj sprawdzenie, czy <code>df</code> jest ramką danych. Jakie testy moglibyśmy napisać dla tej funkcji? Poniżej kilka przykładów.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>test-opisowe.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a test data frame with normally distributed data</span></span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb33-3">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb33-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb33-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb33-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb33-7">)</span>
<span id="cb33-8"></span>
<span id="cb33-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test if function returns a data frame</span></span>
<span id="cb33-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"opisowe returns a data frame"</span>, {</span>
<span id="cb33-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_s3_class</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">opisowe</span>(df, group, x, y), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb33-12">})</span>
<span id="cb33-13"></span>
<span id="cb33-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test if function calculates summary statistics correctly</span></span>
<span id="cb33-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"opisowe calculates summary statistics correctly"</span>, {</span>
<span id="cb33-16">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">opisowe</span>(df, group, x, y)</span>
<span id="cb33-17">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## N</span></span>
<span id="cb33-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>))</span>
<span id="cb33-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x_N, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))</span>
<span id="cb33-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y_N, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))</span>
<span id="cb33-21">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## M</span></span>
<span id="cb33-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x_M, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0344</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1464</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb33-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y_M, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.4921</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0776</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb33-24">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## SD</span></span>
<span id="cb33-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x_SD, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9258</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9054</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb33-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y_SD, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.9786</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8619</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb33-27">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## A</span></span>
<span id="cb33-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x_A, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1729</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0462</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb33-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y_A, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4376</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0372</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb33-30">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## K</span></span>
<span id="cb33-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x_K, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3366</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3234</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb33-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y_K, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1718</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8702</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb33-33">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NA</span></span>
<span id="cb33-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x_NA, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb33-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y_NA, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb33-36">})</span>
<span id="cb33-37"></span>
<span id="cb33-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test if function throws an error when df is not a data frame</span></span>
<span id="cb33-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"opisowe throws an error when df is not a data frame"</span>, {</span>
<span id="cb33-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_error</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">opisowe</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(), group, x, y))</span>
<span id="cb33-41">})</span></code></pre></div>
</div>
</div>
<p>Po pierwsze stworzyłem tutaj bazę&nbsp;danych, na której będziemy liczyć. Po drugie stworzyłem trzy zestawy testów. Pierwszy sprawdza, czy wynik to ramka danych. Drugi sprawdza, czy statystyki wyglądają, jak mają wyglądać, z dokładnością do 3. miejsca po przecinku. Ostatni sprawdza, czy funkcja wyrzuca błąd, gdy <code>df</code> będzie czymś innym, niż baza danych.</p>
<p>Gdy taki plik zapiszemy, testy są już uzbrojone. Możemy je wykonać używając komendy <code>devtools::test_active_file()</code>. Wszystkie testy zostaną też wykonane podczas <code>devtools::check()</code>.</p>
</section>
<section id="co-i-jak-testować" class="level2" data-number="10.3">
<h2 data-number="10.3" class="anchored" data-anchor-id="co-i-jak-testować"><span class="header-section-number">10.3</span> Co i jak testować?</h2>
<p>Hot take, którego nie ma jeszcze w podręcznikach – sztuczna inteligencja jest świetna w pisaniu testów. Nie ma się&nbsp;co oszukiwać, pisanie testów jest upierdliwe, ale na szczęście Chat GPT może to sprawnie zrobić za nas. Od Chatu GPT lepszy jest GitHub Copilot X, do którego dostęp studenci i pracownicy naukowi mają <a href="https://education.github.com/discount">za darmo</a>. Czasami tylko testy generowane przez AI wykorzystują wycofane już komendy, np. <code>expect_is()</code> zamiast <code>expect_type()</code>.</p>
<p>Testy jest dobrze pisać, bo czasem możemy przegapić, że coś zepsuliśmy. Jeśli zabezpieczyliśmy się testami, <code>devtools::check()</code> nakrzyczy na nas, że coś zepsuliśmy. Nakrzyczy na nas też, jeśli nie wyjdą przykłady, ale przykład musi tylko zadziałać, a test może wymagać <em>konkretnego</em> wyjścia. Bez testów nie wykryjemy, że przykład zwraca bzdurę, bo jeśli zwraca cokolwiek, to R-CMD-check to wystarczy.</p>
<p>Sztuka polega na tym, żeby pisać testy tak, żeby nie trzeba było ich zmieniać za każdym jednym razem, jak będziemy coś zmieniać w funkcji. Zbyt duże struktury testów mogą sprawić, że kod będzie bardzo trudny do utrzymania. Małe poprawki mogą wymusić na nas każdorazowo szerokie zmiany w testach. Trzeba więc znaleźć jakiś punkt pośredni i nie dać się zwariować. Testy mają nam <strong>oszczędzić pracy, a nie dołożyć</strong>.</p>
</section>
</section>
<section id="code-coverage-z-codecov" class="level1" data-number="11">
<h1 data-number="11"><span class="header-section-number">11</span> <em>Code coverage</em> z <code>codecov</code></h1>
<p>Z testami wiąże się&nbsp;pojęcie <em>code coverage</em>. Jest to wskaźnik, który mówi o tym, jaki procent kodu jest sprawdzany w testach. Nie oznacza to, czy sprawdziliśmy wszystkie sytuacje, w których w kodzie może zadziać się coś źle, ale czy każda linia kodu została wykonana w testach chociaż raz. A więc, czy na bardzo podstawowym poziomie działa, czyli czy wykonuje się bez błędu.</p>
<section id="sprawdzanie-code-coverage" class="level2" data-number="11.1">
<h2 data-number="11.1" class="anchored" data-anchor-id="sprawdzanie-code-coverage"><span class="header-section-number">11.1</span> Sprawdzanie <em>code coverage</em></h2>
<p><em>Code coverage</em> możemy bardzo łatwo sprawdzić zarówno dla pojedynczego pliku, jak i dla całego pakietu. Robią to odpowiednio funkcje <code>devtools::test_coverage_active_file()</code> i <code>devtools::test_coverage()</code>. Raport z takiego sprawdzenia zawiera ogólny <em>code coverage</em>, także w podziale na pliki oraz informację, jakie konkretne linijki zostały, a jakie nie zostały przetestowane.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/pakiety-w-R/covr.png" class="img-fluid figure-img"></p>
<figcaption>Wynik <code>devtools::test_coverage()</code>.</figcaption>
</figure>
</div>
</section>
<section id="automatyczne-raportowanie" class="level2" data-number="11.2">
<h2 data-number="11.2" class="anchored" data-anchor-id="automatyczne-raportowanie"><span class="header-section-number">11.2</span> Automatyczne raportowanie</h2>
<p>Istnieje cała seria narzędzi do automatycznego raportowania <em>code coverage</em>. Bardzo często repozytoria chwalą się wielkością tego wskaźnika na odznakach. Jeśli pakiet jest dobrze testowany, to może znaczyć, że jest porządnie zrobiony albo chociaż z należytą dbałością.</p>
<p>Narzędziem, które tutaj omówię i które ma dobrą integrację z R, jest Codecov. Żeby podłączyć swoje repozytorium do Codecov musimy założyć odpowiednie konto i uruchomić dwie komendy. Jeśli chodzi o konto, wchodzimy na <a href="https://codecov.io/">codecov.io</a>, zakładamy konto i upoważniamy Codecov do dostępu do naszego konta GitHub. Naszym oczom powinna ukazać się lista wszystkich naszych repozytorów, do której wkrótce wrócimy. Komendy natomiast wymieniam niżej.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_coverage</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"codecov"</span>)</span>
<span id="cb34-2">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_github_action</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test-coverage"</span>)</span></code></pre></div>
</div>
<p>Przygotuje to nasze repozytorium, ale nie w sposób idealny. W momencie, w którym to piszę, trzeba wprowadzić serię poprawek i dodatkowych czynności, żeby wszystko szło, jak powinno.</p>
<ol type="1">
<li><p>Na stronie <a href="https://codecov.io/">codecov.io</a> wchodzimy w nasze repozytorium i kopiujemy token, który się tam wyświetla. Musimy go wskazać w naszym repozytorium jako sekret. Robimy to w ustawieniach repozytorium, ale szczęśliwie Codecov podpowiada nam link bezpośrednio do ustawień. Nazwa sekretu to <code>CODECOV_TOKEN</code>, a jego wartość to sam ten kod, który skopiowaliśmy.</p></li>
<li><p>Jeśli chcemy, możemy upoważnić <a href="https://github.com/apps/codecov">apkę Codecov na GitHubie</a>. Zamieszcza ona automatyczne raporty o <em>code coverage</em> przy pull requestach.</p></li>
<li><p>Plik <code>.github/workflows/test-coverage.yaml</code> modyfikujemy w taki sposób, żeby góra tego pliku wyglądała tak, jak niżej. Nie usuwamy innych zmiennych środowiskowych, tylko dopisujemy <code>CODECOV_TOKEN</code>.</p></li>
</ol>
<pre><code>jobs:
  test-coverage:
    runs-on: ubuntu-latest
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}</code></pre>
<ol start="4" type="1">
<li>Jeśli repozytorium jest prywatne, na końcu zmieniamy naszą formułę tak, żeby wyglądała jak niżej.</li>
</ol>
<pre><code>- name: Upload coverage reports to Codecov
  uses: codecov/codecov-action@v3
  with:
    token: ${{ secrets.CODECOV_TOKEN }}</code></pre>
<ol start="5" type="1">
<li>Odznaka dodawana przez <code>usethis</code> nie działa. Na <a href="https://codecov.io/">codecov.io</a>, po wejściu w nasze repozytorium (już po jego uruchomieniu), w ustawieniach, w sekcji „Badges &amp; Graphs” znajdziemy poprawny link, którym zastępujemy ten dodany przez <code>usethis</code> w <code>README.Rmd</code>.</li>
</ol>
<p>Zestaw określony wyżej może się dość szybko zdezaktualizować, dotarłem do niego na zasadzie prób i błędów. Najbardziej newralgiczne są punkty 3. i 4., które mają za zadanie dać Codecov znać, jaki jest token, który dodaliśmy wcześniej do sekretów repozytorium. Po wykonaniu tych czynności raporty <em>code coverage</em> staną się jawne, będziemy mogli się nimi chwalić na głównej stronie naszego repozytorium, a także będą wykonywane automatycznie przez GitHub za każdym razem, gdy wypchniemy nowy commit.</p>
</section>
</section>
<section id="bonus-załączanie-apki-w-shiny" class="level1" data-number="12">
<h1 data-number="12"><span class="header-section-number">12</span> Bonus: załączanie apki w Shiny</h1>
<p>Nie wiem, ile osób będzie tego potrzebować, ale że ciężko mi było to znaleźć, to się podzielę. Jak załączyć do naszego pakietu apkę napisaną w Shiny? Miałem ten problem, gdy chciałem dołączyć GUI do pakietu <code>mtscr</code>, które napisałem właśnie w Shiny.</p>
<ol type="1">
<li><p>W folderze <code>inst</code> tworzymy podfolder o wybranej przez nas nazwie. Jako przykład wybiorę podfolder <code>GUI</code>.</p></li>
<li><p>Do podfolderu wrzucamy naszą apkę w Shiny, ale główny plik koniecznie nazywamy <code>app.R</code>.</p></li>
<li><p>W głównym pakiecie tworzymy funkcję uruchamiającą. Przykład niżej. Zamiast <code>"GUI"</code> piszemy nazwę naszego podfolderu, a zamiast <code>"mtscr"</code> nazwę naszego pakietu. Przykładowa funkcja sprawdza tylko, czy apka znajduje się tam, gdzie powinna. Funkcja <code>system.file</code> zwraca ścieżkę do pakietu, a w tym wypadku do konretnego komponentu tego pakietu – apki w Shiny.</p></li>
</ol>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>mtscr_app.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">mtscr_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb37-2">    app_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GUI"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtscr"</span>)</span>
<span id="cb37-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (app_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) {</span>
<span id="cb37-4">        cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_abort</span>(</span>
<span id="cb37-5">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb37-6">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The app not found."</span>,</span>
<span id="cb37-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Try reinstalling the {.pkg mtscr} package with {.run devtools::intall_github(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">jakub-jedrusiak/mtscr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span></span>
<span id="cb37-8">            )</span>
<span id="cb37-9">        )</span>
<span id="cb37-10">    }</span>
<span id="cb37-11">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runApp</span>(app_dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">display.mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>)</span>
<span id="cb37-12">}</span></code></pre></div>
</div>
</div>
<p>Użytkownik może teraz bez problemu uruchomić naszą apkę w Shiny poprzez funkcję uruchamiającą. Warto też pomyśleć, czy nie zrobić z niej dodatku do RStudio. Możemy to zrobić tworząc plik <code>inst/rstudio/addins.dcf</code> i dopisując do niego coś w tym rodzaju.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>addins.dcf</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">Name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> MTSCR GUI</span>
<span id="cb38-2">Description<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Runs MTSCR GUI app.</span>
<span id="cb38-3">Binding<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> mtscr_gui <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># funkcja uruchamiająca</span></span>
<span id="cb38-4">Interactive<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> true <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dla Shiny dajemy true</span></span></code></pre></div>
</div>
</div>
<p>Od tego momentu <code>MTSCR GUI</code> będzie dostępne w menu <em>addins</em> w RStudio.</p>
</section>
<section id="podsumowanie" class="level1" data-number="13">
<h1 data-number="13"><span class="header-section-number">13</span> Podsumowanie</h1>
<p>Docieramy wreszcie do końca tego przydługiego tekstu. Jak zwykle, tylko liznęliśmy temat po powierzchni, ale mam nadzieję, że było to wystarczające liźnięcie, żeby poczuć smak budowania pakietów. Przede wszystkim liczę na to, że wystarczy to, by móc dalej samodzielnie zdobywać wiedzę w już konkretnych zakresach. Podstawowe źródła to, jak zwykle, dokumentacja i książka Hadleya Wickhama. Tym razem tą książką jest <a href="https://r-pkgs.org/">R Packages</a> i jest tam większość tego, co można znaleźć w tym tekście, tylko znacznie, znacznie pogłębione.</p>
<p>Oprócz podsumowania w punktach wydaje mi się, że korzystne będzie zebranie wszystkich podstawowych komend w zestawy tematyczne. Zestawy ułożyłem chronologicznie, to znaczy w takiej kolejności, w jakiej będziemy budować nasz pakiet.</p>
<section id="zakładanie-repozytorium" class="level2" data-number="13.1">
<h2 data-number="13.1" class="anchored" data-anchor-id="zakładanie-repozytorium"><span class="header-section-number">13.1</span> Zakładanie repozytorium</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">roxygen2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">roxygenise</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dodaj roxygen2, najpeirw usuń NAMESPACE</span></span>
<span id="cb39-2">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_roxygen_md</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># obsługa markdown w roxygen2</span></span>
<span id="cb39-3">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_gpl3_license</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># licencja GPL v. 3</span></span>
<span id="cb39-4">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Depends"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_version =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4.2.0"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dodaj zależność od R</span></span>
<span id="cb39-5">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_tidy_dependencies</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># podstawowe zależności tidyverse</span></span>
<span id="cb39-6">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_tidy_eval</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># narzędzia do Tidy Eval</span></span>
<span id="cb39-7">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_tibble</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dodaj tibble</span></span>
<span id="cb39-8">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_pipe</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dodaj potoki z magrittr %&gt;%</span></span>
<span id="cb39-9">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_lifecycle</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dodaj oznaczniki lifecycle</span></span>
<span id="cb39-10">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_readme_rmd</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dodaj README.Rmd</span></span></code></pre></div>
</div>
</section>
<section id="podłączanie-githuba" class="level2" data-number="13.2">
<h2 data-number="13.2" class="anchored" data-anchor-id="podłączanie-githuba"><span class="header-section-number">13.2</span> Podłączanie GitHuba</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_git</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># popraw/załóż pliki repozytorium git</span></span>
<span id="cb40-2">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_github</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">private =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># załóż repozytorium prywatne na GitHubie</span></span>
<span id="cb40-3">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_github_action_check_standard</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dodaj automatyczne R-CMD-check</span></span></code></pre></div>
</div>
</section>
<section id="mniejsze-opcje" class="level2" data-number="13.3">
<h2 data-number="13.3" class="anchored" data-anchor-id="mniejsze-opcje"><span class="header-section-number">13.3</span> Mniejsze opcje</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_package_doc</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dokumentacja całego pakietu</span></span>
<span id="cb41-2">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_cran_badge</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># odznaka CRAN</span></span>
<span id="cb41-3">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_lifecycle_badge</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"experimental"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># odznaka lifecycle experimental</span></span>
<span id="cb41-4">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_citation</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dodaj plik CITATION</span></span></code></pre></div>
</div>
</section>
<section id="testy" class="level2" data-number="13.4">
<h2 data-number="13.4" class="anchored" data-anchor-id="testy"><span class="header-section-number">13.4</span> Testy</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load_all</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># załaduj pakiet, żeby testować ręcznie</span></span>
<span id="cb42-2">usethat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_testthat</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dodaj testthat</span></span>
<span id="cb42-3">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_coverage</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"codecov"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dodaj codecov</span></span>
<span id="cb42-4">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_github_action</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test-coverage"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dodaj automatyczne raporty codecov</span></span></code></pre></div>
</div>
</section>
<section id="używanie-na-co-dzień" class="level2" data-number="13.5">
<h2 data-number="13.5" class="anchored" data-anchor-id="używanie-na-co-dzień"><span class="header-section-number">13.5</span> Używanie na co dzień</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load_all</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># załaduj pakiet, żeby testować ręcznie</span></span>
<span id="cb43-2">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_r</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nazwa_funkcji"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stwórz plik z funkcjami</span></span>
<span id="cb43-3">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_test</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dodaj plik z testami</span></span>
<span id="cb43-4">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_data_raw</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nazwa bazy"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stwórz plik z danymi</span></span></code></pre></div>
</div>
</section>
<section id="konserwacja" class="level2" data-number="13.6">
<h2 data-number="13.6" class="anchored" data-anchor-id="konserwacja"><span class="header-section-number">13.6</span> Konserwacja</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">document</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zaktualizuj dokumentację</span></span>
<span id="cb44-2">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load_all</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># załaduj pakiet</span></span>
<span id="cb44-3">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zrób R-CMD-check</span></span>
<span id="cb44-4">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_coverage</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sprawdź code coverage</span></span>
<span id="cb44-5">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_readme</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zaktualizuj README.md</span></span>
<span id="cb44-6">styler<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style_active_pkg</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># formatuj wszystkie pliki w pakiecie</span></span></code></pre></div>
</div>
</section>
<section id="błędy" class="level2" data-number="13.7">
<h2 data-number="13.7" class="anchored" data-anchor-id="błędy"><span class="header-section-number">13.7</span> Błędy</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Treść błędu"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># błąd</span></span>
<span id="cb45-2">cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_warn</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Treść ostrzeżenia"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ostrzeżenie</span></span>
<span id="cb45-3">cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_inform</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Treść infromacji"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># informacja</span></span></code></pre></div>
</div>
</section>
<section id="przed-każdym-wypchnięciem" class="level2" data-number="13.8">
<h2 data-number="13.8" class="anchored" data-anchor-id="przed-każdym-wypchnięciem"><span class="header-section-number">13.8</span> Przed każdym wypchnięciem</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load_all</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># załaduj pakiet, żeby testować ręcznie</span></span>
<span id="cb46-2">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zrób R-CMD-check</span></span>
<span id="cb46-3">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_coverage</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sprawdź code coverage</span></span>
<span id="cb46-4">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_readme</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zaktualizuj README.md</span></span></code></pre></div>
</div>
</section>
<section id="inne-rzeczy-do-wykonania" class="level2" data-number="13.9">
<h2 data-number="13.9" class="anchored" data-anchor-id="inne-rzeczy-do-wykonania"><span class="header-section-number">13.9</span> Inne rzeczy do wykonania</h2>
<ol type="1">
<li><p>Uzupełnij ręcznie plik <code>DESCRIPTION</code>. Pamiętaj o tym, by autorów wskazywać funkcją.</p></li>
<li><p>Uzupełnij plik <code>CITATION</code>, jeśli z niego korzystasz.</p></li>
<li><p>Napisz porządny plik <code>README</code>.</p></li>
<li><p>Pamiętaj o pisaniu pełnych nazw funkcji i używaniu <code>.data</code> do nazw kolumn bez cudzysłowu.</p></li>
<li><p>Każdą funkcję dokumentuj szkieletem <code>roxygen2</code>. Nie zapomnij o tagu <code>@export</code>.</p></li>
<li><p>Jeśli dodajesz pliki z danymi, pamiętaj, żeby je udokumentować w pliku <code>data.R</code>. Opisz wszystkie kolumny za pomocą <code>@format</code>.</p></li>
<li><p>Jeśli masz czas i chęć, zabezpieczaj funkcje przed nieprawidłowym wykorzystaniem. Przede wszystkim sprawdzaj typy argumentów oraz czy kolumny istnieją w bazie. Pamiętaj, że możesz formatować komunikaty o błędach.</p></li>
</ol>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Przypisy</h2>

<ol>
<li id="fn1"><p>Funkcje <code>install_*()</code> zapewnia też mniejszy pakiet <code>remotes</code>, który jest praktycznie wycinkiem z <code>devtools</code>. Jeśli mamy <code>devtools</code>, nie potrzebujemy <code>remotes</code>.↩︎</p></li>
<li id="fn2"><p>Jeśli już wcześniej stworzyłeś(-aś) jakieś pliki z funkcjami i je udokumentowałeś(-aś), to użyj teraz <code>roxygen2md::roxygen2md()</code>, by przerobić je na nowy standard. Jeśli tworzysz pakiet w kolejności, w jakiej omawiam to w tym wpisie, nie ma takiej potrzeby.↩︎</p></li>
<li id="fn3"><p>Jeśli chcemy podać dwa imiona, podajemy je jako wektor, np. <code>c("Paweł", "Przemysław")</code>.↩︎</p></li>
<li id="fn4"><p>Jest to wymagane, jeśli wykorzystujemy pliki z danymi. Technicznie można dać niższą wersję, ale nie polecam.↩︎</p></li>
<li id="fn5"><p>Jeśli nie wiesz, czym jest GitHub i po co go używać, przeczytaj <a href="./posts/git.qmd">ten wpis</a>.↩︎</p></li>
<li id="fn6"><p>Możesz też ręcznie wytworzyć odpowiedni plik .R w folderze <code>R</code>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <guid>https://nieobliczalne.pl/posts/pakiety-w-R.html</guid>
  <pubDate>Thu, 25 May 2023 22:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/pakiety-w-R.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Znajdź i zmień to narzędzie ostateczne</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/regex.html</link>
  <description><![CDATA[ 




<p>Wyrażenia regularne to specjalny szyfr czy kod służący sprawnemu znajdowaniu fragmentów o określonej strukturze w <em>istniejącym</em> tekście. Jeśli chcesz przeczytać o generowaniu całkiem nowego tekstu, sprawdź <a href="./posts/powtarzalny-tekst.qmd">ten</a> wpis.</p>
<p>Jak wiele razy dawałem wyraz na tej stronie – nie znoszę mechanicznej pracy. To pożeracz czasu, który nic nie wnosi do naszego życia, a uszczupla je systematycznie. Zwłaszcza irytujące są te zadania, co do których czujemy, że polegają na dokładnie tym samym za każdym razem. Intuicyjnie nawet możemy czuć, że muszą istnieć sposoby, żeby tę pracę wykonać automatycznie.</p>
<section id="możliwości" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Możliwości</h1>
<p>Zwlekałem z napisaniem tego tekstu, bo ciężko mi było znaleźć uniwersalny przykład zastosowania wyrażeń regularnych w praktyce. Wszystkie wydają się&nbsp;bardzo konkretne, wąskie. Bałem się, że osoba czytająca ten przykład może pomyśleć „nie zdarzyło mi się to”. I takie w istocie są wyrażenia regularne, ale trochę o to w nich chodzi – żeby zastosować je konkretnie do własnych potrzeb, które mogą być bardzo specyficzne. Jednak ogólne możliwości są bardzo duże, a paleta zastosowań nieskończona. Bardzo prostym przykładem jest sytuacja, gdy otrzymaliśmy listę elementów ponumerowanych tekstem (w sensie nie jest to lista w Wordzie, tylko numerki są rzeczywiście zapisane). Z różnych przyczyn możemy chcieć się&nbsp;tych numerków pozbyć. Czasem musiałem to robić jak składałem tekst. Załóżmy, że mamy taką listę:</p>
<blockquote class="blockquote">
<ol type="1">
<li><p>Keter</p></li>
<li><p>Chochma</p></li>
<li><p>Bina</p></li>
<li><p>Chesed</p></li>
<li><p>Gewura</p></li>
<li><p>Tiferet</p></li>
<li><p>Necach</p></li>
<li><p>Hod</p></li>
<li><p>Jesod</p></li>
<li><p>Malchut</p></li>
</ol>
</blockquote>
<p>Możemy zaznaczyć każdy numerek i wykonać tę nudną, mechaniczną pracę. Ale im więcej elementów na liście, tym zmarnuje nam to więcej czasu. Gdybyśmy mogli powiedzieć komputerowi „na początku każdego wersu jest liczba, kropka i spacja – usuń je”, oszczędziłoby nam to czas. I tutaj właśnie przychodzą nam w sukurs wyrażenia regularne. Jest to zestaw kodów pozwalających nam zapisać takie rzeczy jak „początek wiersza” (<code>^</code>) i „jedna lub więcej dowolna liczba” (<code>\d+</code>), dzięki czemu możemy jednym kliknięciem usunąć nasze liczby w całym tekście.</p>
<p>Jako drugi, bardziej złożony przykład wezmę swoją specyficzną potrzebę. Ostatnio poprawiałem linki do innych wpisów na tym blogu. Wcześniej używałem linków do stron, które wyglądały tak:</p>
<blockquote class="blockquote">
<p>Więcej można przeczytać w tekście o [podstawach R](https://nieobliczalne.pl/posts/podstawy_R.html).</p>
</blockquote>
<p>Jak doczytałem potem, mogłem użyć lepszej składni, która idzie tak:</p>
<blockquote class="blockquote">
<p>Więcej można przeczytać w tekście o [podstawach R](./posts/podstawy_R.qmd).</p>
</blockquote>
<p>Ma ona kilka zalet, m.in. to, że jakbym kiedykolwiek zmienił domenę, to nie muszę poprawiać wszystkich linków ręcznie. Zdecydowałem się&nbsp;więc poprawić starą konwencję na nową. Poprawianie linków we wszystkich wpisach to jednak dużo mechanicznej pracy, której nie lubię. Narzędziem, które mogłoby się&nbsp;tutaj przydać, jest zwykłe znajdź i zmień (<em>find &amp; replace</em>). Możemy zwrócić uwagę, że wystarczy, abym <code>https://nieobliczalne.pl</code> zamienił na kropkę, a końcowe <code>html</code> na <code>qmd</code>. Nie mogę jednak tego zrobić na raty, bo wtedy zamienię też <code>html</code> z innych linków na <code>qmd</code>.</p>
<p>Wyrażenia regularne pozwalają mi zakodować swoje potrzeby. Potrzebuję wyszukać wszystkie słowa zapisane wielką literą? Nie ma problemu. Potrzebuję zamienić w długim kodzie wyrażenia typu <code>{AUT.15}</code> na <code>{AUT_15}</code>, gdzie liczby są różne? Spoko. Chcę masowo zmienić spacje po jednoliterowych myślnikach na twarde spacje? Jasne. Potrzebuję spacjami podzielić wszystkie numery telefonów w tekście na trójki? Da się zrobić. Chcę wyszukać dane słowo we wszystkich formach (paczka, paczki, paczce itd.)? Potrzymaj mi herbatę. O ile nasz tekst ma <strong>określoną strukturę</strong>, możemy go wyszukać i w razie potrzeby zmodyfikować.</p>
</section>
<section id="gdzie-korzystać" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Gdzie korzystać?</h1>
<p>Zanim dojdziemy do tego, <em>jak</em> stosować wyrażenia regularne, powiedzmy sobie, <em>gdzie</em> możemy je stosować. Po pierwsze ma je wiele edytorów tekstu (<a href="https://notepad-plus-plus.org/">Notepad++</a>, <a href="https://kate-editor.org/">Kate</a> i inne), ale niewiele pakietów biurowych. Możemy je znaleźć w Google Docs i LibreOffice. Microsoft Office ma własny, beznadziejny system <a href="https://support.microsoft.com/pl-pl/office/przyk%C5%82ady-znak%C3%B3w-wieloznacznych-939e153f-bd30-47e4-a763-61897c87b3f4">„znaków wieloznacznych”</a> (<em>wildcards</em>), tak jakby nie mogli zastosować ogólnoświatowego standardu. Każde IDE programistyczne, wliczając RStudio i VS Code, daje możliwość używania RegEx. W programowaniu przydają się one szczególnie.</p>
<p>Mamy też wiele wygodnych stron, na których możemy testować (i wykorzystywać) wyrażenia regularne, a które podpowiedzą nam różne popularne znaki lub zbiory i wyjaśnią, co robi to, co napisaliśmy. Kluczowe przykłady to <a href="https://regex101.com/">RegEx101</a> i <a href="https://regexr.com/">RegExr</a>. Z nich polecam korzystać zwłaszcza na początku. Przykłady w tym wpisie to screeny z RegEx101.</p>
<p>W ramach samego języka programowania również zazwyczaj możemy korzystać z wyrażeń regularnych. W R obsługuje je głównie pakiet <strong><code>stringr</code></strong>, zaś w Pythonie odpowiada za nie biblioteka <strong><code>re</code></strong>. Pozwolą one np. na masową modyfikację ciągów znaków w bazach danych.</p>
<p>Oryginalnie wyrażenia regularne związane są z programem <code>grep</code> i powiązanego z nim <code>sed</code>, a także języka <code>awk</code> i jego uwspółcześnionej wersji <code>gawk</code>. <code>grep</code> to wyszukiwarka tekstu w pliku, <code>sed</code> służy głównie do zamiany fragmentów tekstu, zaś <code>awk</code> to cały język stworzony specjalnie do manipulacji tekstem. Wszystkie one niezmiennie są dostępne w linuksie jako programy działające w konsoli.</p>
</section>
<section id="zbiory-znaków-i" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Zbiory znaków i <code>|</code></h1>
<p>Załóżmy, że chcemy znaleźć różne formy słowa „statystyka”. Odmieniając to słowo przez przypadki otrzymujemy ten sam rdzeń <em>statysty-</em> i końcówki <em>-ka</em>, <em>ki</em>, <em>-ce</em> itd. Zostańmy przy liczbie pojedynczej. Za przykład wykorzystajmy sobie tekst:</p>
<blockquote class="blockquote">
<p>Statystyka to nauka, która zajmuje się zbieraniem, analizą i interpretacją danych liczbowych. Jej podstawowym celem jest odkrywanie regularności i wzorców w zjawiskach społecznych, ekonomicznych, naukowych i innych dziedzinach. W statystyce można zastosować wiele różnych metod, takich jak testy hipotez, analiza regresji, czy wykorzystanie rozkładów prawdopodobieństwa. Bez statystyki trudno byłoby dokonać rzetelnych prognoz czy wykazać zależności między zjawiskami. Dlatego statystykę można lubić lub nie, ale ciągle jest ona ważna. Statystyko! Dziękujemy ci!</p>
</blockquote>
<p>Wyrażenia regularne pozwalają nam powiedzieć „wszystko, co ma rdzeń <em>statystyk-</em> i dane końcówki”. W tym wypadku wykorzystamy operator <em>lub</em> zapisywany znakiem separatora <code>|</code> (klawisz tuż pod backspace, klikany z shiftem) oraz nawiasy kwadratowe, które tworzą zbiory znaków (<em>character sets</em>).</p>
<blockquote class="blockquote">
<p>[Ss]tatysty(ka|ki|ce|kę|ką|ko)</p>
</blockquote>
<div class="light-mode">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://regex101.com/r/kUE7Db/1"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/or.png" class="img-fluid figure-img" alt="Wszystkie przykłady wykorzystują RegEx101. Klikając w screen, przeniesiesz się do RegEx101, żeby przejrzeć dany przykład dokładniej."></a></p>
<figcaption>Wszystkie przykłady wykorzystują RegEx101. Klikając w screen, przeniesiesz się do RegEx101, żeby przejrzeć dany przykład dokładniej.</figcaption>
</figure>
</div>
</div>
<div class="dark-mode">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://regex101.com/r/kUE7Db/1"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/or_dark.png" class="img-fluid figure-img" alt="Wszystkie przykłady wykorzystują RegEx101. Klikając w screen, przeniesiesz się do RegEx101, żeby przejrzeć dany przykład dokładniej."></a></p>
<figcaption>Wszystkie przykłady wykorzystują RegEx101. Klikając w screen, przeniesiesz się do RegEx101, żeby przejrzeć dany przykład dokładniej.</figcaption>
</figure>
</div>
</div>
<p>Rozbijmy ten przykład na czynniki pierwsze. Po pierwsze mamy <code>[Ss]</code>. Nawiasy kwadratowe oznaczają, że wyrażenie ma wyszukiwać jeden ze znaków wewnątrz nich. W tym wypadku dopasuje zarówno duże, jak i małe S. Mogę tam też zapisywać przedziały typu <code>[0-9]</code> albo <code>[A-Za-z]</code>. Możemy też powiedzieć „wszystko poza znakami ze zbioru”, co zrobimy pisząc <code>^</code>, np. <code>[^0-9]</code> dopasuje wszystko, co <em>nie jest</em> cyfrą.</p>
<p>Dalej mamy zwykłą część słowa „statystyka” i nawiasy. RegEx domyślnie ignoruje nawiasy (tj. nie wyszukuje ich). Służą one jako znaki specjalne do tworzenia grup, o których więcej później. Wewnątrz nawiasu wypisałem końcówki, które mają być dopasowane. Każdą końcówkę rozdzieliłem pionową kreską, co oznacza „albo to, albo to, albo to…“.</p>
<p>Jeśli chcielibyśmy wyszukać rzeczywiste nawiasy albo separator „|“, musimy poprzedzić je lewym ukośnikiem <code>\</code>. Ta czynność nazywa się <em>escaping</em> i wymagają tego wszystkie znaki specjalne, na czele z nawiasami, kropką i samym lewym ukośnikiem, który wyszukujemy pisząc <code>\\</code>. Później będzie o tym więcej, ale chodzi o to, że jak chcemy wyszukać znak <code>(</code>, to w wyrażeniu regularnym zapiszemy <code>\(</code>, bo samo <code>(</code> oznacza początek grupy. Lewy ukośnik przełącza specjalne znaczenie na dosłowne.</p>
<p>Poprzedni przykład mógłbym napisać nieco zwięźlej jako <code>[Ss]tatysty[kc][aieęąo]</code>. Technicznie wtedy dopasujemy też takie twory jak „statystycą” albo „statystyke”, ale to zazwyczaj nie jest problem, bo ich w tekście po prostu nie ma. Tutaj pojawia się jednak dość ważny wniosek – wyrażenia regularne dość <strong>łatwo się pisze i fatalnie się czyta</strong>.</p>
<p>Jako ciekawostkę mogę podać, że pisząc to wyrażenie regularne odmieniłem słowo „statystyka” przez przypadki w <a href="https://kate-editor.org/">Kate</a>, potem wyrażeniami regularnymi usunąłem „statysty-“, zastąpiłem znak nowej linii (<code>\n</code>) separatorem (<code>|</code>) i na koniec ręcznie wziąłem to w nawiasy (<a href="https://regex101.com/r/fHY1bx/1">patrz tutaj</a>). Tak było mi łatwiej, niż pisać same te końcówki. Ale ja jestem uczulony na pracę mechaniczną bardziej niż reszta społeczeństwa i robiłem to już tyle razy, że nawet o tym nie myślę. Tak jest mi szybciej, ale nie każdy potrzebuje robić takie rzeczy automatycznie.</p>
</section>
<section id="znaki-specjalne-i-kotwice" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Znaki specjalne i kotwice</h1>
<p>RegEx dysponuje całą serią znaków specjalnych typu „dowolna liczba” (<code>\d</code>), „dowolna litera” (<code>\w</code>), „dowolny znak odstępu” (<code>\s</code>, głównie spacja, ale też np. tabulator albo twarde spacje) itd. Najszerszym znaczeniowo znakiem tego typu jest kropka (<code>.</code>). Oznacza ona po prostu „dowolny znak”. Dokładny spis tych znaków specjalnych może różnić się w zależności od wersji (<em>flavour</em>) RegEx, jaką dany program czy język implementuje. Są to wygodne skróty dla zapisów typu <code>[0-9]</code>. Każdy z nich ma też wersję zanegowaną w postaci wielkiej litery, np. <code>\D</code> dopasuje wszystko, co <em>nie jest</em> liczbą. Do tego dochodzą nam znaki niewidoczne typu znak nowej linii (<code>\n</code>, „enter”) albo tabulator (<code>\t</code>).</p>
<p>Jeśli podajemy dane wyrażenie regularne jako argument w jakiejś funkcji w języku programowania, bardzo często będziemy musieli zapisać np. <code>\\d</code> czy <code>\\n</code>. Wynika to z faktu, że język programowania musi wiedzieć, że chodzi nam o lewy ukośnik w wyrażeniu regularnym, a nie, że <em>escape’ujemy</em> jakiś znak. Innymi słowy jeśli w Pythonie czy w R zapiszemy po prostu <code>"\d"</code>, to program zwariuje, bo nie będzie wiedział, jak <em>escape’ować</em> literę <em>d</em>. Dlatego zapiszemy <code>"\\d"</code> i wtedy program odczytując coś takiego, zrozumie to jako <code>\d</code>. Jednak znowu – to się tyczy tylko języków programowania.</p>
<p>RegEx implementuje również tak zwane <strong>kotwice</strong>, czyli oznaczenia pozycji. Mówiąc konkretnie, <code>^</code> oznacza początek linii (akapitu), a <code>$</code> oznacza koniec linii. linia jest tutaj fragmentem tekstu między kolejnymi „enterami”, a nie tym, co akurat program wyświetla jako linię tekstu. Dlatego w tekście ciągłym cały akapit jest, technicznie, linią.</p>
<p>Weźmy sobie za przykład tekst skopiowany z Worda, w którym mamy pozostałości po listach, które chcemy usunąć. Chodzi nam o sekwencje liczba, kropka i spacja obecne na początku linijki tekstu.</p>
<blockquote class="blockquote">
<ol type="1">
<li><p>Wariancja – co to jest wariancja, jak się ją wyjaśnia i co to jest model.</p></li>
<li><p>Testy statystyczne i wartość <em>p</em> – jak działają testy statystyczne, co to jest <em>p</em> i jak je interpretować.</p></li>
<li><p>Kombinatoryka – krótkie omówienie podstawowych terminów kombinatoryki, może być 1. wprowadzeniem do prawdopodobieństwa.</p></li>
</ol>
</blockquote>
<p>Odpowiednie wyrażenie regularne mogłoby brzmieć <code>^\d\.</code>. Po kropce jest tam spacja, którą silnik uporczywie mi usuwa, dlatego na stronie jej nie widać.</p>
<div class="light-mode">
<p><a href="https://regex101.com/r/WVPWt4/1"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/anchors.png" class="img-fluid"></a></p>
</div>
<div class="dark-mode">
<p><a href="https://regex101.com/r/WVPWt4/1"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/anchors_dark.png" class="img-fluid"></a></p>
</div>
<p>Zwróćmy uwagę na kilka rzeczy. Po pierwsze, to wyrażenie nie dopasowało liczby „1.” w treści 3. punktu. Wynika to z tego, że dodaliśmy <code>^</code> na początku wyrażenia. Liczby, które nie są na początku linijki nie są przez to dopasowywane. Po drugie, musiałem przed kropką dodać ukośnik. Wynika to z faktu, że kropka to znak specjalny (oznacza dowolny znak) i jeśli chcemy wyszukać dosłowną kropkę, musimy wykorzystać lewy ukośnik.</p>
</section>
<section id="powtarzanie" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Powtarzanie</h1>
<p>Najbardziej (według mnie) użyteczne operatory, jakie oferuje RegEx, to operatory powtarzania. Jest to seria operatorów mogących powiedzieć „jedna lub więcej cyfr” albo „zero lub więcej liter”. Możemy wykorzystać je np. do znalezienia wszystkich tekstów wewnątrz nawiasów albo wszystkich słów zaczynających się wielką literą. Spróbujmy zrobić to drugie.</p>
<blockquote class="blockquote">
<p>Teoretycznie tyle wystarczy, ale żeby uprzyjemnić proces pisania, fajnie jest przygotować sobie jakieś IDE (program do programowania), np. Visual Studio Code albo chociaż porządny edytor tekstu w stylu Notepad++.</p>
</blockquote>
<blockquote class="blockquote">
<p>[A-Z]\w+</p>
</blockquote>
<div class="light-mode">
<p><a href="https://regex101.com/r/uzD28P/1"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/repeat.png" class="img-fluid"></a></p>
</div>
<div class="dark-mode">
<p><a href="https://regex101.com/r/uzD28P/1"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/repeat_dark.png" class="img-fluid"></a></p>
</div>
<p>Znak <code>+</code> oznacza tutaj „jeden lub więcej”, a więc <code>\w+</code> oznacza „jedna litera lub więcej”. Operatorów podobnych do <code>+</code> jest więcej i możemy je zobaczyć w tabelce.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Operator</th>
<th>Znaczenie</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>?</code></td>
<td>zero lub jedno wystąpienie</td>
</tr>
<tr class="even">
<td><code>*</code></td>
<td>zero lub więcej wystąpień</td>
</tr>
<tr class="odd">
<td><code>+</code></td>
<td>jedno lub więcej wystąpień</td>
</tr>
<tr class="even">
<td><code>{n}</code></td>
<td>dokładnie <em>n</em> wystąpień</td>
</tr>
<tr class="odd">
<td><code>{n,}</code></td>
<td><em>n</em> lub więcej wystąpień</td>
</tr>
<tr class="even">
<td><code>{n,m}</code></td>
<td>między <em>n</em> a <em>m</em> wystąpień</td>
</tr>
</tbody>
</table>
<p>Z użyciem tych operatorów może się wiązać problem chciwości (<em>greedyness</em>). Załóżmy, że tym razem chcemy wyszukać wszystko, co zostało zapisane w nawiasach<sup>1</sup>.</p>
<blockquote class="blockquote">
<p>Dlaczego jednak napisałem range(1, 11) a nie range(1, 10)? Python działa tutaj specyficznie. Wynika to z faktu, że w informatyce liczy się od 0, nie od 1. Jeśli do funkcji range() wrzucę tylko jedną liczbę, czyli na przykład range(10), to dostanę 10 elementów. Ponieważ jednak pierwszy element to 0, to będą to liczby od 0 do 9. Mogę podać dwie liczby, żeby powiedzieć funkcji range(), od czego ma zacząć, ale wtedy muszę mieć w głowie, że skoro range(0, 10) oznacza 10 liczb od 0 do 9, to liczby od 1 do 10 muszę zapisać jako range(1, 11). Innymi słowy koniec skali nie wlicza się do zakresu.</p>
</blockquote>
<blockquote class="blockquote">
<p>\(.+\)</p>
</blockquote>
<div class="light-mode">
<p><a href="https://regex101.com/r/kDdEiE/1"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/greedy_1.png" class="img-fluid"></a></p>
</div>
<div class="dark-mode">
<p><a href="https://regex101.com/r/kDdEiE/1"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/greedy_1_dark.png" class="img-fluid"></a></p>
</div>
<p>Dziwne. Czemu takie długie wyszło? W naszym wyrażeniu regularnym wykorzystałem nawiasy (z lewym ukośnikiem, bo nawiasy to znak specjalny) oraz sekwencję <code>.+</code> oznaczającą „jeden dowolny znak lub więcej”. Domyślnie jednak <code>+</code> jest chciwy (<em>greedy</em>) i wyszuka <strong>najdłuższe możliwe sekwencje</strong>. Oznacza to, że zaznaczył wszystko między pierwszym nawiasem otwierającym i ostatnim nawiasem zamykającym. W końcu nawiasy zamykające łapią się do kategorii dowolnych znaków. Żeby temu przeciwdziałać, zamiast <code>.+</code> możemy użyć <code>.+?</code>.</p>
<div class="light-mode">
<p><a href="https://regex101.com/r/kDdEiE/2"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/greedy_2.png" class="img-fluid"></a></p>
</div>
<div class="dark-mode">
<p><a href="https://regex101.com/r/kDdEiE/2"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/greedy_2_dark.png" class="img-fluid"></a></p>
</div>
<p>Jest już lepiej! Problem jednak powodują w tym wypadku puste nawiasy. Nasze wyrażenie regularne wymaga, by między nawiasami coś było. Takie właśnie sekwencje znajduje w przypadku zapisu <code>()</code>. Nawias zamykający jest po prosu kolejnym znakiem, czyli łapie się jako <code>.</code>, a dopasowanie kończy dopiero kolejny nawias zamykający.</p>
<p>Rozwiązania widzę tutaj dwa. Po pierwsze można wykorzystać <em>lookarounds</em>, żeby pustych nawiasów nie dopasowywać. Pozwolą one też dopasować tekst <em>wewnątrz</em> nawiasów bez samych nawiasów. Nie chcę jednak wchodzić tak głęboko, dlatego zainteresowanych odsyłam <a href="https://www.rexegg.com/regex-lookarounds.html">tutaj</a>. Po drugie możemy umożliwić dopasowywanie też pustych nawiasów zastępując operator „jeden lub więcej” (<code>+</code>) operatorem „zero lub więcej” (<code>*</code>). Pamiętajmy jednak o chciwości tych operatorów i dodajmy jeszcze <code>?</code>.</p>
<div class="light-mode">
<p><a href="https://regex101.com/r/kDdEiE/3"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/greedy_3.png" class="img-fluid"></a></p>
</div>
<div class="dark-mode">
<p><a href="https://regex101.com/r/kDdEiE/3"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/greedy_3_dark.png" class="img-fluid"></a></p>
</div>
</section>
<section id="grupy-i-zastępowanie" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Grupy i zastępowanie</h1>
<p>Zazwyczaj po to wyszukujemy tekst, żeby zastąpić go innym. Jak to jednak zrobić, jeśli mamy takie fragmenty tekstu jak <code>.+</code>? Nie mogę wpisać w pole z tekstem do podstawienia <code>.+</code>, bo dostanę dosłowną kropkę i plus. Program musi dokładnie wiedzieć, co w dane miejsce wstawić. Załóżmy, że w poprzednim przykładzie chcemy zamienić nawiasy okrągłe na kwadratowe. Jak to zrobić? Za pomocą grup.</p>
<div class="light-mode">
<p><a href="https://regex101.com/r/q6PCek/1"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/groups_1.png" class="img-fluid"></a></p>
</div>
<div class="dark-mode">
<p><a href="https://regex101.com/r/q6PCek/1"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/groups_1_dark.png" class="img-fluid"></a></p>
</div>
<p>Jak to zrobiłem? Najpierw w wyszukiwaniu zmieniłem sekwencję <code>\(.*?\)</code> w <code>\((.*?)\)</code>. Innymi słowy otoczyłem <code>.*?</code> dodatkową parą nawiasów. Na screenie zaznaczone są na zielono. Znaki w nawiasach tworzą grupy. Grupy po to są nam potrzebne, żebyśmy mogli je potem wykorzystywać do zastępowania tekstu<sup>2</sup>. Zwróćmy uwagę na tekst w drugim polu, gdzie wpisałem <code>[$1]</code>. Oznacza to „tekst z pierwszej grupy (<code>$1</code>) w nawiasach kwadratowych”. Czyli bierzemy wnętrze naszego pierwotnego nawiasu (grupę 1.) i otaczamy je nawiasami kwadratowymi. Nawiasy okrągłe nie są częścią grupy, więc nie pojawiają się w tekście po zmianie.</p>
<p>Odwołania do grup mogą wyglądać różnie w różnych wersjach RegEx. W tym wypadku użyłem <code>$1</code>, ale możemy się też spotkać z innymi oznaczeniami, przede wszystkim <code>\1</code>. Zależy to od programu.</p>
</section>
<section id="zamiana-linków-na-ścieżki" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Zamiana linków na ścieżki</h1>
<p>Z całą tą nową wiedzą możemy wreszcie rozwiązać problem z początku tego wpisu. Przypomnijmy – chcemy linki zamienić na ścieżki do plików .qmd.</p>
<blockquote class="blockquote">
<p>Więcej można przeczytać w tekście o [podstawach R](https://nieobliczalne.pl/posts/podstawy_R.html).</p>
</blockquote>
<p>Rozwiązaniem, którego ja użyłem, było:</p>
<blockquote class="blockquote">
<p>]\(.+(posts\/.+)\.html\)</p>
</blockquote>
<p>Tekstem zastępującym było:</p>
<blockquote class="blockquote">
<p>](./$1.qmd)</p>
</blockquote>
<div class="light-mode">
<p><a href="https://regex101.com/r/Ub7uVB/1"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/main_problem.png" class="img-fluid"></a></p>
</div>
<div class="dark-mode">
<p><a href="https://regex101.com/r/Ub7uVB/1"><img src="https://nieobliczalne.pl/posts/ilustracje/regex/main_problem_dark.png" class="img-fluid"></a></p>
</div>
<p>Zaczynam zamykającym nawiasem kwadratowym, bo hiperlinki w markdown są formatowane jako <code>[tekst](link)</code>. Dalej otwieram dosłowny nawias okrągły i w nim dowolny tekst. Mogłem napisać dokładny link, bo to o ten i żaden inny tekst mi chodzi, ale nie chciało mi się&nbsp;pisać. Zabezpieczyłem się przed złymi dopasowaniami słowem „posts”. Po nim znajduje się prawy ukośnik i dowolne znaki, czyli wewnętrzna nazwa danego wpisu. <code>posts/.+</code> jest też grupą, dlatego jest w nawiasach. Wyrażenie zakończone jest rozszerzeniem <code>.html</code> i nawiasem zamykającym. Całość zastępuję swoją grupą <code>posts/nazwa_wpisu</code> poprzedzoną tekstem <code>./</code><sup>3</sup> i zakończoną rozszerzeniem <code>.qmd</code>. Całość otaczam odpowiednimi nawiasami.</p>
<p>Czy mogłem zrobić to lepiej? Oczywiście! Tylko po co? Te sekwencje muszą być <strong>użytkowe</strong>. Nie musimy się starać, żeby były odporne na błędy i działały w każdym wypadku. To są rzeczy, które pisze się szybko, wykorzystuje i kasuje. Nie muszą być idealne, <strong>muszą być napisane sprawnie i działać tu i teraz, w tym konkretnym przypadku</strong>. W końcu po to uczymy się wyrażeń regularnych, żeby oszczędzić sobie pracy, a nie jej przysporzyć. Jeśli robimy coś często i chcemy to zachować na przyszłość, to może wtedy warto się bawić w szlifowanie. Podobnie jeśli wyrażenie regularne jest częścią skryptu. Mimo wszystko w większości przypadków piszemy wyrażenia regularne <strong>na jeden raz</strong> i warto o tym pamiętać.</p>
</section>
<section id="ściągi" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> Ściągi</h1>
<p>Informacji jest dużo, ale na szczęście nie musimy tego wszystkiego znać na pamięć, żeby z tego korzystać. Możemy się wspierać różnymi dostępnymi w sieci materiałami, które przypomną nam, jak się coś robiło. Kluczowe jest, by wiedzieć, że coś da się zrobić. Chyba najlepszym materiałem, z którego korzystam praktycznie zawsze, jak chcę napisać wyrażenie regularne, jest <em>cheat sheet</em> do pakietu <code>stringr</code>, który możemy znaleźć <a href="https://github.com/rstudio/cheatsheets/blob/main/strings.pdf">tutaj</a>. Mam go w szufladzie biurka położonego tak, że jest to pierwsze, co widzę, jak ją otworzę. Jeśli zapomnę, jak było „zero albo więcej” albo chcę zrobić coś bardziej skomplikowanego, to patrzę do szuflady i już pamiętam. Rzeczy, których używam często, zdążyłem zapamiętać, a resztę czytam ze ściągi.</p>
</section>
<section id="bonus-szybkie-usuwanie-sierot" class="level1" data-number="9">
<h1 data-number="9"><span class="header-section-number">9</span> Bonus: szybkie usuwanie sierot</h1>
<p>Zanim zacznie się kontrowersja, „sieroty” oznaczają tutaj wiszące jednoliterowe spójniki, które nie powinny znaleźć się&nbsp;na końcu linijki. Pozbywamy się ich za pomocą twardych spacji. Zazwyczaj scrollujemy dokument w Wordzie i wyszukujemy je wzrokiem, po czym dodajemy gdzie trzeba. Potem zmieniamy wielkość czcionki albo szerokość akapitu i wszystko się rozjeżdża. Wyrażeniami regularnymi możemy dodać spacje nierozdzielające wszędzie za jednym zamachem. Jak wspominałem, Word nie obsługuje wyrażeń regularnych, więc musimy to zrobić w Libre Office. Trzeba tylko w okienku Znajdź i zamień, w Innych opcjach zaznaczyć Wyrażenia regularne. Nie będę tutaj tłumaczył jak to działa, podam gotowy przepis.</p>
<p>Wyszukaj to:</p>
<pre><code>(?&lt;=\s)([wuioaz])\s</code></pre>
<p>Zamień na to:</p>
<pre><code>$1&nbsp;</code></pre>
<p>Zwrócę tylko uwagę, że po <code>$1</code> musi być twarda spacja. Możemy ją dodać klikają na pole tekstowe prawym przyciskiem myszy, wchodząc w znaki specjalne i wyszukując <em>NO-BREAK SPACE</em>. Ma ona kod 160 (U+A0).</p>
</section>
<section id="podsumowanie" class="level1" data-number="10">
<h1 data-number="10"><span class="header-section-number">10</span> Podsumowanie</h1>
<p>Na koniec mogę polecić dwa źródła informacji o wyrażeniach regularnych. Pierwsza to strona <a href="https://www.rexegg.com/">RexEgg</a>, która zawiera mnóstwo wpisów uszeregowanych w tutoriale od podstaw do czarnego pasa. Druga to książka <a href="https://helion.pl/ksiazki/wyrazenia-regularne-jeffrey-e-f-friedl,wyrare.htm#format/d"><em>Wyrażenia regularne</em></a> autorstwa Jeffreya Friedla, wydana nakładem Wydawnictwa Helion. Oba źródła są pełne informacji, sztuczek i gotowych rozwiązań, za pomocą których różne czary można czynić w tekście. Na stronie <a href="https://regexone.com/">RegexOne</a> znajdziemy również interaktywne ćwiczenia.</p>
<ol type="1">
<li><p>Wyrażenia regularne (<em>regular expressions</em>, RegEx) pozwalają znajdować i modyfikować regularne struktury w tekście.</p></li>
<li><p>Nawiasy kwadratowe dopasowują dowolny znak zapisany w tych nawiasach, np. <code>[tk]</code> dopasuje s<span class="regex_match">t</span>a<span class="regex_match">t</span>ys<span class="regex_match">t</span>y<span class="regex_match">k</span>a. <code>[^tk]</code> dopasuje odwrotność, czyli <span class="regex_match">s</span>t<span class="regex_match">a</span>t<span class="regex_match">ys</span>t<span class="regex_match">y</span>k<span class="regex_match">a</span>.</p></li>
<li><p><code>^</code> to początek linijki, <code>$</code> to koniec linijki.</p></li>
<li><p>Istnieje cała seria znaków wieloznacznych, z których najważniejsze to <code>\w</code> (dowolna litera), <code>\d</code> (dowolna cyfra), <code>\s</code> (dowolny znak typu spacja), <code>.</code> (dowolny znak) i <code>\n</code> (znak nowej linii, „enter”).</p></li>
<li><p>Operatory ilości pozwalają powiedzieć, że dany znak pojawia się więcej niż raz – <code>*</code> (zero lub więcej), <code>+</code> (jeden lub więcej), <code>?</code> (zero lub jeden). Domyślnie te operatory są <em>chciwe</em> (<em>greedy</em>), a żeby to zmienić, dodajemy do nich znak zapytania – <code>*?</code> i <code>+?</code>.</p></li>
<li><p>Grupy bierzemy w nawiasy. Potem możemy wykorzystywać te grupy w zastępowaniu, pisząc <code>$1</code> lub <code>\1</code> w zależności od systemu.</p></li>
<li><p>Wyrażenia regularne to coś, co piszemy na szybko, na już, żeby działało tu i teraz, a niekoniecznie, żeby działało zawsze.</p></li>
<li><p>Dobrą ściągą jest <a href="https://github.com/rstudio/cheatsheets/blob/main/strings.pdf"><em>cheat sheet</em> do pakietu <code>stringr</code></a>.</p></li>
</ol>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Przypisy</h2>

<ol>
<li id="fn1"><p>W rzeczywistości RegEx ma do tego specjalne operatory, ale nie chcę wchodzić tak głęboko.↩︎</p></li>
<li id="fn2"><p>Ewentualnie możemy ich użyć do stosowania operatorów do całych grup, np. <code>(foo)+</code> dopasuje jedno całe słowo „foo” lub ich więcej. Bez nawiasu <code>+</code> odnosiłby się tylko do litery „o”.↩︎</p></li>
<li id="fn3"><p>Warto zauważyć, że w polu, w którym wpisujemy tekst, którym zastępujemy nasze dopasowania, nie musimy już <em>escape’ować</em> znaków specjalnych. Tam już wszystkie znaki są dosłowne.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Narzędzia</category>
  <guid>https://nieobliczalne.pl/posts/regex.html</guid>
  <pubDate>Fri, 19 May 2023 22:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/regex.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Jak wspólnie pisać analizę statystyczną?</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/git.html</link>
  <description><![CDATA[ 




<p>Kiedyś (a niekiedy do dziś) wspólne pisanie dokumentów czy prezentacji polegało na wysyłaniu sobie serii załączników mailem. Gdy zespół liczył więcej niż 2 osoby, kolejne wersje danego pliku szybko stawały się trudne do śledzenia. Podobnie gdy pisaliśmy coś na więcej niż jednym komputerze. Mam kolegę, który tak wysłał nie tę wersję pracy zaliczeniowej do prowadzącej. Nie znalazł zrozumienia. Te problemy w większości odeszły w niepamięć, gdy nastała era chmury i współpracy online. Znacznie wcześniej powstawały jednak inne rozwiązania – systemy kontroli wersji, spośród których praktyczny monopol zdobyło otwartoźródłowe dzieło Linusa Torvaldsa (twórcy Linuksa) o nazwie Git.</p>
<section id="systemy-kontroli-wersji" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Systemy kontroli wersji</h1>
<p>Systemy kontroli wersji najogólniej polegają na tym, że śledzą zmiany w plikach. Jeśli dopisaliśmy akapit do naszego pliku i zatwierdziliśmy tę zmianę, system kontroli wersji będzie wiedział kto i kiedy ten konkretny akapit dopisał. Jeśli kilku użytkowników wprowadziło zmiany, które ze sobą nie konfliktują, system kontroli wersji potrafi takie zmienione pliki połączyć w jeden. Możemy dzięki temu prześledzić historię danego pliku, a także upewnić się, że wszyscy pracują na najnowszej wersji.</p>
<p>Jednocześnie jest to zrobione w sposób dostosowany do pisania kodu. Gdy piszemy kod, wprowadzamy jakieś zmiany, testujemy, zazwyczaj nie działa, poprawiamy i powtarzamy aż nie zadziała. Jeśli mielibyśmy jeden wspólny plik, jak w Google Docs, nasze testy skutecznie uniemożliwiłyby wszystkim innym korzystanie z kodu. Dlatego właśnie Git wymaga od nas, żeby zmiany w kodzie zatwierdzać i dopiero wtedy możemy udostępnić je innym. Dzięki temu tworzy się balans między współpracą i niewchodzeniem sobie w paradę.</p>
<p>Powstaje nam więc stabilny workflow – wprowadź poprawki w kodzie, przetestuj, zatwierdź, opublikuj. Jak to zrobić w praktyce?</p>
</section>
<section id="przygotowanie" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Przygotowanie</h1>
<p>Przygotowanie do korzystania z Gita może wyglądać bardzo różnie. Tutaj zaproponuję serię programów, które, mam nadzieję, uczynią ten proces jak najbardziej bezbolesnym. Postaram się też do minimum ograniczyć potrzebę korzystania z konsoli.</p>
<section id="git" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="git"><span class="header-section-number">2.1</span> Git</h2>
<p>Żeby móc korzystać z dobrodziejstw Gita, musimy go sobie najpierw zainstalować. Chyba że korzystamy z którejś dystrybucji Linuksa, wtedy mamy Git od początku. Nic dziwnego, Git pierwotnie powstał po to, żeby cała społeczność mogła dołożyć cegiełkę do <a href="https://github.com/torvalds/linux">jądra Linuksa</a>. Jeśli korzystamy z Windowsa, możemy pobrać podstawowy pakiet <a href="https://git-scm.com/">stąd</a>.</p>
<p>Gdy Git zostanie zainstalowany, musimy dokonać podstawowej konfiguracji, do której <strong>my wykorzystamy GitHub CLI</strong> i zrobimy ją w kolejnym podrozdziale. Jeśli jednak nie chcemy korzystać z jakiegoś powodu z GitHub CLI, możemy się skonfigurować lokalnie. W tym celu otwieramy konsolę (PowerShell lub wiersz polecenia w Windowsie) i wpisujemy tam dwie komendy, jedną po drugiej. <strong>Nie polecam tego robić, jeśli nie ma się powodu.</strong> Pierwsza komenda przypisze do lokalnego Gita nasz email:</p>
<pre class="{bash}"><code>git config --global user.email "adres@email.com"</code></pre>
<p>Oczywiście za adres@email.com podstawiamy nasz własny adres. Powinien to być ten sam adres, <strong>którego potem użyjemy do założenia konta na GitHubie</strong>. Komendę zatwierdzamy enterem. Jeśli konsola nie znajduje polecenia <code>git</code>, trzeba sprawdzić, czy na pewno zainstalowaliśmy Git oraz zrestartować komputer. Druga komenda ustawia nazwę użytkownika.</p>
<pre class="{bash}"><code>git config --global user.name "nazwa-uzytkownika"</code></pre>
<p>Ponownie, powinna być to taka sama nazwa użytkownika, jaką będziemy mieć na GitHubie. W razie czego zawsze można ją zmienić tą samą komendą.</p>
</section>
<section id="github-i-github-cli" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="github-i-github-cli"><span class="header-section-number">2.2</span> GitHub i GitHub CLI</h2>
<p>Git to protokół działający lokalnie. Innymi słowy nasz własny Git jest w naszym własnym folderze i inni ludzie nie mają do niego dostępu. To jest OK, jeśli chcemy robić kontrolę wersji do własnego użytku. Jeśli jednak chcemy współpracować z innymi albo mieć dostęp do naszego kodu na różnych komputerach, potrzebujemy jakiegoś rodzaju usługi internetowej, z którą każdy może się połączyć, żeby mieć stały dostęp do aktualnej wersji. Podstawowym <em>de facto</em> hostingiem tego typu jest <a href="https://github.com/">GitHub</a>. To jest więc dobry moment, żeby wejść na GitHuba i założyć tam konto.</p>
<p>Szybkie wtrącenie, które może nam ułatwić życie w późniejszej konfiguracji RStudio. Warto jest w tym momencie wejść w ustawienia RStudio, tam w zakładkę Git/SVN i sprawdzić, czy RStudio podaje jakąś ścieżkę dla SSH key. Jeśli nie, klikamy „Create SSH key” i zatwierdzamy. Nie musimy wpisywać hasła.</p>
<p>GitHub dysponuje też wersją konsolową, GitHub CLI, która pozwoli nam bezboleśnie połączyć naszego lokalnego Gita z kontem na GitHubie. GitHub CLI pobieramy <a href="https://cli.github.com/">stąd</a>. Po zainstalowaniu (i ewentualnym restarcie komputera) możemy dokonać konfiguracji. W tym celu otwieramy konsolę (PowerShell lub wiersz polecenia w Windowsie) i wpisujemy tam:</p>
<pre class="{bash}"><code>gh auth login</code></pre>
<p>Po zatwierdzeniu komendy enterem powinien uruchomić się kreator, który bezboleśnie przeprowadzi nas przez proces logowania. Najpierw wybieramy, że chcemy się się logować do zwykłego GitHub.com. Przesuwamy się strzałkami, zatwierdzamy enterem. Następnie musimy wybrać protokół. Na ogół łatwiejszy do ogarnięcia jest HTTPS, jednak na potrzeby RStudio lepiej jest wybrać SSH. Jeśli wytworzyliśmy wcześniej klucz SSH w RStudio, GitHub CLI zapyta nas teraz, czy wysłać ów klucz na serwer. Tak, to jest dokładnie to, co chcemy zrobić. Następnie klucz tytułujemy jak chcemy (lub klikamy enter, jeśli odpowiada nam tytuł <em>GitHub CLI</em>). Dalej wybieramy logowanie za pomocą przeglądarki. W tym momencie wyświetli nam się ośmioznakowy kod, który powinniśmy skopiować. Jeśli chcesz użyć skrótu klawiaturowego, <strong>nie używaj Ctrl+C</strong>, bo wyłączysz GitHub CLI. Użyj Ctrl+Shift+C. Możesz też użyć myszki. Po kliknięciu enter otworzy nam się okno przeglądarki, gdzie wklejamy wcześniej skopiowany kod i zatwierdzamy.</p>
<p>W ten sposób dokonaliśmy konfiguracji GitHub CLI. Pozostaje nam jeszcze połączyć GitHub CLI z naszym lokalnym Gitem za pomocą prostej komendy:</p>
<pre class="{bash}"><code>gh auth git-setup</code></pre>
</section>
<section id="github-desktop-i-gitkraken" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="github-desktop-i-gitkraken"><span class="header-section-number">2.3</span> GitHub Desktop i GitKraken</h2>
<p>Domyślnie Git jest narzędziem konsolowym. Dla większości świeżych użytkowników jest to nie do przejścia. Sam widok okna terminala może wywoływać obfite pocenie, przyspieszenie akcji serca i wyrzut kortyzolu do krwi. Na szczęście istnieją przynajmniej dwa narzędzia, które mogą nam oszczędzić męki uczenia się poleceń&nbsp;konsolowych.</p>
<p>Pierwsze z nich to <a href="https://desktop.github.com/">GitHub Desktop</a>, który jest intuicyjnym programem pozwalającym nam na szybkie zarządzanie Gitem i synchronizację z GitHubem. Jest to narzędzie darmowe i <a href="https://github.com/desktop/desktop">otwartoźródłowe</a>. Pozwala nam nie tylko zatwierdzać, wysyłać i odbierać zmiany, ale także możemy za jego pomocą zarządzać <em>pull requests</em> (więcej o tym później).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/git/GitHub-Desktop.png" class="img-fluid figure-img"></p>
<figcaption>GitHub Desktop</figcaption>
</figure>
</div>
<p>Druga możliwość to <a href="https://www.gitkraken.com/">GitKraken</a>. Potężne narzędzie do zarządzania Gitem z wieloma zaawansowanymi możliwościami jak wyświetlanie wykresów commitów i modyfikacje na miejscu. Niestety GitKraken to w wielu funkcjach program płatny, ale dostępny za darmo dla studentów i pracowników naukowych w ramach <a href="https://education.github.com/discount">GitHub Education</a>. Nie jest to jedyna korzyść płynąca z tego programu (inne to np. GitHub Copilot), także polecam się zainteresować. Wiele funkcji jest też dostępnych, jeśli nasze repozytorium jest publiczne.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/git/GitKraken.png" class="img-fluid figure-img"></p>
<figcaption>GitKraken</figcaption>
</figure>
</div>
<p>Możemy wybrać dowolne z tych narzędzi, bo funkcjonalność mają podobną. Jeśli jednak mamy statuts studenta albo pracownika naukowego, polecam GitKraken o tyle, że pozwala dość łatwo rozwiązać specyficzne problemy. Tak czy inaczej, będą to dla nas raczej dodatkowe narzędzia, jeśli planujemy korzystać z Gita głównie do wspólnego pisania kodu R w RStudio, ponieważ RStudio ma już wbudowaną podstawową integrację z Gitem.</p>
</section>
</section>
<section id="podstawowe-pojęcia" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Podstawowe pojęcia</h1>
<p>Gdy tworzymy projekt w RStudio, możemy zaznaczyć, żeby jednocześnie stworzyć <strong>repozytorium</strong> Git. Repozytorium to w pewnym sensie folder, w którym zgromadzony jest nasz kod. Co odróżnia zwykły folder z kodem od repozytorium Git? Głównie ukryty folder <code>.git</code>, który śledzi zmiany, jakie wprowadzamy w plikach. Jeśli nie zainicjowaliśmy repozytorium od razu, przy tworzeniu projektu, to żaden problem. Możemy to też zrobić później, wybierając opcję stworzenia repozytorium w naszym programie do zarządzania Gitem. Jeśli jest to repozytorium z kodem R, warto po utworzeniu repozytorium jednorazowo użyć w R komendy <code>usethis::git_vaccinate()</code>. Sprawi ona, że Git będzie ignorował pliki, których nie powinniśmy wysyłać na serwer ze względów głównie bezpieczeństwa.</p>
<p>Jeśli w RStudio otworzymy projekt, który ma założone repozytorium Git, zobaczymy w prawym górnym okienku zakładkę Git. W niej znajdziemy wylistowane pliki, które zmieniliśmy lub dodaliśmy od ostatniego razu. Możemy te pliki zaznaczyć, żeby przygotować zmiany do zatwierdzenia. Taki zatwierdzony zestaw zmian nazywa się <strong><em>commit</em></strong> i jest to też guzik, za pomocą którego ostatecznie dokonamy zatwierdzenia. Taki commit obowiązkowo musi zostać opatrzony skrótową wiadomością z opisem, co zmieniliśmy. Pierwsza linijka to informacja w kilku słowach, ale poniżej możemy dopisać więcej informacji. To samo możemy też zrobić z poziomu wybranego przez nas menedżera Gita.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/git/GIt-in-RStudio.png" class="img-fluid figure-img"></p>
<figcaption>Okienko Git w RStudio</figcaption>
</figure>
</div>
<p>Jak często robić commity? Albo raczej – ile musimy napisać kodu, żeby zrobić z tego commit? To już zależy od nas. Możemy z każdej działającej poprawki robić osobny commit, a możemy robić jeden wielki commit co jakiś czas. Lepiej jednak robić je częściej niż rzadziej. Częste commity mają tę zaletę, że jeśli pojawiłaby się potrzeba wycofania jakichś zmian, to musimy wycofywać całe commity. Tym samym jeśli mamy wielkie commity, możemy dużo stracić. Ostatecznie powinna nam przyświecać zasada, że jedna rzecz to jeden commit. Od nas jednak zależy, co uznamy za „rzecz”.</p>
<p>Domyślnie commity zapisują się tylko na naszym dysku twardym. Jeśli chcemy wysłać je na GitHuba możemy użyć guzika <strong><em>push</em></strong> w RStudio albo w menedżerze Gita. Żeby ta opcja była dostępna, musimy najpierw opublikować nasze repozytorium, co łatwo zrobić z poziomu GitHub Desktop czy GitKraken.</p>
<p>Przeciwieństwem <em>push</em> jest <strong><em>pull</em></strong>. <em>Pull</em> służy do pobrania zmian, które wcześniej my albo ktoś inny wysłaliśmy na serwer. Warto jest to robić często, przed rozpoczęciem pracy. <em>Pull</em> wymaga, żebyśmy już mieli repozytorium na dysku. Jeśli chcemy pobrać całe repozytorium, musimy je <strong><em>sklonować</em></strong>. Klonowanie najłatwiej wykonać z poziomu menedżera. W ten sam sposób możemy odwrócić cały proces i najpierw stworzyć repozytorium na github.com, a potem sklonować je na własny dysk.</p>
<p>Podstawowy workflow jest więc następujący:</p>
<ol type="1">
<li><p><em>Pull</em>.</p></li>
<li><p>Piszemy kod i testujemy.</p></li>
<li><p><em>Commit</em>.</p></li>
<li><p><em>Push</em>.</p></li>
</ol>
</section>
<section id="pliki-specjalne" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Pliki specjalne</h1>
<p>Repozytoria na GitHubie często mają kilka plików specjalnych, z których najważniejsze to <code>README.md</code> i <code>.gitignore</code>. Omówmy sobie oba.</p>
<section id="gitignore" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="gitignore"><span class="header-section-number">4.1</span> <code>.gitignore</code></h2>
<p>Plik <code>.gitignore</code> to informacja dla Git, żeby pewne konkretne pliki albo rodzaje plików (np. wszystkie pliki .csv) ignorował. Innymi słowy, żeby nie krzyczał nam, że wykrywa taki plik i trzeba go śledzić. Podstawowe rodzaje plików, które w projektach R powinny zostać zignorowane, dodaje wspomniana już komenda <code>usethis::git_vaccinate()</code>. Jeśli tworzyliśmy repozytorium za pomocą RStudio, stosowny plik <code>.gitignore</code> powinien się już znajdować w repozytorium. Programy do zarządzania Gitem również potrafią nam przygotować taki roboczy plik podczas tworzenia repozytorium.</p>
<p>Uwaga! Domyślnie pliki i foldery z nazwami zaczynającymi się kropką są <strong>ukryte</strong>. Możemy odkrywać ukryte pliki skrótem klawiszowym Ctrl+H albo za pomocą menu Widok w Windows Explorer.</p>
<p>Plik <code>.gitignore</code> możemy otworzyć w dowolnym edytorze tekstu. Możemy też w RStudio użyć komendy <code>usethis::edit_git_ignore()</code>, która nam ten plik otworzy. Możemy dopisać tam nazwy lub ścieżki plików, które Git ma ignorować. Możemy też dopisać <code>*.csv</code>, żeby zignorować wszystkie pliki .csv. Gwiazdka <code>*</code> oznacza dowolne znaki. Możemy również dodawać pojedyncze pliki w R za pomocą komendy <code>usethis::use_git_ignore()</code>.</p>
</section>
<section id="readme.md" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="readme.md"><span class="header-section-number">4.2</span> <code>README.md</code></h2>
<p>Plik README to jest to, co wyświetla się, jak na GitHubie wejdziemy na stronę repozytorium. Możemy tam zapisywać podstawowe informacje dla odbiorców naszego repozytorium. Sam plik korzysta z formatowania GitHub Markdown, którego opis znajdziemy <a href="https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax">tutaj</a>. Jeśli piszemy analizę w R, warto użyć komendy <code>usethis::use_readme_md()</code>, żeby taki wzorcowy przykładowy plik wytworzyć.</p>
<p>Dla kodu w R warto rozważyć, czy nie przerzucić się na plik <code>README.Rmd</code> wytwarzany przez <code>usethis::use_readme_rmd()</code>. Pozwala on do pliku README dorzucać np. bloki kodu R. Dla publicznego kodu to szczególnie cenne, bo możemy pokazać przykładowe działanie naszych funkcji. Wtedy edytujemy plik <code>README.Rmd</code> zamiast <code>Readme.md</code>, zaś przed samym wypchnięciem używamy funkcji <code>devtools::build_readme()</code>. Generuje to aktualną wersję z rozszerzeniem .md, którą GitHub potrafi odczytać. Więcej o składni w plikach R Markdown przeczytamy <a href="https://rmarkdown.rstudio.com/lesson-1.html">tutaj</a>. Obecnie standard R Markdown jest systematycznie zastępowany przez <a href="https://quarto.org/">Quarto</a>, ale w chwili, gdy to piszę, <code>usethis</code> <a href="https://github.com/r-lib/usethis/issues/1671">nie planuje go wdrażać</a>. O możliwości korzystania z <code>README.Rmd</code> więcej napiszę we wpisie o pakietach. Kiedy już powstanie.</p>
</section>
</section>
<section id="github-flow-gałęzie-forks-i-pull-requests" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> GitHub Flow, gałęzie, <em>forks</em> i <em>pull requests</em></h1>
<p>Na tym, co podałem wyżej, można jechać bardzo długo. By jednak dopełnić obrazu podstaw Git (bo Git może znacznie więcej, to naprawdę tylko liźnięcie powierzchni), musimy omówić sobie jeszcze trzy terminy.</p>
<p>Możemy stworzyć całe oddzielne wersje naszego programu, które mogą rozwijać się niezależnie. Noszą one nazwę <strong>gałęzi</strong> (<em>branches</em>). Po co nam coś takiego? Typowe zastosowanie to utrzymywanie na głównej gałęzi (zazwyczaj nazwanej <em>main</em> albo <em>master</em>) stabilnej wersji naszego programu, zaś rozwijanie go na oddzielnej gałęzi (zazwyczaj nazwanej <em>dev</em>). Dzięki temu użytkownicy cały czas mają dostęp do takiej wersji programu, która na pewno działa, zaś my możemy się bawić w środowisku, które z definicji może być niestabilne.</p>
<p>Między gałęziami możemy przeskakiwać za pomocą menedżera Gita albo bezpośrednio w RStudio. Tuż koło znaczka odświeżania znajdziemy wybierak gałęzi. Różowy guzik tuż obok pozwala nam wytworzyć nową gałąź. Takie nowe gałęzie również wymagają publikacji.</p>
<p>Gdy przychodzi czas, możemy nowości z gałęzi rozwojowej połączyć z gałęzią główną (<strong><em>merge</em></strong>) i w ten sposób np. wydać nową wersję naszego programu. W przypadku analiz statystycznych nie jest to tak bardzo użyteczne, ponieważ analiza statystyczna zazwyczaj jest do użytku wewnętrznego, więc nie potrzebujemy oddzielać wersji stabilnej od niestabilnej. Ponadto to zazwyczaj względnie prosty skrypt. Użyteczność gałęzi ujawnia się jednak w inny sposób, jeśli korzystamy w naszej pracy z <a href="https://docs.github.com/en/get-started/quickstart/github-flow">GitHub Flow</a>, czyli wizji tego, jak używać Gita, którą proponuje nam GitHub.</p>
<p>Zgodnie z GitHub Flow, osobną gałąź powinniśmy wytworzyć na <strong>każde zadanie do wykonania</strong>. Jest to pierwszy krok każdych zmian w kodzie. W warunkach analiz statystycznych, możemy wytwarzać takie gałęzie jak <code>czyszczenie-danych</code>, <code>statystyki-opisowe</code> czy <code>modelowanie</code>. Po pierwsze pozwala to na uniknięcie problemu, o którym mówiłem na początku – możemy przypadkiem zepsuć kod, a wtedy zepsujemy go dla wszystkich. Osobna gałąź sprawia, że główny kod jest bezpieczny. Drugi powód jest jednak znacznie ciekawszy.</p>
<p>Gdy już wykonamy swoją pracę na oddzielnej gałęzi, musimy scalić ją z główną gałęzią. Robimy to przez otwarcie <strong><em>pull request</em></strong> (widziałem kiedyś rozkazująco brzmiące polskie tłumaczenie „żądanie ściągnięcia”). Pull request to niejako wpis na „forum”, gdzie proponujemy nasz kod. Zazwyczaj opisujemy tam, co też zmieniliśmy w kodzie i dlaczego warto to scalić. Teraz nasz współpracownik (albo właściciel repozytorium) może <strong>przejrzeć nasze zmiany, dodać sugestie, skomentować nawet konkretne linijki w kodzie</strong>, a na koniec wystawić recenzję przyjmującą, odrzucającą bądź neutralną. W zależności od ustawień repozytorium taka recenzja może być konieczna, ale mogą to też dyktować wewnętrzne zasady (kodeks honorowy). Jeśli wszystko jest ok, można jednym kliknięciem scalić naszą roboczą gałąź z gałęzią główną (albo z gałęzią <em>dev</em>, a dopiero, jak się trochę tych zmian nazbiera, scalić <em>dev</em> z gałęzią główną).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/git/pull-request.png" class="img-fluid figure-img"></p>
<figcaption>Przykładowa rozmowa o fragmencie kodu w ramach pull request</figcaption>
</figure>
</div>
<p>Gdy dyskusje między współpracownikami zakończą się, a gałąź zostanie scalona, można ją spokojnie usunąć. Więcej o pracy z użyciem GitHub Flow można przeczytać <a href="https://docs.github.com/en/get-started/quickstart/github-flow">tutaj</a>.</p>
<p>Bardzo podobny schemat występuje, jeśli chcemy wprowadzić zmiany w cudzym kodzie. Cała filozofia Open Source polega na tym, że każdy może coś dopisać do programu. Nie oznacza to jednak, że właściciel danego repozytorium nie ma nad nim żadnej kontroli. Kontrolę zapewniają mu właśnie pull requests, które tylko on(a) może scalić z główną gałęzią. Na przykład każdy może poprawić moje literówki, jeśli jakieś tu znajdzie, zmieniając odpowiednie fragmenty w pliku .qmd w <a href="https://github.com/jakub-jedrusiak/nieobliczalne">repozytorium tej strony</a>. Jednak nie możemy zmieniać treści cudzych plików tak po prostu. Najpierw musimy wytworzyć własną kopię danego repozytorium, czyli <strong><em>fork</em></strong>. Możemy to zrobić jednym kliknięciem odpowiedniego przycisku na GitHubie. Do naszej kopii mamy pełny dostęp, także możemy robić commity. Gdy taki commit zatwierdzimy i wejdziemy stronę naszego forku na github.com (lub w menedżerze Gita), zostanie nam zaproponowane, żeby otworzyć pull request z naszymi zmianami. Gdy nasz pull request zostanie scalony, cały fork możemy skasować, jeśli nie planujemy dalszych zmian.</p>
<p>GitHub Flow to dobry standard, ale nadmiernie skomplikowany, jeśli nasze repozytorium jest małe, prywatne i/lub jednoosobowe. W takich repozytoriach możemy chcieć scalać nasze zmiany od razu z główną gałęzią, która często jest jedyna. Podobnie pilne zmiany, łatki bezpieczeństwa czy wręcz przeciwnie, minimalne zmiany, na które po prostu nie warto tworzyć nowej gałęzi.</p>
</section>
<section id="rozwiązywanie-konfliktów" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Rozwiązywanie konfliktów</h1>
<p>Przy scalaniu może się okazać, że nie jest ono możliwe. Na przykład dwie osoby zmieniły tę samą linijkę kodu (powiedzmy, że dodali biblioteki) i teraz Git nie wie, co z tym zrobić. Na ten moment GitHub nie jest taki mądry, żeby proponować sposoby scalenia konfliktujących plików<sup>1</sup>, także sami musimy zdecydować, czy zachować linijkę z jednej wersji, z drugiej wersji albo też ręcznie połączyć je w jedną.</p>
<p>GitHub sam nas poinformuje, że konflikt jest, w których jest linijkach, a także da nam możliwość ten konflikt rozwiązać. Jak to zrobić? Kasujemy wszystkie linijki, do których GitHub dodał <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code> lub <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> i zapisujemy taką wersję kodu, jaką chcemy, żeby znalazła się w ostatecznej wersji. Na koniec klikamy „Mark as resolved” na górze edytora.</p>
<p>W przypadku pojawienia się konfliktów łatwiej jest rozwiązywać je za pomocą menedżera Gita niż na GitHubie.</p>
</section>
<section id="podsumowanie" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Podsumowanie</h1>
<p>Git to złożony temat, który tutaj tylko liznęliśmy. Mam jednak nadzieję, że takie liźnięcie wystarczy, by dostrzec zalety Gita, ogólną zasadę działania oraz być w stanie w podstawowy chociaż sposób ten standard wykorzystać. Głębszą wiedzę można zdobyć – standardowo – na StackOverflow, YouTube, a jeśli chcemy sięgnąć głębiej w meandry Gita, możemy przeczytać dostępną za darmo i w większości przetłumaczoną na język polski książkę <a href="https://git-scm.com/book/pl/v2">Pro Git</a>. Podsumujmy!</p>
<ol type="1">
<li><p>Git to system kontroli wersji, stworzony specjalnie do współpracy przy pisaniu kodu.</p></li>
<li><p>Podstawowym sposobem używania Gita jest <a href="https://docs.github.com/en/get-started/quickstart/github-flow">GitHub Flow</a>.</p></li>
<li><p>Najpierw tworzymy <strong>gałąź</strong>, na której chcemy napisać kod spełniający określony cel.</p></li>
<li><p>Piszemy zmiany w kodzie, które potem zatwierdzamy jako <strong>commits</strong>.</p></li>
<li><p>Commits wysyłamy na serwer za pomocą <strong><em>push</em></strong> i pobieramy z serwera za pomocą <strong><em>pull</em></strong>.</p></li>
<li><p>Gdy dokończymy dzieła, otwieramy <strong>pull request</strong>.</p></li>
<li><p>Jeśli wszystko jest OK, robimy <strong>merge</strong>.</p></li>
<li><p>W małych albo prywatnych repozytoriach zazwyczaj nie potrzebujemy wielu gałęzi ani pull requests. Szybkie i ważne poprawki też możemy od razu wrzucać na główną gałąź.</p></li>
</ol>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Przypisy</h2>

<ol>
<li id="fn1"><p>Jestem przekonany, że to kwestia czasu, patrząc na to, jak już teraz działa GitHub Copilot i jak zapowiada się GitHub Copilot X. Być może, gdy to czytasz, konflikty potrafią się już rozwiązywać same.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Narzędzia</category>
  <category>R</category>
  <guid>https://nieobliczalne.pl/posts/git.html</guid>
  <pubDate>Sun, 14 May 2023 22:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/git.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Nie pisz (prawie) tego samego 100 razy</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/powtarzalny-tekst.html</link>
  <description><![CDATA[ 




<p>W tym tekście opisuję generowanie nowego tekstu o określonej strukturze. Do wyszukiwania i zmieniania określone rzeczy w <em>istniejącym</em> już tekście służą wyrażenia regularne (RegEx), o których piszę w <a href="./posts/regex.qmd">tym</a> tekście. Łącznie to bardzo proste, a jednocześnie bardzo potężne narzędzia, które pozwalają szybko i niskim kosztem odjąć dużo bezsensownej, mechanicznej pracy każdemu. Nie tylko naukowcom czy studentom, ale każdemu, kto pisze tekst na komputerze.</p>
<p>To, co tutaj opiszę, pierwszy raz poważnie wykorzystałem, gdy pomagałem swojej siostrze w pracy. Miała ona wydłużyć plik, w którym zapisywane były teksty, jakie mają pojawić się w live’ie tego dnia (siostra pracuje przy kanale na YouTube). Plik ten miał prostą strukturę.</p>
<pre><code>Data:11.05.2023
I

II

III</code></pre>
<p>Gdy całość się kończyła, osoba odpowiedzialna dopisywała tę strukturę na ileś dni do przodu i tak co jakiś czas. Jest to ten rodzaj pracy, którego nie znoszę i który jest łatwy do zautomatyzowania. Można to zrobić z kilku powodów, z których najważniejszy jest ten – plik miał <strong>przewidywalną, z góry określoną strukturę</strong>. Miał konkretne stałe elementy i konkretne elementy zmienne. Tutaj elementem zmiennym była data, która zmienia się w sposób przewidywalny<sup>1</sup>. Mamy więc określony wzór, schemat, który tylko musimy wypełnić datami. To też zrobiłem i w ten sposób wygenerowałem dla siostry plik dla rok do przodu. Powiedziała w pracy, że miała trochę czasu, to dopisała więcej. Podobno się zdziwili.</p>
<p>Ta cecha, tzn. przewidywalność jakiegoś tekstu, pozwala nam zautomatyzować jego pisanie. Nieważne, czy tym tekstem są oznaczenia kolumn (<code>MMPI_1</code>, <code>MMPI_2</code>, …, <code>MMPI_567</code>), czy złożone zagnieżdżone struktury np. pytań i odpowiedzi w ankiecie, <strong>jeśli tekst jest przewidywalny, da się&nbsp;go wygenerować</strong>.</p>
<section id="python" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Python</h1>
<p>W tym tekście wykorzystamy sobie język programowania o nazwie Python. Tego typu praca z tekstem jest tak podstawowa, że można ją wykonać w prawie każdym języku programowania (w tym w R za pomocą <code>paste()</code> czy <code>paste0()</code>), ale tutaj wykorzystamy Pythona, bo to chyba najpopularniejszy język programowania w ogóle, drugi najpopularniejszy w statystyce, a przy tym jest to język ogólnego przeznaczenia. A także ma nazwę od Monty’ego Pythona, więc wiadomo, że warto. Specjalistą od Pythona nie jestem, moim pierwszym językiem programowania jest R, ale co tam, żyje się raz.</p>
<p>Żeby móc robić cokolwiek w Pythonie, musimy zainstalować sobie interpreter <a href="https://www.Python.org/">stąd</a>. Interpreter to coś w rodzaju programu, który potrafi czytać i wykonywać kod w danym języku. Można powiedzieć w pewnym uproszczeniu, że instalujemy sobie Pythona. Koniecznie zaznaczcie w trakcie instalacji, żeby <strong>dodać Pythona do PATH</strong>. Teoretycznie tyle wystarczy, ale żeby uprzyjemnić proces pisania, fajnie jest przygotować sobie jakieś&nbsp;IDE (program do programowania), np. <a href="https://code.visualstudio.com/">Visual Studio Code</a> albo chociaż porządny edytor tekstu w stylu <a href="https://notepad-plus-plus.org/">Notepad++</a>.</p>
<p>Gdy to zrobimy, możemy dotrzeć do Pythona na kilka sposobów. Podstawowy to wejście w terminal (w Windowsie PowerShell albo wiersz polecenia) i wpisanie tam <code>Python</code>. Gdy potwierdzimy enterem, dostaniemy konsolę Pythona, gdzie możemy wpisywać komendy. Drugi sposób, przez IDE, to stworzenie pliku z rozszerzeniem .py (np. „skrypt.py” albo „znowu_dają_mi_bezsensowna_robote.py”) zapisywanie w nim naszych komend. Drugi sposób przyda się, gdy chcemy sobie komendy zachować na przyszłość albo piszemy coś bardziej skomplikowanego, na wiele linijek. IDE często mają specjalny guzik do uruchomienia takiego kodu<sup>2</sup>. Możemy też w wierszu polecenia wpisać <code>Python C:\ścieżka\do\pliku.py</code>, np. <code>Python "C:\Users\Jakub\Desktop\RSES.py"</code>. Ważne – w „suchym" wierszu polecenia, nie w konsoli Pythona.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/powtarzalny-tekst/Python-powershell.png" class="img-fluid figure-img"></p>
<figcaption>Konsola Pythona w PowerShell</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/ilustracje/powtarzalny-tekst/Python-w-konsoli.png" class="img-fluid figure-img"></p>
<figcaption>Konsola Pythona w konsoli w Linuxie</figcaption>
</figure>
</div>
</section>
<section id="print-i-f-strings" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> <code>print()</code> i <em>f-strings</em></h1>
<p>Teraz możemy pisać nasz kod w Pythonie. Będę zakładał, że piszemy nasz kod w pliku, ale równie dobrze można to pisać na szybko w konsoli. Często tak robię, jak mam do wygenerowania prostą zbitkę i nie chce mi się&nbsp;tworzyć na to specjalnie pliku. W takim wypadku każdą linijkę kodu wpisujemy w konsolę osobno i osobno zatwierdzamy enterem. Zazwyczja pierwszym, co się pisze, gdy zaczyna się uczyć nowego języka, jest program, który wyświetla tekst „Hello world!“. W Pythonie robimy to funkcją <code>print()</code>.</p>
<div id="dfeaad91" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello world!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello world!</code></pre>
</div>
</div>
<p>Funkcja <code>print()</code> w większości wystarczy, żebyśmy uzyskali to, co chcemy dziś uzyskać. Wbrew pozorom, jeśli połączymy ją z pętlami, będzie ona potrafiła całkiem sporo. Funkcje w programowaniu zazwyczaj mają po sobie nawiasy, do których wrzucamy różne rzeczy, z którymi funkcja ma coś zrobić. Tak tutaj wrzucamy w te nawiasy tekst, który funkcja ma pokazać w konsoli. Dosłowny tekst zawsze piszemy w cudzysłowie.</p>
<p>Jeśli potrzebujemy, możemy po przecinku dorzucić argument <code>end</code>, który mówi, co funkcja ma dodać na koniec danego ciągu znaków. Domyślnie jest to nowa linia, którą w informatyce zapisujemy zazwyczaj <code>\n</code>. Nie robimy rzeczywistej nowej linii! Na przykład możemy zmienić jedną pustą linię na dwie, trzy. Możemy też zamienić nową linię na spację, ale po co, to wyjaśnię&nbsp;później. Możemy też wymyślić coś całkiem szalonego, jeśli mamy taką potrzebę.</p>
<div id="bc14c1c3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello world!"</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-----</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello world!

-----
</code></pre>
</div>
</div>
<p>Nabierze to więcej sensu, kiedy dojdziemy do pętli i będziemy wyświetlać wiele tekstów, jeden pod drugim. Podobnie więcej sensu nabierze coś, co omówimy teraz, czyli tzw. <em>f-strings</em>. W informatyce słowem <em>string</em> oznacza się dosłowny ciąg znaków. <em>f-strings</em> to sposób, jak do naszego ciągu znaków wrzucić wartość jakiejś <em>zmiennej</em>. Co to znaczy? Jak powiedziałem wyżej, tekst, który chcemy wygenerować, zawiera elementy stałe i elementy zmienne. Elementem zmiennym może być na przykład liczba. Jak połączyć elementy stałe ze zmiennymi? Właśnie za pomocą <em>f-string</em>. Zmienne definiujemy w Pythonie za pomocą znaku <code>=</code>.</p>
<div id="553b0e3a" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MMPI_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>MMPI_23</code></pre>
</div>
</div>
<p>W kodzie powyżej najpierw przypisuję wartość 23 do zmiennej <code>i</code> (zmienne mogę&nbsp;nazywać jak chcę). Dzięki temu, od tego momentu, gdy napiszę <code>i</code>, Python zrozumie to jako 23. Można spróbować tego w konsoli. Jeśli po zadeklarowaniu zmiennej wpiszemy w konsolę <code>i</code> i zatwierdzimy, zobaczymy liczbę 23. Jeśli piszę to w konsoli, a nie w pliku, to najpierw wpisuję <code>i = 23</code>, klikam enter i dopiero potem odpowiednią funkcję <code>print()</code>. Następnie do funkcji <code>print()</code> wrzucam tekst <code>"MMPI_{i}"</code>. Python wie, że zamiast <code>{i}</code> musi podstawić prawdziwą wartość zmiennej <code>i</code>, czyli w tym wypadku 23. Żeby to jednak wiedział, musimy przed samym ciągiem znaków dodać literkę <code>f</code>, jak <em>format</em>. Dlatego właśnie napisałem <code>f"MMPI_{i}"</code> i dlatego nazywa się to <em>f-string</em>. Jeśli chcielibyśmy w naszym tekście dodać dosłowne nawiasy klamrowe, np. uzyskać „{MMPI_23}“, takie nawiasy klamrowe piszemy podwójnie – <code>{{</code> w <em>f-string</em> zmieni się&nbsp;w dosłowny znak <code>{</code>.</p>
<div id="1c0955c7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">{{</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">MMPI_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">}}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{MMPI_23}</code></pre>
</div>
</div>
<p>Zawartość zmiennej <code>i</code> możemy w nawiasach klamrowych też modyfikować.</p>
<div id="8e1bf3da" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MMPI_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5">zawod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"skrybą"</span></span>
<span id="cb10-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Jak to jest być </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>zawod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>upper()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>MMPI_25
Jak to jest być SKRYBĄ?</code></pre>
</div>
</div>
</section>
<section id="pętle" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Pętle</h1>
<p>Pętle to w językach programowania sposób, żeby wiele razy zrobić to samo albo prawie to samo. W (prawie) każdym języku programowania znajdziemy dwa rodzaje pętli – <code>for</code> i <code>while</code>.</p>
<section id="pętla-for" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="pętla-for"><span class="header-section-number">3.1</span> Pętla <code>for</code></h2>
<p>Pętla <code>for</code> jest najprostszym rodzajem pętli i tym, z czego będziemy stale korzystać. Omówmy sobie ją na przykładzie generowania nazw kolumn.</p>
<div id="937700db" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>):</span>
<span id="cb12-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MMPI_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>MMPI_1
MMPI_2
MMPI_3
MMPI_4
MMPI_5
MMPI_6
MMPI_7
MMPI_8
MMPI_9
MMPI_10</code></pre>
</div>
</div>
<p><code>i</code> jest nazwą dla zmiennej, która po kolei przyjmie wartości od 1 do 10. Najpierw wszystko, co znajduje się w pętli, wykona się tak, jakby <code>i</code> miało wartość 1. Potem wykona się to znowu, ale z <code>i = 2</code> itd. To jest podstawowy sposób działania zmiennej <code>for</code>. Potem mamy słowo <code>in</code>, a za nim zbiór wartości, które <code>i</code> ma po kolei przyjmować. W tym wypadku tym zbiorem jest funkcja <code>range()</code>, która sama generuje nam liczby od 1 do 10.</p>
<p>Dlaczego jednak napisałem <code>range(1, 11)</code> a nie <code>range(1, 10)</code>? Python działa tutaj specyficznie. Wynika to z faktu, że w informatyce liczy się od 0, nie od 1. Jeśli do funkcji <code>range()</code> wrzucę tylko jedną liczbę, czyli na przykład <code>range(10)</code>, to dostanę 10 elementów. Ponieważ jednak pierwszy element to 0, to będą to liczby od 0 do 9. Mogę podać dwie liczby, żeby powiedzieć funkcji <code>range()</code>, od czego ma zacząć, ale wtedy muszę mieć w głowie, że skoro <code>range(0, 10)</code> oznacza 10 liczb od 0 do 9, to liczby od 1 do 10 muszę zapisać jako <code>range(1, 11)</code>. Innymi słowy koniec skali nie wlicza się do zakresu.</p>
<p>Jeśli piszemy to w konsoli, a nie w pliku, możemy zapisać taką pętlę w jednej linijce – <code>for i in range(1, 11): print(f"MMPI_{i}")</code>. Możemy też zapisać samo <code>for i in range(1, 11):</code> (nie zapominając o dwukropku) i potwierdzić enterem. W obu wypadkach wyświetli nam się w konsoli wielokropek i będziemy mogli dopisywać kolejne komendy z pętli. Gdy będziemy usatysfakcjonowani, klikamy enter po raz kolejny, a pętla wykonuje się.</p>
<p>Tak jak wspomniałem, domyślnie <code>print()</code> wyrzuca do konsoli to, co tej funkcji podaliśmy, dodając na koniec nową linię. Możemy jednak chcieć, żeby nasze elementy pojawiły się po przecinku albo oddzielone spacjami (albo jedno i drugie) i wtedy możemy zmienić argument <code>end</code>.</p>
<div id="3b35b44b" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>):</span>
<span id="cb14-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MMPI_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>MMPI_1, MMPI_2, MMPI_3, MMPI_4, MMPI_5, MMPI_6, MMPI_7, MMPI_8, MMPI_9, MMPI_10, </code></pre>
</div>
</div>
<p>Co prawda po ostatnim elemencie też dostajemy przecinek i spację, ale to już możemy usunąć ręcznie. W Pythonie też da się to zaprogramować, ale nie chcę za bardzo gmatwać.</p>
</section>
<section id="pętla-while" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="pętla-while"><span class="header-section-number">3.2</span> Pętla <code>while</code></h2>
<p>Pętla <code>while</code> to bardziej podstawowy, prosty rodzaj pętli. Większość pętli <code>while</code> da się napisać w formie pętli <code>for</code>, dlatego nie będę się nad tym jakoś szczególnie rozwodził, ale warto wiedzieć, że coś takiego istnieje. Napiszmy przykład z poprzedniej sekcji w postaci pętli <code>while</code>.</p>
<div id="109f2a27" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb16-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb16-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MMPI_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-4">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ewentualnie i += 1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>MMPI_1
MMPI_2
MMPI_3
MMPI_4
MMPI_5
MMPI_6
MMPI_7
MMPI_8
MMPI_9
MMPI_10</code></pre>
</div>
</div>
<p>W pętli <code>while</code> potrzebujemy jakiejś wcześniej określonej zmiennej, w tym wypadku <code>i</code>. Pierwszą rzeczą, którą <code>while</code> robi, jest sprawdzenie, czy warunek jest prawdziwy. Prawdą jest, że 1 jest mniejsze lub równe 10, więc <code>while</code> puszcza wszystko, co znajduje się w środku pętli. Instrukcja <code>print()</code> jest identyczna. Kolejna linijka może wydawać się nieco tajemnicza. Służy ona powiększeniu <code>i</code> o 1. Matematycznie zapis <code>i = i + 1</code> może wydawać się&nbsp;dziwny, ale trzeba pamiętać, że <code>=</code> nie oznacza tutaj porównania (to się robi poprzez <code>==</code>), tylko przypisanie. Można więc tę komendę przeczytać „Niech <code>i</code> przyjmie wartość równą <strong>aktualnej</strong> wartości <code>i</code> plus jeden”. W skrócie możemy to zapisać jako <code>i += 1</code>. Po co to robimy? Bo w następnym kroku pętla <code>while</code> znów sprawdzi, czy warunek jest prawdziwy. Teraz <code>i = 2</code>, a 2 to ciągle mniej niż 10, więc pętla wykona się znów. Tak będzie robić aż do momentu, w którym warunek nie będzie prawdziwy, a wiec w tym wypadku aż <code>i</code> nie przyjmie wartości 11. Jeśli nie umieściłbym w kodzie linijki <code>i = i + 1</code>, warunek <code>i &lt;= 10</code> byłby <strong>zawsze</strong> prawdziwy i pętla działałaby wiecznie. Czy raczej do wyczerpania pamięci.</p>
</section>
</section>
<section id="generowanie-tekstu" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Generowanie tekstu</h1>
<p>Weźmy sobie na warsztat bardziej złożony przykład. Niedawno musiałem generować bardzo skomplikowany tekst, który stał się częścią ankiety w <a href="https://www.psytoolkit.org/">PsyToolKit</a>. Jest to świetne narzędzie do prowadzenia ankiet i eksperymentów, głównie psychologicznych. Jego największą zaletą – według mnie – jest to, że zarówno ankiety, jak i eksperymenty mogą być pisane w postaci zwykłego tekstu<sup>3</sup>. Pozwala to na olbrzymią giętkość, jaką zapewniają języki programowania, ale także daje duże możliwości automatyzacji. O PsyToolKit na pewno jeszcze w przyszłości napiszę.</p>
<section id="ankieta-w-psytoolkit" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="ankieta-w-psytoolkit"><span class="header-section-number">4.1</span> Ankieta w PsyToolKit</h2>
<p>Pokażę teraz, jak sprawnie przerobić kwestionariusz na ankietę w PsyToolKit. Najsprawniej byłoby, co prawda, użyć programiku <a href="https://github.com/jakub-jedrusiak/Psytoolkit-Questionnaire-Formatter">PsyToolKit Questionnaire Formatter</a>, który opiera się na tym, co tutaj opisuję. Poznajmy ten mechanizm od kuchni, żeby w razie czego móc go dopasować do własnych, specyficznych celów, niekoniecznie związanych w ogóle z PsyToolKit.</p>
<p>Załóżmy, że chcielibyśmy wykorzystać w naszym badaniu kwestionariusz samooceny Rosenberga (1965). Musimy go w takim razie zapisać tak, jak PsyToolKit każe nam formatować pytania do ankiety. Struktura pytania w PsyToolKit wygląda tak:</p>
<pre class="{YAML}"><code>l: RSES_1
t: radio
q: I feel that I am a person of worth, at least on an equal plane with others.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree</code></pre>
<p>Po pierwsze mamy <code>l</code>, czyli <em>label</em>. Posłuży nam to jako wewnętrzna „nazwa” pozycji testowej i nagłówek kolumny w bazie danych. Dalej mamy <code>t</code>, czyli <em>type</em>, gdzie <code>radio</code> oznacza pytanie jednokrotnego wyboru. Inne typy znajdziemy w <a href="https://www.psytoolkit.org/doc3.4.4/online-survey-syntax.html#questiontypes">dokumentacji</a>. Następnie mamy <code>q</code>, czyli <em>question</em>, właściwa treść pozycji testowej i pod nią odpowiedzi wypisane od myślników. Możemy tu dodawać inne rzeczy (np. <code>o: random</code>, żeby kolejność odpowiedzi była losowa), ale załóżmy, że na ten moment tyle nam wystarczy.</p>
<p>Po pierwsze spróbujmy zidentyfikować, co w naszym schemacie jest stałe i co się zmienia. Tutaj zmieniają się dwie rzeczy – treść pozycji testowej i numerek przy <code>RSES</code>. Cała reszta jest identyczna dla każdej pozycji testowej.</p>
<p>Skoro musimy mieć w naszych pytaniach treść pozycji testowej, musimy nasz kwestionariusz wkleić do skryptu. Zapiszemy go w postaci listy.</p>
<div id="ba27a658" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">RSES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb19-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I feel that I am a person of worth, at least on an equal plane with others."</span>,</span>
<span id="cb19-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I feel that I have a number of good qualities."</span>,</span>
<span id="cb19-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"All in all, I am inclined to feel that I am a failure."</span>,</span>
<span id="cb19-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I am able to do things as well as most other people."</span>,</span>
<span id="cb19-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I feel I do not have much to be proud of."</span>,</span>
<span id="cb19-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I take a positive attitude toward myself."</span>,</span>
<span id="cb19-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"On the whole, I am satisfied with myself."</span>,</span>
<span id="cb19-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I wish I could have more respect for myself."</span>,</span>
<span id="cb19-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I certainly feel useless at times."</span>,</span>
<span id="cb19-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"At times I think I am no good at all."</span></span>
<span id="cb19-12">]</span></code></pre></div>
</div>
<p>Cała lista jest nawiasach kwadratowych, każdy item jest w cudzysłowie, zaś itemy rozdzielone są przecinkami. Całą listę zapisałem do zmiennej o nazwie <code>RSES</code>. Teraz możemy powiedzieć Pythonowi, żeby zrobił całą serię pytań w stylu PsyToolKit, gdzie po <code>q</code> za każdym razem wstawi jedną z pozycji testowych.</p>
<div id="3bda2639" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> RSES:</span>
<span id="cb20-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l: RSES_1"</span>)</span>
<span id="cb20-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t: radio"</span>)</span>
<span id="cb20-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"q: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"- Strongly Agree</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Agree</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Disagree</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Strongly Disagree"</span>)</span>
<span id="cb20-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pusta linijka</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>l: RSES_1
t: radio
q: I feel that I am a person of worth, at least on an equal plane with others.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_1
t: radio
q: I feel that I have a number of good qualities.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_1
t: radio
q: All in all, I am inclined to feel that I am a failure.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_1
t: radio
q: I am able to do things as well as most other people.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_1
t: radio
q: I feel I do not have much to be proud of.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_1
t: radio
q: I take a positive attitude toward myself.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_1
t: radio
q: On the whole, I am satisfied with myself.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_1
t: radio
q: I wish I could have more respect for myself.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_1
t: radio
q: I certainly feel useless at times.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_1
t: radio
q: At times I think I am no good at all.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree
</code></pre>
</div>
</div>
<p>Jak widzimy, nasza zmienna w pętli (1) nie musi nazywać się <code>i</code> oraz (2) nie musi być liczbą. Jak widzimy, możemy wykonać pętlę za każdym razem przypisując do zmiennej kolejny tekst z listy. Każdą linijkę możemy zapisać w osobnej komendzie <code>print()</code> lub też całość wpisać w jedną komendę, zaznaczając nowe linijki za pomocą <code>\n</code>. Tak zrobiłem w przedostatniej linijce.</p>
<p>Nasz wynik ma jednak problem – każde pytanie nazywa się <code>RSES_1</code>. Liczba po <code>RSES_</code> musi się zmieniać. Tym razem jest to trudniejsze niż wcześniej, bo <code>item</code> nie jest tutaj liczbą, tylko treścią pytania, więc nie możemy zapisać <code>RSES_{item}</code>. Z pomocą przychodzi nam jednak funkcja <code>enumerate()</code>. Pozwala ona przerobić listę na tzw. krotki (ang. <em>tuples</em>, tutaj <em>2-tuples</em> czyli dwukrotki). Każda taka dwukrotka zawiera numer pozycji na liście (licząc od 0) oraz samą pozycję. Numer jest pierwszy, więc dostaniemy się&nbsp;do niego pisząc <code>item[0]</code>. Jeśli chcemy dostać treść pozycji testowej, zapiszemy <code>item[1]</code>. Całość wyglądałaby więc tak:</p>
<div id="84bf3d2e" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(RSES):</span>
<span id="cb22-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"l: RSES_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb22-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t: radio"</span>)</span>
<span id="cb22-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"q: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb22-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"- Strongly Agree</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Agree</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Disagree</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Strongly Disagree"</span>)</span>
<span id="cb22-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pusta linijka</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>l: RSES_1
t: radio
q: I feel that I am a person of worth, at least on an equal plane with others.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_2
t: radio
q: I feel that I have a number of good qualities.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_3
t: radio
q: All in all, I am inclined to feel that I am a failure.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_4
t: radio
q: I am able to do things as well as most other people.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_5
t: radio
q: I feel I do not have much to be proud of.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_6
t: radio
q: I take a positive attitude toward myself.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_7
t: radio
q: On the whole, I am satisfied with myself.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_8
t: radio
q: I wish I could have more respect for myself.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_9
t: radio
q: I certainly feel useless at times.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree

l: RSES_10
t: radio
q: At times I think I am no good at all.
- Strongly Agree
- Agree
- Disagree
- Strongly Disagree
</code></pre>
</div>
</div>
<p>Zwróćmy uwagę, że w pierwszym <code>print()</code> napisałem <code>item[0] + 1</code>. <code>item[0]</code> to numer pozycji testowej, ale czemu <code>+ 1</code>? Bo liczenie w informatyce zaczyna się od 0 (co ciągle powoduje problemy u całej reszty ludzkości), więc jeśli chcę mieć numerację od 1 do 10 zamiast od 0 do 9, to do każdego numeru muszę dodać 1.</p>
</section>
<section id="zapisywanie-do-pliku" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="zapisywanie-do-pliku"><span class="header-section-number">4.2</span> Zapisywanie do pliku</h2>
<p>Wynik działania takiej funkcji możemy od razu zapisać do pliku tekstowego za pomocą specjalnego operatora <code>&gt;</code> w PowerShell<sup>4</sup>. Da się to zrobić nie wychodząc z Pythona, ale to niepotrzebnie skomplikowane. Druga opcja to po prostu skopiować wygenerowany tekst z konsoli. Jeśli ktoś rzadko z niej korzysta, to ostrzegam, że do kopiowania i wklejania zamiast Ctrl+C i Ctrl+V w konsoli używamy Ctrl+Shift+C i Ctrl+Shift+V. Głównie dlatego, że Ctrl+C ma tam inną funkcję – przerywa aktualnie wykonywane zadanie. Ten sposób może jednak nie być odpowiedni, jeśli tekst jest długi, bo wtedy konsola może zjeść nam kilka (lub bardzo dużo) linijek. Jak więc wykorzystać <code>&gt;</code>? W PowerShell (nie w konsoli Pythona! w zwykłym, gołym PowerShell) wpisujemy coś takiego:</p>
<pre><code>Python "C:\ścieżka\do\skryptu.py" &gt; "C:\ścieżka\do\pliku.txt"</code></pre>
<p>Jako podpowiedź mogę podrzucić, że Windows 11 pozwala kopiować ścieżki po kliknięciu na plik prawym przyciskiem myszy. W Windowsie 10 też możemy sobie w ten sposób ułatwić życie, tylko klikając prawy przycisk myszy musimy jeszcze przytrzymać shift. Ostateczna komenda mogłaby więc wyglądać tak:</p>
<pre><code>Python "C:\Users\Jakub\Desktop\RSES.py" &gt; "C:\Users\Jakub\Desktop\RSES.txt"</code></pre>
<p>Powoduje to zapisanie tego, co normalnie skrypt wydrukowałby w konsoli, w pliku <code>RSES.txt</code> na pulpicie. Rozszerzenie <code>.txt</code> jest konieczne. Oczywiście jeśli Twoja nazwa użytkownika to Jakub. Niestety wpisywanie własnych ścieżek jest konieczne.</p>
</section>
<section id="daty" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="daty"><span class="header-section-number">4.3</span> Daty</h2>
<p>Wróćmy do pierwotnego przykładu z plikiem mojej siostry. Jest to przykład o tyle specyficzny, że zmiennym elementem jest tam data. Daty zmieniają się przewidywalne, ale potrzebują specjalnych funkcji, które ogarną takie rzeczy jak to, że różne miesiące mają różną liczbę dni, istnieją lata przestępne itd. Kiedy rzeczywiście miałem ten problem, użyłem funkcji <code>date</code> w Linuksie, która sama z siebie pozwala na robienie takich rzeczy. Większość osób (niestety) nie korzysta z linuksa, dlatego na potrzeby tego wpisu zaadaptuję to rozwiązanie do Pythona. Albo chociaż spróbuję.</p>
<p>Żeby operować na datach, musimy na szczycie skryptu (lub najpierw w konsoli) zapisać:</p>
<div id="d7991594" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span></code></pre></div>
</div>
<p>Załaduje to pakiet <code>datetime</code> pozwalający operować na datach. Robimy to tylko raz na daną sesję, czyli jak raz załadujemy ten pakiet, możemy z niego korzystać dopóty, dopóki nie wyjdziemy z Pythona. Jeśli chcemy dostać się do funkcji z pakietu <code>datetime</code>, musimy zapisać je z „przedrostkiem" <code>datetime.</code>, jak zobaczymy za chwilę.</p>
<p>Przypomnijmy strukturę pliku, który chcemy stworzyć:</p>
<pre><code>Data:11.05.2023
I

II

III</code></pre>
<p>Po pierwsze musimy ustalić, od jakiej daty chcemy zacząć. Możemy wykorzystać dzisiejszą datę wpisując <code>datetime.date.today()</code>. Możemy też wybrać datę początkową arbitralnie, używając czegoś w rodzaju <code>datetime.date(2023, 5, 11)</code>. Data jest w kolejności ISO 8601, czyli rok, miesiąc, dzień.</p>
<p>Po drugie będziemy musieli dodawać do naszej daty dni. Robimy to funkcją <code>datetime.timedelta(days = 1)</code>. W tej formie do naszej daty dodamy jeden dzień. Takie coś rzeczywiście do daty dodajemy, czyli piszemy na przykład <code>datetime.date(2023, 5, 11) + datetime.timedelta(days = 1)</code>. Wynikiem będzie tutaj 12 maja 2023 roku.</p>
<p>Po trzecie nasza data musi być w określonym formacie, w tym wypadku DD.MM.RRRR. Domyślnie daty wyświetlają się w formacie ISO 8601, czyli RRRR-MM-DD. Formatować daty można metodą <code>strftime()</code>. Metody to szczególny rodzaj funkcji, który wykorzystujemy tak, że doklejamy je po kropce do nazwy naszego obiektu np. z datą. Najlepiej będzie to widać w przykładzie. Do samej metody wrzucamy zakodowany format, w jakim datę chcemy uzyskać. Wykorzystamy tutaj specjalne kody, których listę możemy znaleźć <a href="https://www.w3schools.com/Python/gloss_Python_date_format_codes.asp">tutaj</a>. Potrzebny nam format zakodujemy jako <code>"%d.%m.%Y"</code>.</p>
<p>Zbierając to wszystko do kupy uzyskujemy coś takiego:</p>
<div id="b8386b94" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb28-2"></span>
<span id="cb28-3">start_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span>
<span id="cb28-4"></span>
<span id="cb28-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>):</span>
<span id="cb28-6">    date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> datetime.timedelta(days <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i)</span>
<span id="cb28-7">    date_formatted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.%m.%Y"</span>)</span>
<span id="cb28-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Data:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>date_formatted<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">II</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">III</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Data:11.05.2023
I

II

III


Data:12.05.2023
I

II

III


Data:13.05.2023
I

II

III


Data:14.05.2023
I

II

III


Data:15.05.2023
I

II

III


Data:16.05.2023
I

II

III


Data:17.05.2023
I

II

III

</code></pre>
</div>
</div>
<p>Wykorzystałem tutaj kilka zmiennych, które nazwałem <code>start_date</code>, <code>date</code> i <code>date_formatted</code>. Nazwy zmiennych mogą być jakiekolwiek. Wybrałem takie, żeby to było czytelne. Jak to w programowaniu, możemy to napisać na parę sposobów. Dla przykładu tutaj datę już sformatowaną zapisałem w osobnej zmiennej, ale mógłbym też napisać:</p>
<div id="f9f41398" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb30-2"></span>
<span id="cb30-3">start_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span>
<span id="cb30-4"></span>
<span id="cb30-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>):</span>
<span id="cb30-6">    date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> datetime.timedelta(days <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i)</span>
<span id="cb30-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Data:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.%m.%Y'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb30-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">II</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">III</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>…albo w ogóle wszystko zapisać już wewnątrz pętli:</p>
<div id="8203881a" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>):</span>
<span id="cb31-4">    date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> datetime.timedelta(days <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i)</span>
<span id="cb31-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Data:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.%m.%Y'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb31-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">II</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">III</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>…i to też zadziała. Zależy co uznajemy za bardziej czytelne. Zwróćmy uwagę, że piszemy <code>days = i</code>, a nie <code>days = {i}</code>. Nawiasy klamrowe potrzebne są tylko w <em>f-strings</em>. Pamiętamy jeszcze, że domyślnie <code>range(7)</code> generuje liczby od 0 do 6, więc na początku <code>timedelta()</code> dodaje 0 dni, potem 1 dzień, 2 dni i aż do 6 dni. Tym razem jest to nam na rękę, bo dzięki temu pierwszą datą jest wybrana przez nas data, a nie dzień później. Uzyskujemy więc tydzień rozpiski. Siła automatyzacji polega na tym, że mając te 4 linijki kodu, taki sam nakład pracy potrzebny jest do zrobienia takiej rozpiski dla tygodnia, miesiąca czy 30 lat<sup>5</sup>.</p>
</section>
</section>
<section id="podsumowanie" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Podsumowanie</h1>
<p>Opanowanie automatyzacji wymaga sporo praktyki i początkowo może zajmować więcej czasu, niż wykonanie jakiejś pracy ręcznie. Jednak z doświadczeniem przychodzi efektywność. Już opanowanie podstaw sprawia, że często możemy oszczędzić sobie wielu, wielu godzin pracy, a jeśli poświęcimy na to trochę więcej, możemy wydłużyć sobie życie o naprawdę sporo wolnego. Podsumujmy to, czego się dziś nauczyliśmy.</p>
<ol type="1">
<li><p>Możemy automatyzować generowanie tekstu, w którym jakaś część podlega przewidywalnym zmianom.</p></li>
<li><p>Za wyświetlanie tekstu odpowiada funkcja <code>print()</code>.</p></li>
<li><p>Możemy powtórzyć jakiś tekst określoną liczbę razy i zaplanować ewentualne zmiany w tym tekście za pomocą pętli <code>for</code>.</p></li>
<li><p>Możemy podstawić do ciągu znaków wartości zmiennych za pomocą <em>f-strings</em>, np. <code>f"MMPI_{i}"</code>.</p></li>
<li><p>Ciągi liczb do pętli generujemy funkcją <code>range()</code>, przy czym domyślnie liczy ona od 0. Możemy do niej wrzucić jedną liczbę albo koniec i początek ciągu, który chcemy uzyskać. Koniec domyślnie nie wlicza się do ciągu.</p></li>
<li><p>Daty to szczególne wartości, którymi zawiadują funkcje z pakietu <code>datetime</code>.</p></li>
<li><p>Zmienne z datami tworzymy za pomocą <code>date()</code>, różnice w datach liczymy za pośrednictwem <code>timedelta()</code>, a także możemy formatować daty poprzez metodę <code>strftime()</code>.</p></li>
<li><p>Wyniki działania takich skryptów zapisujemy do plików operatorem <code>&gt;</code>. Robimy to w konsoli systemowej (np. PowerShell), a nie w konsoli Pythona.</p></li>
</ol>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Przypisy</h2>

<ol>
<li id="fn1"><p>Ciekawostką może być tutaj wczesny kalendarz hebrajski. Kalendarz hebrajski jest księżycowy, ma 12 miesięcy, ale w latach przestępnych dodawany jest 13. miesiąc – adar szeni. Takich lat przestępnych musi przypaść 7 w ciągu 19 lat. Obecnie jest to skodyfikowane (zob. cykl Metona), ale początkowo nie wiadomo było, które konkretnie lata w cyklu mają być przestępne i było to <em>ad hoc</em> ustalane przez społeczność żydowską. Tym samym lata przestępne pojawiały się znienacka i data wcale nie zmieniała się w przewidywalny sposób. Miało to poważne konsekwencje dla daty Wielkanocy, bo zanim został ustalony stabilny wzór (Wielkanocy, nie lat przestępnych w kalendarzu żydowskim, to nadeszło później), nigdy nie wiadomo było, kiedy wypadnie 14 nisan, czyli rocznica śmierci Jezusa według kalendarza żydowskiego.↩︎</p></li>
<li id="fn2"><p>Instrukcję, jak uruchamiać takie pliki bezpośrednio w Notepad++, znajdziemy np. <a href="https://www.delftstack.com/howto/Python/notepad++-run-Python/">tutaj</a>.↩︎</p></li>
<li id="fn3"><p>Jest też <em>easy mode</em>, który przypomina generatory na stronach typu Formularze Google.↩︎</p></li>
<li id="fn4"><p>Sam korzystam z linuksa (<em>I use arch, BTW</em>), ale nie łudzę się – większość osób, które to czytają, to windowsiarze. W linuksie operator <code>&gt;</code> działa identycznie.↩︎</p></li>
<li id="fn5"><p>Sprawdziłem, taki skrypt generuje u mnie 30 lat rozpiski w 47 milisekund (!), a gotowy plik ma 310 kB.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Nauka</category>
  <category>Narzędzia</category>
  <guid>https://nieobliczalne.pl/posts/powtarzalny-tekst.html</guid>
  <pubDate>Thu, 11 May 2023 22:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/powtarzalny-tekst.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Metaprogramowanie w R</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/metaprogramowanie.html</link>
  <description><![CDATA[ 




<section id="przykład-motywacyjny" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Przykład motywacyjny</h1>
<p>Wyobraźmy sobie, że chcemy napisać własną funkcję, która będzie za nas odwalać jakąś głupią robotę. Możemy na przykład mieć jakiś skomplikowany proces modelowania, który zawsze wygląda podobnie. Prostszy przykład – załóżmy, że zawsze liczymy dokładnie taki sam zestaw statystyk opisowych i chcemy mieć już funkcję na przyszłość, która policzy je nam sama. Dokładnie tak zrobiłem, jak na III roku psychologii miałem kolokwium ze statystyki. Zapiszmy więc taką funkcję.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">opisowe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, group, ...) {</span>
<span id="cb1-2">  df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb1-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb1-6">        ..., <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wybrane kolumny</span></span>
<span id="cb1-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-8">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># liczba niepustych</span></span>
<span id="cb1-9">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">M =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># średnia</span></span>
<span id="cb1-10">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SD =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># odchylenie standardowe</span></span>
<span id="cb1-11">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>skewness, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># skośność</span></span>
<span id="cb1-12">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">K =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>kurtosis, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kurtoza</span></span>
<span id="cb1-13">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NA</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># liczba brakujących</span></span>
<span id="cb1-14">        )</span>
<span id="cb1-15">      )</span>
<span id="cb1-16">    )</span>
<span id="cb1-17">}</span></code></pre></div>
</div>
<p>Przejdźmy sobie przez tę funkcję krok po kroku. Po pierwsze dałem jej 3 argumenty – <code>df</code>, <code>group</code> i tajemnicze <code>…</code>. <code>df</code> To baza danych, <code>group</code> to kolumna, po której chcemy agregować dane (patrz <a href="./posts/podstawy_R.qmd#sec-summarise">tutaj</a>). Ostatni argument to tzw. <em>ellipsis</em> czyli wielokropek i czasem spotykamy go w dokumentacji, np. w funkcji <code>select()</code>. W wielokropku chodzi o to, że mogę tam wsadzić dowolną liczbę rzeczy, np. dowolnie wiele nazw kolumn. W naszym wypadku będziemy wrzucać tam nazwy kolumn, dla których chcemy liczyć nasze statystyki. Nie wiemy, czy będzie to jedna kolumna, 10 kolumn, czy wyrażenie <code>tidyselect</code> (np. <code>starts_with("H")</code>) więc używamy wielokropka.</p>
<p>Bazę danych grupujemy i wrzucamy do funkcji agregującej <code>summarise()</code>. Ponieważ chcemy wykonać wiele razy ten sam zestaw obliczeń na wielu kolumnach, korzystamy z <code>across()</code> (patrz <a href="./posts/podstawy_R.qmd#sec-across">tutaj</a>). Dalej <code>across()</code> przyjmuje listę funkcji, które chcemy zastosować. Listę, czyli wszystkie komendy zamykam w <code>list()</code><sup>1</sup>. Większość funkcji podaję jako funkcje anonimowe (patrz <a href="./posts/podstawy_R.qmd#sec-lambda">tutaj</a>), bo albo muszę podać dodatkowe argumenty, albo to funkcje kombinowane, np. <code>\(x) sum(!is.na(x))</code>.</p>
<p>Ciekawsze rzeczy to:</p>
<ol type="1">
<li><code>\(x) sum(!is.na(x))</code> – sama funkcja <code>is.na()</code> zwraca <code>TRUE</code> lub <code>FALSE</code> w zależności od tego, czy dana wartość jest brakująca. Pod maską <code>TRUE</code> to 1, a <code>FALSE</code> to 0, więc jeśli zsumujemy wynik działania <code>is.na()</code>, to dostaniemy liczbę <code>TRUE</code>. Ponieważ <code>is.na()</code> zwraca <code>TRUE</code>, jeśli dane <strong>są</strong> brakujące, to sumując <code>is.na()</code> dostałbym liczbę <code>NA</code>. Dlatego zaprzeczam <code>is.na()</code> operatorem <code>!</code> (patrz <a href="./posts/podstawy_R.qmd#sec-across">tutaj</a>).</li>
<li>Skośność i kurtoza – to są jedyne funkcje, które stosuję tutaj jak w mordę strzelił, bez kombinowania, więc podaję je <strong>bez nawiasów</strong>. Jak wspominałem <a href="./posts/podstawy_R.qmd#sec-across">tutaj</a>, gdy nie ma nawiasów, wskazujemy na samą funkcję, a z nawiasami na to, co funkcja z siebie wywala.</li>
<li><code>`NA`</code> – słowo <code>NA</code> ma w R swoje znaczenie. Takich słów normalnie nie możemy używać jako nazw kolumn. Zazwyczaj. Jeśli bardzo chcemy, możemy ująć taką niesyntaktyczną<sup>2</sup> nazwę w <em>backticki</em> (patrz <a href="./posts/podstawy_R.qmd#sec-select">tutaj</a>).</li>
</ol>
<p>Taka funkcja powinna działać. Jeśli uruchomimy ją w konsoli na konkretnym przykładzie, to zadziała.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">iris <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb2-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(Sepal.Length, Sepal.Width), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wybrane kolumny</span></span>
<span id="cb2-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb2-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># liczba niepustych</span></span>
<span id="cb2-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">M =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># średnia</span></span>
<span id="cb2-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SD =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># odchylenie standardowe</span></span>
<span id="cb2-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>skewness, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># skośność</span></span>
<span id="cb2-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">K =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>kurtosis, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kurtoza</span></span>
<span id="cb2-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NA</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># liczba brakujących</span></span>
<span id="cb2-13">      )</span>
<span id="cb2-14">    )</span>
<span id="cb2-15">  )</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 3 × 13</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">Species</span>    <span style="font-weight: bold;">Sepal.Length_N</span> <span style="font-weight: bold;">Sepal.Length_M</span> <span style="font-weight: bold;">Sepal.Length_SD</span> <span style="font-weight: bold;">Sepal.Length_A</span>
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;fct&gt;</span>               <span style="color: #555555; font-style: italic;">&lt;int&gt;</span>          <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>           <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>          <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> setosa                 50           5.01           <span style="color: #555555;">0.</span>352          <span style="color: #555555;">0.</span>120
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">2</span> versicolor             50           5.94           <span style="color: #555555;">0.</span>516          <span style="color: #555555;">0.</span>105
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">3</span> virginica              50           6.59           <span style="color: #555555;">0.</span>636          <span style="color: #555555;">0.</span>118
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 8 more variables: </span><span style="color: #555555; font-weight: bold;">Sepal.Length_K</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">Sepal.Length_NA</span><span style="color: #555555;"> &lt;int&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">Sepal.Width_N</span><span style="color: #555555;"> &lt;int&gt;, </span><span style="color: #555555; font-weight: bold;">Sepal.Width_M</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">Sepal.Width_SD</span><span style="color: #555555;"> &lt;dbl&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">Sepal.Width_A</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">Sepal.Width_K</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">Sepal.Width_NA</span><span style="color: #555555;"> &lt;int&gt;</span>
</code></pre>
</div>
</div>
<p>Nie jest to może najładniejsza tabela, ale jest. Spróbujmy jednak to samo wywołać za pomocą naszej funkcji, która przecież niby robi to samo.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">opisowe</span>(iris, Species, Sepal.Length, Sepal.Width)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BBBB00; font-weight: bold;">Error</span><span style="color: #BB0000; font-weight: bold;"> in `group_by()`:</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BBBB00;">!</span><span style="color: #BB0000;"> Must group by variables found in `.data`.
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> ✖ Column `group` is not found.
</span></code></pre>
</div>
</div>
<p>Ups. Nie działa. Ale czemu? Błąd mówi, że <code>group_by()</code> nie znalazło kolumny o nazwie <code>group</code>. I bardzo słusznie, że nie znalazło, bo nie ma takiej kolumny w <code>iris</code>. Ale w ogóle nie miało jej szukać! Miało szukać kolumny <code>Species</code>, którą podaliśmy jako argument? Dlaczego <code>group_by()</code> szuka kolumny <code>group</code>?</p>
</section>
<section id="tidy-eval" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Tidy Eval</h1>
<p>To, co teraz opowiem, jest uznawane za bardzo zaawansowaną część języka R. Najgłębiej opisuje te zagadnienia Hadley Wickham<sup>3</sup> w książce <a href="https://adv-r.hadley.nz/"><em>Advanced R</em></a>. Sam bardzo długo próbowałem to zrozumieć, aż w końcu udało mi się niedawno, podczas pisania pakietu <a href="https://github.com/jakub-jedrusiak/mtscr"><code>mtscr</code></a>. Gdy wreszcie to zrozumiałem, to uznałem, że nie jest to aż takie trudne, tylko opisane jak dla informatyków, matematyków, inżynierów, a nie jak dla psychologów, socjologów, ekonomistów czy całej reszty ludzkości. Dokładnie ten sam problem mam ze statystyką w ogóle.</p>
<p>Jednocześnie nie jest to coś, co większość useRów musi rozumieć. Taka potrzeba pojawia się zazwyczaj głęboko, późno, gdy chcemy usprawnić nasz kod własnymi funkcjami<sup>4</sup> albo musimy napisać jakiś pakiet. Zazwyczaj pierwszy raz, kiedy chcemy napisać funkcję robiącą wykres w <code>ggplot2</code> i się blokujemy. Wtedy znajdujemy na StackOverflow informację, że trzeba nazwy kolumn wziąć w podwójne klamry (np. <code>{column}</code>) i tyle nam wystarczy, nie musimy zajmować się tym głębiej. Do czasu, kiedy jednak musimy.</p>
<p>Skąd więc biorą się problemy takie jak w przykładzie? To jest cena, którą płacimy za wygodne pisanie kodu. W klasycznym R, gdy chcemy coś policzyć, musimy wykorzystywać pełne nazwy kolumn. Podobnie gdy coś filtrujemy.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"></span>
<span id="cb4-2">iris[iris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Sepal.Length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sepal.Length"</span>)] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 118 × 2</span>
<span style="color: #555555;">#&gt;</span>    <span style="font-weight: bold;">Species</span> <span style="font-weight: bold;">Sepal.Length</span>
<span style="color: #555555;">#&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;fct&gt;</span>          <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span> setosa           5.1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span> setosa           5.4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span> setosa           5.4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span> setosa           5.8
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span> setosa           5.7
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span> setosa           5.4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span> setosa           5.1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span> setosa           5.7
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span> setosa           5.1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span> setosa           5.4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 108 more rows</span>
</code></pre>
</div>
</div>
<p>Powyższa funkcja filtruje wiersze, w których <code>Sepal.Length</code> jest większe niż 5 oraz wybiera tylko kolumny <code>Species</code> i <code>Sepal.Length</code>. Zapis ten jest zwięzły, ale niewygodny w pisaniu i jeszcze trudniejszy w czytaniu. Całość przekonwertowałem jeszcze na <code>tibble</code>, żeby się ładniej wyświetlało. Dokładnie ten sam efekt uzyskamy pisząc:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">iris <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(Species, Sepal.Length) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Sepal.Length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 118 × 2</span>
<span style="color: #555555;">#&gt;</span>    <span style="font-weight: bold;">Species</span> <span style="font-weight: bold;">Sepal.Length</span>
<span style="color: #555555;">#&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;fct&gt;</span>          <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span> setosa           5.1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span> setosa           5.4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span> setosa           5.4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span> setosa           5.8
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span> setosa           5.7
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span> setosa           5.4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span> setosa           5.1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span> setosa           5.7
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span> setosa           5.1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span> setosa           5.4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 108 more rows</span>
</code></pre>
</div>
</div>
<p>I to da się czytać! Wszystko jest jasne, ładne i wygodne w pisaniu. Dlatego uwielbiam tidyverse i uważam, że to od tidyverse należy zaczynać naukę R. Klasyczny R jest bardzo informatyczny, nieznośny w czytaniu i pisaniu i trudno się go uczyć, zwłaszcza jako pierwszego kontaktu z programowaniem.</p>
<p>Zauważmy jednak pewien szczegół w tym zapisie. Nazwy kolumn są tutaj zapisane tak, jak wszystkie inne obiekty. Nie są to dosłowne ciągi znaków, nie są to pojedyncze kolumny (<code>iris$Species</code>), to są po prostu nazwy. Nie jest to typowe zachowanie w R. Jeśli zrobimy coś takiego:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> [1] 36
</code></pre>
</div>
</div>
<p>…to R widząc wewnątrz <code>sum()</code> coś, co wygląda jak obiekt, próbuje ten obiekt znaleźć i wstawić do funkcji. Dzięki temu efekt jest ten sam, co w przypadku zapisu <code>sum(1:8)</code>. Możemy sobie wyobrazić, że wstawiając do funkcji <code>x</code> dajemy R pudełeczko, w którym zamknięte są liczby od 1 do 8. Gdy R ma policzyć sumę, naturalnie otwiera to pudełeczko, wyciąga te liczby i sumuje.</p>
</section>
<section id="lazy-evaluation" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> <em>Lazy evaluation</em></h1>
<p>Co ciekawe otwiera to pudełeczko dopiero wtedy, gdy już koniecznie musi, bo każemy mu coś z tym zrobić.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">oszukujemy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(liczba, niecny_fortel) {</span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(liczba <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb7-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (liczba <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb7-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(niecny_fortel)</span>
<span id="cb7-5">    }</span>
<span id="cb7-6">}</span>
<span id="cb7-7"></span>
<span id="cb7-8">jakas_liczba <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oszukujemy</span>(jakas_liczba, to_nie_istnieje)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> [1] 8
</code></pre>
</div>
</div>
<p>Po zdefiniowaniu funkcji daliśmy R dwa pudełeczka. Jedno z etykietą <code>jakas_liczba</code>, drugie z etykietą <code>niecny_fortel</code>. Wydaliśmy polecenie wykonania naszej instrukcji z tymi dwoma pudełeczkami. Po pierwsze R miał w konsoli wydrukować zawartość pierwszego pudełeczka powiększoną o 3, co też zrobił. Żeby to zrobić, musiał to pierwsze pudełeczko otworzyć i znalazł tam 5, w związku z czym wydrukował 8. Następnie przeszedł do instrukcji warunkowej. Sprawdził czy podana przez nas liczba (tj. 5) jest większa niż 10. Że nie jest, to zignorował całkowicie, co było w klamrach. Zwróćmy uwagę, że funkcja zakończyła pracę bez błędu. Dlaczego miałby pojawić się błąd? Bo zmienna <code>to_nie_istnieje</code>, bez zaskoczenia, nie istnieje. Używając naszej metafory, daliśmy R puste pudełeczko. Ale R się nie zorientował, bo w ogóle nie musiał tego pudełeczka otwierać. Co się stanie, jeśli otworzy?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oszukujemy</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, to_nie_istnieje)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> [1] 15
</code></pre>
</div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> Error in eval(expr, envir, enclos): nie znaleziono obiektu 'to_nie_istnieje'
</span></code></pre>
</div>
</div>
<p>Tym razem podaliśmy liczbę 12. Ponieważ 12 jest większe niż 10, R odczytał polecenie, że ma zawartość drugiego pudełka wydrukować w konsoli. Otworzył więc to pudełko, zorientował się, że jest puste i wtedy dopiero zaczął krzyczeć. Ta właściwość R, że otwiera pudełka dopiero wtedy, gdy są potrzebne, określana jest jako <em>lazy evaluation</em>. Za moment pokażę, jak możemy to wykorzystać.</p>
</section>
<section id="tidy-eval-ciąg-dalszy" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Tidy Eval (ciąg dalszy)</h1>
<p>Ten standardowy porządek do góry nogami wywraca tidyverse. Zwróćmy uwagę znów na przykład z wybieraniem kolumn i filtrowaniem. Podaliśmy R jakieś pudełka, które w gruncie rzeczy są puste. W naszym środowisku nie ma takiego obiektu jak <code>Sepal.Length</code>. Owszem jest taka kolumna w ramce danych <code>iris</code>, ale ramka danych sama w sobie jest niejako pudłem. Jeśli chcemy powiedzieć R „Przynieś mi pudełko <code>Sepal.Length</code> z pudła <code>iris</code> normalnie powinniśmy zapisać <code>iris$Sepal.Length</code><sup>5</sup>. A jednak funkcje takie jak <code>filter()</code> czy <code>select()</code> w jakiś sposób same ogarniają, że podajemy im nazwy kolumn, a nie obiekty i że mają tych kolumn szukać wewnątrz <code>iris</code>.</p>
<p>To nasze otwieranie pudełek nazywa się&nbsp;w informatyce <em>evaluation</em> i dokładnie oznacza znajdowanie wartości jakiegoś wyrażenia (np. że wyrażenie <code>jakas_liczba</code> ma wartość 5 albo że wyrażenie <code>sum(1:3)</code> ma wartość 6). Ta niestandardowa ewaluacja, którą wykorzystują pakiety wchodzące w skład tidyverse i którą niemo uznajemy za standard we współczesnym kodowaniu w R, nazywa się <em>Tidy Evaluation</em> albo w skrócie <em>Tidy Eval</em>. Pisanie funkcji tak, żeby potrafiły korzystać z Tidy Eval oraz wywoływanie funkcji w sytuacjach, gdy Tidy Eval wywołuje problemy, będzie tematem tego wpisu.</p>
<p>Istota Tidy Eval polega na tym, że możemy powiedzieć R dwie rzeczy – „nie otwieraj tego pudełka teraz” oraz „teraz możesz otworzyć to pudełko”. Możemy więc dokładnie sterować, kiedy R dokona ewaluacji danego wyrażenia. Nie wydaje się to bardzo znaczące, ale naprawdę jest.</p>
</section>
<section id="niejednoznaczność-i" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Niejednoznaczność i <code>{ }</code></h1>
<p>Nie wchodźmy na ten moment w szczegóły, <em>a propos</em> tego, jak działają funkcje tidyverse. Przyjmijmy na ten moment, że potrafią one traktować coś, co inne funkcje uznałyby za obiekt, jako nazwę kolumny. To rodzi nam potencjał do pewnej niejednoznaczności. Kiedy piszemy <code>iris$Sepal.Length</code>, to może jest to niewygodne, ale nie ma wątpliwości, o co nam chodzi. Niejednoznaczność pojawiła się po raz pierwszy, gdy w naszej funkcji <code>opisowe</code> zapisaliśmy <code>group_by(group)</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">opisowe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, group, ...) {</span>
<span id="cb10-2">  df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tutaj funkcja wariuje</span></span>
<span id="cb10-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb10-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb10-6">        ...,</span>
<span id="cb10-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb10-8">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)),</span>
<span id="cb10-9">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">M =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb10-10">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SD =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb10-11">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>skewness,</span>
<span id="cb10-12">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">K =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>kurtosis,</span>
<span id="cb10-13">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NA</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x))</span>
<span id="cb10-14">        )</span>
<span id="cb10-15">      )</span>
<span id="cb10-16">    )</span>
<span id="cb10-17">}</span></code></pre></div>
</div>
<p>Gdy zapisaliśmy tę instrukcję, nasza funkcja zwariowała, bo poszła następującą logiką: muszę w bazie danych <code>iris</code> znaleźć kolumnę <code>group</code>. Normalnie zadziałałoby to świetnie. W końcu dokładnie o to nam chodzi, gdy piszemy na przykład <code>iris %&gt;% group_by(Species)</code> – w bazie danych <code>iris</code> pogrupuj po kolumnie <code>Species</code>. Tym razem nie chodzi nam jednak o kolumnę <code>group</code> a właśnie o obiekt <code>group</code> i to, co w sobie zawiera – nazwę kolumny <code>Species</code>.</p>
<p>Rozszerzmy trochę naszą metaforę z pudełkami. Gdy wywołujemy funkcję, tak naprawdę mamy dwa pudełka. Lepiej to widać, jak zapiszemy naszą funkcję tak:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Przypadek 1.</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log10</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> [1] 2
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Przypadek 2.</span></span>
<span id="cb12-3">liczba <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log10</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> liczba)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> [1] 2
</code></pre>
</div>
</div>
<p>Efekt działania obu tych wywołań jest taki sam – jest nim logarytm dziesiętny ze 100, czyli 2. W pierwszym wypadku wpakowaliśmy 100 do funkcji bezpośrednio. Innymi słowy do pudełka z napisem <code>x</code> wpakowaliśmy liczbę 100. <code>x</code> To nazwa (jedynego) argumentu funkcji <code>log10()</code>. W drugim przypadku wpakowaliśmy liczbę 100 do pudełka z napisem <code>liczba</code> i dopiero to pudełko chcemy włożyć do pudełka <code>x</code>. Ale R nie lubi matrioszek. R nie włoży pudełka do pudełka. Zanim R włoży coś do pudełka <code>x</code>, to to rozpakuje. Do samego końca. To jest standardowy mechanizm ewaluacji – rozpakuj do końca, aż nie dostaniesz czegoś konkretnego. Jeśli pudełko <code>liczba</code> byłoby puste, R miałby problem.</p>
<p>Funkcje korzystające z Tidy Eval działają trochę inaczej. Gdy R przynosi im pudełko <code>x</code>, wyciąga z niego pudełko <code>liczba</code> i mówi “O, drugie pudełko. Czekaj, rozpakuję ci to”, na co taka funkcja <code>group_by()</code> odpowiada “Nie, spoko, poradzę sobie”. Dlatego R podaje jej samo pudełko <code>liczba</code>. Funkcja <code>group_by()</code> bierze to pudełko, czyta etykietę i wie, że ma szukać w bazie danych kolumny, co się nazywa “liczba”. Skąd wie, to pomińmy na teraz. Można więc powiedzieć, że standardowa ewaluacja to “rozpakowuj do końca”, a Tidy Eval to “nie rozpakowuj”.</p>
<p>Problem pojawia się wtedy, gdy piszemy własną funkcję, gdzie chcemy wykorzystać funkcję z Tidy Eval. Gdy w naszej funkcji <code>opisowe</code> wywołujemy <code>group_by(group)</code>, to <code>group_by()</code> posłusznie nie rozpakowuje <code>group</code>, tylko szuka <code>group</code> w bazie danych. Chcemy więc powiedzieć funkcji <code>group_by()</code> “Nie, nie. To rozpakuj, to jest argument.”. Właśnie to uzyskamy za pomocą operatora <code>{ }</code> (czytane <em>curly curly</em>). <code>group_by()</code> będzie wiedziało, że to jest do rozpakowania. Dokonajmy więc pierwszej modyfikacji naszej funkcji <code>opisowe</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">opisowe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, group, ...) {</span>
<span id="cb13-2">  df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>({{ group }}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb13-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb13-6">        ...,</span>
<span id="cb13-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb13-8">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)),</span>
<span id="cb13-9">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">M =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb13-10">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SD =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb13-11">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>skewness,</span>
<span id="cb13-12">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">K =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>kurtosis,</span>
<span id="cb13-13">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NA</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x))</span>
<span id="cb13-14">        )</span>
<span id="cb13-15">      )</span>
<span id="cb13-16">    )</span>
<span id="cb13-17">}</span>
<span id="cb13-18"></span>
<span id="cb13-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">opisowe</span>(iris, Species, Sepal.Width, Sepal.Length)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BBBB00; font-weight: bold;">Error</span><span style="color: #BB0000; font-weight: bold;"> in `summarise()`:</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">ℹ</span><span style="color: #BB0000;"> In argument: `across(...)`.
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">ℹ</span><span style="color: #BB0000;"> In group 1: `Species = setosa`.
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Caused by error in `across()`:</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BBBB00;">!</span><span style="color: #BB0000;"> Can't compute column `Sepal.Width_N`.
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Caused by error:</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BBBB00;">!</span><span style="color: #BB0000;"> nie znaleziono obiektu 'Sepal.Length'
</span></code></pre>
</div>
</div>
<p>Może i ciągle nie działa, ale dostaliśmy inny błąd! To naprawdę jest powód do radości, jak się robi cokolwiek związanego z komputerami.</p>
<p>Jeśli chodzi o formatowanie, to mogę to zapisać jako <code>{group}</code> albo <code>{ group }</code>. Zazwyczaj nie stawiamy spacji po nawiasach, ale operator <code>{ }</code> jest wyjątkiem. Obie formy zadziałają, ale żeby podkreślić szczególne działanie tego operatora <a href="https://style.tidyverse.org/syntax.html?q=%7B%7B#embracing"><em>The tidyverse style guide</em></a> zaleca, by stawiać te spacje.</p>
</section>
<section id="quoting-i-unquoting" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> <em>Quoting</em> i <em>unquoting</em></h1>
<p>To, co w poprzednim akapicie zrobiliśmy za pomocą <code>{ }</code> tak naprawdę składa się z dwóch kroków. Po pierwsze musieliśmy powiedzieć R, żeby nie rozpakowywał tego pudełka sam. Po drugie musimy powiedzieć funkcji <code>group_by()</code>, żeby ona to pudełko rozpakowała. Zaklejanie pudełka tak, żeby R nie mogło go odpakować nazywa się <em>quoting</em> (branie w cudzysłów). Funkcje typu <code>select()</code>, <code>filter()</code>, <code>group_by()</code>, <code>summarise()</code>, <code>across()</code> itd., czyli takie które stosują <em>quoting</em>, a które wcześniej nazywałem funkcjami z Tidy Eval, bardziej formalnie nazywają się <em>quoting functions</em>. Polecenie dla <em>quoting function</em>, by odpakowała tak zaklejone pudełko, nazywa się <em>unquoting</em>. Mówiąc bardziej formalnie – <em>quoting</em> to przyjmowanie kodu bez jego wykonywania, zatrzymywanie go. <em>Unquoting</em> to wykonywanie wcześniej zatrzymanego kodu.</p>
<p>Obie te czynności wykonujemy jednocześnie wygodnym operatorem <code>{ }</code>, ale możemy (a czasem musimy) wykonać je też osobno. Dlatego też teraz omówimy sobie serię funkcji za pomocą których możemy wykonać <em>quoting</em>, a następnie <em>unquoting</em>. Wykorzystamy sobie tutaj funkcje wdrażane przez niewielki acz przepotężny pakiet <code>rlang</code> należący do rodziny tidyverse. Base-R też potrafi te rzeczy robić, ale <code>rlang</code> nie dość, że jest standardem, to jeszcze jest łatwiejszy do zrozumienia.</p>
</section>
<section id="expr-i-quo" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> <code>expr()</code> i <code>quo()</code></h1>
<p>Najbardziej bazową funkcją wykonującą <em>quoting</em> jest funkcja <code>expr()</code>. Jeśli wrzucamy do niej jakieś wyrażenie, zwraca ona nam to wyrażenie w „rozbrojonej” (w naszej metaforze zaklejonej taśmą) formie.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> 5 + 3
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(jakis_argument <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> jakis_argument + 3
</code></pre>
</div>
</div>
<p>Pierwsze wywołanie zwraca nam dosłowne <code>5 + 3</code>, a nie <code>8</code> ponieważ <code>expr()</code> zatrzymuje wykonywanie dodawania. To wyrażenie jest teraz <em>quoted</em> i żeby dostać 8, musimy je wywołać ręcznie. Zwróćmy uwagę, że drugie wyrażenie też się wykonuje i zwraca dosłownie <code>jakis_argument + 3</code> mimo, że takiej zmiennej nie ma przypisanej. Dzieje się tak dlatego, że odpakowanie pudełka z napisem <code>jakis_argument</code> również zostało zatrzymane.</p>
<p>Drugą funkcją wykonującą <em>quoting</em> jest <code>quo()</code>. Co ciekawe, nie jest to skrót od <em>quoting</em> a od <em>quosure</em> czyli <em>quoted closure</em>. Od <code>expr()</code> różni się tym, że poza wyrażeniem zapisuje też jego <strong>środowisko</strong> (<em>environment</em>). Środowisko to zbiór zmiennych, w otoczeniu których wykonywana jest funkcja. Innymi słowy to w środowisku zapisywana jest informacja, że <code>x = 5</code>, gdy robimy <code>x &lt;- 5</code> i to ze środowiska ten <code>x</code> jest brany, kiedy trzeba potem trzeba znaleźć jego wartość. Można to sobie wyobrazić jako różne półki, na których stoją pudełka ze zmiennymi. Dla zobrazowania zagadka.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-2"></span>
<span id="cb16-3">razy_argument <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(argument) {</span>
<span id="cb16-4">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb16-5">    x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> argument</span>
<span id="cb16-6">}</span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">razy_argument</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<p>Jaki będzie wynik działania tej funkcji? <code>10</code> czy <code>200</code>? Pytanie brzmi, co nasza funkcja potraktuje jako <code>x</code> – 5 czy 200? Jest to pytanie o tzw. <em>scope</em> czy też zasięg funkcji, ale można na to spojrzeć też jak na pytanie o środowisko. Z której półki funkcja weźmie pudełko z napisem <code>x</code>? Odpowiedź brzmi – z najbliższej. W tym wypadku najbliższa półka to środowisko samej funkcji, czyli <code>x = 100</code>, a więc wynik to <code>200</code>. Zachęcam do zastanowienia się, co będzie wynikiem <code>razy_argument(x)</code>? Odpowiedź można sprawdzić w swojej konsoli.</p>
<p>Obiekt typu <em>quosure</em> zapisuje więc nie tylko wyrażenie, ale też informację, w jakim środowisku zostało to wyrażenie zatrzymane. Załóżmy, że stworzyliśmy takie wyrażenie w środowisku globalnym.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">nasz_quosure <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quo</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x))</span>
<span id="cb17-2"></span>
<span id="cb17-3">nasz_quosure</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="font-weight: bold;">&lt;quosure&gt;</span>
<span style="color: #555555;">#&gt;</span> expr: ^sum(x)
<span style="color: #555555;">#&gt;</span> env:  global
</code></pre>
</div>
</div>
<p>Widzimy, że poza samym wyrażeniem <code>sum(x)</code> <em>quosure</em> zawiera też informację o środowisku. Jeśli teraz wykonamy to wyrażenie (o tym jak wykonywać będzie później), to R weźmie <code>x</code> zawsze z półki <code>global</code>, a nie z najbliższej.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">quosure_z_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quo</span>(x)</span>
<span id="cb18-2"></span>
<span id="cb18-3">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb18-4"></span>
<span id="cb18-5">dodaj_dwa <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(liczba) {</span>
<span id="cb18-6">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb18-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval_tidy</span>(quosure_z_x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ewaluacja quosure ręcznie</span></span>
<span id="cb18-8">}</span>
<span id="cb18-9"></span>
<span id="cb18-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dodaj_dwa</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> [1] 7
</code></pre>
</div>
</div>
</section>
<section id="enquo-quos-i-enquos-oraz-pokrewne" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> <code>enquo()</code>, <code>quos()</code> i <code>enquos()</code> oraz pokrewne</h1>
<p>Obie te funkcje posiadają swoje funkcje pokrewne. Funkcja z przedrostkiem <em>en-</em> służy do zatrzymywania argumentów funkcji. Dlatego częściej będziemy wykorzystywać <code>enquo()</code> i <code>enexpr()</code> niż <code>quo()</code> i <code>expr()</code>. Funkcja <code>enquo()</code> nie jest tak drastyczna w zatrzymywaniu. Funkcja <code>quo()</code> zatrzymuje kod natychmiast, a funkcja <code>enquo()</code> raz chociaż wyjmuje coś z pudełka. Zobaczmy to na praktycznym przykładzie.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">wybierz_z_quo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, col) {</span>
<span id="cb19-2">    kolumna <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quo</span>(col)</span>
<span id="cb19-3">    df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>kolumna) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wykrzykniki wykonują, nie przejmuj się</span></span>
<span id="cb19-5">}</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wybierz_z_quo</span>(iris, Species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> Error in eval(expr, envir, enclos): nie znaleziono obiektu 'Species'
</span></code></pre>
</div>
</div>
<p>Gdy próbujemy wykonać <code>quo(col)</code>, próbuje się ono wykonać do końca, czyli dostajemy to samo, jakbyśmy napisali po prostu <code>select(df, col)</code>. Efekt, który chcemy uzyskać, uzyskamy z funkcją <code>enquo()</code> która służy konkretnie do chwytania argumentów.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">wybierz_z_enquo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, col) {</span>
<span id="cb20-2">    kolumna <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(col)</span>
<span id="cb20-3">    df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>kolumna) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wykrzykniki wykonują, nie przejmuj się</span></span>
<span id="cb20-5">}</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wybierz_z_enquo</span>(iris, Species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>   Species
<span style="color: #555555;">#&gt;</span> 1  setosa
<span style="color: #555555;">#&gt;</span> 2  setosa
<span style="color: #555555;">#&gt;</span> 3  setosa
<span style="color: #555555;">#&gt;</span> 4  setosa
<span style="color: #555555;">#&gt;</span> 5  setosa
<span style="color: #555555;">#&gt;</span> 6  setosa
</code></pre>
</div>
</div>
<p>Jak widzimy, tym razem kod się wykonał. Funkcja <code>quo()</code> zatrzymuje więc otwieranie pudełek w danym momencie, ale gdy każe jej się je otwierać, będzie otwierała do końca. Funkcja <code>enquo()</code>, gdy wykonana, otworzy tylko to, co jest w tym pudełku schowane i nie otwierając dalej przekaże zawartość <code>select()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">quo_vs_enquo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb21-2">    x_quo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quo</span>(x)</span>
<span id="cb21-3">    x_enquo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(x)</span>
<span id="cb21-4">    </span>
<span id="cb21-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enquo(x):"</span>)</span>
<span id="cb21-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x_enquo)</span>
<span id="cb21-7">    </span>
<span id="cb21-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quo(x):"</span>)</span>
<span id="cb21-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x_quo)</span>
<span id="cb21-10">}</span>
<span id="cb21-11"></span>
<span id="cb21-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quo_vs_enquo</span>(argument)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> [1] "enquo(x):"
<span style="color: #555555;">#&gt;</span> <span style="font-weight: bold;">&lt;quosure&gt;</span>
<span style="color: #555555;">#&gt;</span> expr: ^argument
<span style="color: #555555;">#&gt;</span> env:  global
<span style="color: #555555;">#&gt;</span> [1] "quo(x):"
<span style="color: #555555;">#&gt;</span> <span style="font-weight: bold;">&lt;quosure&gt;</span>
<span style="color: #555555;">#&gt;</span> expr: <span style="color: #0000BB;">^x</span>
<span style="color: #555555;">#&gt;</span> env:  <span style="color: #0000BB;">0x55ac0242f938</span>
</code></pre>
</div>
</div>
<p>Jak widzimy, <code>enquo()</code> zatrzymało to co chcemy, czyli <code>argument</code>, a szybkie w zatrzymywaniu <code>quo()</code> zatrzymało samo <code>x</code>. Dodatkowo <code>enquo()</code> wiedziało, że chodzi o argument ze środowiska <code>global</code>, a <code>quo()</code> zatrzymało <code>x</code> w środowisku funkcji. Mówiąc krótko – jeśli chcemy zatrzymać argument funkcji, zawsze używajmy <code>enquo()</code> albo <code>enexpr()</code> (lepiej <code>enquo()</code>).</p>
<p>Drugą pokrewną funkcję otrzymamy dodają do <code>quo()</code> lub <code>expr()</code> przyrostek <em>-s</em>. Otrzymane w ten sposób funkcje <code>quos()</code> i <code>exprs()</code> tym się różnią od swoich korzeni, że mogą zatrzymywać wiele pudełek naraz i przechowywać je w postaci listy. Przydaje się to przede wszystkim, gdy mamy jako argument wielokropek <code>...</code>, w którym z definicji może być wiele rzeczy.</p>
<p>Obie pochodne można połączyć uzyskując w ten sposób <code>enquos()</code> i <code>enexprs()</code> służące do zatrzymywania wielu (<em>-s</em>) argumentów (<em>en-</em>) za jednym zamachem.</p>
</section>
<section id="i" class="level1" data-number="9">
<h1 data-number="9"><span class="header-section-number">9</span> <code>!!</code> i <code>!!!</code></h1>
<p>Wbrew pozorom tytuł tego podrozdziału to nie próba odwzorowania emocji czytającego, tylko rzeczywiście wykorzystywane operatory. Wiemy już, jak ręcznie zaklejać pudełka tak, żeby R ich sam nie otwierał w złym momencie. Teraz musimy wiedzieć, jak kazać mu je otworzyć, kiedy potrzebujemy. Podstawowym operatorem mówiącym „otwórz” jest <code>!!</code> czytane <em>bang-bang</em><sup>6</sup>. Możemy więc wcześniej zaklejone pudełko otworzyć strzelając do niego.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">wybierz_z_enquo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, col) {</span>
<span id="cb22-2">    kolumna <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(col)</span>
<span id="cb22-3">    df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>kolumna) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wykrzykniki wykonują, teraz się przejmuj</span></span>
<span id="cb22-5">}</span>
<span id="cb22-6"></span>
<span id="cb22-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wybierz_z_enquo</span>(iris, Species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>   Species
<span style="color: #555555;">#&gt;</span> 1  setosa
<span style="color: #555555;">#&gt;</span> 2  setosa
<span style="color: #555555;">#&gt;</span> 3  setosa
<span style="color: #555555;">#&gt;</span> 4  setosa
<span style="color: #555555;">#&gt;</span> 5  setosa
<span style="color: #555555;">#&gt;</span> 6  setosa
</code></pre>
</div>
</div>
<p>Co ciekawe, równie dobrze moglibyśmy zapisać:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">wybierz_z_enquo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, col) {</span>
<span id="cb23-2">    df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(col))</span>
<span id="cb23-4">}</span>
<span id="cb23-5"></span>
<span id="cb23-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wybierz_z_enquo</span>(iris, Species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>   Species
<span style="color: #555555;">#&gt;</span> 1  setosa
<span style="color: #555555;">#&gt;</span> 2  setosa
<span style="color: #555555;">#&gt;</span> 3  setosa
<span style="color: #555555;">#&gt;</span> 4  setosa
<span style="color: #555555;">#&gt;</span> 5  setosa
<span style="color: #555555;">#&gt;</span> 6  setosa
</code></pre>
</div>
</div>
<p>…czyli za jednym zamachem (hehe) zatrzymać otwierające pudełka R i otworzyć to pudełko już na pewno wewnątrz <code>select()</code>. Zwróćmy uwagę, że to jest dokładnie to, co robił operator <code>{ }</code>, który w gruncie rzeczy jest wygodniejszym zapisem <code>!!enquo()</code>.</p>
<p>Poza zwykłym <em>bang-bang</em> <code>!!</code> mamy też <em>bang-bang-bang</em> <code>!!!</code> i to nawet nie jest żart. Przypomnij sobie funkcję <code>enquos()</code>, która zatrzymywała wiele argumentów naraz w postaci listy. Jeśli coś takiego spróbujemy odpakować, to dostaniemy listę. Często zaś nie chcemy dostać listy, tylko samą jej zawartość po kolei. Innymi słowy chcę dostać <code>select(iris, Sepal.Width, Sepal.Length)</code>, a nie <code>select(iris, list(Sepal.Width, Sepal.Length))</code>. Do tego służy właśnie <code>!!!</code>, który bierze listę zatrzymanych wyrażeń, tnie ją na pojedyncze pudełka i każde z nich otwiera. Tym samym to jest dokładnie to, co przyda nam się do załatwienia argumentu <code>...</code> w naszej funkcji <code>opisowe</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">opisowe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, group, ...) {</span>
<span id="cb24-2">  kolumny_do_policzenia <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquos</span>(...)</span>
<span id="cb24-3"></span>
<span id="cb24-4">  df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb24-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>({{ group }}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb24-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb24-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb24-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>kolumny_do_policzenia),</span>
<span id="cb24-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb24-10">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)),</span>
<span id="cb24-11">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">M =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb24-12">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SD =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb24-13">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>skewness,</span>
<span id="cb24-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">K =</span> agricolae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>kurtosis,</span>
<span id="cb24-15">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NA</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x))</span>
<span id="cb24-16">        )</span>
<span id="cb24-17">      )</span>
<span id="cb24-18">    )</span>
<span id="cb24-19">}</span>
<span id="cb24-20"></span>
<span id="cb24-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">opisowe</span>(iris, Species, Sepal.Width, Sepal.Length)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 3 × 13</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">Species</span> <span style="font-weight: bold;">Sepal.Width_N</span> <span style="font-weight: bold;">Sepal.Width_M</span> <span style="font-weight: bold;">Sepal.Width_SD</span> <span style="font-weight: bold;">Sepal.Width_A</span> <span style="font-weight: bold;">Sepal.Width_K</span>
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;fct&gt;</span>           <span style="color: #555555; font-style: italic;">&lt;int&gt;</span>         <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>          <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>         <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>         <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> setosa             50          3.43          <span style="color: #555555;">0.</span>379        <span style="color: #555555;">0.0</span>41<span style="text-decoration: underline;">2</span>         <span style="color: #555555;">0.</span>955
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">2</span> versic…            50          2.77          <span style="color: #555555;">0.</span>314       -<span style="color: #555555;">0.</span><span style="color: #BB0000;">363</span>         -<span style="color: #555555;">0.</span><span style="color: #BB0000;">366</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">3</span> virgin…            50          2.97          <span style="color: #555555;">0.</span>322        <span style="color: #555555;">0.</span>366          <span style="color: #555555;">0.</span>706
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 7 more variables: </span><span style="color: #555555; font-weight: bold;">Sepal.Width_NA</span><span style="color: #555555;"> &lt;int&gt;, </span><span style="color: #555555; font-weight: bold;">Sepal.Length_N</span><span style="color: #555555;"> &lt;int&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">Sepal.Length_M</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">Sepal.Length_SD</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">Sepal.Length_A</span><span style="color: #555555;"> &lt;dbl&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">Sepal.Length_K</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">Sepal.Length_NA</span><span style="color: #555555;"> &lt;int&gt;</span>
</code></pre>
</div>
</div>
<p>W tym wypadku nasze <code>kolumny_do_policzenia</code> pojawiają się wewnątrz <code>across()</code>, więc musiałem użyć <code>c()</code> (patrz <a href="./posts/podstawy_R.qmd#sec-across">tutaj</a>). Inny przykład, bardziej typowy wyglądałby tak:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">srednia_z_kolumny <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, col, ...) {</span>
<span id="cb25-2">    grupy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquos</span>(...)</span>
<span id="cb25-3">    df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>grupy) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">M =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>({{ col }}))</span>
<span id="cb25-6">}</span>
<span id="cb25-7"></span>
<span id="cb25-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">srednia_z_kolumny</span>(iris, Sepal.Length, Species)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 3 × 2</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">Species</span>        <span style="font-weight: bold;">M</span>
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;fct&gt;</span>      <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> setosa      5.01
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">2</span> versicolor  5.94
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">3</span> virginica   6.59
</code></pre>
</div>
</div>
<p>W tym wypadku używamy <code>enquos()</code>, żeby zatrzymać listę kolumn, po których będziemy grupować, a następnie rozpakowujemy ją już wewnątrz funkcji <code>group_by()</code>. <code>...</code> zawiera wiele rzeczy, więc używam <code>enquos()</code> i <code>!!!</code> zamiast <code>enquo()</code> i <code>!!</code>. Ponieważ w <code>group_by()</code> wypisuję grupy po prostu po przecinku, to nie muszę nic dokładać.</p>
<p>Co ważne, operatory <code>!!</code> i <code>!!!</code> działają tylko w funkcjach, które same z siebie wykorzystują Tidy Eval. Jeśli naprawdę i absolutnie jest konieczność, żeby wykonać <em>unquoting</em> w innej funkcji, to warto się upewnić, czy string nie zadziała i użyć <code>as_label()</code>. Funkcje bez Tidy Eval i tak nie potrafią operować na suchych nazwach kolumn, więc i tak by wyrzuciły błąd, że obiektu nie znaleziono. Jeśli jednak konieczność z jakiegoś powodu nie ustępuje, najpewniej rozwiązaniem jest tutaj funkcja <code>eval_tidy()</code>.</p>
</section>
<section id="parsing-i-deparsing" class="level1" data-number="10">
<h1 data-number="10"><span class="header-section-number">10</span> <em>Parsing</em> i <em>deparsing</em></h1>
<p>Ostatnie operacje, które tutaj omówię, to <em>parsing</em> i <em>deparsing</em>. Czasami chcemy zmienić naszą, powiedzmy, nazwę kolumny w surowy tekst. Dla przykładu, piszemy funkcję generującą wykres i chcemy wykorzystać jakoś nazwę kolumny, żeby podpisać osie. Załóżmy, że chcemy zamienić wcześniej kropki na spacje, więc domyślne opcje zwracane przez <code>ggplot2</code> nie są wystarczające. Musimy mieć więc dostęp do nazwy kolumny, którą użytkownik podał jako argument, ale nazwy jako tekst. Dokonać tego mogą nawet trzy funkcje – <code>as_label()</code>, <code>as_name()</code> i <code>expr_text()</code>. Różnią się pewnymi technikaliami, którymi nie ma co zaprzątać sobie głowy na początkowym etapie. Jako pewien skrót mogę powiedzieć – najlepiej jest użyć <code>as_label()</code>, a jeśli będzie potrzeba, to można zacząć ogarniać użycie innych funkcji. Obie te funkcje przyjmują obiekty typu <code>expr</code> albo <code>quo</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">wykresik <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, X, Y) {</span>
<span id="cb26-2">    X <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(X)</span>
<span id="cb26-3">    Y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(Y)</span>
<span id="cb26-4">    </span>
<span id="cb26-5">    nazwa_X <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_label</span>(X) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb26-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dosłowne kropki ("\\.") zamień na spacje</span></span>
<span id="cb26-7">    nazwa_Y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_label</span>(Y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb26-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb26-9">    nazwa_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_label</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(df))</span>
<span id="cb26-10">    tytul <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(nazwa_X, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, nazwa_Y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" in "</span>, nazwa_df, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" database"</span>)</span>
<span id="cb26-11">    </span>
<span id="cb26-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>X, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>Y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb26-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_jitter</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> tytul, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> nazwa_X, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> nazwa_Y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-16">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># koundy/ggplot_theme_Publication na GitHubie</span></span>
<span id="cb26-17">}</span>
<span id="cb26-18"></span>
<span id="cb26-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wykresik</span>(iris, Sepal.Width, Sepal.Length)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> `geom_smooth()` using formula = 'y ~ x'
</span></code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/metaprogramowanie_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wykresik</span>(USArrests, UrbanPop, Murder)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> `geom_smooth()` using formula = 'y ~ x'
</span></code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/metaprogramowanie_files/figure-html/unnamed-chunk-24-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Ta czynność, którą tutaj wykonałem, nazywa się <em>deparsing</em>. Skoro istnieje <em>deparsing</em>, to pewnie istnieje też <em>parsing</em>. Rzeczywiście, istnieje i jest to czynność odwrotna – dostajemy dosłowny ciąg znaków typu <code>"sum(x)"</code> i przekształcamy go w prawdziwe wywołanie <code>sum(x)</code>. W zależności od tego, co chcemy otrzymać, możemy użyć funkcji <code>parse_expr()</code> lub <code>parse_quo()</code>.</p>
</section>
<section id="kilka-przykładów-z-życia" class="level1" data-number="11">
<h1 data-number="11"><span class="header-section-number">11</span> Kilka przykładów z życia</h1>
<p>Kiedy się tego uczyłem, brakowało mi rzeczywistych przykładów, choćby były trudne. Także tutaj podrzucam kilka ze swojego pakietu <a href="https://github.com/jakub-jedrusiak/mtscr"><code>mtscr</code></a>.</p>
<section id="wywoływanie-funkcji-z-zatrzymanymi-argumentami" class="level2" data-number="11.1">
<h2 data-number="11.1" class="anchored" data-anchor-id="wywoływanie-funkcji-z-zatrzymanymi-argumentami"><span class="header-section-number">11.1</span> Wywoływanie funkcji z zatrzymanymi argumentami</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">mtscr_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, id_column, item_column, score_column) {</span>
<span id="cb28-2">  id_column <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ensym</span>(id_column)</span>
<span id="cb28-3">  item_column <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ensym</span>(item_column)</span>
<span id="cb28-4">  score_column <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ensym</span>(score_column)</span>
<span id="cb28-5"></span>
<span id="cb28-6">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mtscr_prepare</span>( <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `mtscr_prepare` wykorzystuje Tidy Eval!</span></span>
<span id="cb28-7">    df,</span>
<span id="cb28-8">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>id_column,</span>
<span id="cb28-9">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>item_column,</span>
<span id="cb28-10">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>score_column,</span>
<span id="cb28-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">minimal =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb28-12">  )</span>
<span id="cb28-13">}</span></code></pre></div>
</div>
<p>Użyłem tu <code>ensym()</code>, ale spokojnie mogłoby być <code>enquo()</code>. Funkcja wywołuje inną funkcję z pakietu, żeby przygotować dane do modelowania. Wszystkie nazwy kolumn na początku „rozbrajam” i ponownie „uzbrajam” już wewnątrz <code>mtscr_prepare()</code>. Jeśli byłby to tylko ten fragment kodu, mógłbym użyć operatora <code>{ }</code>, ale potem potrzebowałem wersji ręcznie „rozbrojonej”.</p>
</section>
<section id="formuły-z-nazw-kolumn" class="level2" data-number="11.2">
<h2 data-number="11.2" class="anchored" data-anchor-id="formuły-z-nazw-kolumn"><span class="header-section-number">11.2</span> Formuły z nazw kolumn</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">formulas[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.formula</span>(</span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb29-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".z_score ~ -1 + "</span>,</span>
<span id="cb29-4">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_name</span>(item_column),</span>
<span id="cb29-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" + "</span>,</span>
<span id="cb29-6">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_name</span>(item_column),</span>
<span id="cb29-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":.ordering_0 + (.ordering_0 | "</span>,</span>
<span id="cb29-8">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_name</span>(id_column),</span>
<span id="cb29-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")"</span></span>
<span id="cb29-10">  )</span>
<span id="cb29-11">)</span></code></pre></div>
</div>
<p>Tutaj wykorzystuję <code>as_name()</code>, żeby połączyć nazwy kolumn w jedną formułę potrzebną potem do modelu. Równie dobrze mógłbym użyć <code>as_label()</code>. Wyniki zapisuję na liście <code>formulas</code>.</p>
</section>
<section id="warunkowa-lista-argumentów-do-summarise" class="level2" data-number="11.3">
<h2 data-number="11.3" class="anchored" data-anchor-id="warunkowa-lista-argumentów-do-summarise"><span class="header-section-number">11.3</span> Warunkowa lista argumentów do <code>summarise()</code></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb30-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all_max"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> model_type) {</span>
<span id="cb30-3">  args[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".all_max"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_expr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max(.all_max)"</span>)</span>
<span id="cb30-4">}</span>
<span id="cb30-5"></span>
<span id="cb30-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all_top2"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> model_type) {</span>
<span id="cb30-7">  args[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".all_top2"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_expr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max(.all_top2)"</span>)</span>
<span id="cb30-8">}</span>
<span id="cb30-9"></span>
<span id="cb30-10">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-11">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb30-12">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>args,</span>
<span id="cb30-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>(groups)</span>
<span id="cb30-14">  )</span></code></pre></div>
</div>
<p>Z tego jestem zadowolony. To fragment funkcji, która daje różne instrukcje do <code>summarise()</code> w zależności od tego, czy w argumencie <code>model_type</code> jest <code>"all_max"</code>, <code>"all_top2"</code> czy <code>c("all_max", "all_top2")</code>. Kolejne instrukcje zapisuję na liście <code>args</code>, którą potem otwieram operatorem <code>!!!</code> (bo to lista). Używam tutaj też <code>parse_expr()</code>, ale to z przyczyn technicznych związanych z pakietami<sup>7</sup> raczej, niż z programowaniem. Mógłbym użyć też <code>expr(max(.all_max))</code>. Na pewno nie używam tutaj <code>enexpr()</code>, bo to nie są argumenty, tylko nazwy kolumn zapisane na sztywno.</p>
</section>
</section>
<section id="podsumowanie" class="level1" data-number="12">
<h1 data-number="12"><span class="header-section-number">12</span> Podsumowanie</h1>
<p><strong>To nie jest łatwe.</strong> Nie trzeba się martwić, jak się tego nie rozumie przy pierwszym kontakcie. Ja miałem bardzo dużo podejść, zanim w końcu to zrozumiałem, a i tak nie jestem specjalistą, znacznie więcej nie wiem, niż wiem. Zaskakująco pomocną rzeczą jest <em>cheat sheet</em> z <code>rlang</code>. Mam wrażenie, że wytłumaczył mi te rzeczy lepiej, niż poradniki, ale może to być kwestia tego, że zrozumiałem <em>cheat sheet</em>, bo czytałem poradniki. Tak czy inaczej warto sobie wydrukować go <a href="https://github.com/rstudio/cheatsheets/blob/main/tidyeval.pdf">stąd</a>. Jednocześnie najnowsza wersja jest z 2018 r. i trochę zdążyło się zmienić w międzyczasie. Dlatego nie znajdziemy tam przede wszystkim operatora <code>{ }</code>, który pojawił się dopiero w połowie 2019 r. i stał się standardem. Wielu rzeczy też tutaj nie omówiłem (chociażby operatora <code>:=</code>), ale mam nadzieję, że ten wstęp wystarczy, żeby wejście w naukę tych tematów było gładsze.</p>
<p>Zbierając to wszystko do kupy:</p>
<ol type="1">
<li>Jeśli wrzucamy do funkcji typu <code>select()</code> nazwę zmiennej, odruchowo bierze ją ona za nazwę kolumny, której często nie znajduje.</li>
<li>Podstawowym sposobem dania funkcji znać, że to nie kolumna, a zmienna do odpakowania jest <code>{ }</code>.</li>
<li><code>{ }</code> robi dwie rzeczy – <em>quoting</em>, żeby powstrzymać R przed odpakowywaniem nazwy kolumny poza funkcją typu <code>select()</code> i <em>unquoting</em>, żeby dać funkcji typu <code>select()</code> znać, że to nie kolumna, tylko ma to odpakować.</li>
<li>Obie te czynności można wykonać osobno – <em>quoting</em> przede wszystkim funkcją <code>enquo()</code>, <em>unquoting</em> przede wszystkim operatorem <code>!!</code>.</li>
<li><code>quo()</code> służy do zatrzymywania zwykłych wyrażeń, <code>enquo()</code> do zatrzymywania argumentów, <code>quos()</code> do zatrzymywania wielu rzeczy naraz, a <code>enquos()</code> do zatrzymywania wielu argumentów naraz.</li>
<li><code>!!</code> odpakowuje pojedyncze wyrażenia, a <code>!!!</code> odpakowuje listy wyrażeń. Argument <code>...</code> wymaga <code>enquos()</code> i <code>!!!</code>.</li>
<li>Można zmienić wyrażenie w string funkcją <code>as_label()</code> albo string w wyrażenie funkcją <code>parse_expr()</code>.</li>
<li>Pakietem do rozwiązywania problemów opisanych w tekście jest <code>rlang</code>, a fundamentalnym źródłem informacji <a href="https://adv-r.hadley.nz/metaprogramming.html">rozdziały 17-21. w książce <em>Advanced R</em></a> Hadleya Wickhama.</li>
</ol>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Przypisy</h2>

<ol>
<li id="fn1"><p>Czasami będziemy musieli wykorzystać <code>lst()</code>. Będą to przypadki, w których np. najpierw policzymy liczbę wszystkich przypadków w bazie (<code>N = n</code>), potem liczbę braków danych (<code>`NA` = is.na</code>), a na koniec chcemy policzyć procent brakujących (<code>p_NA = `NA` / N</code>). Chcemy więc wykorzystać nowo stworzone kolumny do stworzenia kolejnej. Zwykłe <code>list()</code> tego nie uciągnie i musimy użyć <code>lst()</code> z pakietu <code>tibble</code>.↩︎</p></li>
<li id="fn2"><p>Inne przykłady nazw niesyntaktycznych to <code>if</code>, <code>for</code>, <code>while</code>, <code>NULL</code>, nazwy zaczynające się liczbą, nazwy ze spacjami.↩︎</p></li>
<li id="fn3"><p>Bo każde jedno zagadnienie języka R najgłębiej opisuje Hadley Wickham. Zresztą jest to człowiek odpowiedzialny za pół tidyverse. Jeśli jest jakieś nazwisko ze świata R, które useR powinien znać, to jest to właśnie Hadley Wickham.↩︎</p></li>
<li id="fn4"><p>Swoją drogą, jeśli dotarliście na swojej drodze do punktu, w którym zaczynacie pisać własne funkcje i używacie ich często, to polecam oszczędzić sobie frustracji na przyszłość i od razu zorganizować te funkcje w postaci pakietu. Nie mówię, żeby go od razu wypuszczać w świat, choćby na GitHubie, ale sama struktura i dokumentacja znacząco ułatwiają życie w przyszłości. Planuję napisać na ten temat trochę więcej w przyszłości, ale podstawowym źródłem informacji w tym zakresie jest książka – a jakże – Hadleya Wickhama <a href="https://r-pkgs.org/"><em>R Packages</em></a>.↩︎</p></li>
<li id="fn5"><p>Ewentualnie, jeśli chcemy trzymać się klasycznego R, możemy użyć dziś już nieco zapomnianej funkcji <code>with()</code>, która każe R najpierw wejść do pudła <code>iris</code> i operować tym, co tam w tym pudle znajdzie. Mówiąc językiem, który wyjaśnię później, zmuszamy R do zmiany <em>środowiska</em>. Przykład wykorzystania <code>with()</code>:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(iris, iris[Sepal.Length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,])</span></code></pre></div>
↩︎</li>
<li id="fn6"><p>…<em>my baby shot me down</em>.↩︎</p></li>
<li id="fn7"><p>CRAN nie lubi, jak używa się obiektów, które nie mają globalnych definicji, dlatego krzyczał na mnie, że nie ma czegoś takiego jak <code>.all_top2</code>. Ja wiedziałem, że jest w bazie danych, kod działał, bo to potem trafiało do <code>summarise()</code>, ale CRAN ma swoje zasady. Dlatego podałem to jako string, który jest przerabiany na wyrażenie (<em>parsing</em>).↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://nieobliczalne.pl/posts/metaprogramowanie.html</guid>
  <pubDate>Thu, 04 May 2023 22:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/metaprogramowanie.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Lepiej niż ChatGPT</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/ai-research.html</link>
  <description><![CDATA[ 




<p>Jeśli jesteśmy studentami, naukowcami, popularyzatorami, musimy często przedzierać się przez morze publikacji naukowych. Zazwyczaj w tym celu korzystamy z Google Scholar, który szuka słów kluczowych w tytułach i abstraktach. Dobranie słów kluczowych tak, żeby uzyskać to i tylko to, czego potrzebujemy, to sztuka sama w sobie.</p>
<p>Załóżmy, że zauważyliśmy któregoś ranka, że lepiej się czujemy, jeśli rano wystawimy się na jasne światło. Może nie dosłownie w chwili przebudzenia, ale że nasz nastrój jest lepszy, jak rano jest jasno. Być może tak jest? Może to ewolucyjne dostosowanie do tego, żeby nie wychodzić w deszcz, bo łatwo sobie coś zrobić? Jednak czy ktoś to sprawdził? Otwieramy więc podstawowe narzędzie naukowców, <a href="https://scholar.google.com/">Google Scholar</a>, i puszczamy nasze zapytanie. Ponieważ jest to zwykła wyszukiwarka, musimy przerobić nasze zapytanie na słowa kluczowe. To właśnie umiejętność dobrania skutecznego zapytania jest najtrudniejsza w opanowaniu.</p>
<p>Wyszukujemy więc coś w rodzaju „morning sunlight mood” I nagle się okazuje, że znalezione artykuły nie mówią o tym, czego chcemy się dowiedzieć. Jeśli w ogóle mówią o świetle słonecznym i nastroju, to w chorobie dwubiegunowej, którą większość ludzi nie jest dotknięta. Większość artykułów jest też bardzo stara. Musimy więc przeformułować nasze zapytanie, może zawęzić zakres dat i szukać dalej. W końcu znajdziemy interesujący nas artykuł i śledząc cytowania (w tej pracy, ale też artykuły cytujące znaleziony przez nas artykuł) możemy dotrzeć do bogactwa literatury na ten temat. Tak to się robiło do tej pory.</p>
<section id="chatgpt" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> <a href="https://chat.openai.com/">ChatGPT</a></h1>
<p>Nagle na scenę wchodzi ChatGPT. Mamy do swojej dyspozycji potężne narzędzie, które zna wszystkie artykuły naukowe XXI wieku. Może jak mu zadamy odpowiednie pytanie, to sam nam podsunie artykuły? Nie zaszkodzi spróbować! Jeśli to zadziała, nagle nasza praca może stać się po wielokroć prostsza.</p>
<p>Okazuje się, że ChatGPT potrafi wskazać takie artykuły, ale korzystanie z niego jest opatrzone ryzykiem. Jeśli wskazane przez algorytm artykuły sprawdzimy, niechybnie okaże się, że co najmniej część z nich nie istnieje. Jest to zjawisko zwane <a href="https://en.wikipedia.org/wiki/Hallucination_(artificial_intelligence)">halucynacjami sztucznej inteligencji</a>. Ponieważ GPT to tylko model językowy, nie potrafi odróżnić istniejących artykułów od nieistniejących. Chce nam odpowiedzieć na pytanie, więc generuje odpowiedź. Z doświadczenia mogę powiedzieć, że szansa na podanie prawdziwych artykułów rośnie, jeśli poprosimy ChatGPT o dokładne cytowania. Jednak wyniki ciągle nie są zachwycające. Z jednego prostego powodu – ChatGPT nie służy do tego.</p>
</section>
<section id="consensus" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> <a href="https://consensus.app/">Consensus</a></h1>
<p>Na fali popularności AI powstało mnóstwo narzędzi o różnym, szerszym lub węższym zastosowaniu. Na przykład istnieje <a href="https://rebbe.io/">rebbe.io</a>, czyli internetowy rabin oparty o sztuczną inteligencję, któremu możemy zadawać pytania o Halachę, Torę czy ogólnie o judaizm<sup>1</sup>. Co prawda Żydów jest prawie dwa razy więcej niż naukowców, ale skoro Żydzi mają chatbota zaprojektowanego specjalnie do swoich celów, można podejrzewać, że naukowcy też mają coś bardziej specyficznego niż ChatGPT. Jednym z takich narzędzi jest <a href="https://consensus.app/">Consensus</a>.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/ai-research/Consensus-example.png" class="img-fluid"></p>
<p>Consensus to <strong>darmowa</strong> aplikacja (albo raczej strona internetowa), która wykorzystuje modele językowe jak GPT do odnajdywania artykułów naukowych na zadany temat. Wykorzystanie AI pozwala na zadanie pytania w sposób naturalnym językiem, co pozwala uniknąć godzin szukania odpowiednich słów. Co jednak ciekawe, Consensus nie tylko znajduje artykuły, ale też <strong>konkretne fragmenty tych artykułów</strong>, które sztuczna inteligencja uznaje za potencjalnie użyteczne.</p>
<p>Dodatkowo jeśli zadajemy konkretne pytanie, Consensus podsumuje nam kilka najważniejszych artykułów. Jeśli zadaliśmy pytanie typu tak/nie, Consensus poda nam też (o ile będzie w stanie) jaka część znalezionych przez niego artykułów popiera naszą tezę, a jaka część jej nie popiera.</p>
</section>
<section id="elicit" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> <a href="https://elicit.org/">Elicit</a></h1>
<p>Kolejnym darmowym narzędziem AI dla naukowców jest <a href="https://elicit.org/">Elicit</a>. Ponownie możemy zadać pytanie naturalnym językiem i ponownie dostaniemy w odpowiedzi listę artykułów. Tym razem jednak na pierwszy plan nie będą wysuwane cytaty z prac, ale jednozdaniowe podsumowania abstraktów.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/ai-research/Elicit-example.png" class="img-fluid"></p>
<p>Największa moc Elicit pojawia się jednak w panelu po lewej stronie. AI generuje nam podsumowanie kilku najważniejszych arykułów wraz z cytowaniami, ale także pozwala nam wyciągać konkretne informacje z artykułów. Dla przykładu na obrazku widać, jak poprosiłem o wypisanie liczby osób badanych. Co ciekawe, poza parametrami z listy możemy też wpisywać własne parametry, które AI wyszuka dla nas w artykułach i pokaże w tabeli.</p>
</section>
<section id="scite_" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> <a href="https://scite.ai/">scite_</a></h1>
<p>Kolejne narzędzie ma tę wadę, że swoje kosztuje, co warto podkreślić w pierwszym zdaniu. Jednak nie cała aplikacja jest płatna i część jej funkcji jest dostępna za darmo. Pełną wersję możemy uzyskać za cenę ok. 380 zł rocznie<sup>2</sup> (lub ok. 50 zł miesięcznie). Nie będę tutaj opisywał wszystkich funkcji <a href="https://scite.ai/">scite_</a>, bo tak nazywa się nasza kolejna aplikacja, ale skupię się na dwóch kluczowych.</p>
<p>Po pierwsze, scite_ posiada dodatek do przeglądarki, który wzbogaca nasze wyszukiwanie w Google Scholar o tabelkę z dodatkowymi informacjami o cytowaniach. O ile liczba cytowań to nic wielkiego, już sam Scholar podaje nam łączną liczbę cytowań danego artykułu, o tyle scite_ dodatkowo podzieli nam te cytowania na popierające tezę danego artykułu oraz wchodzące z nią w polemikę. Dzięki temu możemy oszacować rzeczywisty wpływ danej pracy na środowisko naukowe, czego przecież miarą są cytowania.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/ai-research/scite_addon.png" class="img-fluid"></p>
<p>Po drugie od jakiegoś czasu mamy do naszej dyspozycji scite assistant, czyli właściwie to, o co nam chodziło od początku – ChatGPT do rozmowy o artykułach naukowych. Naturalnie scite assistant artykułów nie wymyśla, każda informacja ma przypis, a przypisy są zebrane we wspólną tabelę. W przeciwieństwie do poprzednich narzędzi, z asystentem możemy toczyć dialog, jak na prawdziwego chatbota przystało. Ważną jego cechą jest też to, że potrafi wskazać, że badań na jakiś temat nie ma (w jego bazie). Szczególnie użyteczne może być to dla naukowców, którzy w swoich badaniach chcą wytwarzać nową wiedzę.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/ai-research/scite_assistant.png" class="img-fluid"></p>
</section>
<section id="researchrabbit" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> <a href="https://researchrabbitapp.com/">ResearchRabbit</a></h1>
<p>Zgoła innym rodzajem narzędzia jest <a href="https://researchrabbitapp.com/">ResearchRabbit</a>. Nie jest to wyszukiwarka, ale raczej organizer do bibliografii. Jeśli mamy już zgromadzoną bibliografię na dany temat, ResearchRabbit może nam zwizualizować połączenia między artykułami, wyciągnąć często przewijających się autorów, ale przede wszystkim <strong>podsunąć nam późniejsze, wcześniejsze lub podobne artykuły</strong>. Dzięki temu nasza baza wiedzy może rosnąć, powiększać się o coraz to nowe wątki, podobne do tego, co nas interesuje, ale także możemy dostrzec powiązania między naszą dziedziną, a innymi, może bardziej odległymi dziedzinami.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/ai-research/ResearchRabbit-example.png" class="img-fluid"></p>
<p>Narzędzie jest darmowe i o tyle wygodne, że można je połączyć z Zotero, który jest menedżerem bibliografii z wyboru. Nie musimy się więc rozdrabniać i trzymać naszej bibliografii w kilku miejscach.</p>
</section>
<section id="chatpdf" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> <a href="https://www.chatpdf.com/">ChatPDF</a></h1>
<p>Wbrew obiegowej opinii, znalezione artykuły wypada przeczytać. Czasami jednak nie potrzebujemy dokładnie znać całości artykułu, a wystarczą nam konkretne informacje. Możemy ich szukać tradycyjnie, ale możemy też wykorzystać <a href="https://www.chatpdf.com/">ChatPDF</a>. Jest to narzędzie, do którego możemy wgrać plik .pdf z naszym artykułem i zacząć zadawać pytania. Dzienny darmowy limit to 3 artykuły.</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/ai-research/ChatPDF-example.png" class="img-fluid"></p>
</section>
<section id="trinka" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> <a href="https://www.trinka.ai/">Trinka</a></h1>
<p>Ostatnie narzędzie, które chciałbym omówić, nie tyle służy do znajdowania artykułów, ile do pisania własnych. Język artykułów naukowych to rządząca się specyficznymi regułami odmiana języka angielskiego<sup>3</sup>. Łatwo jest nie dotrzymać wszystkich form tego języka. <a href="https://www.trinka.ai/">Trinka</a> to aplikacja, która może nam w tym pomóc. Sprawdza nam gotowy tekst, wskazuje na ewentualne błędy i sugeruje alternatywne formy. Darmowy plan pozwala na sprawdzenie 10 000 słów miesięcznie. Wersja premium to koszt $ 80 rocznie, w ramach których otrzymujemy przede wszystkim brak limitu słów oraz dodatek do Worda.</p>
</section>
<section id="podziękowanie" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> Podziękowanie</h1>
<p>Wpis opracowałem m.in. na podstawie tweetów dr. <a href="https://twitter.com/MushtaqBilalPhD">Mushtaqa Bilala</a>.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Przypisy</h2>

<ol>
<li id="fn1"><p>Zapytany o przepisywanie AI Rabbi odpowiada:</p>
<blockquote class="blockquote">
<p>According to Torah sources, there is no direct mention of morning sunlight improving mood. However, there are teachings that emphasize the importance of starting the day with positive thoughts and actions. The Talmud states that one should wake up with a joyful heart and begin the day with gratitude and praise to God. Additionally, the Shulchan Aruch, a code of Jewish law, recommends reciting morning blessings upon waking up, which express gratitude for the gift of life and the ability to perform daily tasks.</p>
<p>While there may not be a direct correlation between morning sunlight and mood, starting the day with positive thoughts and actions can certainly contribute to a more positive outlook and overall well-being. It is also important to note that exposure to natural light, including sunlight, has been shown to have a positive impact on mood and energy levels, so it is possible that morning sunlight could have a beneficial effect in this regard.</p>
</blockquote>
<p>Trzeba przyznać, że jest to sensowna odpowiedź.↩︎</p></li>
<li id="fn2"><p>Gdy to piszę, co jakiś czas strona proponuje 40% zniżki, co zmniejsza cenę za pierwszy rok do ok. 230 zł.↩︎</p></li>
<li id="fn3"><p>Dobry kurs specyfiki pisania w nauce od dr Kristin Sainani z Uniwersytetu Stanforda znajdziemy <a href="https://www.coursera.org/learn/sciwrite?">tutaj</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Nauka</category>
  <guid>https://nieobliczalne.pl/posts/ai-research.html</guid>
  <pubDate>Fri, 28 Apr 2023 22:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/ai-research.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Listy, pętle i automatyzacja w R</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/automatyzacja.html</link>
  <description><![CDATA[ 




<p>Nie znoszę mechanicznej pracy. Jestem jedną z tych osób, które wolą spędzić 30 minut na automatyzacji czegoś, co ręcznie da się&nbsp;zrobić w 15 minut. Może jest to strzelanie do muchy z armaty, ale ma swoje zalety. Po pierwsze, poświęciłem na to tyle czasu, że teraz jestem w stanie wiele rzeczy zautomatyzować dość szybko. Tym doświadczeniem chcę się też podzielić. Po drugie, jeśli praca manualna wielokrotnie się powtarza, brutto oszczędzam czas, mimo że na początku muszę zainwestować go więcej. Raz zautomatyzowana czynność już zautomatyzowana całkowicie, ile razy byśmy jej nie wykorzystali. Po trzecie, jeśli automatyzujemy, to tyle samo czasu zajmuje wyczyszczenie 1 pliku i 100 plików. Jeśli czyścimy ręcznie, to 100 plików przekłada się&nbsp;na 100 razy więcej (zmarnowanego) czasu. Po czwarte – mam ciekawsze rzeczy do roboty niż wypisywanie kolejnych liczb. Automatyzacja chociaż mnie nie nudzi, zawsze uczę się czegoś nowego (<a href="https://youtu.be/wf4o6rYaPCI">jak prezydent</a>) i mogę w ten sposób wykorzystać swoje zasoby po prostu lepiej.</p>
<p>Zakładam tutaj, że osoba czytająca zna R na chociaż podstawowym poziomie. Jeśli nie, polecam swoje <a href="../posts/podstawy_R.html">wprowadzenie do R</a>.</p>
<section id="automatyzacja-w-czyszczeniu-danych" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Automatyzacja w czyszczeniu danych</h1>
<p>Weźmy sobie za przykład następującą sytuację: wykonaliśmy eksperyment w programie PsychoPy. Zbadaliśmy 35 osób. Badanie dotyczyło tego, na ile osoby badane będą w stanie zapamiętać historyjkę opowiadaną im w prawej słuchawce, jeśli w lewej słuchawce będzie im puszczany rozpraszacz. Mamy przy okazji dwa warunki, łatwy i trudny, w zależności od tego, jak intensywnie zachodziło rozpraszanie. Ze względu na specyfikę PsychoPy, otrzymaliśmy 35 osobnych plików z wynikami. Specyfika tego programu (skądinąd świetnego!) jest taka, że pliki z wynikami to kompletny chaos. Spójrzmy sobie na przykładowy taki plik. Cała baza dostępna jest w <a href="https://github.com/jakub-jedrusiak/nieobliczalne/tree/main/posts/dane/automatyzacja">repozytorium</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./dane/automatyzacja/BD_eksperyment_latwy_2021_Apr_24_1631.csv"</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> New names:
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Rows: </span><span style="color: #0000BB;">12</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Columns: </span><span style="color: #0000BB;">19</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">──</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Column specification</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">────────────────────────────────────────────────────────</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Delimiter:</span><span style="color: #BB0000;"> "," chr
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> (13): form.itemText, form.type, form.response, form.rt, form_2.itemText,... </span><span style="color: #00BB00;">dbl</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> (5): form.index, form_2.index, form_2.rt, zakonczenie_instrukcja.starte... </span><span style="color: #BBBB00;">lgl</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> (1): ...19
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">ℹ</span><span style="color: #BB0000;"> Use `spec()` to retrieve the full column specification for this data. </span><span style="color: #00BBBB;">ℹ</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> Specify the column types or set `show_col_types = FALSE` to quiet this message.
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">•</span><span style="color: #BB0000;"> `` -&gt; `...19`
</span></code></pre>
</div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 12 × 19</span>
<span style="color: #555555;">#&gt;</span>    <span style="font-weight: bold;">form.index</span> <span style="font-weight: bold;">form.itemText</span>         <span style="font-weight: bold;">form.type</span> <span style="font-weight: bold;">form.response</span> <span style="font-weight: bold;">form.rt</span> <span style="font-weight: bold;">form_2.index</span>
<span style="color: #555555;">#&gt;</span>         <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>                 <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>         <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>          <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span>          1 Jaka jest twoja plec? choice    kobieta       3.0891…           <span style="color: #BB0000;">NA</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span>          2 Jaki jest twoj wiek?  free text 17            None              <span style="color: #BB0000;">NA</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span>          3 Czy wyrazasz zgode n… choice    tak           10.844…           <span style="color: #BB0000;">NA</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span>         <span style="color: #BB0000;">NA</span> <span style="color: #BB0000;">NA</span>                    <span style="color: #BB0000;">NA</span>        <span style="color: #BB0000;">NA</span>            <span style="color: #BB0000;">NA</span>                 1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span>         <span style="color: #BB0000;">NA</span> <span style="color: #BB0000;">NA</span>                    <span style="color: #BB0000;">NA</span>        <span style="color: #BB0000;">NA</span>            <span style="color: #BB0000;">NA</span>                 2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span>         <span style="color: #BB0000;">NA</span> <span style="color: #BB0000;">NA</span>                    <span style="color: #BB0000;">NA</span>        <span style="color: #BB0000;">NA</span>            <span style="color: #BB0000;">NA</span>                 3
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span>         <span style="color: #BB0000;">NA</span> <span style="color: #BB0000;">NA</span>                    <span style="color: #BB0000;">NA</span>        <span style="color: #BB0000;">NA</span>            <span style="color: #BB0000;">NA</span>                 4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span>         <span style="color: #BB0000;">NA</span> <span style="color: #BB0000;">NA</span>                    <span style="color: #BB0000;">NA</span>        <span style="color: #BB0000;">NA</span>            <span style="color: #BB0000;">NA</span>                 5
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span>         <span style="color: #BB0000;">NA</span> <span style="color: #BB0000;">NA</span>                    <span style="color: #BB0000;">NA</span>        <span style="color: #BB0000;">NA</span>            <span style="color: #BB0000;">NA</span>                 6
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span>         <span style="color: #BB0000;">NA</span> <span style="color: #BB0000;">NA</span>                    <span style="color: #BB0000;">NA</span>        <span style="color: #BB0000;">NA</span>            <span style="color: #BB0000;">NA</span>                 7
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">11</span>         <span style="color: #BB0000;">NA</span> <span style="color: #BB0000;">NA</span>                    <span style="color: #BB0000;">NA</span>        <span style="color: #BB0000;">NA</span>            <span style="color: #BB0000;">NA</span>                 8
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">12</span>         <span style="color: #BB0000;">NA</span> <span style="color: #BB0000;">NA</span>                    <span style="color: #BB0000;">NA</span>        <span style="color: #BB0000;">NA</span>            <span style="color: #BB0000;">NA</span>                <span style="color: #BB0000;">NA</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 13 more variables: </span><span style="color: #555555; font-weight: bold;">form_2.itemText</span><span style="color: #555555;"> &lt;chr&gt;, </span><span style="color: #555555; font-weight: bold;">form_2.type</span><span style="color: #555555;"> &lt;chr&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">form_2.response</span><span style="color: #555555;"> &lt;chr&gt;, </span><span style="color: #555555; font-weight: bold;">form_2.rt</span><span style="color: #555555;"> &lt;dbl&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">zakonczenie_instrukcja.started</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">zakonczenie_instrukcja.stopped</span><span style="color: #555555;"> &lt;chr&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">participant</span><span style="color: #555555;"> &lt;chr&gt;, </span><span style="color: #555555; font-weight: bold;">session</span><span style="color: #555555;"> &lt;chr&gt;, </span><span style="color: #555555; font-weight: bold;">date</span><span style="color: #555555;"> &lt;chr&gt;, </span><span style="color: #555555; font-weight: bold;">expName</span><span style="color: #555555;"> &lt;chr&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">psychopyVersion</span><span style="color: #555555;"> &lt;chr&gt;, </span><span style="color: #555555; font-weight: bold;">frameRate</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">...19</span><span style="color: #555555;"> &lt;lgl&gt;</span>
</code></pre>
</div>
</div>
<p>Pierwsze 3 wiersze zawierają informacje metryczkowe. Kolejnych 8 zawiera odpowiedzi na pytania, ale kolumny są przesunięte. Wiersz 12. nie zawiera żadnych użytecznych informacji, bo tylko czas, jaki osoba badana spędziła na czytaniu ostatniej instrukcji. Co więcej, identyfikatorem osoby badanej były inicjały, więc w wielu przypadkach mamy powtórzenia (np. dwie osoby o inicjałach MK). Ogólnie w bazie jest wiele niedociągnięć, których dało się uniknąć lepiej projektując samo badanie. Mie ma się jednak co dziwić – to prawdziwe dane z projektu studenckiego. Cenne doświadczenie, które pokazuje przede wszystkim, czego w przyszłości unikać.</p>
<p>Trzeba się trochę nagłowić, żeby takie dane wyczyścić. Pewnym ułatwieniem jest, że wszystkie te pliki mają identyczną strukturę, więc każdy czyścimy właściwie tak samo. Moja strategia była tutaj taka – najpierw wczytać całą bazę, potem wyizolować z niej samą metryczkę i wyczyścić, następnie wyizolować główne dane i je również z osobna wyczyścić, a na koniec połączyć uzyskane dane w jedną bazę. Zrobiłem to przy tym tak, żeby na koniec z każdego pliku mieć tylko jeden wiersz.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">baza_raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./dane/automatyzacja/BD_eksperyment_latwy_2021_Apr_24_1631.csv"</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> New names:
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Rows: </span><span style="color: #0000BB;">12</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Columns: </span><span style="color: #0000BB;">19</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">──</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Column specification</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">────────────────────────────────────────────────────────</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Delimiter:</span><span style="color: #BB0000;"> "," chr
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> (13): form.itemText, form.type, form.response, form.rt, form_2.itemText,... </span><span style="color: #00BB00;">dbl</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> (5): form.index, form_2.index, form_2.rt, zakonczenie_instrukcja.starte... </span><span style="color: #BBBB00;">lgl</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> (1): ...19
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">ℹ</span><span style="color: #BB0000;"> Use `spec()` to retrieve the full column specification for this data. </span><span style="color: #00BBBB;">ℹ</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> Specify the column types or set `show_col_types = FALSE` to quiet this message.
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">•</span><span style="color: #BB0000;"> `` -&gt; `...19`
</span></code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># najpierw sama metryczka</span></span>
<span id="cb3-3">metryczka <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> baza_raw <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wybierz wiersze z samej metryczki</span></span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(participant, expName, form.itemText, form.response) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wybierz kolumny z id, warunkiem, pytaniem i odpowiedzią</span></span>
<span id="cb3-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> form.itemText, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> form.response) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># format szeroki</span></span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warunek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plec"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb3-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb3-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warunek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove</span>(warunek, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eksperyment_"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zostaw samo "łatwy" albo "trudny"</span></span>
<span id="cb3-11">    )</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># potem same odpowiedzi na pytania</span></span>
<span id="cb3-14">pytania <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> baza_raw <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(form_2.itemText, form_2.response) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb3-18">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">form_2.response =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_match</span>( <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tak i nie zamień na 1 i 0</span></span>
<span id="cb3-19">            form_2.response,</span>
<span id="cb3-20">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tak"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nie"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-22">        )</span>
<span id="cb3-23">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> form_2.itemText, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> form_2.response) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pyt_"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb3-26"></span>
<span id="cb3-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># na koniec łączę</span></span>
<span id="cb3-28">baza <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(metryczka, pytania) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb3-30">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> stringi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_rand_strings</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zamień id na losowe znaki</span></span>
<span id="cb3-31">    )</span>
<span id="cb3-32"></span>
<span id="cb3-33">baza</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 1 × 12</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">id</span>    <span style="font-weight: bold;">warunek</span> <span style="font-weight: bold;">plec</span>     <span style="font-weight: bold;">wiek</span> <span style="font-weight: bold;">pyt_1</span> <span style="font-weight: bold;">pyt_2</span> <span style="font-weight: bold;">pyt_3</span> <span style="font-weight: bold;">pyt_4</span> <span style="font-weight: bold;">pyt_5</span> <span style="font-weight: bold;">pyt_6</span> <span style="font-weight: bold;">pyt_7</span> <span style="font-weight: bold;">pyt_8</span>
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> 5pb90 latwy   kobieta    17     1     <span style="color: #555555;">0</span>     1     1     1     <span style="color: #555555;">0</span>     <span style="color: #555555;">0</span>     1
</code></pre>
</div>
</div>
<p>Z ciekawszych rzeczy wykorzystuję tutaj funkcję <code>stri_rand_strings</code> z pakietu <code>stringi</code>, żeby zmienić ID osoby badanej. ID nie musi tutaj nic znaczyć, ma być po prostu unikalne, a z tym mamy tutaj problem, bo się wcześniej nie umówiliśmy na żaden określony sposób kodowania. Dlatego na tym etapie mogę zastąpić inicjały losowym ciągiem 5 znaków, zapewniając tym samym, że w ostatecznej bazie identyfikatory będą unikalne. Jest to też sposób na anonimizację bazy danych.</p>
<p>Uzyskaliśmy w ten sposób jeden wyczyszczony wiersz. Jeszcze tylko 34…</p>
<p>I jak mamy to zrobić? Mamy ten sam kod skopiować jeszcze 34 razy, zamieniając tylko nazwę&nbsp;pliku? A co jeśli mam 1000 osób? A co jeśli jestem Martą Kowal<sup>1</sup> i mam do przeanalizowania (ponad) 93 158 osób <span class="citation" data-cites="kowal_predictors_2022">(Kowal i in., 2022)</span>? Kopiowanie kodu nigdy nie jest dobrą drogą. Jeśli często kopiujemy kod, powinniśmy zrobić z niego funkcję. Jeśli tę samą funkcję chcemy zastosować do wielu obiektów, powinniśmy użyć list albo pętli.</p>
</section>
<section id="listy" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Listy</h1>
<p>Podstawową metodą automatyzacji we wszystkich językach programowania są pętle. No, prawie wszystkich. Na przykład w R lepiej ich unikać. Specyfika tego języka jest taka, że pętle – mimo że są obecne – to są mało wydajne. W małych zbiorach danych nie ma to większego znaczenia, jednak dobrą praktyką jest – o ile to możliwe – automatyzować przez tak zwane <strong>listy</strong>.</p>
<p>Lista to szczególny typ obiektu w R, który można sobie wyobrazić jako pudełko na inne obiekty. Mogę tam włożyć ramki danych, wektory (tworzone przez <code>c()</code>), wykresy, a nawet inne listy, tworząc coś na kształt matrioszki. Od wektora, czyli podstawowej formy danych w R, lista różni się tym, że może <strong>zawierać dane różnych typów</strong>. Wektor musi mieć konkretny typ, np. same liczby. Lista takich ograniczeń nie ma.</p>
<p>Listę tworzymy przede wszystkim za pomocą komendy <code>list()</code>. Przyjmuje one obiekty, z których lista ma powstać. Dla przykładu stwórzmy sobie listę z dwóch wbudowanych baz danych – <code>iris</code> i <code>mpg</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">bazy_danych <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(iris), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tibble dla lepszego drukowania w konsoli</span></span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(mpg)</span>
<span id="cb4-4">)</span>
<span id="cb4-5"></span>
<span id="cb4-6">bazy_danych</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> [[1]]
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 150 × 5</span>
<span style="color: #555555;">#&gt;</span>    <span style="font-weight: bold;">Sepal.Length</span> <span style="font-weight: bold;">Sepal.Width</span> <span style="font-weight: bold;">Petal.Length</span> <span style="font-weight: bold;">Petal.Width</span> <span style="font-weight: bold;">Species</span>
<span style="color: #555555;">#&gt;</span>           <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>       <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>        <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>       <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;fct&gt;</span>  
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span>          5.1         3.5          1.4         <span style="color: #555555;">0.</span>2 setosa 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span>          4.9         3            1.4         <span style="color: #555555;">0.</span>2 setosa 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span>          4.7         3.2          1.3         <span style="color: #555555;">0.</span>2 setosa 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span>          4.6         3.1          1.5         <span style="color: #555555;">0.</span>2 setosa 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span>          5           3.6          1.4         <span style="color: #555555;">0.</span>2 setosa 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span>          5.4         3.9          1.7         <span style="color: #555555;">0.</span>4 setosa 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span>          4.6         3.4          1.4         <span style="color: #555555;">0.</span>3 setosa 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span>          5           3.4          1.5         <span style="color: #555555;">0.</span>2 setosa 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span>          4.4         2.9          1.4         <span style="color: #555555;">0.</span>2 setosa 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span>          4.9         3.1          1.5         <span style="color: #555555;">0.</span>1 setosa 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 140 more rows</span>
<span style="color: #555555;">#&gt;</span> 
<span style="color: #555555;">#&gt;</span> [[2]]
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 234 × 11</span>
<span style="color: #555555;">#&gt;</span>    <span style="font-weight: bold;">manufacturer</span> <span style="font-weight: bold;">model</span>      <span style="font-weight: bold;">displ</span>  <span style="font-weight: bold;">year</span>   <span style="font-weight: bold;">cyl</span> <span style="font-weight: bold;">trans</span> <span style="font-weight: bold;">drv</span>     <span style="font-weight: bold;">cty</span>   <span style="font-weight: bold;">hwy</span> <span style="font-weight: bold;">fl</span>    <span style="font-weight: bold;">class</span>
<span style="color: #555555;">#&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>        <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>      <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span> audi         a4           1.8  <span style="text-decoration: underline;">1</span>99<span style="color: #555555;">9</span>     4 auto… f        18    29 p     comp…
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span> audi         a4           1.8  <span style="text-decoration: underline;">1</span>99<span style="color: #555555;">9</span>     4 manu… f        21    29 p     comp…
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span> audi         a4           2    <span style="text-decoration: underline;">2</span>00<span style="color: #555555;">8</span>     4 manu… f        20    31 p     comp…
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span> audi         a4           2    <span style="text-decoration: underline;">2</span>00<span style="color: #555555;">8</span>     4 auto… f        21    30 p     comp…
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span> audi         a4           2.8  <span style="text-decoration: underline;">1</span>99<span style="color: #555555;">9</span>     6 auto… f        16    26 p     comp…
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span> audi         a4           2.8  <span style="text-decoration: underline;">1</span>99<span style="color: #555555;">9</span>     6 manu… f        18    26 p     comp…
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span> audi         a4           3.1  <span style="text-decoration: underline;">2</span>00<span style="color: #555555;">8</span>     6 auto… f        18    27 p     comp…
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span> audi         a4 quattro   1.8  <span style="text-decoration: underline;">1</span>99<span style="color: #555555;">9</span>     4 manu… 4        18    26 p     comp…
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span> audi         a4 quattro   1.8  <span style="text-decoration: underline;">1</span>99<span style="color: #555555;">9</span>     4 auto… 4        16    25 p     comp…
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span> audi         a4 quattro   2    <span style="text-decoration: underline;">2</span>00<span style="color: #555555;">8</span>     4 manu… 4        20    28 p     comp…
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 224 more rows</span>
</code></pre>
</div>
</div>
<p>Gdy wywołamy naszą listę w konsoli, zobaczymy, że wyświetlają nam się dwie bazy danych, oznaczone jako <code>[[1]]</code> i <code>[[2]]</code>. Kolejność jest taka, jakiej użyliśmy w komendzie <code>list()</code>. Jeśli chcemy wyciągnąć coś z listy, np. pojedynczą ramkę danych, używamy składni <code>nazwa_listy[[indeks]]</code><sup>2</sup>. czyli na przykład <code>bazy_danych[[1]]</code>. W tym wypadku spowoduje to wyciągnięcie samej tylko bazy <code>iris</code> <sup>3</sup>. Możemy też wywołać <code>bazy_danych[1]</code>, ale taki zapis powoduje subtelną różnicę – efektem jest jednoelementowa lista. Składnia z podwójnymi nawiasami zwróci nam tylko sam element. Jeśli jest to ramka danych, dostaniemy ramkę danych, jeśli jest to wektor, to dostaniemy wektor itd. Nawiasy pojedyncze zawsze zwracają listę.</p>
<section id="masowe-ładowanie-danych-z-list.files" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="masowe-ładowanie-danych-z-list.files"><span class="header-section-number">2.1</span> Masowe ładowanie danych z <code>list.files</code></h2>
<p>Z tego, co napisałem, wynika, że możemy łatwo wyczyścić nasze dane, jeśli zrobimy z nich listę. Ale jak dopiero otwieramy RStudio, to nie mamy danych jeszcze załadowanych! Nawet jakbyśmy chcieli, zrobić listę, to nie mamy czego wrzucić do komendy <code>list()</code>. Listy pozwolą nam jednak nie tylko masowo dane wyczyścić, ale też masowo je załadować.</p>
<p>Załóżmy, że nasze 35 plików z danymi znajduje się w folderze dane, podfolder automatyzacja. Nie jest to, oczywiście, obowiązek, Twoja struktura może się różnić, ale dobrze jest mieć dane w oddzielnym folderze. Możemy teraz użyć komendy <code>list.files()</code>, żeby stworzyć <strong>listę naszych plików</strong><sup>4</sup>. To samo robi komenda <code>dir()</code>. Obie przyjmują ścieżkę do folderu, w którym są pliki do wrzucenia na listę. Ustawimy jeszcze <code>full.names = TRUE</code>, bo nie chcemy dostać samych <em>nazw</em> plików, ale całe <em>ścieżki</em>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">bazy_lista <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./dane/automatyzacja"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>Jeśli wyświetlimy teraz obiekt <code>bazy_lista</code>, zobaczymy listę ścieżek wszystkich naszych plików z danymi. Nie są to załadowane bazy, tylko lista plików.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">bazy_lista</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>  [1] "./dane/automatyzacja/AC_eksperyment_trudny_2021_Apr_22_2124.csv"     
<span style="color: #555555;">#&gt;</span>  [2] "./dane/automatyzacja/AG_eksperyment_latwy_2021_Apr_25_0233.csv"      
<span style="color: #555555;">#&gt;</span>  [3] "./dane/automatyzacja/AT_eksperyment_latwy_2021_Apr_25_1402.csv"      
<span style="color: #555555;">#&gt;</span>  [4] "./dane/automatyzacja/BD_eksperyment_latwy_2021_Apr_24_1631.csv"      
<span style="color: #555555;">#&gt;</span>  [5] "./dane/automatyzacja/BM_eksperyment_trudny_2021_Apr_25_2042.csv"     
<span style="color: #555555;">#&gt;</span>  [6] "./dane/automatyzacja/DF_eksperyment_latwy_2021_Apr_22_1456.csv"      
<span style="color: #555555;">#&gt;</span>  [7] "./dane/automatyzacja/DJ_eksperyment_trudny_2021_Apr_25_2048.csv"     
<span style="color: #555555;">#&gt;</span>  [8] "./dane/automatyzacja/DJ_eksperyment_trudny_2021_Apr_25_2102.csv"     
<span style="color: #555555;">#&gt;</span>  [9] "./dane/automatyzacja/FB_eksperyment_latwy_2021_Apr_24_1649.csv"      
<span style="color: #555555;">#&gt;</span> [10] "./dane/automatyzacja/GM_eksperyment_latwy_2021_Apr_24_1434.csv"      
<span style="color: #555555;">#&gt;</span> [11] "./dane/automatyzacja/HJ_eksperyment_trudny_2021_kwi_21_1805.csv"     
<span style="color: #555555;">#&gt;</span> [12] "./dane/automatyzacja/JJ_eksperyment_trudny_2021_Apr_24_1112.csv"     
<span style="color: #555555;">#&gt;</span> [13] "./dane/automatyzacja/JK_eksperyment_latwy_2021_Apr_25_1422.csv"      
<span style="color: #555555;">#&gt;</span> [14] "./dane/automatyzacja/JK_eksperyment_trudny_2021_Apr_23_2129.csv"     
<span style="color: #555555;">#&gt;</span> [15] "./dane/automatyzacja/JK_eksperyment_trudny_2021_kwi_21_1326.csv"     
<span style="color: #555555;">#&gt;</span> [16] "./dane/automatyzacja/julka_eksperyment_latwy_2021_Apr_25_2150.csv"   
<span style="color: #555555;">#&gt;</span> [17] "./dane/automatyzacja/JW_eksperyment_latwy_2021_Apr_24_1657.csv"      
<span style="color: #555555;">#&gt;</span> [18] "./dane/automatyzacja/kacperek_eksperyment_latwy_2021_Apr_25_2158.csv"
<span style="color: #555555;">#&gt;</span> [19] "./dane/automatyzacja/Kasia_eksperyment_latwy_2021_Apr_25_1421.csv"   
<span style="color: #555555;">#&gt;</span> [20] "./dane/automatyzacja/Kinga_eksperyment_latwy_2021_Apr_25_1419.csv"   
<span style="color: #555555;">#&gt;</span> [21] "./dane/automatyzacja/kk_eksperyment_trudny_2021_Apr_22_2104.csv"     
<span style="color: #555555;">#&gt;</span> [22] "./dane/automatyzacja/KK_eksperyment_trudny_2021_Apr_23_2136.csv"     
<span style="color: #555555;">#&gt;</span> [23] "./dane/automatyzacja/KP_eksperyment_trudny_2021_kwi_21_2037.csv"     
<span style="color: #555555;">#&gt;</span> [24] "./dane/automatyzacja/KW_eksperyment_trudny_2021_Apr_22_2254.csv"     
<span style="color: #555555;">#&gt;</span> [25] "./dane/automatyzacja/maciek_eksperyment_latwy_2021_Apr_22_1138.csv"  
<span style="color: #555555;">#&gt;</span> [26] "./dane/automatyzacja/Magda_eksperyment_latwy_2021_Apr_25_1932.csv"   
<span style="color: #555555;">#&gt;</span> [27] "./dane/automatyzacja/Michal_eksperyment_latwy_2021_Apr_25_1405.csv"  
<span style="color: #555555;">#&gt;</span> [28] "./dane/automatyzacja/MJ_eksperyment_trudny_2021_Apr_25_2054.csv"     
<span style="color: #555555;">#&gt;</span> [29] "./dane/automatyzacja/MK_eksperyment_latwy_2021_Apr_24_1706.csv"      
<span style="color: #555555;">#&gt;</span> [30] "./dane/automatyzacja/MK_eksperyment_trudny_2021_Apr_22_2109.csv"     
<span style="color: #555555;">#&gt;</span> [31] "./dane/automatyzacja/OK_eksperyment_trudny_2021_Apr_24_1343.csv"     
<span style="color: #555555;">#&gt;</span> [32] "./dane/automatyzacja/SG_eksperyment_trudny_2021_Apr_24_1546.csv"     
<span style="color: #555555;">#&gt;</span> [33] "./dane/automatyzacja/SJ_eksperyment_trudny_2021_kwi_21_1621.csv"     
<span style="color: #555555;">#&gt;</span> [34] "./dane/automatyzacja/SP_eksperyment_trudny_2021_kwi_21_2030.csv"     
<span style="color: #555555;">#&gt;</span> [35] "./dane/automatyzacja/ZD_eksperyment_latwy_2021_Apr_26_1036.csv"
</code></pre>
</div>
</div>
<p>Nasze dane możemy załadować np. komendą <code>read_csv()</code> z pakietu <code>readr</code>. Ta funkcja może przyjąć całą serię różnych argumentów, ale najważniejszym jest… ścieżka do pliku do załadowania. Dokładnie to, co mamy zgromadzone w obiekcie <code>bazy_lista</code>! Każdą z tych ścieżek moglibyśmy teraz wrzucić do funkcji <code>read_csv()</code> i dostalibyśmy nie ścieżkę, ale załadowaną bazę. Chcemy więc teraz powiedzieć R „po kolei weź każdą ścieżkę z <code>bazy_lista</code> i wrzuć ją do <code>read_csv()</code>. Do tego służą funkcje z rodziny <code>apply</code>, czyli <code>apply()</code>, <code>sapply()</code>, <code>lapply()</code> lub <code>tapply()</code>. Jak w przypadku wielu funkcji, rodzina <code>apply</code> ma też swoje odpowiedniki w tidyverse. Jak raz „oryginały” są używane częściej<sup>5</sup>, ale i tak my skorzystamy z funkcji <code>map()</code> z pakietu <code>purrr</code>, bo jest bardziej intuicyjna.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">bazy_lista <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(bazy_lista, read_csv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name_repair =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unique_quiet"</span>)</span></code></pre></div>
</div>
<p><code>map</code> przyjmuje, w podstawowej wersji, dwa argumenty. Pierwszym jest obiekt, do którego chcemy zastosować naszą funkcję, a drugim sama funkcja. My chcemy zastosować funkcję <code>read_csv()</code> na każdym elemencie wektora <code>bazy_lista</code>. Podobnie jak w <code>across</code> (patrz <a href="./posts/podstawy_R.qmd#sec-across">tutaj</a>), gdy podajemy, jaką funkcję chcemy zastosować, to musimy zapisać obiekt <em>zawierający</em> funkcję, a nie o efekt <em>działania</em> funkcji, dlatego <strong>po nazwie funkcji nie dajemy nawiasów</strong>. To bardzo częsty błąd. Na koniec możemy dorzucić parę innych argumentów, takich jak <code>show_col_types = FALSE</code> i <code>name_repair = "unique_quiet"</code>, żeby nasza konsola nie została zalana milionem informacji o aktualnie wczytywanej bazie<sup>6</sup>.</p>
<p>Teraz R weźmie każdą ścieżkę i wrzuci ją do funkcji <code>read_csv()</code>. Każda ścieżka zostanie więc załadowana, a wynikowe bazy wrzucone na listę. Jeśli więc teraz byśmy spojrzeli w obiekt <code>bazy_lista</code>, to nie zobaczymy tam już ścieżek, ale prawdziwe ramki danych.</p>
</section>
<section id="masowe-czyszczenie-z-map-lub-lapply" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="masowe-czyszczenie-z-map-lub-lapply"><span class="header-section-number">2.2</span> Masowe czyszczenie z <code>map()</code> lub <code>lapply()</code></h2>
<p>Skoro poznaliśmy już funkcję <code>map()</code>, wyczyszczenie naszych baz nie powinno stanowić problemu. W końcu są one na liście, a my właśnie nauczyliśmy się, zastosować jakąś funkcję do <em>każdego elementu listy z osobna</em>. Problem polega jednak na tym, że nie mamy pojedynczej funkcji czyszczącej, a cały wielki zestaw tych funkcji. Jednak jak dowiedzieliśmy się <a href="./posts/podstawy_R.qmd#sec-customfunctions">tutaj</a>, możemy nasz zestaw po prostu przerobić na pojedynczą funkcję.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">wyczysc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df) {</span>
<span id="cb8-2">    metryczka <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wybierz wiersze z samej metryczki</span></span>
<span id="cb8-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(participant, expName, form.itemText, form.response) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wybierz kolumny z id, warunkiem, pytaniem i odpowiedzią</span></span>
<span id="cb8-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> form.itemText, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> form.response) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># format długi</span></span>
<span id="cb8-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warunek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plec"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb8-8">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb8-9">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warunek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove</span>(warunek, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eksperyment_"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zostaw samo "łatwy" albo "trudny"</span></span>
<span id="cb8-10">        )</span>
<span id="cb8-11"></span>
<span id="cb8-12">    pytania <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(form_2.itemText, form_2.response) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb8-16">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">form_2.response =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_match</span>( <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tak i nie na 1 i 0</span></span>
<span id="cb8-17">            form_2.response,</span>
<span id="cb8-18">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tak"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb8-19">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nie"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-20">            )</span>
<span id="cb8-21">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> form_2.itemText, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> form_2.response) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-23">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pyt_"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb8-24"></span>
<span id="cb8-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(metryczka, pytania) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-26">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb8-27">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> stringi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_rand_strings</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zamień id na losowe znaki</span></span>
<span id="cb8-28">        )</span>
<span id="cb8-29">}</span></code></pre></div>
</div>
<p>Uzyskałem w ten sposób funkcję <code>wyczysc()</code>, która wykonuje wszystkie nasze przekształcenia. Warto zwrócić uwagę, że bazę danych nazwałem <code>df</code> i zrobiłem z niej argument naszej funkcji, a także, że ostatni blok nie ma przypisania do zmiennej <code>baza</code>. Wynika to z tego, że domyślnie funkcje w R zwracają ostatnią rzecz, którą zrobią. W tym wypadku wynikiem działania funkcji <code>wyczysc()</code> będzie efekt działania <code>bind_cols()</code>. Jeśli zapisałbym ostateczną bazę do zmiennej <code>baza</code>, musiałbym w ostatniej linijce dopisać samo <code>baza</code> albo <code>return(baza)</code>, ponieważ to jest to, co ostatecznie chcemy dostać – wyczyszczoną bazę.</p>
<p>Przy tej okazji ostrzegam, że używanie <strong>nazw kolumn</strong> jako argumentów takich własnych funkcji może spowodować niespodziewane problemy. Jeśli nasza funkcja dostanie argument <code>nazwa_kolumny</code>, to funkcje typu <code>select()</code> będą w bazie szukać kolumny, która nazywa się <code>nazwa_kolumny</code>, a nie wartości tego argumentu (np. jeśli ustawimy <code>nazwa_kolumny = pyt_1</code>, to <code>select()</code> czy <code>mutate()</code> nie będą szukały kolumny <code>pyt_1</code>, tylko kolumny <em>o nazwie</em> <code>nazwa_kolumny</code>). Więcej o tym piszę <a href="./posts/metaprogramowanie.qmd">tutaj</a>, ale <em>ad hoc</em> można sobie z tym poradzić pisząc nazwę argumentu wewnątrz funkcji typu <code>select()</code> w podwójnych nawiasach klamrowych, np. <code>{ nazwa_kolumny }</code>.</p>
<p>Użyjmy teraz naszej nowej funkcji <code>wyczysc</code> do wyczyszczenia naszych plików.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">bazy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(bazy_lista, wyczysc)</span></code></pre></div>
</div>
<p>Efektem działania tej funkcji jest lista wyczyszczonych już baz. Każda taka baza ma tylko jeden wiersz (bo tak zrobiliśmy nasze czyszczenie). Jednak do analizy statystycznej nie jest potrzebna lista, tylko jedna całościowa baza. Połączmy więc wszystkie bazy na liście w jedną bazę za pomocą funkcji <code>bind_rows</code>. Możemy ją wywołać na wyczyszczonej zmiennej <code>bazy</code> albo już wcześniej dodać ją potokiem do mapowania. Wygląda to tak:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tak jest dobrze</span></span>
<span id="cb10-2">bazy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(bazy_lista, wyczysc)</span>
<span id="cb10-3">bazy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(bazy)</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tak też jest dobrze</span></span>
<span id="cb10-6">bazy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(bazy_lista, wyczysc) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>()</span>
<span id="cb10-8"></span>
<span id="cb10-9">bazy</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 35 × 12</span>
<span style="color: #555555;">#&gt;</span>    <span style="font-weight: bold;">id</span>    <span style="font-weight: bold;">warunek</span> <span style="font-weight: bold;">plec</span>       <span style="font-weight: bold;">wiek</span> <span style="font-weight: bold;">pyt_1</span> <span style="font-weight: bold;">pyt_2</span> <span style="font-weight: bold;">pyt_3</span> <span style="font-weight: bold;">pyt_4</span> <span style="font-weight: bold;">pyt_5</span> <span style="font-weight: bold;">pyt_6</span> <span style="font-weight: bold;">pyt_7</span> <span style="font-weight: bold;">pyt_8</span>
<span style="color: #555555;">#&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span> nN3zb trudny  kobieta      20     <span style="color: #555555;">0</span>     1     1     <span style="color: #555555;">0</span>     1     <span style="color: #555555;">0</span>     <span style="color: #555555;">0</span>     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span> 9X7x2 latwy   kobieta      21     1     1     1     1     1     <span style="color: #555555;">0</span>     <span style="color: #555555;">0</span>     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span> Awyis latwy   mezczyzna    24     1     1     <span style="color: #555555;">0</span>     1     1     1     <span style="color: #555555;">0</span>     <span style="color: #555555;">0</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span> y2Rdz latwy   kobieta      17     1     <span style="color: #555555;">0</span>     1     1     1     <span style="color: #555555;">0</span>     <span style="color: #555555;">0</span>     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span> JrXsV trudny  mezczyzna    17     <span style="color: #555555;">0</span>     <span style="color: #555555;">0</span>     1     1     1     1     1     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span> rrL0C latwy   mezczyzna    23     1     <span style="color: #555555;">0</span>     1     1     1     1     <span style="color: #555555;">0</span>     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span> wHsx0 trudny  kobieta      17     1     <span style="color: #555555;">0</span>     1     1     1     <span style="color: #555555;">0</span>     <span style="color: #555555;">0</span>     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span> YDejs trudny  kobieta      17     <span style="color: #555555;">0</span>     1     1     1     1     <span style="color: #555555;">0</span>     <span style="color: #555555;">0</span>     <span style="color: #555555;">0</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span> Ntqj2 latwy   mezczyzna    20     <span style="color: #555555;">0</span>     <span style="color: #555555;">0</span>     1     1     1     1     <span style="color: #555555;">0</span>     <span style="color: #555555;">0</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span> KkuCT latwy   kobieta      20     1     1     <span style="color: #555555;">0</span>     1     <span style="color: #555555;">0</span>     1     1     <span style="color: #555555;">0</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 25 more rows</span>
</code></pre>
</div>
</div>
<p>Ostatecznie uzyskujemy piękną, czystą i pojedynczą bazę danych, na której możemy wykonywać analizy.</p>
</section>
</section>
<section id="pętle" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Pętle</h1>
<p>Pętle to w wielu językach programowania podstawowa metoda automatyzacji. Pozwalają nam wykonać tę samą operację wiele, wiele razy, za każdym razem coś zmieniając. W R ich za bardzo nie używamy. Niby można, ale R to nie jest język ogólnego przeznaczenia, dlatego rzadko musimy robić w nim rzeczy, których nie możemy zrobić listami i <code>map</code>. Czasami jednak taka umiejętność może się&nbsp;przydać. Co więcej, czasami da się coś zrobić listą, ale łatwiej to <em>zrozumieć</em>, gdy używamy pętli. Na sam początek pętle mogą być przyjemniejsze w odbiorze dla niewprawionego programisty (albo właśnie wprawionego, który zna pętle z innych języków). Istnieją dwa rodzaje pętli – <code>for</code> i <code>while</code>.</p>
<section id="pętle-for" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="pętle-for"><span class="header-section-number">3.1</span> Pętle <code>for</code></h2>
<p>Pętla <code>for</code> służy do wykonania danej czynności określoną liczbę razy albo dla określonych rzeczy. Tutaj przykład wykorzystania tej pętli do wykonania czynności, którą robiliśmy wcześniej, czyli ładowania baz danych na podstawie listy plików.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">bazy_lista <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./dane/automatyzacja"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb11-2">bazy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pusta lista na przyszłość</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>) {</span>
<span id="cb11-5">    bazy[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(bazy_lista[[i]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name_repair =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unique_quiet"</span>)</span>
<span id="cb11-6">}</span></code></pre></div>
</div>
<p>Zapis ten jest bardziej programistyczny i korzysta z klasycznego R. Najpierw tworzymy pustą listę <code>bazy</code>. Następnie pętla <code>for</code> wykona to, co zapisaliśmy w jej klamrach, za każdym razem zamieniając <code>i</code> na kolejną liczbę. Czyli najpierw wczyta bazę ze ścieżki <code>bazy_lista[[1]]</code>, potem <code>bazy_lista[[2]]</code> i tak dalej aż do <code>bazy_lista[[35]]</code>. Wczytane bazy zapisze do listy <code>bazy</code> na stosownym miejscu. <code>1:35</code> moglibyśmy zamienić na <code>1:length(bazy_lista)</code>, żeby nie zapisywać na sztywno <code>35</code>, jakby miała się ta liczba zmienić.</p>
<p>Moglibyśmy też użyć nieco innej składni.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">bazy_lista <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./dane/automatyzacja"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb12-2">bazy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pusta lista na przyszłość</span></span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bazy_lista) {</span>
<span id="cb12-5">    bazy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb12-6">        bazy,</span>
<span id="cb12-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name_repair =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unique_quiet"</span>))</span>
<span id="cb12-8">    )</span>
<span id="cb12-9">}</span></code></pre></div>
</div>
<p>Nie jest to najlepszy, najbardziej wydajny kod, ale nie chcę wchodzić w bardziej zaawansowane koncepcje jak rezerwowanie miejsca w pamięci przed uruchomieniem pętli. Ta składnia działa nieco inaczej, bo <code>i</code> nie jest tutaj liczbą, tylko kolejnymi ścieżkami do naszych plików i to one lądują w <code>read_csv()</code>. Tak wczytaną bazę dołączam do listy baz za pomocą <code>c</code>. Co ważne, nasza nowa baza też musi mieć format listy, dlatego całe <code>read_csv</code> opakowałem w <code>list</code>.</p>
<p>Jak widać, takie rozwiązanie wymaga podejścia do R od bardziej programistycznej strony. Tak jak jednak wspominałem, w rzeczywistości rzadko jest to potrzebne, bo możemy używać funkcji <code>lapply()</code> lub <code>map()</code>.</p>
</section>
<section id="pętle-while" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="pętle-while"><span class="header-section-number">3.2</span> Pętle <code>while</code></h2>
<p>Pętle <code>while</code> wykonują jakieś polecenie dopóty, dopóki spełniony jest warunek, który jej podamy. Musimy być jednak ostrożni, bo jeśli ten warunek nie zostanie osiągnięty nigdy (bo np. źle go zaplanowaliśmy), to pętla będzie działała w nieskończoność, nierzadko zapychając pamięć komputera. Pętla <code>while</code>, choć wykorzystywana nawet rzadziej niż pętla <code>for</code>, przydała mi się w celach testowo-dydaktycznych, bo wykorzystywałem ją do znalezienia zbioru losowych liczb o określonych parametrach statystycznych. Żeby podać przykład:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">liczby <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(liczby) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>) {</span>
<span id="cb13-4">    liczby <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>()</span>
<span id="cb13-6">}</span></code></pre></div>
</div>
<p>Ten kod wykorzystałem do znalezienia zestawu 100 losowych liczb z rozkładu normalnego IQ (<img src="https://latex.codecogs.com/png.latex?M%20=%20100">, <img src="https://latex.codecogs.com/png.latex?SD%20=%2015">), których średnia będzie wynosiła dokładnie 101. Wykorzystałem to <a href="./posts/p-value.qmd">w tekście o wartości <img src="https://latex.codecogs.com/png.latex?p"></a> do znalezienia ładnej próbki, której średnia nie będzie wynosiła dokładnie tyle, ile średnia z populacji. Funkcja <code>rnorm</code> losuje liczby z rozkładu normalnego o podanych parametrach 5, <code>round</code> zaokrągla je do całości. Pętla <code>while</code> mówi tutaj „Sprawdź, czy średnia wylosowanych liczb nie równa się 105. Jeśli nie, to wylosuj ponownie.” albo inaczej „Powtarzaj losowanie dopóki średnia liczb nie będzie się równała 101”.</p>
</section>
</section>
<section id="podsumowanie" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Podsumowanie</h1>
<ol type="1">
<li>R daje nam duże możliwości automatyzacji powtarzalnych czynności.</li>
<li>Podstawową metodą automatyzacji w R są listy.</li>
<li>Funkcja <code>map()</code> (<code>lapply()</code>) stosuje daną funkcję do każdego elementu listy.</li>
<li>W R istnieją pętle, ale lepiej ich unikać.</li>
<li>Pętla <code>for</code> powtarza zestaw funkcji określoną liczbę razy albo dla wszystkich wartości zbioru.</li>
<li>Pętla <code>while</code> powtarza zestaw funkcji tak długo, jak spełniony jest podany jest warunek.</li>
</ol>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">Bibliografia</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-kowal_predictors_2022" class="csl-entry">
Kowal, M., Sorokowski, P., Pisanski, K., Valentova, J. V., Varella, M. A. C., Frederick, D. A., … Zumárraga-Espinosa, M. (2022). Predictors of enhancing human physical attractiveness: <span>Data</span> from 93 countries. <em>Evolution and Human Behavior</em>, <em>43</em>(6), 455–474. <a href="https://doi.org/10.1016/j.evolhumbehav.2022.08.003">https://doi.org/10.1016/j.evolhumbehav.2022.08.003</a>
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Przypisy</h2>

<ol>
<li id="fn1"><p>Którą serdecznie pozdrawiam.↩︎</p></li>
<li id="fn2"><p>W R indeksowanie zaczyna się od 1, a nie od 0 jak w C czy w Pythonie. Takie indeksy są bardziej intuicyjne dla osób bez wprawy informatycznej.↩︎</p></li>
<li id="fn3"><p>Jeśli chcemy wybrać jakiś element z listy zagnieżdżonej w innej liście, użyjemy składni w stylu <code>lista[2][5]</code>. W ten sposób z listy o nazwie <code>lista</code> wyciągamy drugi element, a następnie z owego elementu (którym może być inna lista) wyciągamy piąty element.↩︎</p></li>
<li id="fn4"><p>Tak, wiem, że to nie jest lista, tylko wektor. Nie chcę tutaj dodatkowo gmatwać wprowadzając pojęcie wektora. Skutek jest jednak ten sam, nawet jeśli <code>list.files</code> rzeczywiście wyrzucałoby listę, dalej zrobilibyśmy dokładnie to samo.↩︎</p></li>
<li id="fn5"><p>Funkcja niżej mogłaby być zapisana równie dobrze jako <code>lapply(bazy_lista, read_csv, show_col_types = FALSE, name_repair = "unique_quiet")</code>, ale <code>map</code>, a głównie jej pochodne, mają bardziej przejrzystą i konsekwentną konwencję nazywania.↩︎</p></li>
<li id="fn6"><p>Od jakiegoś czasu tidyverse wycofuje się z tej konwencji dodawania argumentów. Jeśli mamy jakieś dodatkowe argumenty do dodania, powinniśmy zrobić to w postaci <a href="podstawy_R#sec-lambda.qmd">funkcji anonimowej</a>. Tym sposobem powinniśmy byli zapisać raczej <code>map(bazy_lista, \(x) {read_csv(x, show_col_types = FALSE, name_repair = "unique_quiet")})</code>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <guid>https://nieobliczalne.pl/posts/automatyzacja.html</guid>
  <pubDate>Tue, 07 Mar 2023 23:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/automatyzacja.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Podstawy programowania w R</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/podstawy_R.html</link>
  <description><![CDATA[ 




<p>W kilku miejscach wrzucam informacje, jak to, co omawiamy teoretycznie, można zrobić w R. <strong>Absolutnie nie jest to konieczne do zrozumienia statystyki!</strong> Jest to tylko jedna z możliwości, jak można opisaną dalej teorię przekuć w praktykę. O R można myśleć jako o programie do robienia statystyki, podobnie jak SPSS, Statistica, Stata czy (oparte na R, darmowe i otwartoźródłowe) jamovi. Jeśli jednak Czytelnik widział kiedyś program statystyczny, spodziewać się będzie ekranu podobnego do Excela, gdzie na górnej belce wybiera się testy statystyczne, jakie chce się przeprowadzić. Praca w R tak nie wygląda. Największa wada i zaleta R polega na tym, że jest on jednocześnie językiem programowania. A to daje bardzo ciekawe możliwości, o których niżej. Także praca w R wygląda tak, że w specjalnym języku piszemy komputerowi, co ma zrobić, potem uruchamiamy te instrukcje i gotowe.</p>
<p>W tym miejscu spróbuję opisać, jak zacząć pracę z R. Nie mam ambicji zrobić pełnego wprowadzenia, bo wyszedłby z tego osobny podręcznik. Mam ambicje dać jakikolwiek fundament, który pozwoli Czytelnikowi wyczyścić dane i zrobić podstawowe testy. Jeśli po przeczytaniu tego tekstu ktoś stwierdzi „Może warto się zagłębić”, to znajdzie mnóstwo materiałów, które mu na to pozwolą. Ze swojej strony mogę polecić podręcznik „Język R. Kompletny zestaw narzędzi dla analityków danych” Wickhama i Grolemunda <span class="citation" data-cites="wickham2020">(2020)</span>, interaktywne kursy na DataCamp, a pomocy w rozwiązaniu konkretnych problemów zawsze można szukać na StackOverflow.</p>
<section id="sec-reasons" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> 10 powodów dla których warto uczyć się R</h1>
<p>Dla niektórych ludzi perspektywa uczenia się języka programowania tylko po to, żeby móc robić testy statystyczne, wydaje się być stratą czasu. Może też budzić. Po co poświęcać tyle energii dla czegoś, co możemy zrobić poprzez klikanie w obrazki w jamovi? Powodów jest wiele i kilka pozwolę sobie wymienić.</p>
<ol type="1">
<li><p>Można zrobić wszystko. Absolutnie wszystko. Nie ma sensu pytać „czy da się to zrobić?“, w R pytamy „jak to zrobić?”. Wyobraźmy sobie, że chcemy zastosować jakiś test i nagle odkrywamy, że nie ma go w naszym programie statystycznym. Jeżeli pracujemy w czymś w rodzaju Statistici, to możemy co najwyżej napisać do deweloperów z nadzieją, że dołożą nasz test w kolejnej aktualizacji, gdzieś za rok. W R prawdopodobnie istnieje już pakiet, który interesujący nas test zawiera. A jeśli nie, to jeśli mamy wzór matematyczny, to wklepanie go w R to nic trudnego.</p></li>
<li><p>R to darmowe, otwartoźródłowe oprogramowanie (tzw. FOSS). Wszystkie pakiety, których używam dalej, nie kosztują nic. Dla porównania najpopularniejszy program statystyczny na świecie, SPSS <sup>1</sup>, w podstawowej wersji w chwili pisania tego tekstu kosztuje minimum 99 dolarów miesięcznie za osobę. I to nawet nie jest wersja dająca wszystkie możliwości. W R da się policzyć właściwie wszystko to, co w SPSS, korzysta się ze wszystkich innych zalet języka programowania (patrz niżej), a to wszystko za okrągłe 0 dolarów miesięcznie za osobę.</p></li>
</ol>
<!-- -->
<ol start="3" type="1">
<li><p>R to język programowania. Pozwala to na szybką automatyzację dużej liczby zadań i radzenie sobie z nieprzewidzianymi okolicznościami. Dla przykładu program do prowadzenia eksperymentów psychologicznych PsychoPy generuje dane w dość pogmatwanych arkuszach kalkulacyjnych, które trzeba dość mocno wyczyścić przed analizą. Problem jest jednak taki, że wyniki każdej osoby badanej zapisują się w osobnych plikach. Jeśli przebadaliśmy 150 osób, mamy 150 plików do wyczyszczenia. Jeśli piszemy analizę w R, to wystarczy wyczyścić jeden plik, a potem dopisać linijkę czy dwie, żeby R tak samo wyczyścił pozostałe 149 plików. Bardzo cenię sobie też możliwość łatwego wygenerowania nazw dla kolumn typu MMPI_001, MMPI_002, …, MMPI_567. Wpisywanie tego ręcznie to nuda i marnowanie czasu, a w R to jedna linijka kodu.</p></li>
<li><p>Analizy są modyfikowalne i wielorazowego użytku. Co mam na myśli? Załóżmy, że zrobiliśmy całą analizę i nagle się orientujemy, że nie usunęliśmy z bazy kilku wierszy, które wytworzyliśmy podczas testów. Albo prowadzący przy sprawdzaniu prosi, żeby zmodyfikować nieco analizę, bo chce wyniki kwestionariuszy wyrażone jako średnia, a nie suma. Jeśli korzystamy ze zwykłego oprogramowania, w obu przypadkach musimy wyklikiwać analizy od początku. Jeśli nasza analiza jest w R, to mamy ją całą zapisaną przed oczami. Możemy zmienić coś na samym jej początku, kliknąć jeden guzik i gotowe. Jeszcze lepiej – ta analiza siedzi na naszym komputerze, póki jej nie usuniemy. Jeśli kiedyś trzeba by było wykonać podobne zadanie, to wystarczy prosta operacja kopiuj-wklej.</p></li>
<li><p>R to kompletny zestaw narzędzi dla analityków danych, jak głosi tytuł polecanej na wstępie książki. Nie są to słowa rzucone na wiatr. Korzystając np. z jamovi, zazwyczaj wcześniej czyścimy dane w Excelu. Jeśli potrzebujemy dane zmodyfikować, np. połączyć dwie bazy albo zmienić format szeroki na długi<sup>2</sup>, to również musimy sięgnąć do Excela. A Excel to nie jest program do czyszczenia danych, wiele rzeczy musimy wykonywać ręcznie albo musimy nauczyć się Power Query. Potem robimy analizę w programie statystycznym, ładne wykresy (znwou w Excelu) i piszemy raport w Wordzie. W R da się zrobić to wszystko. Mamy do dyspozycji potężne i giętkie czyszczenie danych (za które uwielbiam R) z <code>dplyr</code>, testy statystyczne np. z <code>rstatix</code>, ładne wykresy w <code>ggplot2</code>, a na końcu nawet raport w Quarto (dawniej RMarkdown). Możemy nie wychodzić z R i wykonać całą pracę od początku, do końca.</p></li>
</ol>
<!-- -->
<ol start="6" type="1">
<li>Wykresy. Wspominałem o tym wyżej, ale wykresy są warte osobnego punktu. Możliwości Excela w tym zakresie są ograniczone. Dla przykładu wykres poniżej prezentuje wyniki pewnego badania w którym mierzono homofobię u ludzi różniących się obecnością manipulacji i poziomem cechy psychologicznej zwanej normatywną męskością. Wykres jest dość skomplikowany. Zawiera trzy zmienne dychotomiczne, co daje łącznie 8 kolumn w grupach po 4 i 2 na wspólnych osiach. Nie powiem, że zrobić taki wykres jest łatwo, bo dobre opanowanie <code>ggplot2</code> trochę zajmuje, ale gdy już opanujemy, co jest do opanowania, to hulaj dusza. Nawet najbardziej skomplikowane wykresy stają się możliwe. Gdy połączyć to z możliwościami dawanymi przez programistyczną warstwę R, łatwe staje się wytworzenie serii pasujących do siebie stylem wykresów o tych samych wymiarach. Pozwala to uzyskać pełną spójność bez ręcznego poprawiania szczególików.</li>
</ol>
<div id="fig-homofobia" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-homofobia-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/ilustracje/homofobia.svg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-homofobia-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;1: Homofobia u mężczyzn o zagrożonej i niezagrożonej męskości, w zależności od tego, jak wysoką mieli tzw. normatywną męskość. Gdy dodać to tego jeszcze podział na dwa rodzaje homofobii, robią się z tego trzy podziały i osiem różnych kolumn ze wspólnymi osiami, legendą i kolorami. Zrobienie tego w Excelu, o ile w ogóle możliwe, byłoby bardzo trudne.
</figcaption>
</figure>
</div>
<!-- -->
<ol start="7" type="1">
<li><p>Analizy można napisać niezależnie od procesu zbierania danych. Na III roku studiów miałem projekt studencki, w którym musieliśmy zrobić prosty eksperyment w PsychoPy, przeanalizować dane i zaprezentować wyniki. Termin był krótki, także ostatnie dane większość grup zdążyła zebrać dopiero na dzień przed terminem, w tym moja. Oznaczało to, że osoby robiące analizę statystyczną musiały siedzieć do późna, żeby zdążyć na czas. Ale że już wtedy umiałem co nieco R, to napisałem całą analizę kilka dni wcześniej, kiedy akurat miałem wolny wieczór. Kiedy zebraliśmy ostatnie dane, wystarczyło kliknąć „Run” i gotowe – wykresy, testy, w mgnieniu oka policzone dla całego zestawu danych (wyczyszczonych! jak wspominałem wyżej, w PsychoPy czyszczenie danych bywa żmudne).</p></li>
<li><p>R jest zgodny z filozofią Open Science. O ruchu Open Science można mówić bardzo długo, ale ogólnie dąży on do otwartego dostępu do raportów naukowych (za darmo), surowych danych i dokładnych opisów analiz statystycznych. Jeśli naukowiec załącza do swojego artykułu surową bazę danych i skrypt w R, inni naukowcy mogą sprawdzić, czy tamten nie manipulował danymi, nie stosował podejrzanych praktyk oraz czy po ludzku się gdzieś nie pomylił. Poza tym każdy może powtórzyć jego analizę i sprawdzić, czy rzeczywiście wychodzi, jak naukowiec zaraportował. Utrudnia to nadużycia, które – niestety – czasami w nauce się zdarzają.</p></li>
<li><p>R jest świetnym&nbsp;środowiskiem do współpracy. Wiele osób może pracować nad jedną analizą statystyczną, podobnie jak teraz pracujemy nad prezentacjami czy plikami w Wordzie – online. Współpracownicy mogą czytać swój kod, uzupełniać się nawzajem, wprowadzać poprawki i dzielić się pracą nawet w obrębie pojedynczych czynności do wykonania. W programach, w których analizy wyklikujemy, jest to znacznie trudniejsze. Gdy mamy kod przed oczami, widzimy wyraźnie, co współpracownik robi i jak mu pomóc.</p></li>
<li><p>R wymaga, by wiedzieć, co się robi. Niektórzy mogą to potraktować jako wadę, ale ja sądzę, że to wielka zaleta. Jeśli chcę nauczyć się statystyki, żeby sprawnie zrobić analizy do swojej pracy magisterskiej i rozumieć analizy z artykułów naukowych, to muszę wiedzieć, co robię. Z R ciężko jest nauczyć się na pamięć, w co klikać, a potem po prostu robić to za każdym razem tak samo. Jest to swego rodzaju wyzwanie, ale cenne.</p></li>
</ol>
</section>
<section id="sec-preparation" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Przygotowanie</h1>
<p>Żeby zacząć pracować z R, trzeba R pobrać i zainstalować<sup>3</sup>. Pobrać R możemy ze strony <a href="https://www.r-project.org">r-project.org</a>. W menu po lewej znajduje się nagłówek <em>Download</em>, a pod nim odnośnik <em>CRAN</em> (<em>Comprehensive R Archive Network</em>, można to nazwać głównym serwerem R). Podchwytliwe jest to, że po wejściu w odnośnik do CRAN pojawi nam się dziwnie wyglądająca lista linków. To strona internetowa pyta nas, z jakiego serwera chcemy pobrać R. Najsensowniej jest wybrać <em>0-Cloud</em>, czyli coś, co przekieruje nas do optymalnego serwera. Reszta jest już dość intuicyjna – pobieramy R dla naszego systemu i instalujemy jak każdy inny program.</p>
<p>Druga sprawa to IDE, czyli coś, w czym będziemy pisać nasze skrypty. Ale jak to? R nie wystarczy? Technicznie wystarczy, ale R to program działający z wiersza poleceń. To jest to czarne okienko, gdzie wpisujemy komendy ręcznie. Większość z nas będzie chciała skorzystać z czegoś bardziej przystępnego niż goły wiesz poleceń. Standardem jest tu program o nazwie RStudio<sup>4</sup>. Możemy go pobrać ze strony <a href="https://posit.co">posit.co</a> w wersji Desktop. Z tym raczej nie będzie już problemu.</p>
<p>Gdy zainstalujemy i uruchomimy RStudio, naszym oczom ukaże się biały ekran, który na razie nie ma sensu, ale go nabierze. Przed rozpoczęciem pracy warto jest zajrzeć w ustawienia (Tools → Global options…), gdzie możemy zmienić kilka rzeczy. W zakładce Appearance możemy ustawić sobie ciemny tryb<sup>5</sup> i poczuć się jak programista. W zakładce Spelling możemy wybrać polski słownik do sprawdzania pisowni. Na ten moment tyle zmian powinno wystarczyć.</p>
</section>
<section id="sec-env" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Środowisko R i RStudio</h1>
<section id="sec-console" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="sec-console"><span class="header-section-number">3.1</span> Konsola, zmienne i matematyka</h2>
<p>Ekran RStudio składa się z trzech okienek. Duże okienko po lewej i dwa mniejsze po prawej. Skierujmy naszą uwagę na okienko po lewej, czyli konsolę. Wita nas ona ciepłą informacją, że R jest zainstalowany. Znakiem zachęty <code>&gt;</code> zachęca nas do wydawania jej poleceń. Konsola R to miejsce, w którym możemy mówić R, żeby coś dla nas liczył. Można to potraktować jako super-kalkulator. Spróbuj – wpisz w konsolę <code>2+3*5</code>, zatwierdź enterem i zwróć uwagę, że R stosuje poprawną kolejność wykonywania działań. Spacje nie mają znaczenia, także możemy wpisać również bardziej estetyczną wersję <code>2 + 3 * 5</code>. Nie wiem po co, skoro to tylko obliczenie na szybko, ale można.</p>
<p>Wynik takiego działania nigdzie się nie zapisuje, tylko wyświetla się w konsoli. Jeśli chcemy zapisać nasz wynik, możemy to zrobić stosując znaczek <code>&lt;-</code><sup>6</sup>. Przydatnym skrótem jest tu w RStudio jest Alt+-, który od razu wstawia nam tę strzałeczkę. Wyjaśnijmy to na przykładzie.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">wynik <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wynik <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
</div>
<p>Powyżej zapisałem dwa polecenia, które do konsoli powinniśmy wpisać jedno po drugim i każde z nich zatwierdzić enterem. Pierwsze polecenie mówi konsoli – policz <code>2 + 3 * 5</code> i zapisz to w zmiennej <code>wynik</code>. Po zatwierdzeniu tego polecenia możemy zauważyć, że wynik działania nam się nie wyświetlił. Za to w prawym górnym okienku pojawiło się słowo <code>wynik</code> i obok wartość <code>17</code>. Od tego momentu możemy używać słowa <code>wynik</code> zamiast liczby 17. Spróbuj wpisać w konsolę samo słowo <code>wynik</code> i zatwierdzić enterem. Wyskoczy 17. Jeśli teraz wpiszesz np. <code>wynik * 2</code>, to konsola zwróci to samo, co zwróciłaby po wpisaniu <code>17 * 2</code>, czyli 34. Co więc robi drugie polecenie z przyładu? Możemy je odczytać jako „W zmiennej o nazwie <code>a</code> zapisz (<code>a &lt;-</code>) wynik mnożenia zmiennej <code>wynik</code> i 3 do potęgi 3 (<code>wynik * 3^3</code>)“. Operator <code>^</code> oznacza potęgowanie. Jeśli potem wpiszemy w konsolę <code>a</code>, naszym oczom ukaże się 459, czyli <img src="https://latex.codecogs.com/png.latex?17%20%5Ctimes%203%5E3">.</p>
<p>Jak się potem okaże, w zmiennych możemy zapisywać dużo więcej, niż tylko wyniki prostych działań matematycznych. W identyczny sposób do odpowiednich zmiennych trafią wyniki testów statystycznych albo całe bazy danych. Ale o tym dalej.</p>
</section>
<section id="sec-functions" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="sec-functions"><span class="header-section-number">3.2</span> Funkcje</h2>
<p>Tym, co robi robotę w R (jak i w każdym innym języku programowania) są funkcje. Funkcje to maszyny, do których wrzucamy jakiś obiekt (np. liczbę), funkcja nam to przekształca i wyrzuca z siebie coś innego. Tak samo jak funkcje w matematyce. Skojarzenie jest słuszne, bo funkcje w programowaniu zapisujemy konwencją <code>f(x)</code>, czyli <code>nazwa(co_wrzucam_do_funkcji)</code>. Dla przykładu funkcja o nazwie <code>seq</code> pozwala nam wytwarzać regularne sekwencje liczb, np. od 1 do 10 co 2. Musimy do tej funkcji wrzucić (1) od jakiej liczby chcemy zacząć, (2) na jakiej chcemy skończyć i (3) jaki chcemy mieć krok. Dla przykładu:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">62</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>  [1]  5  8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 62
</code></pre>
</div>
</div>
<p>To, co wrzucamy do funkcji, nazywamy argumentami. Tutaj były nimi liczby. Funkcja <code>seq</code> wie, że ma zacząć od 5 i skończyć na 62, a nie zacząć od 62 i skończyć na 5, bo ma pod maską zapisane, w jakiej kolejności będzie dostawać te liczby. Takie argumenty nazywamy pozycyjnymi – funkcja wie, co to jest i co ma z tym zrobić, na podstawie pozycji. W R każdy argument możemy też jednak nazwać. Dla przykładu wiemy, że argumenty funkcji <code>seq</code> nazywają się <code>from</code>, <code>to</code> i <code>by</code>. Możemy więc wprost powiedzieć funkcji, że oto dajemy jej <code>from</code>, <code>to</code> i <code>by</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">62</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>  [1]  5  8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 62
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">62</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># jeśli nazywamy argumenty, kolejność nie ma znaczenia</span></span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>  [1]  5  8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 62
</code></pre>
</div>
</div>
<p>Tego typu argumenty nazywamy kluczowymi (<em>keyword</em>) albo nazwanymi (<em>named</em>). W praktyce wykorzystuje się mieszankę jednego i drugiego typu argumentów. Nazywanie argumentów zwiększa czytelność kodu, ale czasem pozycja jest wystarczająco jasna. Dla przykładu mogę napisać <code>sqrt(x = 9)</code>, żeby wyciągnąć pierwiastek kwadratowy (<em>square root</em>) z 9, ale czy zapis <code>sqrt(9)</code> jest jakkolwiek mniej jasny?</p>
<p>Czasami też używamy argumentów kluczowych, żeby zmienić jakieś ustawienia domyślne albo odblokować nowe możliwości. Dla przykładu funkcja <code>seq</code> dysponuje dodatkowym argumentem <code>length.out</code>. Jeśli ustawimy <code>length.out</code>, możemy ustalić liczbę elementów w naszym wyniku zamiast punktu końcowego albo kroku.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># daj mi 10 kolejnych liczb zaczynając od 5 i co 3</span></span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>  [1]  5  8 11 14 17 20 23 26 29 32
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># podaj 10 liczb między 1 a 100</span></span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>  [1]   1  12  23  34  45  56  67  78  89 100
</code></pre>
</div>
</div>
</section>
<section id="sec-docs" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="sec-docs"><span class="header-section-number">3.3</span> Dokumentacja</h2>
<p>Różne funkcje przyjmują różne argumenty. Podobnie jak nie powiemy piekarzowi, żeby stosował białą fugę do naszego chleba, tak samo do funkcji <code>seq</code> nie wrzucimy słów zamiast liczb. Tak jak musimy wiedzieć, że piekarz zajmuje się pieczywem, tak samo musimy znać funkcje, których używamy. W poprzednim podrozdziale wiedzieliśmy, co można wrzucić do funkcji <code>seq</code> i jak nazywają się jej argumenty, bo to napisałem. Tak samo podałem ot tak, że argument funkcji <code>sqrt</code> nazywa się <code>x</code>. Skąd mam to jednak wiedzieć?</p>
<p>Nie bez powodu mówimy o <em>językach</em> programowania. Wiele funkcji nauczymy się na pamięć i będziemy po prostu wiedzieć, jak z nich korzystać. Jednak znacznie częściej (w wielu przypadkach też dla funkcji, które znamy) będziemy korzystać z dokumentacji. R dysponuje świetną dokumentacją dla każdej funkcji<sup>7</sup>. Zawiera ona opis, co dana funkcja robi, jakie argumenty przyjmuje, a często nawet tło teoretyczne jej działania. Żeby dostać się do dokumentacji danej funkcji, wywołujemy ją w konsoli ze znakiem zapytania, np. <code>?seq</code>. Powoduje to, że w okienku Help po prawej wyświetla nam się pełna dokumentacja tej funkcji. Nie trzeba więc sięgać do Google, żeby uzyskać odpowiedź na podstawowe problemy. O ile wiemy, jakiej funkcji chcemy użyć. Także zachęcam do częstego sięgania do dokumentacji. To absolutnie podstawowe narzędzie w programowaniu czegokolwiek.</p>
<p>Świetnym źródłem informacji o funkcjach, pozwalającym również znaleźć odpowiednią funkcję do realizacji naszego celu, są ściągi (<em>cheat sheets</em>). Pakiety <code>tidyverse</code> mają nawet swoje oficjalne ściągi, które na początku swojej nauki R wydrukowałem i zalaminowałem. Polecam je gorąco, zwłaszcza do pakietów <code>dplyr</code>, <code>ggplot2</code> i <code>stringr</code>. Można je znaleźć bezpośrednio w RStudio wybierając Help → Cheat sheets → Browse all cheat sheets albo <a href="https://posit.co/resources/cheatsheets/">na stronie Posit</a>, czyli firmy, która wypuszcza RStudio. Jak przejdziemy dalej, do części praktycznej, polecam, żeby mieć te ściągi już przygotowane, wydrukowane lub w .pdf.</p>
</section>
<section id="sec-scripts" class="level2" data-number="3.4">
<h2 data-number="3.4" class="anchored" data-anchor-id="sec-scripts"><span class="header-section-number">3.4</span> Skrypty</h2>
<p>Wpisaliśmy w konsolę już sporo rzeczy. Historię naszych komend możemy zobaczyć przechodząc do odpowiedniej zakładki w prawym górnym okienku. Jednak wyjście z programu może nam skutecznie skasować tę historię. Jeśli mamy całą sporą analizę statystyczną, która składa się z 200 linijek kodu, to chcielibyśmy mieć jakiś sposób na zapisanie tego na przyszłość, żeby nie musieć za każdym razem wklepywać tego kodu z pamięci. Zaopatrujemy się więc w gruby zeszyt w linie i wszystkie komendy piszemy również tam. Żarcik. Do przechowywania kodu służą specjalne pliki zwane skryptami. Tak jak mamy pliki .pdf, .txt, .docx, tak w plikach .R zapisujemy kod R.</p>
<p>Najprościej stworzyć nowy skrypt klikając w biały kwadracik z plusem w lewym górnym rogu RStudio. Spowoduje to otworzenie listy rzeczy, które możemy wytworzyć. Nas w tej chwili interesuje <code>R Script</code>. Gdy utworzymy nasz skrypt, otworzy się on nad konsolą. Warto od razu zapisać go na dysku skrótem Ctrl+S (lub File → Save). Warto się upewnić, że zapisywany plik rzeczywiście kończy się rozszerzeniem .R.</p>
<p>Na razie nasz skrypt jest pusty, ale możemy w nim pisać dowolne polecenia tak samo, jak napisalibyśmy w konsoli. Różnica jest taka, że nie są one od razu wykonywane. Skrypt to tekst. Jeśli chcemy wykonać jakieś polecenie ze skryptu, to albo kopiujemy je do konsoli, albo umieszczamy na nim kursor i klikamy Ctrl+Enter. Możemy też myszką zaznaczyć większy fragment kodu i kliknąć Ctrl+Enter. Jeśli chcielibyśmy wykonać cały nasz skrypt, to zaznaczamy cały kod (Ctrl+A) i ponownie używamy Ctrl+Enter. Ewentualnie możemy skorzystać ze skrótu Ctrl+Shift+S<sup>8</sup>.</p>
<p>To jest najważniejsza różnica między skryptem a konsolą – cokolwiek wpisane w konsolę jest wykonywane natychmiast i znika. Z konsoli korzystamy, kiedy chcemy zrobić jakieś jednorazowe operacje albo coś sobie przetestować. W skrypt wpisujemy to, co chcemy zachować. Ewentualnie szkic, który potem będziemy naprawiać. Gdy ludzie przechodzą nagle z konsoli do skryptu, bardzo często zaczynają wpisywać w swój skrypt różne śmieci, które wcześniej wpisaliby w konsolę. Konsola nie zniknęła, ciągle jest do naszej dyspozycji. Skrypt w swojej ostatecznej postaci powinien jednak działać tak, że jak go uruchomimy, to cały przeleci bez błędów. No, przynajmniej do tego dążymy. Czyli konsola do testów, skrypt do prawdziwego kodu.</p>
</section>
<section id="sec-comments" class="level2" data-number="3.5">
<h2 data-number="3.5" class="anchored" data-anchor-id="sec-comments"><span class="header-section-number">3.5</span> Komentarze</h2>
<p>Jeśli chcielibyśmy zrobić w skrypcie jakąś notatkę, która nie jest kodem, używamy znaczka <code>#</code>. Jest to tzw. komentarz. Możemy na przykład napisać:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello world!"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># czuję się programistą</span></span></code></pre></div>
</div>
<p>Jeśli wykonamy taką linijkę, konsola zignoruje wszystko po znaku <code>#</code>. Pozwala to nam zostawiać sobie notatki w rodzaju <code># hipoteza 1</code> albo <code># nie wiem, czemu to działa, ale działa</code>. Komentowanie kodu może nam (i naszym współpracownikom) ułatwić zrozumienie, o co nam chodziło, gdy to pisaliśmy.</p>
<p>Jeśli chcemy zaopatrzyć nasz kod w nagłówki, żeby podzielić go na sekcje, konwencja mówi, żeby formatować je tak:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Przygotowanie ----</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Ładowanie danych ----</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kod ładujący dane</span></span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Ładowanie bibliotek ----</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kod ładujący biblioteki</span></span></code></pre></div>
</div>
<p>Każdy znaczek <code>#</code> to niższy poziom nagłówka, czyli wytworzyłem sekcję <code>Przygotowanie</code>, a w niej dwie podsekcje <code>Ładowanie danych</code> i <code>Ładowanie bibliotek</code>. Takich poziomów nagłówków możemy mieć, ile chcemy. Nagłówek tym się różni od zwykłego komentarza, że zapisujemy po nim cztery myślniki <code>----</code> lub inne znaki. Tak sformatowane nagłówki wyświetlają się w bocznym panelu <em>outline</em> w RStudio i pozwalają się lepiej ogarnąć i poruszać w długim kodzie. Panel <em>outline</em> możemy rozwinąć skrótem Ctrl+Shift+O albo klikając skrajną prawą ikonkę nad edytorem skryptu (poziome kreski na prawo od guzika <code>Source</code>).</p>
</section>
<section id="sec-projects" class="level2" data-number="3.6">
<h2 data-number="3.6" class="anchored" data-anchor-id="sec-projects"><span class="header-section-number">3.6</span> Projekty</h2>
<p>Zazwyczaj projekt badawczy składa się z wielu plików. Nie jest to tylko kod R, ale też chociażby pliki z danymi, instrukcje do metod badawczych itd. Zazwyczaj trzymamy to wszystko w jednym folderze. O ile utrzymujemy jakikolwiek porządek w plikach. Możemy też mieć całe studia luzem na pulpicie, nie oceniam. RStudio pomaga nam w zarządzaniu takimi grupami plików poprzez projekty. Projekty w RStudio robią kilka rzeczy, m.in. pozwalają ustawić niestandardowe opcje (np. zmienić język słownika na angielski tylko dla tego jednego projektu), zapamiętać otwarte okna i ich układ, ale przede wszystkim pomagają nam lokalizować pliki znajdujące się w tym samym folderze<sup>9</sup>. Zawsze, kiedy planujemy zachować jakiś zbiór powiązanych plików na dłużej, warto jest wytworzyć projekt.</p>
<p>Projekty tworzymy i otwieramy przez guzik w prawym górnym rogu. Rozwijane menu pozwala nam stworzyć nowy projekt, a wyskakujące okienko pyta, czy wytworzyć go w już istniejącym folderze, stworzyć nowy folder, czy może pobrać repozytorium Git. Jeśli wybraliśmy nowy folder, mamy kilka typów projektów do wyboru, ale w większości przypadków wybieramy po prostu <code>New Project</code>. Okienko pozwala nam nadać projektowi nazwę, wybrać jego lokalizację, a także wytworzyć puste repozytorium Git<sup>10</sup>. RStudio wytworzy nam w ten sposób plik .Rproj organizujący nasz projekt.</p>
</section>
<section id="sec-libs" class="level2" data-number="3.7">
<h2 data-number="3.7" class="anchored" data-anchor-id="sec-libs"><span class="header-section-number">3.7</span> Pakiety</h2>
<p>Pakiety (<em>packages</em> lub <em>libraries</em>) to niejako dodatki do R, które rozszerzają jego możliwości. Dla przykładu – R w swojej podstawowej wersji nie ma funkcji liczącej skośność. Nie jest to jednak żaden problem, bo możemy R rozszerzyć np. o pakiet o nazwie <code>e1071</code> albo <code>moments</code>. Oba te pakiety dodają nam do R możliwość szybkiego i prostego policzenia skośności. Pakiety – w olbrzymiej większości – są darmowe.</p>
<p>Absolutnie podstawowym pakietem, czy właściwie zbiorem pakietów, jest <code>tidyverse</code>. <code>tidyverse</code> usprawnia R właściwie we wszystkim, co w podstawowej wersji jest niewygodne – <code>readr</code> (<em>czyt.</em> rider) pozwala łatwo ładować dane, <code>dplyr</code> (<em>czyt.</em> diplajer) niesamowicie usprawnia czyszczenie danych, <code>lubridate</code> i <code>stringr</code> (<em>czyt.</em> stringer) to podstawowe narzędzie do pracy odpowiednio z datami i z tekstem<sup>11</sup>, nie mówiąc już o <code>ggplot2</code>, czyli najpotężniejszym narzędziu do tworzenia wykresów. Współcześnie <code>tidyverse</code> to podstawowy sposób programowania w R. Na szczęście nie musimy wszystkich tych pakietów przywoływać z osobna, bo możemy załadować je wszystkie naraz, ładując jeden zbiorczy pakiet <code>tidyverse</code>. Pakiety ładujemy za pomocą funkcji <code>library</code>, do której wrzucamy nazwę pakietu w cudzysłowie. Nasz skrypt zaczniemy więc od takiej instrukcji:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
</div>
<p>Jeśli robimy to po raz pierwszy, to po wykonaniu polecenia konsola wyrzuci nam błąd <code>Błąd w poleceniu 'library("tidyverse")':nie ma pakietu o nazwie ‘tidyverse’</code>. Wynika to z faktu, że instrukcja <code>library</code> tylko ładuje pakiet, ale nie pobiera ich wcześniej. Na szczęście robimy to tylko raz. Zawsze później wystarczy samo <code>library</code>. Dlatego też nie będziemy wpisywać komendy instalującej pakiet do skryptu, tylko bezpośrednio do konsoli. Nie chcemy w końcu, żeby pakiet <code>tidyverse</code> instalował się za każdym razem, kiedy będziemy uruchamiać skrypt. Będzie to niemiłosiernie spowalniało skrypt i wymuszało dostęp do Internetu. Dlatego też <strong>do konsoli</strong> wpisujemy:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
</div>
<p>Innym sposobem instalowania pakietów jest skierowanie się w prawe dolne okienko w RStudio, przejście do zakładki Packages, kliknięcie guzika Install, wpisanie nazwy pakietu w wyskakującym okienku (już bez cudzysłowu) i zatwierdzenie guzikiem Install.</p>
<p>Gdy zainstalujemy już pakiet <code>tidyverse</code> – dowolną z metod – ponownie próbujemy go załadować, tym razem już bez błędu. Konsola poinformuje nas wtedy co dokładnie załadowała.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> ── </span><span style="color: #BB0000; font-weight: bold;">Attaching core tidyverse packages</span><span style="color: #BB0000;"> ──────────────────────── tidyverse 2.0.0 ──
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BB00;">✔</span><span style="color: #BB0000;"> </span><span style="color: #0000BB;">dplyr    </span><span style="color: #BB0000;"> 1.1.2     </span><span style="color: #00BB00;">✔</span><span style="color: #BB0000;"> </span><span style="color: #0000BB;">purrr    </span><span style="color: #BB0000;"> 1.0.1
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BB00;">✔</span><span style="color: #BB0000;"> </span><span style="color: #0000BB;">forcats  </span><span style="color: #BB0000;"> 1.0.0     </span><span style="color: #00BB00;">✔</span><span style="color: #BB0000;"> </span><span style="color: #0000BB;">readr    </span><span style="color: #BB0000;"> 2.1.4
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BB00;">✔</span><span style="color: #BB0000;"> </span><span style="color: #0000BB;">ggplot2  </span><span style="color: #BB0000;"> 3.4.2     </span><span style="color: #00BB00;">✔</span><span style="color: #BB0000;"> </span><span style="color: #0000BB;">stringr  </span><span style="color: #BB0000;"> 1.5.0
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BB00;">✔</span><span style="color: #BB0000;"> </span><span style="color: #0000BB;">lubridate</span><span style="color: #BB0000;"> 1.9.2     </span><span style="color: #00BB00;">✔</span><span style="color: #BB0000;"> </span><span style="color: #0000BB;">tidyr    </span><span style="color: #BB0000;"> 1.3.0
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> ── </span><span style="color: #BB0000; font-weight: bold;">Conflicts</span><span style="color: #BB0000;"> ────────────────────────────────────────── tidyverse_conflicts() ──
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> ✖ </span><span style="color: #0000BB;">dplyr</span><span style="color: #BB0000;">::</span><span style="color: #00BB00;">filter()</span><span style="color: #BB0000;"> masks </span><span style="color: #0000BB;">stats</span><span style="color: #BB0000;">::filter()
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> ✖ </span><span style="color: #0000BB;">dplyr</span><span style="color: #BB0000;">::</span><span style="color: #00BB00;">lag()</span><span style="color: #BB0000;">    masks </span><span style="color: #0000BB;">stats</span><span style="color: #BB0000;">::lag()
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">ℹ</span><span style="color: #BB0000;"> Use the conflicted package (</span><span style="color: #0000BB; font-style: italic;">&lt;http://conflicted.r-lib.org/&gt;</span><span style="color: #BB0000;">) to force all conflicts to become errors
</span></code></pre>
</div>
</div>
</section>
</section>
<section id="sec-loading" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Ładowanie danych z <code>readr</code></h1>
<p>Jeśli chcemy cokolwiek liczyć, musimy mieć na czym liczyć. R ma wiele sposobów ładowania danych, które w każdym podręczniku zajmują cały rozdział. R poradzi sobie z prawie każdym formatem danych, a także potrafi ładować je bezpośrednio z serwerów (dla przykładu pakiet <code>googlesheets4</code> pozwala ładować pliki z Google Sheets bez pobierania ich na dysk albo <code>QualtRics</code> ułatwiający importowanie plików z danymi ankietowymi z Qualtrics).</p>
<p>Wszystkie bazy, których używam w tym tekście, są dostępne w repozytorium na GitHubie. Można wejść w <a href="https://github.com/jakub-jedrusiak/jakub-jedrusiak.github.io/tree/main/statystyka/dane/podstawy-R">ten link</a>, wybrać pożądany plik i albo pobrać go na własny dysk, albo zamiast ścieżki do pliku użyć linku w cudzysłowie. By uzyskać właściwy link, należy kliknąć <code>raw</code> tuż nad treścią pliku. Takie linki można wklejać w komendy czytające dane zamiast ścieżek. Przykład linku, jak i tego, jak używać ich z funkcjami typu <code>read_csv</code> podaję w podrozdziale 5.7 o grupowaniu.</p>
<p>Podstawowe pakiety do ładowania danych do <code>readr</code> i <code>readxl</code> dla plików Excela. Na początek nie trzeba znać składni funkcji ładujących dane, bo RStudio dysponuje przyjemnym graficznym narzędziem do ładowania danych. Jeśli w prawym dolnym oknie, w zakładce Files, klikniemy na plik zawierający dane, dostaniemy do dyspozycji opcję Import Dataset… Po jej wybraniu otworzy nam się okno z podglądem danych i kilkoma opcjami do dostosowania, m.in. czy jakichś wierszy nie pominąć albo z którego arkusza pobrać dane. W plikach .csv czasem musimy też wybrać rodzaj separatora i znaku dziesiętnego (opcja Locale). W polskich plikach z danymi separatorem jest zazwyczaj średnik, a znakiem dziesiętnym przecinek (125 421,55), podczas gdy w angielskich danych będą to odpowiednio przecinek i kropka (125,421.55). Jeśli nie ustawimy znaku dziesiętnego, R może potraktować liczby z przecinkiem jako tekst. Poza tym możemy kliknąć w każdy nagłówek kolumny i wybrać typ danych, ale to niebezpieczna opcja, lepiej tego nie robić. Dane powinny być czyste, tj. kolumny liczbowe powinny zawierać same liczby. Jeśli dane nie są czyste (a zazwyczaj nie są), możemy je wyczyścić potem.</p>
<p>Możemy kliknąć Import, by dopełnić dzieła, ale jeśli tworzymy skrypt, będzie nas interesowała komenda, jaką RStudio dla nas przygotowało w czarnym okienku w prawym dolnym rogu. W pierwszej linijce RStudio proponuje załadowanie odpowiedniego pakietu. Warto to wpisać na początku skryptu, w miejscu, gdzie załadowaliśmy <code>tidyverse</code>. Jeśli proponowanym pakietem jest <code>readr</code>, nie musimy ładować go oddzielnie, bo ładując pakiet <code>tidyverse</code> załadowaliśmy od razu <code>readr</code>. Druga linijka do właściwe ładowanie danych. Widzimy znaną nam już składnię <code>nazwa &lt;-</code>. Nasze dane potrzebują jakiejś nazwy, za pomocą której będziemy się do niej odnosić. Może być to <code>df</code>, <code>dane</code>, <code>warunek_kontrolny</code> czy cokolwiek innego. Za strzałką mamy funkcję odczytującą dane. Najpewniej będzie to <code>read_csv()</code> albo <code>read_excel()</code>. Do tych funkcji wrzucamy jako pierwszy argument lokalizację naszego pliku z danymi w cudzysłowie (‘pojedynczym’ lub “podwójnym”). Ponieważ nam komendę przygotowało RStudio, możemy ją po prostu skopiować i wkleić do naszego skryptu, zmieniając tylko nazwę zmiennej. Co robią poszczególne argumenty, możemy sprawdzić w dokumentacji. Jeśli dane ładuje <code>readr</code>, wykonanie takiej komendy spowoduje ukazanie się informacji zwrotnej – jakie kolumny załadowano i jaki mają typ. Dla przykładu:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dane/podstawy-R/complex_database.csv"</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Rows: </span><span style="color: #0000BB;">54</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Columns: </span><span style="color: #0000BB;">18</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">──</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Column specification</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">────────────────────────────────────────────────────────</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Delimiter:</span><span style="color: #BB0000;"> ","
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> chr (17): Godzina rozpoczęcia, Godzina ukończenia, Adres e-mail, Płeć, Wiek ...
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BB00;">dbl</span><span style="color: #BB0000;">  (1): ID
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> 
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">ℹ</span><span style="color: #BB0000;"> Use `spec()` to retrieve the full column specification for this data.
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">ℹ</span><span style="color: #BB0000;"> Specify the column types or set `show_col_types = FALSE` to quiet this message.
</span></code></pre>
</div>
</div>
<div id="fig-readr" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-readr-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/ilustracje/readr_gif.gif" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-readr-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;2: Przykład wykorzystania narzędzia do importu danych.
</figcaption>
</figure>
</div>
<p>Już widzę, że nic mi się nie zgadza. Z 18 kolumn 17 zostało rozpoznane jako kolumny tekstowe (<code>chr</code>), a tylko kolumna ID jako liczby (<code>dbl</code>). Za chwilę będziemy to czyścić. Żeby wyświetlić nasze dane, mogę wpisać w konsolę nazwę, pod którą je zapisałem. Nasza baza pojawiła się też w okienku w prawym górnym rogu. Kliknięcie na nią tam spowoduje wyświetlenie jej w oddzielnej karcie. Warto zauważyć, że nie możemy jej tam edytować.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">df</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 54 × 18</span>
<span style="color: #555555;">#&gt;</span>       <span style="font-weight: bold;">ID</span> <span style="font-weight: bold;">`Godzina rozpoczęcia`</span> <span style="font-weight: bold;">`Godzina ukończenia`</span> <span style="font-weight: bold;">`Adres e-mail`</span> <span style="font-weight: bold;">Płeć</span>     
<span style="color: #555555;">#&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>                 <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>                <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>          <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>    
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span>     1 1.19.22 11:24:43      1.19.22 11:38:14     anonymous      Mężczyzna
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span>     2 1.24.22 14:11:36      1.24.22 14:30:04     anonymous      Mężczyzna
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span>     3 1.25.22 16:01:13      1.25.22 16:24:52     anonymous      Mężczyzna
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span>     5 3.2.22 13:47:15       3.2.22 13:47:24      anonymous      Kobieta  
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span>     6 3.2.22 13:43:52       3.2.22 13:56:57      anonymous      Mężczyzna
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span>     7 3.2.22 13:53:10       3.2.22 13:58:56      anonymous      Mężczyzna
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span>     8 3.2.22 14:05:34       3.2.22 14:05:41      anonymous      Kobieta  
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span>     9 3.2.22 14:29:52       3.2.22 14:41:41      anonymous      Mężczyzna
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span>    10 3.2.22 14:37:15       3.2.22 14:45:22      anonymous      Mężczyzna
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span>    11 3.2.22 14:50:30       3.2.22 14:50:33      anonymous      Kobieta  
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 44 more rows</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 13 more variables: </span><span style="color: #555555; font-weight: bold;">`Wiek (ukończony w latach)`</span><span style="color: #555555;"> &lt;chr&gt;, </span><span style="color: #555555; font-weight: bold;">Wykształcenie</span><span style="color: #555555;"> &lt;chr&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">`Wyrażam świadomą i dobrowolną zgodę na udział w badaniu.`</span><span style="color: #555555;"> &lt;chr&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">`Takie widoki w przestrzeni publicznej są normalne [1/10]`</span><span style="color: #555555;"> &lt;chr&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">`Takie widoki w przestrzeni publicznej są normalne [2/10]`</span><span style="color: #555555;"> &lt;chr&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">`Takie widoki w przestrzeni publicznej są normalne [3/10]`</span><span style="color: #555555;"> &lt;chr&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">`Takie widoki w przestrzeni publicznej są normalne [4/10]`</span><span style="color: #555555;"> &lt;chr&gt;, …</span>
</code></pre>
</div>
</div>
</section>
<section id="sec-wrangling" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Data wrangling</h1>
<p>Tutaj zaczyna się zabawa. <em>Data wrangling</em> to zbiorcze określenie na wszystkie te działania, kiedy zmieniamy formę naszych danych. Na przykład musimy wziąć tylko niektóre kolumny, odfiltrować jakieś przypadki (np. wybrać tylko osoby z grupy kontrolnej), całkiem zmienić formę danych (np. z szerokiej na długą), dodać nowe zmienne czy przypadki (np. zsumować wyniki kwestionariusza), zmodyfikować kolumny (np. odwrócić punktację w jakiejś pozycji kwestionariusza) itp. itd. Tak naprawdę to to, a nie samo wykonywanie testów statystycznych, zajmuje najwięcej czasu i powoduje najwięcej problemów. Jak więc się za to zabrać?</p>
<p>Zarówno tutaj, jak i później, nie będę wchodził w to, <em>dlaczego</em> coś działa jak działa. Większość poradników R opisuje, jak wykonać pewne operacje w podstawowym R, a następnie jak to robi się współcześnie, czyli wykorzystując pakiet <code>tidyverse</code>. O ile znajomość podstawowego R jest niezbędna do wykonywania bardziej skomplikowanych operacji i przydaje się, gdy coś nie działa i trzeba to jakoś naprawić, to tutaj jednak skupię się na tym, jak to się robi rzeczywiście, a współcześnie podstawy to <code>tidyverse</code>.</p>
<section id="sec-choosing" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="sec-choosing"><span class="header-section-number">5.1</span> Wybieranie kolumn i wierszy</h2>
<p>Bardzo często będziemy potrzebowali tylko określonych kolumn albo tylko określonych wierszy. Przeglądając nasze dane zauważamy, że składają się w dużej części z niepotrzebnych kolumn, jakie wygenerował dla nas program do ankiet. Kolumny takie jak godziny wypełniania są nam niepotrzebne do analizy. Co więcej nasze dane to fragment bazy danych z badania, w którym mówiliśmy mężczyznom, że są mało męscy. Potem patrzyliśmy, jak to wpłynie na nich homofobię. Badaliśmy więc wyłącznie mężczyzn, a mimo to ankietę próbowało też wypełnić kilka kobiet i osób o innej płci. Ponieważ ankieta nie dopuściła ich nawet do metryczki, widzimy w ich przypadkach wartości <code>NA</code>, co w R oznacza „brak danych”.</p>
<section id="sec-filter" class="level3" data-number="5.1.1">
<h3 data-number="5.1.1" class="anchored" data-anchor-id="sec-filter"><span class="header-section-number">5.1.1</span> Filtrowanie wierszy z <code>dplyr::filter</code></h3>
<p>Zacznijmy od tego, że w naszej bazie zostawimy tylko mężczyzn. Wszystkie komendy poniżej wpisuję w konsoli, dla testów. Jeśli wpisujemy komendy modyfikujące dane i nie dodamy specjalnej instrukcji zapisującej, to nie zapisujemy zmian, więc możemy bezpiecznie sprawdzić, co się stanie, jak rzeczywiście to zrobimy. Dopiero na koniec podam, jak nasze zmiany rzeczywiście zapisać. Zachęcam do tego, żeby kolejne kroki pisać samodzielnie (może być w skrypcie) i potem wykonywać, żeby widzieć wszystkie pośrednie kroki. Jak więc odfiltrować nie-mężczyzn? Robimy to za pomocą komendy <code>filter()</code><sup>12</sup>. <code>tidyverse</code> opiera się o intuicyjnie brzmiące czasowniki takie jak <code>filter</code>, <code>select</code>, <code>group_by</code>, <code>summarise</code> itd. Komenda <code>filter</code> przyjmuje naszą bazę i jakieś warunki, np. płeć męska. W naszym wypadku będzie to wyglądać tak:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>)</span></code></pre></div>
</div>
<p>Dobra, co to jest <code>%&gt;%</code>? Nie było o tym mowy. Owszem, nie było, ale to bardzo wygodna rzecz. Nazywa się <em>pipe</em> (tłumaczone jako <em>potok</em>, bo <em>rura</em> nieładnie brzmi). Mówi mniej więcej „wrzuć to do tego”. W naszym przykładzie <code>df %&gt;% filter()</code> oznacza „wrzuć bazę danych <code>df</code> do funkcji <code>filter</code>“, czyli dokładnie to samo, co <code>filter(df)</code>. Po co więc w ogóle bawić się w potoki? Bo pozwalają nam wygodnie łączyć komendy w ciągi, jak zobaczymy za chwilę. Do wstawiania potoków służy nam wygodny skrót klawiszowy Ctrl+Shift+M, który jest chyba najczęściej stosowanym skrótem przy pisaniu dowolnego programu.</p>
<p>Druga kwestia to podział na linijki. Rozbiłem tę komendę na dwie linijki dla czytelności, ale spokojnie mógłbym zapisać to w jednej linijce. Warto jednak pisać kod tak, żeby dało się go potem łatwo czytać. RStudio podpowiada nam też wcięcia, żebyśmy widzieli, że te linijki tworzą jedną całość. W podrozdziale 9 powiem więcej o formatowaniu kodu.</p>
<p>Ta komenda oznacza „weź zmienną <code>df</code>, wrzuć ją do komendy <code>filter</code> i zostaw tylko te przypadki, w których w kolumnie <code>Płeć</code> jest wartość <code>"Mężczyzna"</code>.” Nazwy kolumn piszemy bez cudzysłowu, ale jeśli wartość komórki to tekst, to zawsze piszemy go w cudzysłowie. Inaczej R pomyśli, że podajemy mu jakąś zmienną, z której ma dopiero odczytać, co ma być w kolumnie <code>Płeć</code>. Nam chodzi o dosłowny tekst <code>"Mężczyzna"</code>.</p>
<p>Ostatecznie zostaje operator logiczny. Dlaczego piszę <code>==</code> zamiast <code>=</code>? W programowaniu znak <code>=</code> służy do przypisywania wartości do zmiennych. Zapis <code>a = 5</code> oznacza „niech <code>a</code> ma wartość 5”. Sprawdzenie <em>czy</em> <code>a</code> ma wartość 5 odbywa się poprzez komendę <code>a == 5</code>. Konsola wyrzuci nam wtedy <code>TRUE</code>, <code>FALSE</code> albo <code>BŁĄD: nie znaleziono obiektu 'a'</code>. Kilka innych operatorów logicznych prezentuje tabela.</p>
<table class="caption-top table">
<caption>Część operatorów logicznych dostępnych w R.</caption>
<colgroup>
<col style="width: 25%">
<col style="width: 38%">
<col style="width: 36%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Operator</strong></th>
<th style="text-align: center;"><strong>Znaczenie</strong></th>
<th style="text-align: right;"><strong>Przykład</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>==</td>
<td style="text-align: center;">równa się</td>
<td style="text-align: right;"><code>Płeć == "Mężczyzna"</code></td>
</tr>
<tr class="even">
<td>!=</td>
<td style="text-align: center;">nie równa się</td>
<td style="text-align: right;"><code>Płeć != "Kobieta"</code></td>
</tr>
<tr class="odd">
<td>&gt; (&gt;=)</td>
<td style="text-align: center;">większe niż<br>(większe lub równe)</td>
<td style="text-align: right;"><code>Wiek &gt; 40</code></td>
</tr>
<tr class="even">
<td>&lt; (&lt;=)</td>
<td style="text-align: center;">mniejsze niż<br>(mniejsze lub równe)</td>
<td style="text-align: right;"><code>Wiek &lt; 40</code></td>
</tr>
<tr class="odd">
<td>|</td>
<td style="text-align: center;">lub</td>
<td style="text-align: right;"><code>Wiek &lt; 18 | Wiek &gt; 60</code></td>
</tr>
<tr class="even">
<td>&amp;</td>
<td style="text-align: center;">i</td>
<td style="text-align: right;"><code>Płeć == "Mężczyzna" &amp; Wiek &gt; 40</code></td>
</tr>
<tr class="odd">
<td>%in%</td>
<td style="text-align: center;">zawiera się w zbiorze</td>
<td style="text-align: right;"><code>Płeć %in% c("Kobieta", "Inna")</code></td>
</tr>
<tr class="even">
<td>!</td>
<td style="text-align: center;">zaprzeczenie</td>
<td style="text-align: right;"><code>! Płeć %in% c("Kobieta", "Inna")</code></td>
</tr>
</tbody>
</table>
</section>
<section id="sec-select" class="level3" data-number="5.1.2">
<h3 data-number="5.1.2" class="anchored" data-anchor-id="sec-select"><span class="header-section-number">5.1.2</span> Wybieranie kolumn z <code>dplyr::select</code></h3>
<p>Odfiltrowaliśmy więc nie-mężczyzn. Kolejny problem to cała seria niepotrzebnych kolumn. Godziny, adres, zgoda etyczna (która była obowiązkowa, więc cała zawiera identyczne wartości) i płeć (już jednakowa dla wszystkich) są nam do niczego niepotrzebne. Do wybierania, jakie kolumny zostawić, służy funkcja <code>select()</code>. Wrzucamy do niej nazwy albo numery kolumn, które chcemy zostawić w bazie. Rozszerzmy więc naszą poprzednią instrukcję o dodatkową komendę za pomocą potoku.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)</span></code></pre></div>
</div>
<p>Po pierwsze zauważmy, że wystarczyło dodać potok i kolejną komendę. Teraz cała nasza instrukcja oznacza „Weź <code>df</code>, odfiltruj mężczyzn i potem wybierz kolumny <code>Id</code>, <code>Wiek (ukończony w latach)</code>, <code>Wykształcenie</code> oraz kolumny od 9. do 18.”. Do tego więc służą potoki – pozwalają naraz wykonać całą serię modyfikacji tego samego obiektu.</p>
<p>Wypada tu wyjaśnić dwie sprawy. Po pierwsze kolumna z wiekiem zawiera w nazwie spacje. Jeśli nazwa kolumny zawiera niestandardowe znaki, trzeba ją otoczyć znakami ` (<em>pol.</em> grawis, <em>ang.</em> <em>backtick</em>), który znajduje się na klawiaturze tuż pod Esc. Druga rzecz to <code>9:18</code>, co znaczy „liczby od 9 do 18” i jest wygodnym, skrótowym zapisem <code>seq(9, 18)</code>.</p>
<p>Ewentualnie możemy chcieć powiedzieć, żeby zostawić wszystkie kolumny <em>poza</em> jakąś kolumną. Jeśli chcemy wykluczyć 2 kolumny z 200, to lepiej wskazać te 2 do wywalenia niż pozostałe 198 do zachowania. Możemy to zrobić z użyciem znaku <code>-</code>, który wstawiamy przed kolumną. Możemy ustawić minus zarówno przed nazwą kolumny, jak i zakresem kolumn. Warto jednak zauważyć, że zakres pozycji trzeba wziąć w nawias. Inaczej zapis <code>-2:5</code> R zinterpretuje jako „kolumny od -2 do 5”. Nie jest to głupie, bo „kolumna -2” oznacza „druga od końca”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wyrażam świadomą i dobrowolną zgodę na udział w badaniu.</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="sec-rename" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="sec-rename"><span class="header-section-number">5.2</span> Zmiana nazw kolumn z <code>dplyr::rename</code> i <code>purrr::set_names</code></h2>
<p>Z selekcji istniejących infromacji przejdźmy do dodawania nowych. Zacznijmy może od zmiany nazw kolumn, żeby łatwiej nam się pisało dalsze komendy. Do tego służą funkcje <code>rename</code> z pakietu <code>dplyr</code> i <code>set_names</code> z pakietu <code>purrr</code><sup>13</sup>. <code>rename</code> służy do zmiany nazw raczej pojedynczych kolumn i przyjmuje argumenty w postaci <code>rename("nowa_nazwa" = "stara nazwa")</code>. Za jednym zamachem możemy zmienić ile nazw chcemy, jeśli jednak chcemy zmienić wszystkie nazwy, wygodniejsza jest funkcja <code>set_names</code>. Wrzucamy do niej <strong>po kolei</strong> same nowe nazwy. Znowu – nazwy to dosłowne ciągi znaków<sup>14</sup>, więc zawsze piszemy je w cudzysłowie.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb17-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb17-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb17-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wyksztalcenie"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>))</span></code></pre></div>
</div>
<p>Co znowu namieszałem? Czemu znowu coś utrudniam? Cóż, żeby ułatwić. O ile kolejne nazwy <code>"id"</code>, <code>"wiek"</code> i <code>"wyksztalcenie"</code> rozumieją się same przez się, to do czego służy tutaj funkcja <code>paste</code>? Jeśli zerkniemy w bazę danych, zauważymy, że kolejne 10 kolumn to to samo pytanie „Takie widoki w przestrzeni publicznej są normalne”. Odpowiedź na to pytanie (znajdujące się pod obrazkiem neutralnym lub przedstawiającym parę jednopłciową) traktowaliśmy jako wskaźnik homofobii. Jest bardzo częste, że czyszcząc dane z badania mamy serię odpowiedzi z jednego kwestionariusza. Zazwyczaj wszystkie te pytania nazywamy według jednej konwencji np. wszystkie odpowiedzi z kwestionariusza TIPI nazywamy <code>TIPI_1</code>, <code>TIPI_2</code>, <code>TIPI_3</code> itd. Ale po co pisać te etykiety ręcznie, skoro możemy je wygenerować? Do tego służy funkcja <code>paste</code>. Jeśli widzimy jakąś funkcję zagnieżdżoną w innej funkcji, a nie wiemy, jaką funkcję tam spełnia, można spróbować samą tę wewnętrzną funkcję wpisać w konsolę i zobaczyć, co robi.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>  [1] "H_1"  "H_2"  "H_3"  "H_4"  "H_5"  "H_6"  "H_7"  "H_8"  "H_9"  "H_10"
</code></pre>
</div>
</div>
<p>Jak widzimy, <code>paste</code> wygenerowało nam 10 kolejnych etykiet łącząc <code>"H"</code> i liczby od 1 do 10. Argument <code>sep = "_"</code> mówi, żeby między kolejnymi kawałkami wstawiać podkreślnik. Do <code>paste</code> możemy wrzucić dowolną liczbę znaków do połączenia. Jeśli nie chcemy żadnego separatora, możemy ustawić <code>sep = ""</code>, czyli pusty ciąg znaków w separatorze albo możemy użyć bliźniaczej funkcji <code>paste0</code>, która nie ma separatora. Użycie tej funkcji wewnątrz <code>set_names</code> jest równoważne temu, jakbym napisał te etykietki ręcznie. To jest siła programowania, że dosłowne dane możemy zastępować zmiennymi albo funkcjami, które nam te dane wygenerują. To pozwala nam na przykład zastosować to samo czyszczenie do 100 różnych plików. Wystarczy, że zamiast nazwy danego pliku wszędzie wrzucimy zmienną, a potem będziemy tylko wrzucać do tej zmiennej nazwy kolejnych plików.</p>
<p>Co ciekawe, zmieniać nazwy możemy też za pomocą funkcji <code>select</code>, ale wyłącznie pojedynczo, nie można wtedy użyć czegoś w stylu <code>9:18</code>. Składnia jest taka sama, jak <code>rename</code>, ale <code>select</code> zmienia też kolejność kolumn i skład wynikowej tabeli, więc trzeba uważać. Jednak do małych tabel, gdzie nie jest problemem wypisać wszystkie kolumny, można spokojnie za jednym zamachem kolumny wybrać i nazwać.</p>
</section>
<section id="sec-values" class="level2" data-number="5.3">
<h2 data-number="5.3" class="anchored" data-anchor-id="sec-values"><span class="header-section-number">5.3</span> Zmiana wartości komórek z <code>dplyr::mutate</code> i <code>readr::parse_number</code></h2>
<p>Jak widzimy, odpowiedzi na pytania z homofobią zawierają nie tylko liczby, ale też tekst z wyjaśnieniem tych liczb na skali. My jednak chcemy zostawić same liczby, żeby móc na nich liczyć. Podobny problem mamy z kolumną z wiekiem, gdzie możemy zauważyć, że jest to kolumna tekstowa. Dziwne, w końcu wiek to (tylko) liczba. Przejrzenie danych pozwala stwierdzić, że respondent o id 50 w pytaniu o wiek wpisał „18 (2021)“. Nieważne, jak się będziemy przed tym bronić, co dopiszemy do pytania o wiek, jak bardzo wprost będziemy błagać, żeby wpisywać tam tylko liczby, zawsze znajdzie się ktoś, kto zrobi w nim elaborat. Ten jeden respondent sprawił, że cała ta kolumna została zinterpretowana jako kolumna tekstowa, a nie liczbowa. Odpowiedź na oba te problemy jest taka sama – <code>mutate</code> i <code>parse_number</code>.</p>
<p>Funkcja <code>mutate</code> to ogólna funkcja, za pomocą której modyfikujemy kolumny albo dodajemy nowe. Będziemy ją wykorzystywać bardzo często, za każdym razem, gdy baza danych będzie wymagała poprawek lub dodatkowych obliczeń. Jej składnia wygląda następująco:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">zmienna_z_danymi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb19-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kolumna_do_modyfikacji =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jakas_funkcja</span>(kolumna_do_modyfikacji),</span>
<span id="cb19-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nowa_kolumna =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inna_funkcja</span>(jak_stworzyc_nowa_kolumne)</span>
<span id="cb19-5">    )</span></code></pre></div>
</div>
<p><code>mutate</code> służy do tworzenia nowych kolumn. Możemy ją jednak wykorzystywać do modyfikowania kolumn już istniejących, bo jeśli nowa kolumna ma taką samą nazwę, jak stara, to nowa zastępuje starą. W naszym przykładzie chcemy do kolumny <code>wiek</code> zastosować funkcję <code>parse_number</code>, która pozbywa się z komórek wszystkiego, poza pierwszą napotkaną liczbą<sup>15</sup>. Taka instrukcja będzie wyglądała następująco:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wyksztalcenie"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb20-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek)</span>
<span id="cb20-7">    )</span></code></pre></div>
</div>
<section id="sec-across" class="level3" data-number="5.3.1">
<h3 data-number="5.3.1" class="anchored" data-anchor-id="sec-across"><span class="header-section-number">5.3.1</span> Przekształcanie wielu kolumn jednocześnie z <code>dplyr::across</code></h3>
<p>Po wykonaniu tej funkcji widzimy, że cała kolumna jest już numeryczna. To samo możemy zrobić dla pytań z homofobią. Moglibyśmy, oczywiście, zapisać <code>H_1 = parse_number(H_1), H_2 = parse_number(H_2)</code> itd., ale po co się męczyć? Na początku roku 2020 dostaliśmy cudowną funkcję pomocniczą <code>across</code>, która przydaje nam się w takich dokładnie wypadkach, gdy chcemy w taki sam sposób zmodyfikować więcej niż jedną kolumnę, bez zbędnego przepisywania tego samego. Jak jej używać?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wyksztalcenie"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb21-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb21-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H_"</span>), parse_number)</span>
<span id="cb21-8">    )</span></code></pre></div>
</div>
<p>Pierwszą rzeczą, którą ta funkcja przyjmuje, jest zestaw kolumn. Można je wskazać na różne sposoby, np. wypisać ich nazwy albo numery. Gdy używam zestaw, mam na myśli, że trzeba je wpakować w funkcję <code>c()</code> (od <em>concatenate</em>), np. <code>c(1, 8, 10:16)</code>. Możemy też użyć jednej z cudownych funkcji pomocniczych z zestawu <code>tidy-select</code>. Tutaj akurat użyłem <code>starts_with("H_")</code>, żeby powiedzieć <code>across</code>, że chodzi mi o wszystkie kolumny, których nazwy zaczynają się od <code>H_</code>. Te same funkcje możemy wykorzystywać w funkcji <code>select</code> przy wybieraniu kolumn (por. Sekcja&nbsp;5.1.2). Kilka innych tego typu funkcji umieściłem w tabeli.</p>
<table class="caption-top table">
<caption>Funkcje pomocnicze do <code>select</code> i <code>across</code>.</caption>
<colgroup>
<col style="width: 33%">
<col style="width: 66%">
</colgroup>
<thead>
<tr class="header">
<th>Funkcja</th>
<th style="text-align: right;">Wybierz wszystkie kolumny…</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>starts_with()</code></td>
<td style="text-align: right;">których nazwy zaczynają się od</td>
</tr>
<tr class="even">
<td><code>ends_with()</code></td>
<td style="text-align: right;">których nazwy kończą się na</td>
</tr>
<tr class="odd">
<td><code>contains()</code></td>
<td style="text-align: right;">których nazwy zawierają w sobie</td>
</tr>
<tr class="even">
<td><code>matches()</code></td>
<td style="text-align: right;">których nazwy zawierają w sobie<br>wyrażenie regularne<sup>16</sup></td>
</tr>
<tr class="odd">
<td><code>:</code></td>
<td style="text-align: right;">zawierają się w zakresie<br>(np. <code>H_1:H_10</code>)</td>
</tr>
<tr class="even">
<td><code>all_of()</code></td>
<td style="text-align: right;">w których wszystkie wartości<br>spełniają jakiś warunek</td>
</tr>
<tr class="odd">
<td><code>any_of()</code></td>
<td style="text-align: right;">w których jakakolwiek<br>wartość spełnia warunek</td>
</tr>
<tr class="even">
<td><code>everything()</code></td>
<td style="text-align: right;">w ogóle wszystkie kolumny</td>
</tr>
<tr class="odd">
<td><code>where()</code></td>
<td style="text-align: right;">gdzie spełniony jest inny warunek<br>(np. <code>where(is.numeric))</code>)</td>
</tr>
</tbody>
</table>
<p>Drugim argumentem, jaki przyjmuje <code>across</code>, jest nazwa funkcji, którą chcemy zastosować. Co ważne, musi to być jej nazwa <strong>bez nawiasów</strong>. Jest to częsty błąd, sam wiele razy się łapałem na tym, że odruchowo dodawałem do funkcji nawiasy. Wynika to z subtelnej różnicy, polegającej na tym, że jeśli nie używamy nawiasów, podajemy <code>across</code> samą funkcję, obiekt, który ją zawiera, a jeśli damy nawiasy, to wrzucamy w ten sposób do <code>across</code> <em>wynik działania</em> tej funkcji. Spowodowałoby to, że w tym wypadku dostalibyśmy błąd, że funkcja <code>parse_number()</code> nie dostała wymaganych argumentów. Jeśli chcielibyśmy dorzucić do <code>parse_number</code> jakieś argumenty (jak <code>locale</code><sup>17</sup>), możemy to zrobić po przecinku<sup>18</sup>. Szczegóły, jak zwykle, znajdziemy w dokumentacji funkcji <code>across</code>.</p>
</section>
<section id="sec-recode" class="level3" data-number="5.3.2">
<h3 data-number="5.3.2" class="anchored" data-anchor-id="sec-recode"><span class="header-section-number">5.3.2</span> Odwracanie punktacji</h3>
<p>Bardzo często zdarza nam się, że w kwestionariuszach niektóre pozycje mają odwróconą punktację. Na przykład w kwestionariuszu samooceny Rosenberga SES pojawia się pozycja „Czasem czuję się bezużyteczny(-a)“. Odpowiada się na skali 1 do 4. Wiadomo, że osoba, która zaznacza przy takiej pozycji 4, nie pokazuje swojej wysokiej samooceny. Jest to pozycja z odwróconą punktacją, czyli 4 należy liczyć jako 1, 3 jako 2 itd. Przekształcenie to można zrobić bardzo łatwo. Najpierw dodajemy skrajne wartości skali, np. dla SES <img src="https://latex.codecogs.com/png.latex?1%20+%204%20=%205">. Teraz od 5 odejmujemy odpowiedź osoby badanej i dzięki temu rzeczywiście 4 zamienia się w 1, 3 w 2 itd. Jak odwrócić punktację w R?</p>
<p>Ponieważ jest to modyfikacja kolumny, użyjemy funkcji <code>mutate</code>. Załóżmy, że <code>H_5</code> ma odwróconą punktację. Oceny były na skali od 1 do 6, więc wyniki osób badanych musimy odjąć od 7. W takiej sytuacji kod wyglądałby następująco:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wyksztalcenie"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb22-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb22-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10, parse_number),</span>
<span id="cb22-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_5 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> H_5</span>
<span id="cb22-9">    )</span></code></pre></div>
</div>
<p>Niektórzy lubią tworzyć nowe kolumny na odwróconą punktację, my jednak po prostu zastąpiliśmy oryginalną kolumnę <code>H_5</code>. Zawsze można jednak użyć innej nazwy, np. <code>H_5_odwr =</code>. Jeśli chcemy odwrócić wiele kolumn, możemy użyć <code>across</code>. Załóżmy, że <code>H_7</code> też ma odwróconą punktację. W takim wypadku nasz kod mógłby wyglądać tak:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wyksztalcenie"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb23-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb23-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10, parse_number),</span>
<span id="cb23-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_5 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> H_5,</span>
<span id="cb23-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_7 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> H_7</span>
<span id="cb23-10">    )</span></code></pre></div>
</div>
<p>Jeśli mamy wielki kwestionariusz i nie chce nam się 100 razy pisać tego samego, możemy użyć <code>across</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb24-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb24-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb24-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wyksztalcenie"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb24-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb24-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb24-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10, parse_number),</span>
<span id="cb24-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(H_5, H_7), \(x) {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x})</span>
<span id="cb24-9">    )</span></code></pre></div>
</div>
<p>Pierwszym argumentem jest zestaw kolumn, dlatego nazwy kolumn opakowałem w <code>c()</code>. <code>select</code> czy <code>filter</code> nie potrzebowały, żeby robić takie zestawy, ale wiele funkcji (zwłaszcza spoza <code>tidyverse</code>) tego wymaga. Co z drugim argumentem, czyli funkcją? Tutaj wchodzimy głębiej w programistyczne meandry. Można, oczywiście, zostać przy wersji bez <code>across</code>, ale odważnych zapraszam do świata funkcji anonimowych.</p>
</section>
<section id="sec-customfunctions" class="level3" data-number="5.3.3">
<h3 data-number="5.3.3" class="anchored" data-anchor-id="sec-customfunctions"><span class="header-section-number">5.3.3</span> Własne funkcje</h3>
<p>Drugi argument w <code>across</code> to funkcja, jakiej <code>across</code> ma użyć do przekształcenia kolumn. Niestety nie ma funkcji, która odejmowałaby od 7. Żeby sobie z tym poradzić, musimy albo taką funkcję wcześniej samodzielnie napisać, albo użyć tzw. funkcji anonimowej (zwanej też <em>lambda</em>). Pierwsza opcja jest łatwa do zrozumienia, ale wymaga sporo pisania jak na coś, czego użyjemy tylko raz. Tworzenie własnych funkcji w R jest dość łatwe. Nasza funkcja mogłaby wyglądać tak:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">odejmij_od_7 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(wynik) {</span>
<span id="cb25-2">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> wynik</span>
<span id="cb25-3">}</span></code></pre></div>
</div>
<p>Pierwsza rzecz to nazwa. Obrazowo nazwałem naszą funkcję <code>odejmij_od_7</code>. Dalej następuje słowo kluczowe <code>function</code> i w nawiasie argumenty naszej funkcji. My wrzucamy do funkcji wynik osoby badanej, więc nasz argument nazwałem obrazowo <code>wynik</code>. Pewnie w rzeczywistej sytuacji użyłbym <code>x</code>, bo nazwa funkcji jest wystarczająco sugerująca. Jeśli chcemy, dla czytelności, rozbić funkcję na kilka linijek, otwieramy nawiasy klamrowe i w nich opisujemy, co funkcja ma robić. Nic nie stoi na przeszkodzie, żeby opisać to wszystko w jednej linijce: <code>function(wynik) 7 - wynik</code>. Po wykonaniu powyższego kodu nasza funkcja rzeczywiście działa, co możemy sprawdzić używając jej w konsoli.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odejmij_od_7</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> [1] 4
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odejmij_od_7</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> [1] -5
</code></pre>
</div>
</div>
<p>Jeśli mamy kilka kwestionariuszy z odwróconą punktacją, każdy z inną skalą, możemy od razu zrobić bardziej ogólną funkcję do odwracania.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">odejmij_od <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(wynik, od_czego) {</span>
<span id="cb28-2">    od_czego <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> wynik</span>
<span id="cb28-3">}</span>
<span id="cb28-4"></span>
<span id="cb28-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odejmij_od</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> [1] 4
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"></span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odejmij_od</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">od_czego =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> [1] 2
</code></pre>
</div>
</div>
<p>Bardziej ogólna funkcja wymaga podania drugiego argumentu, tzn. od czego trzeba odjąć <code>wynik</code>. Jak widać, ta funkcja też działa i przyjmuje argumenty pozycyjne lub nazwane. Obu funkcji, po zadeklarowaniu, możemy użyć w <code>across</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb30-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb30-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb30-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wyksztalcenie"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb30-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb30-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb30-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10, parse_number),</span>
<span id="cb30-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(H_5, H_7), odejmij_od, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">od_czego =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb30-9">    )</span></code></pre></div>
</div>
<p>Tutaj nam się to nie przyda, ale nic nie stoi na przeszkodzie, żeby wewnątrz funkcji używać innych funkcji i wielokrotnie używane serie komend przerabiać na pojedynczą komendę. Hadley Wickham wykorzystuje zasadę, że jeśli kopiujesz kod więcej niż dwa razy, to znaczy, że trzeba zrobić z niego funkcję.</p>
<section id="sec-lambda" class="level4" data-number="5.3.3.1">
<h4 data-number="5.3.3.1" class="anchored" data-anchor-id="sec-lambda"><span class="header-section-number">5.3.3.1</span> Funkcje anonimowe</h4>
<p>Jeśli funkcja jest prosta i używamy jej tylko raz, często nie chcemy zaśmiecać sobie kodu jej definicją. Wtedy z pomocą przychodzą nam funkcje anonimowe (zwane też funkcjami <em>lambda</em>). Anonimowe, bo nie mają swojej nazwy. Podstawowy sposób ich używania to zadeklarowanie ich od razu w miejscu użycia.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(H_5, H_7), <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(wynik) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> wynik)</span></code></pre></div>
</div>
<p>Zamiast nazwy funkcji użyliśmy tutaj od razu jej definicji. Funkcja jest w pełni sprawna i różni się od <code>odejmij_od_7</code> tylko tym, że nie ma nazwy.</p>
<p>Inny, jeszcze bardziej zwięzły, sposób używania funkcji anonimowych wprowadza R w wersji 4.1.0. Polega on na zapisaniu naszej funkcji w nawiasach klamrowych. Dla przykładu odemowanie od 7 zapiszemy jako <code>{7 - x}</code>. Dlaczego akurat <code>x</code> a nie np. <code>y</code> albo <code>wynik</code>, jak robiliśmy wcześniej? Bo to ustaliłem pisząc <strong>przed</strong> naszą anonimową funkcją <code>\(x)</code>. Zamiast <code>x</code> mógłbym swoją zmienną zapisać w dowolny sposób. Takie coś w całości, czyli <code>\(x) {7 - x}</code><sup>19</sup>, możemy zapisać w miejscu funkcji w <code>across</code>, co zrobiłem na początku, jak chciałem wzbudzić ciekawość.</p>
<p>Jak wspomniałem w jednym z przypisów, dokumentacja <code>dplyr</code> od niedawna sugeruje, że jeśli funkcja potrzebuje jakichś dodatkowych argumentów, to żeby używać funkcji anonimowej, zamiast wpisywać arguemnty po przecinku. Co prawda wpisywanie po przecinku działa, ale moglibyśmy chcieć na wszelki wypadek dostosować się do nowych standardów. W takim wypadku moglibyśmy zmodyfikować przykład z poprzedniego podrozdziału, gdzie używaliśmy funkcji <code>odejmij_od</code> i dodatkowego arguemntu <code>od_czego</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># źle, choć jeszcze działa</span></span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(H_5, H_7), odejmij_od, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">od_czego =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dobrze</span></span>
<span id="cb32-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(H_5, H_7), \(x) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odejmij_od</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">od_czego =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)})</span></code></pre></div>
</div>
</section>
<section id="problem-z-tidy-evaluation" class="level4" data-number="5.3.3.2">
<h4 data-number="5.3.3.2" class="anchored" data-anchor-id="problem-z-tidy-evaluation"><span class="header-section-number">5.3.3.2</span> Problem z Tidy Evaluation</h4>
<p>Używanie <strong>nazw kolumn</strong> jako argumentów takich własnych funkcji może spowodować niespodziewane problemy. Załóżmy, że stworzymy funkcję <code>normalizacja_kolumny(baza, nazwa_kolumny)</code>. Jeśli potem korzystamy z funkcji typu <code>select()</code>, to nie wiedzą one, że chodzi nam o argument <code>nazwa_kolumny</code>, a nie o kolumnę o nazwie <code>nazwa_kolumny</code>. W związku z tym wypuszczą błąd, że takiej kolumny w bazie danych nie ma (chyba że jest, ale wtedy konsekwencje mogą być jeszcze bardziej niespodziewane). Więcej o tym piszę w bardziej zaawansowanym tekście <a href="./posts/metaprogramowanie.qmd">tutaj</a>, ale <em>ad hoc</em> można sobie z tym poradzić pisząc nazwy argumentów w takich funkcjach w podwójnych nawiasach klamrowych, np. <code>select({{ nazwa_kolumny }})</code>.</p>
</section>
</section>
</section>
<section id="sec-newcols" class="level2" data-number="5.4">
<h2 data-number="5.4" class="anchored" data-anchor-id="sec-newcols"><span class="header-section-number">5.4</span> Nowe kolumny</h2>
<p>Jak wspomniałem, funkcja <code>mutate</code> nie tylko pozwala na modyfikowanie istniejących kolumn, ale też na tworzenie nowych. Zazwyczaj robimy to w dwóch przypadkach – gdy chcemy zagregować dane z wierszy, np. zsumować wyniki z danego kwestionariusza albo gdy chcemy podzielić naszą bazę na kategorie, np. „młodzi”, „w średnim wieku”, „seniorzy”. Omówmy to po kolei.</p>
<section id="sec-pick" class="level3" data-number="5.4.1">
<h3 data-number="5.4.1" class="anchored" data-anchor-id="sec-pick"><span class="header-section-number">5.4.1</span> Agregowanie danych z wierszy z <code>dplyr::pick</code></h3>
<p>Załóżmy, że homofobię będziemy liczyć poprzez dodanie <code>H_1</code> + <code>H_2</code> + <code>H_3</code> itd. Czasami będziemy chcieli robić sumy, czasami policzyć średnią<sup>20</sup>. W kwestionariuszach zazwyczaj liczymy sumy, ale np. dla czasów reakcji zazwyczaj będziemy chcieli policzyć średnią. Jak więc dodać taką kolumnę z sumami w R? Mamy dwa sposoby. Pierwszy to wprost opisanie, co dodajemy, wewnątrz <code>mutate</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wyksztalcenie"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb33-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb33-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10, parse_number),</span>
<span id="cb33-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(H_5, H_7), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .x),</span>
<span id="cb33-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_suma =</span> H_1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> H_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> H_3 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> H_4 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> H_5 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> H_6 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> H_7 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> H_8 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> H_9 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> H_10</span>
<span id="cb33-10">    )</span></code></pre></div>
</div>
<p>Jak można się domyślić, istnieje sposób niewymagający tyle pisania, które w skomplikowanych bazach i długich kwestionariuszach naprawdę może być długotrwałe i uciążliwe. <code>tidyverse</code> ratuje nas tutaj funkcją <code>pick</code><sup>21</sup>, a bazowy R dokłada funkcję <code>rowSums</code> (i <code>rowMeans</code>). Wystarczy, że do funkcji <code>rowSums</code> wrzucimy, które kolumny chcemy zsumować, wskazując je właśnie za pomocą <code>pick</code> i ewentualnie funkcji pomocniczych, tak jak robiliśmy w <code>select</code> (por. 5.1.2) i <code>across</code> (por. 5.3.1).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wyksztalcenie"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb34-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb34-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10, parse_number),</span>
<span id="cb34-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(H_5, H_7), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .x),</span>
<span id="cb34-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_suma =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10))</span>
<span id="cb34-10">    )</span></code></pre></div>
</div>
</section>
<section id="sec-casewhen" class="level3" data-number="5.4.2">
<h3 data-number="5.4.2" class="anchored" data-anchor-id="sec-casewhen"><span class="header-section-number">5.4.2</span> Kategoryzowanie przypadków i przekodowywanie z <code>dplyr::case_when</code></h3>
<p>Czasem zdarza się, że chcemy podzielić dane ilościowe (np. wiek, wzrost, szczęście mierzone kwestionariuszowo) na kategorie (młodzi vs nie-aż-tak-młodzi, wysocy vs niscy, szczęśliwi vs nieszczęśliwi). Zdarza się też, że osoba tworząca ankietę nie była na tyle przewidująca, żeby w odpowiedziach do „zdecydowanie się zgadzam” dodać 6, więc nie możemy po prostu użyć <code>parse_number</code>. I w jednym, i w drugim wypadku musimy stworzyć wartości na podstawie innych wartości, np. wzrost poniżej 160 cm zamienić na „niski” albo tekst „zdecydowanie się nie zgadzam” zamienić na 1. Do takich celów służy niezwykle przydatna funkcja <code>case_when</code> z pakietu <code>dplyr</code>. Załóżmy, że chcemy podzielić mężczyzn w naszej bazie na trzy kategorie wykształcenia – podstawowe, ponadpodstawowe i wyższe. Oznacza to, że osoby z wykształceniem średnim i zawodowym musimy wrzucić do jednego worka. W tym celu rozszerzymy naszą instrukcję o kolejną komendę. Funkcja <code>case_when</code> ma dość prostą składnię.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb35-2">    warunek_1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> wartosc_jesli_prawda,</span>
<span id="cb35-3">    warunek_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> wartosc_jesli_prawda,</span>
<span id="cb35-4">    warunek_3 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> wartosc_jesli_prawda,</span>
<span id="cb35-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.default =</span> wartosc_dla_calej_reszty</span>
<span id="cb35-6">)</span></code></pre></div>
</div>
<p>Funkcja po kolei sprawdza warunki. Jeśli natrafi na jakiś spełniony warunek, zatrzyma się i da taką wartość, jaką temu warunkowi przypisaliśmy. Warunek jest logiczny, czyli może to być cokolwiek od <code>wyksztalcenie == "Średnie"</code> po <code>wzrost &lt;= 160</code>. Należy pamiętać, że jeśli wartość wynikowa ma być tekstem, musimy napisać ją w cudzysłowie, jak każdy dosłowny tekst. <code>.default = wartosc</code> może nam służyć do ustalania, co ma być, jeśli żaden z powyższych warunków się nie sprawdzi<sup>22</sup>. Jeśli chodzi o przykład z wykształceniem, moglibyśmy rozwiązać go tak:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb36-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb36-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb36-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wyksztalcenie"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb36-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb36-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb36-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10, parse_number),</span>
<span id="cb36-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(H_5, H_7), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .x),</span>
<span id="cb36-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_suma =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10)),</span>
<span id="cb36-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wyksztalcenie_grupa =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb36-11">            wyksztalcenie <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Średnie"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ponadpodstawowe"</span>,</span>
<span id="cb36-12">            wyksztalcenie <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zawodowe"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ponadpodstawowe"</span>,</span>
<span id="cb36-13">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.default =</span> wyksztalcenie</span>
<span id="cb36-14">        )</span>
<span id="cb36-15">    )</span></code></pre></div>
</div>
<p>W tym wypadku <code>case_when</code>, idąc wiersz po wierszu, sprawdza, czy w kolumnie <code>wyksztalcenie</code> nie znajduje się wartość <code>"Średnie"</code>. Jeśli tak, to w tworzonej właśnie kolumnie <code>wyksztalcenie_grupa</code> wstawia wartość <code>"Ponadpodstawowe"</code> i przechodzi do kolejnego wiersza. Jeśli wykształcenie nie jest średnie, to sprawdza, czy jest zawodowe i w razie czego również wstawia <code>"Ponadpodstawowe"</code>. Jeśli nie jest ani średnie, ani zawodowe, to wstawia to, co akurat jest w kolumnie <code>wyksztalcenie</code>, czyli dla osób z wykształceniem podstawowym wstawia <code>"Podstawowe"</code>, a dla osób z wykształceniem wyższym <code>"Wyższe"</code><sup>23</sup>. W ten sposób z 4 kategorii wykształcenia zrobiły nam się 3. W podobny sposób przekodowywalibyśmy klucz w ankiecie na liczby, np. pisząc <code>H_1 == "Zdecydowanie się zgadzam" ~ 6</code>. Możemy ułatwić sobie to przekodowywanie za pomocą <code>questionr</code>, który opisuję w podrozdziale 5.5.1.1.1.</p>
</section>
</section>
<section id="sortowanie-i-kolejność-kolumn" class="level2" data-number="5.5">
<h2 data-number="5.5" class="anchored" data-anchor-id="sortowanie-i-kolejność-kolumn"><span class="header-section-number">5.5</span> Sortowanie i kolejność kolumn</h2>
<p>Wychodzimy już z potężnej funkcji <code>mutate</code> i możemy czyścić dalej. Ostatnia rzecz, którą czasem chcemy zrobić (zazwyczaj ze względów estetycznych), to posortowanie wartości i ustawienie kolumn w określonej kolejności.</p>
<section id="sec-arrange" class="level3" data-number="5.5.1">
<h3 data-number="5.5.1" class="anchored" data-anchor-id="sec-arrange"><span class="header-section-number">5.5.1</span> Sortowanie z <code>dplyr::arrange</code></h3>
<p>Za sortowanie w <code>tidyverse</code> odpowiada funkcja <code>arrange</code>. Domyślnie sortuje ona rosnąco, więc jeśli chcemy zastosować sortowanie malejące, użyjemy pomocniczej funkcji <code>desc</code> (od <em>descending</em>). Załóżmy, że chcemy posortować nasze dane najpierw według wykształcenia (od najwyższego, do najniższego), a w obrębie wykształcenia według wieku (od najmłodszych do najstarszych). W pierwszym odruchu chcielibyśmy wpisać <code>arrange(desc(wyksztalcenie), wiek)</code>. Jest to dobry odruch, jednak jeśli to zrobimy, zorientujemy się, że najwyższym z wykształceń jest wykształcenie zawodowe. Dzieje się tak dlatego, że w tej chwili wykształcenie to zwykły tekst, a więc jest sortowany alfabetycznie, nie według naszego klucza. Żeby to zmienić, musimy poznać nowy rodzaj danych.</p>
<section id="sec-factor" class="level4" data-number="5.5.1.1">
<h4 data-number="5.5.1.1" class="anchored" data-anchor-id="sec-factor"><span class="header-section-number">5.5.1.1</span> Factors</h4>
<p>Czynniki (<em>factors</em>) to rodzaj danych, za pomocą których przechowujemy tekst, który ma tylko kilka możliwych wartości albo gdy te wartości mają jakąś kolejność, którą chcemy wziąć pod uwagę. Jeśli mamy etykiety takie jak wykształcenie, czy grupa kontrolna/eksperymentalna, to powinniśmy je przechowywać właśnie w tej postaci. Danymi tego typu w <code>tidyverse</code> zajmuje się pakiet <code>forcats</code>. Żeby zmienić wykształcenie z czystego tekstu na czynnik, dopiszemy jedną linijkę do naszego <code>mutate</code> i od razu posortujemy.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb37-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb37-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb37-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wyksztalcenie"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb37-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb37-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb37-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10, parse_number),</span>
<span id="cb37-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(H_5, H_7), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .x),</span>
<span id="cb37-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_suma =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10)),</span>
<span id="cb37-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wyksztalcenie_grupa =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb37-11">            wyksztalcenie <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Średnie"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ponadpodstawowe"</span>,</span>
<span id="cb37-12">            wyksztalcenie <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zawodowe"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ponadpodstawowe"</span>,</span>
<span id="cb37-13">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.default =</span> wyksztalcenie</span>
<span id="cb37-14">        ),</span>
<span id="cb37-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wyksztalcenie =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(</span>
<span id="cb37-16">            wyksztalcenie,</span>
<span id="cb37-17">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Podstawowe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zawodowe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Średnie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wyższe"</span>),</span>
<span id="cb37-18">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb37-19">            )</span>
<span id="cb37-20">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb37-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(wyksztalcenie), wiek)</span></code></pre></div>
</div>
<p>Komendę <code>factor</code> dla czytelności rozbiłem tutaj na trzy linijki, ale – oczywiście – można ją całą zapisać w jednej. Po pierwsze wskazałem, że na factor przerobiona ma być kolumna <code>wyksztalcenie</code>. Po drugie wskazałem, jakie wykształcenie może mieć wartości, zbierając je w jeden zestaw funkcją <code>c</code> i wrzucając do argumentu <code>levels</code>. Na koniec poinformowałem R, że w kolejność jest tutaj ważna, dopisując <code>ordered = TRUE</code>. Jeśli tak przerobione dane posortujemy, zobaczymy, że baza rzeczywiście zaczyna się od wykształcenia wyższego.</p>
<section id="sec-questionr" class="level5" data-number="5.5.1.1.1">
<h5 data-number="5.5.1.1.1" class="anchored" data-anchor-id="sec-questionr"><span class="header-section-number">5.5.1.1.1</span> <code>questionr</code></h5>
<p>Przy okazji czynników chciałbym wspomnieć o pierwszym dodatku (<em>addin</em>) do RStudio, jaki może nam się przydać. Dodatki przyjmują różną formę, ale tutaj omówię dwa, które są graficznymi narzędziami pomagającymi nam pisać kod. Można mieć do nich mieszany stosunek, ale póki umiemy też napisać kod ręcznie (lub chociaż wiemy, jak skorzystać z dokumentacji), to mogą być dużą pomocą, zwłaszcza na początku przygody z R. Pierwszym takim dodatkiem jest <code>questionr</code>, który pozwala nam stworzyć komendy związane z czynnikami (i kategoryzować dane ilościowe, co ręcznie robiliśmy w podrozdziale 5.4.2).</p>
<p><code>questionr</code> instalujemy jak każdy inny pakiet (<code>install.packages("questionr")</code>). Od tego momentu (lub po zresetowaniu RStudio) w menu Addins na górnej belce znajdziemy trzy nowe opcje. Ta interesująca nas to Level ordering. Na początku zobaczymy okienko, w którym możemy wybrać kilka rzeczy. W jakiej zmiennej chcemy zmienić kolejność, w jakiej kolumnie i z jakiego pakietu wziąć funkcję do zmiany kolejności (domyślnie jest to <code>fct_relevel</code> z <code>forcats</code>). W drugiej zakładce możemy graficznie ustawić taką kolejność, jaką chcemy. W ostatniej zakładce otrzymujemy gotowy kod. <code>Questionr</code> nie robi nic samodzielnie, ten kod trzeba jeszcze wkleić w skrypt. Z jednym kruczkiem. Nam chodzi o samą komendę <code>fct_relevel</code>, bez pierwszej linijki, która służy do zapisania zmian. Ponieważ my tworzymy <code>mutate</code>, to wystarczy, że skopiujemy nasze gotowe <code>fct_relevel()</code> do funkcji <code>mutate</code>, dopisując nazwę kolumny i pierwszy argument. Może być to użyteczne, jeśli mamy dużo czynników lub dużo poziomów w czynniku. Ostatecznie nasza komenda <code>mutate</code> z użyciem <code>questionr</code> wyglądałaby tak:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb38-2">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb38-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10, parse_number),</span>
<span id="cb38-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(H_5, H_7), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .x),</span>
<span id="cb38-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_suma =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10)),</span>
<span id="cb38-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wyksztalcenie_grupa =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb38-7">            wyksztalcenie <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Średnie"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ponadpodstawowe"</span>,</span>
<span id="cb38-8">            wyksztalcenie <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zawodowe"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ponadpodstawowe"</span>,</span>
<span id="cb38-9">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.default =</span> wyksztalcenie</span>
<span id="cb38-10">        ),</span>
<span id="cb38-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wyksztalcenie =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_relevel</span>(</span>
<span id="cb38-12">            wyksztalcenie,</span>
<span id="cb38-13">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Podstawowe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zawodowe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Średnie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wyższe"</span></span>
<span id="cb38-14">        )</span>
<span id="cb38-15">)</span></code></pre></div>
</div>
<div id="fig-questionr" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-questionr-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/ilustracje/questionr_gif.gif" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-questionr-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;3: Przykład użycia <code>questionr</code>
</figcaption>
</figure>
</div>
</section>
</section>
</section>
<section id="sec-relocate" class="level3" data-number="5.5.2">
<h3 data-number="5.5.2" class="anchored" data-anchor-id="sec-relocate"><span class="header-section-number">5.5.2</span> Kolejność kolumn z <code>dplyr::relocate</code></h3>
<p>Możemy chcieć mieć nasze kolumny w określonej kolejności. Są zasadniczo dwa sposoby zmieniania kolejności kolumn. Jest funkcja <code>relocate</code>, która służy raczej przestawianiu pojedynczych kolumn lub ich niewielkiej liczby. Jeśli chcemy od nowa określić kolejność kolumn, możemy wykorzystać w tym celu znaną nam już funkcję <code>select</code> (por. 5.1.2). Załóżmy, że chcielibyśmy przestawić kolumnę <code>H_suma</code> przed kolumny z cząstkowymi wynikami.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># z użyciem relocate</span></span>
<span id="cb39-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relocate</span>(H_suma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.before =</span> H_1)</span>
<span id="cb39-4"></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># z użyciem select</span></span>
<span id="cb39-6">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, wiek, wyksztalcenie, H_suma, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>())</span></code></pre></div>
</div>
<p>Jeśli przestawiamy kolumny z użyciem <code>relocate</code>, powinniśmy ustawić argument <code>.before</code> albo <code>.after</code>. Oba wymagają nazwy kolumny przed którą lub po której chcemy mieć naszą kolumnę. Jeśli nie ustawimy żadnego, nasze kolumny zostaną przeniesione na początek tabeli. Jeśli używamy <code>select</code>, musimy wpisać kolejność naszych kolumn ręcznie. Zastanawiające może być użycie przeze mnie <code>everything()</code>. W tym kontekście znaczy ono „i potem cała reszta”.</p>
</section>
</section>
<section id="sec-save" class="level2" data-number="5.6">
<h2 data-number="5.6" class="anchored" data-anchor-id="sec-save"><span class="header-section-number">5.6</span> Zapisywanie zmian z <code>&lt;-</code></h2>
<p>W ten sposób uzyskaliśmy cały kod czyszczący. Mamy ów kod zapisany w naszym skrypcie. Jeśli go uruchomimy, to widzimy, że działa. Jednak jeśli w konsolę wpiszemy samo <code>df</code>, naszym oczom ciągle ukazuje się stara, brzydka baza. Jak więc zmienić nasze <code>df</code> na wyczyszczoną wersję? Tak jak zawsze przypisujemy wartości w R – operatorem <code>&lt;-</code>. Nasz kod na zmianę brudnej bazy w czystą ostatecznie przyjmie postać:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wyksztalcenie"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb40-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb40-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10, parse_number),</span>
<span id="cb40-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(H_5, H_7), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .x),</span>
<span id="cb40-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_suma =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10)),</span>
<span id="cb40-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wyksztalcenie_grupa =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb40-11">            wyksztalcenie <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Średnie"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ponadpodstawowe"</span>,</span>
<span id="cb40-12">            wyksztalcenie <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zawodowe"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ponadpodstawowe"</span>,</span>
<span id="cb40-13">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.default =</span> wyksztalcenie</span>
<span id="cb40-14">        ),</span>
<span id="cb40-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wyksztalcenie =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(</span>
<span id="cb40-16">            wyksztalcenie,</span>
<span id="cb40-17">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Podstawowe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zawodowe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Średnie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wyższe"</span>),</span>
<span id="cb40-18">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb40-19">            )</span>
<span id="cb40-20">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(wyksztalcenie), wiek) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relocate</span>(H_suma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.before =</span> H_1)</span></code></pre></div>
</div>
<p>Kod ten możemy uruchomić dla dowolnej ilości danych, w dowolnym momencie. Jest wielokrotnego użytku i spokojnie możemy go wykorzystać, kiedy baza się rozrośnie. Nie musimy go wtedy pisać od nowa, a wystarczy, że go uruchomimy. Co więcej, mogę wpaść jeszcze na jakiś pomysł i dopisać linijkę na samym początku, nie musząc całej reszty robić od nowa. Sprawmy sobie tę przyjemność i zerknijmy na naszą wyczyszczoną bazę.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">df</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 45 × 15</span>
<span style="color: #555555;">#&gt;</span>       <span style="font-weight: bold;">id</span>  <span style="font-weight: bold;">wiek</span> <span style="font-weight: bold;">wyksztalcenie</span> <span style="font-weight: bold;">H_suma</span>   <span style="font-weight: bold;">H_1</span>   <span style="font-weight: bold;">H_2</span>   <span style="font-weight: bold;">H_3</span>   <span style="font-weight: bold;">H_4</span>   <span style="font-weight: bold;">H_5</span>   <span style="font-weight: bold;">H_6</span>   <span style="font-weight: bold;">H_7</span>
<span style="color: #555555;">#&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;ord&gt;</span>          <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span>    54    21 Wyższe            44     5     5     5     5     2     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span>    33    22 Wyższe            43     5     5     4     5     2     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span>    30    23 Wyższe            45     6     5     5     5     2     5     3
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span>    49    23 Wyższe            45     6     6     6     6     1     6     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span>    31    24 Wyższe            39     3     4     4     4     3     4     4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span>    38    25 Wyższe            44     5     5     5     5     2     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span>    46    25 Wyższe            33     5     5     1     5     2     1     3
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span>    43    26 Wyższe            45     6     6     6     6     1     6     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span>    35    29 Wyższe            50     6     6     6     6     1     6     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span>     2    52 Wyższe            44     5     5     5     5     2     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 35 more rows</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 4 more variables: </span><span style="color: #555555; font-weight: bold;">H_8</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">H_9</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">H_10</span><span style="color: #555555;"> &lt;dbl&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">wyksztalcenie_grupa</span><span style="color: #555555;"> &lt;chr&gt;</span>
</code></pre>
</div>
</div>
<p>Po zapisaniu zmiennej <code>df</code>, tracimy naszą starą bazę danych, która była w niej zapisana. To jest tak, jakbyśmy kopiowali plik do folderu, w którym znajduje się już plik o takiej samej nazwie. Operator <code>&lt;-</code> <em>nadpisuje</em> starą zmienną.</p>
<p>Tym samym, jeśli uruchomilibyśmy nasz kod jeszcze raz, ale już na nowej zmiennej <code>df</code>, wyskoczy nam błąd. W końcu nowa zmienna nie ma tych samych kolumn, co stara zmienna. Co więcej, takiej operacji przypisania nie da się w prosty sposób cofnąć. Jeśli chcemy dostać swoją starą, brudną bazę, musimy ponownie załadować ją z pliku. To prowadzi nas do ważnego wniosku co do pisania skryptów – powinniśmy pisać je tak, żeby dało się z nich odtworzyć wszystko, co robiliśmy od samego początku<sup>24</sup>. Dzięki temu, jeśli chcemy się z czegoś wycofać, zaznaczamy i wykonujemy cały kod przed interesującym nas momentem. Brak skrótu Ctrl+Z jest jedną z ważniejszych różnic między analizą w programach typu SPSS czy Statistica a analizą w językach programowania typu R czy Python. Wbrew pozorom idzie się przyzwyczaić. Ta sama właściwość pozwala na zachowanie przejrzystości w nauce – pokaż mi swój kod, a będę wiedział bardzo dokładnie, jak prowadziłeś(-aś) swoją analizę.</p>
</section>
<section id="sec-summarise" class="level2" data-number="5.7">
<h2 data-number="5.7" class="anchored" data-anchor-id="sec-summarise"><span class="header-section-number">5.7</span> Grupowanie (<code>dplyr::group_by</code>) i agregowanie (<code>dplyr::summarise</code>)</h2>
<p>Gdy mamy już bazę, zazwyczaj chcemy policzyć pewne statystyki dla podgrup osób badanych, np. dla osób różniących się wykształceniem, płcią czy jakąś manipulacją. Chcemy na przykład poznać średnią homofobię osób o różnym wykształceniu, sprawdzić liczebność naszych podgrup czy policzyć inne zbiorcze statystyki. Możemy, oczywiście, odfiltrować najpierw osoby o wykształceniu podstawowym, policzyć dla nich, potem osoby o wykształceniu średnim itd. Są jednak prostsze sposoby, a obejmują one użycie <code>group_by</code> i <code>summarise</code><sup>25</sup>. Te dwie funkcje zazwyczaj idą ze sobą w parze i zgrupowane dane od razu trafiają do <code>summarise</code>. Poniżej przykład.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb42-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(wyksztalcenie) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb42-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb42-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb42-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_M =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(H_suma),</span>
<span id="cb42-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_SD =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(H_suma),</span>
<span id="cb42-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_Me =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(H_suma),</span>
<span id="cb42-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">V =</span> H_SD <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> H_M</span>
<span id="cb42-9">    )</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 4 × 6</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">wyksztalcenie</span>     <span style="font-weight: bold;">n</span>   <span style="font-weight: bold;">H_M</span>  <span style="font-weight: bold;">H_SD</span>  <span style="font-weight: bold;">H_Me</span>      <span style="font-weight: bold;">V</span>
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;ord&gt;</span>         <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> Podstawowe        3  47    3.61    48 <span style="color: #555555;">0.0</span>76<span style="text-decoration: underline;">7</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">2</span> Zawodowe          2  46    2.83    46 <span style="color: #555555;">0.0</span>61<span style="text-decoration: underline;">5</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">3</span> Średnie          29  42.3  5.00    43 <span style="color: #555555;">0.</span>118 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">4</span> Wyższe           11  42.9  4.35    44 <span style="color: #555555;">0.</span>101
</code></pre>
</div>
</div>
<p>Jak widzimy, dostaliśmy tabelkę z wykształceniem i wskazanymi statystykami. Funkcja <code>n</code> zliczyła nam przypadki osób z poszczególnym wykształceniem, <code>mean</code> policzyła średnią, <code>sd</code> odchylenie standardowe, a <code>median</code> medianę. <code>V</code> to tzw. współczynnik zmienności. Co to jest, nie jest teraz szczególnie ważne. Policzyłem to tutaj, żeby pokazać, że w obliczeniach możemy też wpisywać niestandardowe operacje (jak dzielenie) bez żadnych strasznych funkcji anonimowych, a także że możemy wziąć wartości z innych kolumn jako argumenty do naszych przekształceń. Tutaj <code>V</code> to odchylenie standardowe średniej homofobii (<code>H_SD</code>) podzielone przez samą średnią (<code>H_M</code>). Każdą kolumnę mogliśmy nazwać wedle życzenia. Jak dowiemy się w podrozdziale 6.1, istnieją funkcje, które najpopularniejsze zastawy statystyk opisowych liczą za nas.</p>
<p>Tak robiliśmy to zawsze, jednak <code>dplyr</code> 1.1.0. wprowadził inny sposób grupowania. Jeśli nie chcemy zapisywać grup w naszej bazie danych na później (czyli w większości przypadków), nie musimy w ogóle używać funkcji <code>group_by</code>. Zamiast tego <code>summarise</code> dostał argument <code>.by</code>, za pomocą którego możemy wskazać grupy jednorazowo, tylko na potrzeby tego jednego podsumowania. Więcej na temat argumentu <code>.by</code> można znaleźć w dokumentacji. Poniżej przykład z innego zbioru danych, w którym pojawia się średnia liczba krzyków w piosence, w zależności od typu piosenki i jej autora <span class="citation" data-cites="field2012">(Field, Miles, &amp; Field, 2012)</span>. Przy okazji pokazuję też, że można grupować na podstawie wielu zmiennych naraz.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># załadowanie danych z sieci</span></span>
<span id="cb43-2">df_scream <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/profandyfield/discovr/master/data-raw/csv_files/escape.csv"</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Rows: </span><span style="color: #0000BB;">68</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Columns: </span><span style="color: #0000BB;">4</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">──</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Column specification</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">────────────────────────────────────────────────────────</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Delimiter:</span><span style="color: #BB0000;"> ","
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> chr (3): id, song_type, songwriter
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BB00;">dbl</span><span style="color: #BB0000;"> (1): screams
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> 
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">ℹ</span><span style="color: #BB0000;"> Use `spec()` to retrieve the full column specification for this data.
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">ℹ</span><span style="color: #BB0000;"> Specify the column types or set `show_col_types = FALSE` to quiet this message.
</span></code></pre>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"></span>
<span id="cb44-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># podejrzenie, jak dane wyglądają</span></span>
<span id="cb44-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(df_scream)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> Rows: 68
<span style="color: #555555;">#&gt;</span> Columns: 4
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">id        </span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> "271", "q5b", "23x", "1ai", "7st", "fug", "v28", "64f", "c3…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">song_type </span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> "Fly song", "Fly song", "Fly song", "Fly song", "Fly song",…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">songwriter</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> "Andy", "Andy", "Andy", "Andy", "Andy", "Andy", "Andy", "An…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">screams   </span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> 5, 7, 3, 5, 7, 7, 7, 11, 6, 8, 4, 10, 8, 5, 5, 6, 5, 6, 8, …
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"></span>
<span id="cb45-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pogrupowanie i zliczenie średniej liczby krzyków</span></span>
<span id="cb45-3">df_scream <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb45-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb45-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">M =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(screams),</span>
<span id="cb45-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(song_type, songwriter)</span>
<span id="cb45-7">    )</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 4 × 3</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">song_type</span> <span style="font-weight: bold;">songwriter</span>     <span style="font-weight: bold;">M</span>
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>      <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> Fly song  Andy        6.41
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">2</span> Fly song  Malcolm     6   
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">3</span> Symphony  Andy        9.53
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">4</span> Symphony  Malcolm     7.06
</code></pre>
</div>
</div>
<p>Kolumny do grupowania podałem jako zestaw, czyli wewnątrz <code>c()</code>. Zgrupowane w ten sposób dane pokazują nam, że Andy pisze bardziej krzykliwe piosenki od Malcolma, ale różnica powiększa się, gdy chodzi o piosenki symfoniczne.</p>
</section>
<section id="sec-pivot" class="level2" data-number="5.8">
<h2 data-number="5.8" class="anchored" data-anchor-id="sec-pivot"><span class="header-section-number">5.8</span> Format długi i szeroki z <code>tidyr::pivot_*</code></h2>
<p>Format długi i szeroki to coś, co rzadko pojawia się w tekstach wprowadzających i nie mam pojęcia czemu. To jest naprawdę ważne. Przełożenie danych z jednego formatu na drugi to często podstawowa operacja, jaką musimy wykonać, kiedy chcemy coś policzyć. Nie mam chyba ani jednego projektu, w którym bym tego nie robił. Do tego współczesne komendy, które to robią, są naprawdę proste. Tym bardziej zaskakujące jest, że np. w Excelu wykonać taką operację jest trudno, jeśli nie umie się korzystać z Power Query. Zacznijmy jednak od tego, co to jest format długi i szeroki.</p>
<p>Terminy te odnoszą się do sposobu, w jaki składujemy dane. Format szeroki jest tym, co odruchowo tworzymy, kiedy robimy czyste tabelki. Jeden wiersz to jedna obserwacja. Wszystkie dane o konkretnej osobie badanej znajdują się w tym jednym wierszu. Każda kolumna to jedna zebrana dana, np. odpowiedź na konkretne pytanie. W takim formacie znajduje się teraz nasza baza. Weźmy z niej kilka kolumn, po czym użyjmy <code>head</code>, żeby zobaczyć pierwszych pięć wierszy.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">df_wide <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zapiszę to jako df_wide, na później</span></span>
<span id="cb46-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_5) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb46-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># poprawiam id, żeby były kolejne liczby, zmiana kosmetyczna</span></span>
<span id="cb46-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(id) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sortuję wg id</span></span>
<span id="cb46-5"></span>
<span id="cb46-6">df_wide <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zapisane dane trzeba jeszcze wyświetlić</span></span>
<span id="cb46-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tylko 5 pierwszych wierszy</span></span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 5 × 6</span>
<span style="color: #555555;">#&gt;</span>      <span style="font-weight: bold;">id</span>   <span style="font-weight: bold;">H_1</span>   <span style="font-weight: bold;">H_2</span>   <span style="font-weight: bold;">H_3</span>   <span style="font-weight: bold;">H_4</span>   <span style="font-weight: bold;">H_5</span>
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span>     1     5     5     5     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">2</span>     2     5     5     4     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">3</span>     3     6     5     5     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">4</span>     4     6     6     6     6     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">5</span>     5     3     4     4     4     3
</code></pre>
</div>
</div>
<p>Są to typowe dane w formacie szerokim. Żeby jednak zrozumieć różnicę, między formatem długim, a szerokim, trzeba jeszcze zobaczyć dane długie. Stwórzmy więc takie.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">df_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df_wide <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb47-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_5, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytanie"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ocena"</span>)</span>
<span id="cb47-3"></span>
<span id="cb47-4">df_long <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb47-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 10 × 3</span>
<span style="color: #555555;">#&gt;</span>       <span style="font-weight: bold;">id</span> <span style="font-weight: bold;">pytanie</span> <span style="font-weight: bold;">ocena</span>
<span style="color: #555555;">#&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span>     1 H_1         5
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span>     1 H_2         5
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span>     1 H_3         5
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span>     1 H_4         5
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span>     1 H_5         2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span>     2 H_1         5
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span>     2 H_2         5
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span>     2 H_3         4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span>     2 H_4         5
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span>     2 H_5         2
</code></pre>
</div>
</div>
<p>Zacznę od skomentowania samych danych, a potem wyjaśnię funkcję. Dane w formacie długim mają oddzielne kolumny na numer pytania i odpowiedź. Pięć kolumn z odpowiedziami na pytania z formatu szerokiego zmieniliśmy w dwie. Powoduje to jednak, że każda osoba badana ma teraz pięć wierszy – w każdym odpowiedź na tylko jedno pytanie. Najpierw następuje 5 wierszy osoby z id 1, potem 5 wierszy osoby z id 2 itd. Widać więc dlaczego formaty te nazywają się szeroki i długi. Szeroki ma wiele kolumn, a mało wierszy (1 na osobę), długi mało kolumn, a wiele wierszy (1 na każde pytanie).</p>
<p>Po co nam taki format? Zawiera te same informacje, co format szeroki, a trudniej się to czyta. Po pierwsze umożliwia nam to policzenie niektórych rzeczy, których nie policzylibyśmy z formatu szerokiego. Dla przykładu teraz mogę grupować dane według pytań, żeby sprawdzić, czy na każde pytanie badani odpowiadają podobnie. Jeśli moja skala jest dobra i każde pytanie rzeczywiście mierzy to samo, to odpowiedzi na wszystkie pytania powinny być podobne. Być może zrobiłem jakieś kontrowersyjne pytanie, na które wszyscy odpowiadają nisko, mimo że nie różnią się, w tym przykładzie, rzeczywistym poziomem homofobii. Mogę więc, na oko, sprawdzić rzetelność pozycji testowych<sup>26</sup>. Formatu długiego wymagają też niektóre testy statystyczne.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">df_long <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb48-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb48-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">M =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(ocena),</span>
<span id="cb48-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SD =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(ocena),</span>
<span id="cb48-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(pytanie)</span>
<span id="cb48-6">    )</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 5 × 3</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">pytanie</span>     <span style="font-weight: bold;">M</span>    <span style="font-weight: bold;">SD</span>
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> H_1      5.16 <span style="color: #555555;">0.</span>767
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">2</span> H_2      5    <span style="color: #555555;">0.</span>929
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">3</span> H_3      4.47 1.46 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">4</span> H_4      5.49 <span style="color: #555555;">0.</span>661
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">5</span> H_5      1.53 <span style="color: #555555;">0.</span>694
</code></pre>
</div>
</div>
<p>Nawet częściej, niż do grupowania po pytaniach, wykorzystujemy format długi do wykresów. Jak się przekonamy dalej (w podrozdziale 7), w gramatyce grafik (<em>The Grammar of Graphics</em>) do jednego obiektu na wykresie możemy przypisać tylko jedną kolumnę. Jeśli więc chcemy zrobić wykres słupkowy np. wyników <em>przed</em> i <em>po</em>, to do osi X przypiszemy kolumnę z etykietami, a do osi Y kolumnę z wynikami. Nie da się więc sensownie zrobić wykresu, jeśli wyniki <em>przed</em> i <em>po</em> mamy w osobnych kolumnach.</p>
<p>Omówmy więc funkcję, której użyłem do zmiany formatu. Kiedyś robiło się to skomplikowanymi funkcjami <code>melt</code> i <code>cast</code>, które często można znaleźć w innych językach programowania. Dziś w R, na szczęście, mamy intuicyjne funkcje <code>pivot_wider</code> i <code>pivot_longer</code>. Tej pierwszej używamy zmieniając format na szeroki, tą drugą zmieniamy format na długi. Na przykładzie powyżej można stwierdzić, że <code>pivot_longer</code> przyjmuje trzy argumenty. Pierwszy to zbiór kolumn, do jakich chcemy tę funkcję zastosować, jakie chcemy zwinąć. Można tu skorzystać z funkcji pomocniczych typu <code>starts_with()</code> czy <code>everything()</code>. Kolejne dwa argumenty funkcji <code>pivot_longer</code> to <code>names_to</code> i <code>values_to</code>. Są to nazwy kolumn, do których mają trafić, jak nazwa wskazuje, nazwy i wartości z naszych obecnych kolumn. W naszym przykładzie etykiety <code>H_1</code>, <code>H_2</code> itd. trafiły do kolumny <code>pytanie</code>, zaś same odpowiedzi na te pytania do kolumny <code>ocena</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">df_long <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb49-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytanie"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ocena"</span>)</span></code></pre></div>
</div>
<p><code>pivot_wider</code> ma prostszą składnię, ponieważ nie trzeba w niej wskazywać zakresu kolumn do rozwinięcia, a jedynie gdzie znajdują się nazwy kolumn, a gdzie ich wartości. Robimy to odpowiednio argumentami <code>names_from</code> i <code>values_from</code>. Jeśli jakiejś wartości nie ma w formacie długim (np. gdy osoba z numerem 4 nie odpowiedziała na pytanie 2, to w formacie długim może nie być wiersza <code>4 H_2</code>), to <code>pivot_wider</code> automatycznie wstawi w tę komórkę <code>NA</code><sup>27</sup>. Zdarza się, że funkcji tej musimy użyć dlatego, że niektóre programy generują dane w formacie długim.</p>
</section>
<section id="sec-join" class="level2" data-number="5.9">
<h2 data-number="5.9" class="anchored" data-anchor-id="sec-join"><span class="header-section-number">5.9</span> Retesty czyli złączenia (<em>joins</em>)</h2>
<p>Złączenia (<em>joins</em>) to, jak nazwa wskazuje, metoda łączenia dwóch baz danych. Jest to jedna z podstawowych operacji na bazach danych, znana co najmniej od lat 70. i instrukcji <code>JOIN</code> w SQL. Jest to także jedna z operacji niedostępnych w Excelu bez Power Query. W praktyce badawczej może być ona konieczna, gdy mamy badanie wieloczęściowe, w którym musimy stosować wiele baz danych (np. jedną tworzą pomiary z eyetrackera, drugą wyniki w ankiecie, a trzecią test szybkości reakcji). Często zdarza się to też w prostych badaniach ankietowych, w których po jakimś czasie musimy wykonać retest. W obu tych przypadkach lądujemy z dwiema (lub więcej) bazami, które – miejmy nadzieję – mają jakąś wspólną kolumnę, identyfikator osoby badanej, taki sam w każdej z trzech baz<sup>28</sup>.</p>
<p>Jak więc takie bazy połączyć? Wykorzystajmy tutaj dwie bazy zawierające test i retest, zrobione podczas walidacji kwestionariusza o nazwie KTR. Składał się on z dwóch skal oznaczonych tutaj literkami O i W. Standardową procedurą przy projektowaniu kwestionariusza jest powtórzenie pomiaru po jakimś czasie, żeby sprawdzić, na ile wyniki są stabilne. My taką procedurę wykonaliśmy, przez co dysponujemy dwiema oddzielnymi bazami. Zerknijmy na nie.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">db_test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./dane/podstawy-R/join-test.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb50-2">db_retest <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./dane/podstawy-R/join-retest.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb50-3"></span>
<span id="cb50-4">db_test</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 76 × 3</span>
<span style="color: #555555;">#&gt;</span>    <span style="font-weight: bold;">ID</span>    <span style="font-weight: bold;">KTR_O</span> <span style="font-weight: bold;">KTR_W</span>
<span style="color: #555555;">#&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span> B3RP     26    30
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span> v4Eb     31    36
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span> j3vB     20    31
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span> wced     27    37
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span> RhPy     15    31
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span> aoEF     32    31
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span> CjRB     23    28
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span> bYhC     28    41
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span> zCdZ     17    27
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span> wspA     21    34
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 66 more rows</span>
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"></span>
<span id="cb51-2">db_retest</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 66 × 3</span>
<span style="color: #555555;">#&gt;</span>    <span style="font-weight: bold;">Subject</span> <span style="font-weight: bold;">KTR_O</span> <span style="font-weight: bold;">KTR_W</span>
<span style="color: #555555;">#&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span> j3vB       23    31
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span> wced       25    38
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span> aoEF       33    31
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span> CjRB       24    34
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span> bYhC       29    41
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span> zCdZ       17    28
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span> wspA       24    29
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span> GGwI       18    35
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span> L9ZW       23    35
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span> 1stk       24    33
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 56 more rows</span>
</code></pre>
</div>
</div>
<p>Pierwsza rzecz, która może zwrócić naszą uwagę, to znacznie mniejsza liczba osób badanych przy reteście. Jest to naturalne, jako że wiele osób, mimo wcześniejszych deklaracji, nie wypełnia naszego testu po raz drugi. Widzimy też, że każdy wiersz posiada jakiegoś rodzaju kolumnę z unikatowym identyfikatorem osoby badanej. W języku relacyjnych baz danych takie unikatowe kolumny określa się jako <code>PRIMARY KEY</code>. W bazie danych z pierwszego testu kolumna ta nosi nazwę <code>ID</code>, a w bazie danych z retestu nazywa się ona <code>Subject</code>. Od razu wychodzi na jaw, że identyfikatory są spreparowane, bo nikt się nie pomylił, nie robił dopisków ani nie zdecydował się z jakiegoś powodu NaGlE pIsAć TaK. Moja praktyczna porada jest taka, żeby przed łączeniem baz danych zastosować na kolumnach z id funkcje <code>str_to_lower</code> i <code>str_trim</code>, które odpowiednio zmienią pisownię na same małe litery i usuną ewentualne spacje na początku i na końcu id. Ewentualnie można wykorzystać <code>str_replace_all</code> do usunięcia wszystkich spacji. Resztę&nbsp;identyfikatorów można poprawić ręcznie funkcją <code>case_when</code> (patrz 5.4.2).</p>
<p>Żeby połączyć nasze bazy, musimy najpierw zdecydować, jak chcemy to zrobić. Możemy albo przyłączyć wyniki z retestu do bazy z testem, albo przyłączyć wyniki z testu do bazy z retestem. Jest to o tyle istotne, że jeśli przyłączymy retest do testu, to będziemy mieli puste wartości u tych osób, które nie wypełniły retestu. Jeśli zrobimy odwrotnie, to z założenia każda osoba, która wypełniła retest, wcześniej wypełniła test, a więc figuruje w pierwotnej bazie. W praktyce bywa różnie. Na przykład ludzie kłamią, że wypełnili test, a jak dostaną link do retestu, to myślą, że w takim razie chociaż to wypełnią. Tak czy inaczej, ta decyzja determinuje typ złączenia, jaki wybierzemy. Najbardziej powszechnym typem jest <code>LEFT JOIN</code>, który do każdego wiersza jednej bazy (pisanej jako pierwszej, czyli po lewej) przypisuje pasujący wiersz drugiej bazy (pisanej jako drugiej, czyli po prawej). Jeśli jakiś wiersz w lewej bazie nie ma odpowiednika w prawej bazie, otrzymujemy puste wartości. Jeśli jakiś wiersz w bazie po prawej nie został przypisany do żadnego wiersza po lewej, nie jesteśmy o tym informowani. Więcej o różnych typach złączeń (np. pozwalających uzyskać wszystkie możliwe kombinacje wierszy) można przeczytać i zobaczyć na obrazkach <a href="https://dataschool.com/how-to-teach-people-sql/sql-join-types-explained-visually/">na przykład tutaj</a>.</p>
<p>Ja przyłączę retest do bazy z wynikami pierwszego testu. Widzę jednak dwa problemy, które będę musiał rozwiązać. Po pierwsze, kolumna z identyfikatorem osoby badanej nazywa się inaczej w obu bazach. Po drugie, kolumny <code>KTR_O</code> i <code>KTR_W</code> nazywają się tak samo w obu bazach. Będę więc musiał wskazać R, na podstawie jakich kolumn ma dokonać złączenia, a także jak ma nazwać kolumny w gotowej bazie, żebym wiedział, które wyniki dotyczą pierwszego testu, a które retestu.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">db_joined <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> db_test <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb52-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(</span>
<span id="cb52-3">        db_retest,</span>
<span id="cb52-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(ID <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> Subject),</span>
<span id="cb52-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">suffix =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_retest"</span>)</span>
<span id="cb52-6">    )</span>
<span id="cb52-7"></span>
<span id="cb52-8">db_joined</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 76 × 5</span>
<span style="color: #555555;">#&gt;</span>    <span style="font-weight: bold;">ID</span>    <span style="font-weight: bold;">KTR_O</span> <span style="font-weight: bold;">KTR_W</span> <span style="font-weight: bold;">KTR_O_retest</span> <span style="font-weight: bold;">KTR_W_retest</span>
<span style="color: #555555;">#&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>        <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>        <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span> B3RP     26    30           <span style="color: #BB0000;">NA</span>           <span style="color: #BB0000;">NA</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span> v4Eb     31    36           <span style="color: #BB0000;">NA</span>           <span style="color: #BB0000;">NA</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span> j3vB     20    31           23           31
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span> wced     27    37           25           38
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span> RhPy     15    31           <span style="color: #BB0000;">NA</span>           <span style="color: #BB0000;">NA</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span> aoEF     32    31           33           31
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span> CjRB     23    28           24           34
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span> bYhC     28    41           29           41
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span> zCdZ     17    27           17           28
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span> wspA     21    34           24           29
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 66 more rows</span>
</code></pre>
</div>
</div>
<p>Pierwszy problem rozwiązałem za pomocą argumentu <code>by</code>. Od wersji <code>dplyr</code> 1.1.0 przyjmuje on inną funkcję o nazwie <code>join_by</code>. W jej nawiasach precyzujemy, na podstawie jakich kolumn należy dokonać złączenia. Identyczne kolumny łączymy znakiem <code>==</code>. Drugi problem rozwiązałem dodając w argumencie <code>suffix</code> przyrostki do nazw kolumn. Zawsze zapisuje się je jako zestaw, czyli wewnątrz <code>c()</code> i zawsze najpierw jest w cudzysłowie przyrostek lewej bazy (u nas <code>db_test</code>), a potem przyrostek prawej bazy (u nas <code>db_retest</code>). Ja chciałem, by kolumny pierwotnej bazy nie miały przyrostka, więc za przyrostek dałem pusty ciąg znaków (czyli po prostu nic w cudzysłowie), zaś do kolumn bazy z retestem dodałem przyrostek <code>"_retest"</code>. Efekt widać na wydruku z konsoli – 5 kolumn i puste wartości u osób, które nie wypełniły retestu.</p>
<p>Złączenia to zaskakująco szeroki temat, który daje duże możliwości. Omówiona tu funkcja <code>left_join</code> jest najczęściej stosowana, ale warto zerknąć do dokumentacji i w tutoriale, żeby chociaż dowiedzieć się, co możemy za pomocą złączeń zrobić.</p>
</section>
</section>
<section id="sec-exploration" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Eksploracja danych</h1>
<p>Dane możemy eksplorować ręcznie za pomocą funkcji <code>group_by</code> i <code>summarise</code>, jak to opisałem w podrozdziale (5.7). Ponieważ jednak wiele czynności, takich jak liczenie statystyk opisowych, wykonujemy za każdym razem, kiedy siadamy do analizy, powstały funkcje, które znacznie ten proces przyspieszają i upraszczają. Te, które omówię tutaj, stanowią część świetnego pakietu <code>rstatix</code>, który omawiam także w podrozdziale 8.2.</p>
<!-- O ile ogólna możliwość liczenia statystyk została omówiona w podrozdziale o grupowaniu i agregacji ([-@sec-summarise]), tak tutaj chciałbym podrzucić dwie użyteczne funkcje do szybkiego uzyskania statystyk dla całego zestawu danych. Będą to funkcje `describe` i `describeBy` z pakietu `psych` (który trzeba, oczywiście, zainstalować i załadować przed użyciem). Jest to pierwszy omawiany tu pakiet spoza `tidyverse`. `psych` to rozległy zestaw narzędzi zaprojektowanych specjalnie do obliczeń szeroko wykorzystywanych w psychologii. Składa się z kilkudziesięciu funkcji zaprojektowanych jako zestaw narzędzi do badań empirycznych w psychologii. Jest tylko jeden problem. `psych` miał premierę w 2007 r. i o ile co jakiś czas dostaje update, to nie jest opublikowany na GitHubie. Oznacza to, że społeczność nie może wprowadzać poprawek do kodu. Profesor Revelle rzeczywiście zna się na rzeczy, jako że od 40 lat jest profesorem, ale to ciągle jedna osoba. Dlatego czasem trzeba się trochę nagimnastykować, żeby zmusić `psych` do współpracy z `tidyverse`. -->
<!-- ## Statystyki opisowe z `psych::describe` {#sec-describe} -->
<!-- Funkcja `describe` pozwala szybko uzyskać zestaw wielu podstawowych statystyk opisowych dla wszystkich kolumn naraz. Powstaje z tego duża tabela, która zawiera znacznie więcej danych niż nam potrzeba, ale ma tę zaletę, że można ją zrobić szybko. Składnia jest tutaj tak banalna, że ciężko mówić o składni, bo polega na tym, że piszemy `describe(df)`. I to zazwyczaj zupełnie wystarczy. Że to za proste, to pokażę trochę więcej możliwości. -->
<!-- ```{r} -->
<!-- #| warning: false -->
<!-- library("psych") # normalnie wszystkie pakiety ładowałbym w jednym miejscu, gdzieś na początku kodu -->
<!-- descr <- df %>% -->
<!--     describe(quant = c(0.25, 0.75), IQR = TRUE) %>% -->
<!--     as_tibble(rownames = "var") -->
<!-- ``` -->
<!-- Źródłem problemów czasem bywa to, że mamy dwa główne sposoby przechowywania tabelek w R. Pierwszy to `data.frame` czyli natywny typ danych w R. Drugi to `tibble`, czyli `data.frame` na prochach. Jak nietrudno się domyślić, `tibble` pochodzi z ze świata `tidyverse` i właściwie wszystko robi lepiej. Przede wszystkim lepsze jest to, jak wyświetla się w konsoli, ale też kilka rzeczy pod maską. Wszystkie dotychczasowe „ramki danych" (jak to się czasem tłumaczy), z jakimi mieliśmy do czynienia, to właśnie `tibble`. Żeby na własnej skórze przekonać się o wyższości `tibble` nad `data.frame` można wpisać w konsolę `df` (która jest w formacie `tibble`), a potem `as.data.frame(df)`. Dlatego też w ostatniej linijce kodu przerabiam wynik działania `describe` na format `tibble`. -->
<!-- Jedną rzecz muszę jednak dodać. Z wielu praktycznych przyczyn `tibble` nie używa nazwanych wierszy. Tylko kolumny mogą mieć nazwy własne, jeśli chcemy mieć identyfikatory wierszy, powinniśmy zrobić z nich oddzielną kolumnę. `describe` zaś w czystej postaci wyrzuca `data.frame`, w której nazwy opisanych zmiennych to właśnie nazwy wierszy, dlatego muszę powiedzieć funkcji `as_tibble`, do jakiej kolumny ma mi wrzucić nazwy tych zmiennych. Swoją nazwałem `var`. -->
<!-- Powstała tabela jest na tyle rozległa, że nie chciałem jej tu umieszczać, ale można ją sobie samodzielnie wyświetlić. Mam nadzieję, że wiesz już, jak to zrobić. Żeby podejrzeć zawartość naszej tabeli skorzystam z raz już użytej funkcji `glimpse`. -->
<!-- ```{r} -->
<!-- glimpse(descr) -->
<!-- ``` -->
<!-- Nazwy kolumn mówią nam już, co udało nam się wygenerować. Jest nasza kolumna `var` z nazwami zmiennych z bazy. Jest cała seria statystyk opisowych. Warto zauważyć, że swoje statystyki typu średnia dostała też zmienna tekstowa `wyksztalcenie`. Żeby ostrzec, że liczby te nie mają za wiele sensu, nazwa tej kolumny automatycznie dostała gwiazdkę `wyksztalcenie*`. Opis wszystkich policzonych statystyk znajduje się, a jakże, w dokumentacji. Powiem tylko o dwóch rzeczach, które wprost musiałem wywołać argumentami. Pierwsza to kwantyle, czyli wartości dzielące zbiór danych na części. 25. kwantyl to obserwacja, poniżej której znajduje się 25% danych. Jeśli mielibyśmy dokładnie 100 obserwacji, to 25. kwantylem byłaby 25. obserwacja. Mediana to nic innego jak 50. kwantyl. Możemy poprosić `describe` o podanie nam dowolnych kwantyli. Wystarczy, że zbierzemy je wszystkie w `c` jako ułamki dziesiętne i wrzucimy do argumentu `quant`. Druga rzecz, o którą wprost poprosiłem, to IQR, czyli rozstęp międzykwartylowy. Bywa wykorzystywany jako wskaźnik rozproszenia danych. Ponieważ jest to argument typu „licz albo nie licz", to wpisałem w niego `TRUE`, czyli kazałem `describe` ten rozstęp policzyć. -->
<!-- ## Statystyki opisowe dla grup z `psych::describeBy` {#sec-describeBy} -->
<!-- Co jeśli chcielibyśmy policzyć statystyki opisowe w grupach? Niestety `psych` nie współpracuje z `group_by` (patrz [-@sec-summarise]), ale ma własną metodę grupowania danych. Służy temu funkcja `describeBy`. Przypomnijmy sobie tutaj bazę `df_scream` z podrozdziału [-@sec-summarise]. -->
<!-- ```{r} -->
<!-- head(df_scream) -->
<!-- ``` -->
<!-- Mamy dwa sposoby, żeby naszą bazę wrzucić do `describeBy`, z czego ja pokażę ten bardziej intuicyjny. Ma od postać tzw. formuły (*formula*), z którymi spotkamy się jeszcze przy okazji testów statystycznych ([-@sec-tests]), zwłaszcza w `rstatix` ([-@sec-rstatix]). Przy tej okazji omówimy sobie też głębiej działanie potoków. Najpierw jednak pokażę przykład formuły. Jeśli chcielibyśmy dostać statystyki opisowe dla liczby krzyków w zależności od tego, kto tę piosenkę napisał, skorzystalibyśmy z takiej formuły `screams ~ songwriter`. Ten znaczek pośrodku to tylda, używana też w funkcjach anonimowych z `purrr` ([-@sec-lambda]). Jeśli chcielibyśmy dołożyć też do tego podziału typ piosenki, użylibyśmy znaku `+` pisząc `screams ~ songwriter + song_type`. Jak mogłaby wyglądać taka funkcja? -->
<!-- ```{r} -->
<!-- df_scream %>% -->
<!--     as.data.frame() %>% -->
<!--     describeBy(screams ~ songwriter + song_type, data = .) -->
<!-- ``` -->
<!-- Wynikiem działania takiej funkcji jest lista (też nieużywany wcześniej typ danych). W tytule możemy zobaczyć autora i typ piosenki. Jeśli to jest jasne, wyjaśnijmy pozostałą część instrukcji. Po pierwsze znów spotykamy problem, że `describeBy` nie chce współpracować z `tibble`, więc musimy przekształcić naszą bazę na stary dobry format `data.frame`. Robimy to funkcją `as.data.frame`. Druga sprawa to `data = .`. Argument `data` to obowiązkowy argument, do którego wrzucamy naszą bazę danych. Dzięki temu R wie, gdzie ma szukać kolumn `screams`, `songwriter` i `song_type` z naszej formuły. Problem polega jednak na użyciu potoków. Standardowo potok `%>%` wrzuca rzeczy do pierwszego argumentu. Wiele funkcji, tak jak `describeBy`, nie przyjmuje bazy danych w pierwszym argumencie. Jak na złość `data` w `describeBy` to ostatni argument, więc najlepiej wprost go nazwać. Omawiany w podrozdziale [-@sec-rstatix] pakiet `rstatix` za pierwszy cel postawił sobie nawet przerobienie testów statystycznych tak, żeby lepiej współpracowały z potokami. Jak więc poradzić sobie w takiej sytuacji? Jedna opcja, to całkiem zrezygnować z potoków. -->
<!-- ```{r} -->
<!-- #| eval: false -->
<!-- describeBy(screams ~ songwriter + song_type, data = as.data.frame(df_scream)) -->
<!-- ``` -->
<!-- W krótkich instrukcjach takie coś jest nawet czytelne. Warto pamiętać, że potoki nie są obowiązkowe, można równie dobrze zagnieżdżać funkcje. Cierpi na tym tylko czytelność kodu. Druga opcja, to wprost powiedzenie potokowi, gdzie ma wrzucić naszą bazę danych. Do tego właśnie służy `.`. Zapis `data = .` mówi potokowi „halo halo, proszę nie wrzucać bazy do pierwszego argumentu, tylko o tu, gdzie pokazałem(-am) kropką". Ostatecznie oba przykłady z tego podrozdziału są równoważne. -->
<section id="sec-get_summary_stats" class="level2" data-number="6.1">
<h2 data-number="6.1" class="anchored" data-anchor-id="sec-get_summary_stats"><span class="header-section-number">6.1</span> Statystyki opisowe z <code>rstatix::get_summary_stats</code></h2>
<!-- Muszę się do czegoś przyznać. Przez lata wykorzystywałem `describe` i `describeBy` do statystyk opisowych, ale... są lepsze alternatywy. Chciałem jednak wykorzystać te funkcje jako praktyczny pretekst to pokazania różnic między `data.frame` i `tibble`, używania kropki z potokami i ogólnie jak sobie radzić, jak nowszych alternatyw nie ma. Jednak do liczenia statystyk opisowych takie alternatywy są. I przychodzą do nas z `rstatix`. Jest to świetny, nowoczesny pakiet, który szerzej omówimy w podrozdziale [-@sec-rstatix]. -->
<p>Do liczenia statystyk opisowych w <code>rstatix</code> wykorzystujemy funkcję <code>get_summary_stats</code>. Dobrze współpracuje ona z <code>tidyverse</code>, potokami i funkcją <code>group_by</code>. Ma też bardzo prostą składnię. Jedyne, co musimy zrobić, to wrzucić do naszej funkcji naszą bazę danych, a otrzymamy rozległą tabelę ze statystykami opisowymi dla wszystkich zmiennych. Szczegóły, wyjaśnienia i ewentualne możliwości modyfikacji poszczególnych statystyk znajdują się w dokumentacji. Jeśli do podstawowych statystych chcielibyśmy doliczyć coś niestandardowego, jak współczynnik zmienności z podrozdziału 5.7, zawsze możemy na gotowej tabeli ze statystykami opisowymi użyć użyć <code>mutate</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rstatix"</span>)</span>
<span id="cb53-2"></span>
<span id="cb53-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_summary_stats</span>(df) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb53-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">v =</span> sd <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> mean) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dodaję współczynnik zmienności</span></span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 13 × 14</span>
<span style="color: #555555;">#&gt;</span>    <span style="font-weight: bold;">variable</span>     <span style="font-weight: bold;">n</span>   <span style="font-weight: bold;">min</span>   <span style="font-weight: bold;">max</span> <span style="font-weight: bold;">median</span>    <span style="font-weight: bold;">q1</span>    <span style="font-weight: bold;">q3</span>   <span style="font-weight: bold;">iqr</span>   <span style="font-weight: bold;">mad</span>  <span style="font-weight: bold;">mean</span>     <span style="font-weight: bold;">sd</span>    <span style="font-weight: bold;">se</span>
<span style="color: #555555;">#&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;fct&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span> id          45     1    55     31    18    43    25 19.3  30.1  15.8   2.36 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span> wiek        45    17    64     21    20    23     3  1.48 23.2   8.04  1.20 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span> H_suma      45    30    50     43    40    46     6  4.45 42.9   4.77  <span style="color: #555555;">0.</span>712
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span> H_1         45     3     6      5     5     6     1  1.48  5.16  <span style="color: #555555;">0.</span>767 <span style="color: #555555;">0.</span>114
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span> H_2         45     1     6      5     5     6     1  <span style="color: #555555;">0</span>     5     <span style="color: #555555;">0.</span>929 <span style="color: #555555;">0.</span>139
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span> H_3         45     1     6      5     4     6     2  1.48  4.47  1.46  <span style="color: #555555;">0.</span>217
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span> H_4         45     4     6      6     5     6     1  <span style="color: #555555;">0</span>     5.49  <span style="color: #555555;">0.</span>661 <span style="color: #555555;">0.0</span>99
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span> H_5         45     1     4      1     1     2     1  <span style="color: #555555;">0</span>     1.53  <span style="color: #555555;">0.</span>694 <span style="color: #555555;">0.</span>103
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span> H_6         45     1     6      5     4     6     2  1.48  4.73  1.34  <span style="color: #555555;">0.</span>199
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span> H_7         45     1     6      2     1     2     1  1.48  1.87  1.08  <span style="color: #555555;">0.</span>161
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">11</span> H_8         45     2     6      5     5     6     1  1.48  5.13  <span style="color: #555555;">0.</span>991 <span style="color: #555555;">0.</span>148
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">12</span> H_9         45     1     6      5     4     6     2  1.48  4.49  1.47  <span style="color: #555555;">0.</span>219
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">13</span> H_10        45     1     6      5     5     6     1  1.48  5.07  1.29  <span style="color: #555555;">0.</span>192
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 2 more variables: </span><span style="color: #555555; font-weight: bold;">ci</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">v</span><span style="color: #555555;"> &lt;dbl&gt;</span>
</code></pre>
</div>
</div>
<p>Jeśli chcemy otrzymać statysyki opisowe dla zgrupowanych danych, czyli np. osobno dla każdego poziomu wykształcenia, wystarczy, że przed użyciem funkcji <code>get_summary_stats</code> zgrupujemy dane funkcją <code>group_by</code>. W chwili, kiedy to piszę, funkcje <code>rstatix</code> nie posiadają argumentu <code>.by</code>. Jako przykład wykorzystam bazę <code>df_scream</code> z podrozdziału 5.7.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">df_scream <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb54-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(songwriter, song_type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb54-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_summary_stats</span>()</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 4 × 15</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">song_type</span> <span style="font-weight: bold;">songwriter</span> <span style="font-weight: bold;">variable</span>     <span style="font-weight: bold;">n</span>   <span style="font-weight: bold;">min</span>   <span style="font-weight: bold;">max</span> <span style="font-weight: bold;">median</span>    <span style="font-weight: bold;">q1</span>    <span style="font-weight: bold;">q3</span>   <span style="font-weight: bold;">iqr</span>   <span style="font-weight: bold;">mad</span>
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>      <span style="color: #555555; font-style: italic;">&lt;fct&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> Fly song  Andy       screams     17     3    11      6     5     7     2  1.48
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">2</span> Symphony  Andy       screams     17     7    13     10     8    10     2  2.96
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">3</span> Fly song  Malcolm    screams     17     3    11      6     5     7     2  1.48
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">4</span> Symphony  Malcolm    screams     17     4    11      7     6     8     2  1.48
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 4 more variables: </span><span style="color: #555555; font-weight: bold;">mean</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">sd</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">se</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">ci</span><span style="color: #555555;"> &lt;dbl&gt;</span>
</code></pre>
</div>
</div>
</section>
<section id="sec-freq_table" class="level2" data-number="6.2">
<h2 data-number="6.2" class="anchored" data-anchor-id="sec-freq_table"><span class="header-section-number">6.2</span> Tabele liczności z <code>rstatix::freq_table</code></h2>
<p>Dla danych kategorialnych (np. płeć, wykształcenie, klasa) nie liczymy statystyk opisowych, a tabele liczności. Chcemy na przykład wiedzieć, ile w naszej bazie mamy osób z wykształceniem wyższym, ile ze średnim itd. W podrozdziale 5.7 pokazałem, jak to zrobić ręcznie funkcjami <code>summarise</code> i <code>n</code>. Pakiet <code>rstatix</code> ma dla nas gotową funkcję <code>freq_table</code> właśnie do tego celu. Wymaga ona jedynie podania, które kolumny z naszej tabeli zliczyć. Robimy to tak samo, jak zrobilibyśmy w funkcji <code>select</code> (patrz 5.1.2) czy <code>across</code> (patrz 5.3.1).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">freq_table</span>(df, wyksztalcenie)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 4 × 3</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">wyksztalcenie</span>     <span style="font-weight: bold;">n</span>  <span style="font-weight: bold;">prop</span>
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;ord&gt;</span>         <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> Podstawowe        3   6.7
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">2</span> Zawodowe          2   4.4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">3</span> Średnie          29  64.4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">4</span> Wyższe           11  24.4
</code></pre>
</div>
</div>
</section>
<section id="sec-cor_mat" class="level2" data-number="6.3">
<h2 data-number="6.3" class="anchored" data-anchor-id="sec-cor_mat"><span class="header-section-number">6.3</span> Macierze korelacji i ich istotność z <code>rstatix::cor_mat</code></h2>
<p>W ramach eksploracji chcemy czasami zrobić macierz korelacji całego naszego zestawu danych. Może nam do tego posłużyć funkcja <code>cor_mat</code> z pakietu <code>rstatix</code>. Zobaczmy to na przykładzie bazy <code>db_joined</code> z podrozdziału 5.9.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">(korelacje <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor_mat</span>(db_joined, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>ID))</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 4 × 5</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">rowname</span>      <span style="font-weight: bold;">KTR_O</span> <span style="font-weight: bold;">KTR_W</span> <span style="font-weight: bold;">KTR_O_retest</span> <span style="font-weight: bold;">KTR_W_retest</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">*</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>        <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>        <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>        <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> KTR_O         1     <span style="color: #555555;">0.</span>43         <span style="color: #555555;">0.</span>79         <span style="color: #555555;">0.</span>45
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">2</span> KTR_W         <span style="color: #555555;">0.</span>43  1            <span style="color: #555555;">0.</span>35         <span style="color: #555555;">0.</span>71
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">3</span> KTR_O_retest  <span style="color: #555555;">0.</span>79  <span style="color: #555555;">0.</span>35         1            <span style="color: #555555;">0.</span>39
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">4</span> KTR_W_retest  <span style="color: #555555;">0.</span>45  <span style="color: #555555;">0.</span>71         <span style="color: #555555;">0.</span>39         1
</code></pre>
</div>
</div>
<p>Użycie, jak widać, jest bardzo proste. Jedyna dodatkowa informacja, jaką sprecyzowałem, to żeby nie brać pod uwagę kolumny ID. W tym wypadku mógłbym też użyć <code>starts_with("KTR")</code>. Efektem działania funkcji jest macierz korelacji. Możemy z niej wyczytać m.in., że korelacja <code>KTR_O</code> i <code>KTR_W</code> z ich retestami wyniosła odpowiednio KTR_O_retest i 0,45. Nie są to jakoś oszałamiające wyniki jak na testy, które mają mierzyć względnie stałe cechy.</p>
<p>Można zwrócić uwagę na to, że powyższa komenda wyświetliła nam macierz korelacji, pomimo że normalnie musiałbym jeszcze wywołać samą zmienną <code>korelacje</code>, do której ją zapisałem. Tak to robiliśmy wcześniej. Wykorzystałem tutaj wygodą sztuczkę – jeśli weźmie się całe przypisanie w nawiasy, R potraktuje to jako „przypisz i wyświetl”.</p>
<p>Korelacje mają swoją istotność, którą możemy chcieć poznać. Jeśli policzyliśmy już macierz korelacji, możemy ją wrzucić do funkcji <code>cor_get_pval</code>. Ewentualnie możemy samą bazę wrzucić do funkcji <code>cor_pmat</code>. Efekt jest ostatecznie ten sam.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">korelacje_p_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor_get_pval</span>(korelacje)</span>
<span id="cb57-2"></span>
<span id="cb57-3">korelacje_p_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor_pmat</span>(db_joined, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>ID)</span>
<span id="cb57-4"></span>
<span id="cb57-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(korelacje_p_1, korelacje_p_2)</span>
<span id="cb57-6"></span>
<span id="cb57-7">korelacje_p_1</span></code></pre></div>
</div>
<p>Funkcja <code>identical</code> informuje nas, że obiekty stworzone obiema funkcjami rzeczywiście są identyczne. Powstała nam macierz istotności korelacji. Może być mylące, że korelacje wyświetlają się w notacji naukowej, co jest wygodnym sposobem oznaczania bardzo małych lub bardzo dużych liczb. Zasada jest tu prosta: <img src="https://latex.codecogs.com/png.latex?1,22e-4%20=%201,22%20%5Ctimes%2010%5E%7B-4%7D%20=%200,000122">. Jeśli jednak chcemy dostać tę informację w przyjaźniejszej formie, możemy użyć funkcji <code>cor_mark_significant</code><sup>29</sup>, do której wrzucamy macierz korelacji (nie macierz istotności).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor_mark_significant</span>(korelacje)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>        rowname    KTR_O    KTR_W KTR_O_retest KTR_W_retest
<span style="color: #555555;">#&gt;</span> 1        KTR_O                                            
<span style="color: #555555;">#&gt;</span> 2        KTR_W  0.43***                                   
<span style="color: #555555;">#&gt;</span> 3 KTR_O_retest 0.79****   0.35**                          
<span style="color: #555555;">#&gt;</span> 4 KTR_W_retest  0.45*** 0.71****       0.39**
</code></pre>
</div>
</div>
<p>Otrzymujemy naszą macierz korelacji wzbogaconą o gwiazdki. Domyślnie są to zwykłe swiazdki<sup>30</sup> z dodatkiem **** oznaczającym mniej niż 0,0001. Gwiazdki możemy dostosowywać, a szczegóły znajdują się w dokumentacji.</p>
</section>
</section>
<section id="sec-ggplot" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Wykresy z <code>ggplot2</code></h1>
<p>Wykresy to wielki temat i o samym pakiecie <code>ggplot2</code>, za pomocą którego będziemy je wykonywać, powstawały całe książki i strony internetowe. Naturalnie więc tutaj pokażę tylko tyle, ile jest konieczne, żeby zacząć. Zwłaszcza, że nie lubię robić wykresów. Na matematyce najbardziej lubiłem algebrę, funkcje, ciągi, rachunek pochodnych, ale planimetria, a tym bardziej stereometria, to mój słaby punkt. Tym bardziej dziwi mnie zawsze jak spotykam ludzi, którzy lubią to robić. Zwłaszcza pozdrawiam Wiktorię J., która mówiła mi kiedyś, że szczególnie lubi się babrać z <code>ggplot2</code>. Szacuneczek.</p>
<p>Nie zmienia to jednak faktu, że wykresy to przepotężne narzędzia poznawcze. Dane w postaci liczb w tabelach za wiele nam nie mówią, aż nie naniesiemy ich na rysunek. Na rysunkach widzimy trendy, rozkłady, outliery i mnóstwo innych rzeczy, które dopiero wykres ujawni. Wykresy pojawiają się w prawie każdej pracy naukowej, więc zdolność efektywnego ich wytwarzania i dostosowywania do wymogów (np. APA) jest podstawową umiejętnością analityka. Na szczęście nie musimy w tym celu ruszać się z R.</p>
<p>Fundamentem teoretycznym, na którym zbudowany jest <code>ggplot2</code>, jest idea <em>The Grammar of Graphics</em>, którą Leland Wilkinson <span class="citation" data-cites="wilkinson_grammar_2005">(2005)</span> opisał na 700 stronach (sic!) swojej książki o tym tytule. Tak jak mówiłem, wykresy to duży temat. Nam wystarczą jednak podstawowe idee, a absolutnym fundamentem jest stwierdzenie, że właściwie każdy wykres składa się z trzech elementów, które możemy wyobrazić sobie jako warstwy – danych, jakiegoś układu współrzędnych i jakiegoś obiektu, który Wilkinson nazywa <em>geom</em>, czyli wizualna reprezentacja danych. Takimi obiektami są na przykład punkty na wykresie punktowym, słupki histogramu, linia trendu itd. Dodatkowo mamy pewne właściwości wizualne, takie jak kolor, wielkość, czy przede wszystkim lokalizacja na osiach X i Y. Nazywamy te właściwości atrybutami albo estetykami (różnica niżej), a wiązanie ich z danymi – mapowaniem. Teraz może się to wydawać skomplikowane, ale wdrażanie tych idei w praktyce w <code>ggplot2</code> nie jest wcale trudne. Jak już raz się to załapie, to nagle takie narzędzia jak wykresy w Excelu zaczną się wydawać wybrakowane i chaotyczne.</p>
<section id="sec-aes" class="level2" data-number="7.1">
<h2 data-number="7.1" class="anchored" data-anchor-id="sec-aes"><span class="header-section-number">7.1</span> Mapowanie estetyk (<code>aes</code>)</h2>
<p>Przejdźmy więc do praktyki. Pakietu <code>ggplot2</code> nie musimy ładować osobno, bo wchodzi w skład, a jakże, <code>tidyverse</code>. Żeby zacząć tworzyć wykres, musimy zacząć od wywołania funkcji <code>ggplot()</code> (ważne – nie <code>ggplot2</code>, <code>ggplot2</code> to nazwa pakietu, funkcja to <code>ggplot</code>). W jej obrębie wskazujemy na zbiór danych, na którym chcemy pracować i dokonujemy <em>mapowania estetyk</em>, czyli mówimy naszej funkcji, jakie kolumny mają przełożyć się na jakie elementy wizualne. Wykorzystajmy sobie tutaj jeden z klasycznych zbiorów danych o nazwie <code>diamonds</code>, który automatycznie powinien stać się dostępny po załadowaniu <code>ggplot2</code>. Zerknijmy na niego.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(diamonds)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> Rows: 53,940
<span style="color: #555555;">#&gt;</span> Columns: 10
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">carat  </span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">cut    </span> <span style="color: #555555; font-style: italic;">&lt;ord&gt;</span> Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">color  </span> <span style="color: #555555; font-style: italic;">&lt;ord&gt;</span> E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">clarity</span> <span style="color: #555555; font-style: italic;">&lt;ord&gt;</span> SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">depth  </span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">table  </span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">price  </span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">x      </span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">y      </span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">z      </span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…
</code></pre>
</div>
</div>
<p><code>diamonds</code> to zbiór różnych danych na temat 53 940 brylantów. Szczegółowe dane na jego temat można uzyskać wpisując w konsoli <code>?diamonds</code>. Ponieważ jest to gigantyczny zbiór, wybierzmy sobie losowo 100 diamentów za pomocą funkcji <code>slice_sample</code>. Użyję jeszcze funkcji <code>set.seed</code>, żeby wyniki losowania były za każdym razem takie same. Nie jest ona obowiązkowa, ale użycie jej sprawi że Twoje wykresy bedą identyczne jak moje.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb60-2"></span>
<span id="cb60-3">df_diamonds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(diamonds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
</div>
<p>Znacznie lepiej. Zrobimy sobie prosty wykres ceny diamentu od jego masy w karatach. Pierwsza rzecz, którą musimy wykonać, to mapowanie kolumn <code>carat</code> i <code>price</code> do osi X i Y. Estetyki mapujemy wrzucając je do funkcji <code>aes</code> – najpierw X, potem Y.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/podstawy_R_files/figure-html/unnamed-chunk-55-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Jak widzimy, powstał nam pusty wykres. To jest właśnie układ współrzędnych, o którym mówiłem wcześniej.</p>
<p>Poza estetykami X i Y mamy do dyspozycji mnóstwo innych estetyk, m.in. <em>colour</em>, <em>fill</em>, <em>alpha</em> (przeźroczystość), <em>size</em>, <em>linewidth</em>, <em>linetype</em>, <em>shape</em>. Estetyki mają jedną wspólną cechę – są powiązane z jakimiś danymi. Jeśli stwierdzę, że wszystkie moje punkty mają być czerwone, to nie będzie to estetyka, tylko <em>atrybut</em>. O estetyce będę mógł mówić wtedy, gdy kolor będzie zależał np. od przejrzystości diamentu. To rozróżnienie, że atrybuty to stałe właściwości wyglądu, a estetyki to związek wyglądu z danymi, jest o tyle ważne, że nieco inaczej się je definiuje, jak zobaczymy za chwilę.</p>
</section>
<section id="sec-geom" class="level2" data-number="7.2">
<h2 data-number="7.2" class="anchored" data-anchor-id="sec-geom"><span class="header-section-number">7.2</span> Obiekty <code>geom_*</code></h2>
<p>Pusty układ współrzędnych to jeszcze nie wykres. Musimy jeszcze dodać jakiegoś rodzaju <em>geom</em>. W naszym przypadku będą to punkty, gdzie każdy punkt będzie reprezentował inny brylant. Ściąga do <code>ggplot2</code> zawiera świetną rozpiskę, jakie można stworzyć wykresy, w zależności od typu zmiennych, jakimi dysponujemy. Może się ona przydać nawet wtedy, gdy robimy wykresy w innym programie.</p>
<p>Do tworzenia wykresów punktowych mamy dwa rodzaje obiektów <em>geom</em> – <code>geom_point</code> i <code>geom_jitter</code>. <code>geom_point</code> to typowy wykres punktowy. <code>geom_jitter</code> przydaje się wtedy, kiedy mamy wiele danych o tych samych współrzędnych, np. wiele brylantów o masie dokładnie 0,2 karata i cenie dokładnie $ 300. W takim wypadku wszystkie te punkty nałożyłyby się na siebie, ukryły jeden pod drugim i wydawałoby się, że mamy mniej danych, niż w rzeczywistości mamy. <code>geom_jitter</code> rozwiązuje ten problem odrobinkę przesuwając każdy punkt w losowym kierunku. Lekko tracimy wtedy na dokładności, ale widzimy wszystkie nasze dane. Żeby do naszego wykresu dołożyć kolejne elementy, używamy znaku <code>+</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb62-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/podstawy_R_files/figure-html/unnamed-chunk-56-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Wygląda na to, że im większy diament, tym droższy. Bez zaskoczenia. Możemy do naszego wykresy dołożyć linię trendu jako kolejny <em>geom</em> – <code>geom_smooth</code>. Jeśli chcemy mieć prostą linię, musimy ustawić argument <code>method = "lm"</code>, co jest skrótem od <em>linear model</em>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb63-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb63-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> `geom_smooth()` using formula = 'y ~ x'
</span></code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/podstawy_R_files/figure-html/unnamed-chunk-57-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Szare pole wokół niebieskiej linii to przedział ufności. Możemy go wyłączyć ustawiając <code>se = FALSE</code>. Przy tej okazji powiedzmy sobie jeszcze raz o estetykach i atrybutach. Mogę chcieć, żeby kolor mojego punktu zależał od jakości wyszlifowania brylantu z kolumny <code>cut</code>. Ponieważ jest to związek wyglądu z danymi, to jest to estetyka i ustawiam ją wewnątrz <code>aes</code>. Mogę to <code>aes</code> wrzucić albo do funkcji <code>ggplot</code>, jak robiłem wcześniej, albo też do funkcji <code>geom_point</code>, bo to jej mapowanie dotyczy. Zwyczajowo argumenty X i Y w <code>aes</code> mogą być nienazwane, ale wszystkie inne już powinny. Mogę też zmienić kolor linii trendu z niebieskiego na czarny i zrobić ją trochę cieńszą. Jest to zmiana wyglądu, ale arbitralna, bez związku z danymi. Jest to więc atrybut i ustawiam go poza <code>aes</code>, wewnątrz funkcji, której ten atrybut dotyczy. Zobaczmy to.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> cut)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb64-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb64-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> `geom_smooth()` using formula = 'y ~ x'
</span></code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/podstawy_R_files/figure-html/unnamed-chunk-58-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="sec-labs" class="level2" data-number="7.3">
<h2 data-number="7.3" class="anchored" data-anchor-id="sec-labs"><span class="header-section-number">7.3</span> Tytuły osi i wykresu (<code>labs</code>)</h2>
<p>Kolejną rzeczą, którą moglibyśmy chcieć zmienić, są tytuły osi. Możemy też dodać tytuł do samego wykresu. Najwygodniej jest to zrobić dodając kolejny element, <code>labs</code>, w którym dopiszemy nasze tytuły.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> cut)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb65-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb65-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb65-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb65-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Masa [karaty]"</span>,</span>
<span id="cb65-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena [$]"</span>,</span>
<span id="cb65-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Szlif"</span>,</span>
<span id="cb65-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena brylantu w zależności od masy"</span></span>
<span id="cb65-9">    )</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> `geom_smooth()` using formula = 'y ~ x'
</span></code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/podstawy_R_files/figure-html/unnamed-chunk-59-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Jeśli chcemy zmienić etykiety wartości z legendy, mamy dwie opcje – albo przekodujemy te etykiety bezpośrednio w bazie danych, chociażby zaprzęgając do pracy <code>questionr</code> (zob. 5.5.1.1.1), albo użyjemy jednej z funkcji <code>scale_*_discrete</code> i jej argumentu <code>labels</code>, gdzie zamiast gwiazdki piszemy nazwę naszej estetyki. Szlif naszych diamentów jest zmapowany do estetyki <code>colour</code>, więc użyjemy funkcji <code>scale_colour_discrete</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> cut)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb66-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb66-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb66-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb66-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Masa [karaty]"</span>,</span>
<span id="cb66-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena [$]"</span>,</span>
<span id="cb66-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Szlif"</span>,</span>
<span id="cb66-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena brylantu w zależności od masy"</span></span>
<span id="cb66-9">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb66-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_discrete</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zadowalający"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dobry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bardzo dobry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Idealny"</span>))</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> `geom_smooth()` using formula = 'y ~ x'
</span></code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/podstawy_R_files/figure-html/unnamed-chunk-60-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="sec-theme" class="level2" data-number="7.4">
<h2 data-number="7.4" class="anchored" data-anchor-id="sec-theme"><span class="header-section-number">7.4</span> Wygląd wykresów (<code>theme_*</code>)</h2>
<p>Wykres ma wszystkie elementy na miejscu, ale nie oszukujmy się, nie jest to dzieło sztuki. Żeby poprawić wygląd naszego wykresu, sięgniemy po dwa narzędzia. Po pierwsze ustalimy jego ogólny styl za pomocą jednego z motywów (<em>themes</em>), a potem poprawimy szczegóły z użyciem dodatku do RStudio <code>esquisse</code>.</p>
<p>Ogólny styl wykresu ustala się za pomocą elementów zaczynających się słówkiem <code>theme_</code>. <code>ggplot2</code> ma wbudowane osiem takich motywów, które można przejrzeć <a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">tutaj</a>. W Internecie roi się jednak od niestandardowych motywów, które mogą zaczarować nasze wykresy. Kluczowym ich źródłem może być pakiet <code>ggthemes</code>, motywy z którego można zobaczyć <a href="https://github.com/jrnold/ggthemes">tutaj</a>. Ja jednak chciałem pokazać dwa inne – <code>theme_apa</code> z pakietu <code>papaja</code> i <code>theme_Publication</code> z repozytorium na GitHubie <a href="https://github.com/koundy/ggplot_theme_Publication">koundy/ggplot_theme_Publication</a>.</p>
<p><code>papaja</code> to skrótowiec od <em>Preparing APA Journal Articles</em> i jest to rozległy pakiet pomagający pisać artykuły zgodne ze standardami Amerykańskiego Towarzystwa Psychologicznego (APA). Z tych standardów korzystają nie tylko psychologowie, ale też wiele czasopism z zakresu nauk przyrodniczych. Daje nam on dostęp m.in. do motywu <code>theme_apa</code> dostosowującego wykres do standardów APA.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"papaja"</span>)</span>
<span id="cb67-2"></span>
<span id="cb67-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> cut)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb67-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Masa [karaty]"</span>,</span>
<span id="cb67-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena [$]"</span>,</span>
<span id="cb67-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Szlif"</span>,</span>
<span id="cb67-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena brylantu w zależności od masy"</span></span>
<span id="cb67-11">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_discrete</span>(</span>
<span id="cb67-13">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zadowalający"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dobry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bardzo dobry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Idealny"</span>)</span>
<span id="cb67-14">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_apa</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/podstawy_R_files/figure-html/unnamed-chunk-61-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Drugi motyw nie jest szałowo popularny w społeczności, ale bardzo go lubię. Żeby zadziałał, musimy wcześniej zainstalować u siebie pakiety <code>grid</code>, <code>scales</code> i <code>ggthemes</code>. Spojrzenie w repozytorium pozwoli nam stwierdzić, że nie jest to pakiet, a po prostu zbiór plików. Wchodzimy więc w plik <code>ggplot_theme_Publication-2.R</code>, klikamy <code>raw</code> i kopiujemy link. Następnie użyjemy komendy <code>source</code>, która pozwala nam uruchamiać kod z innych plików .R w naszym skrypcie, jak podamy ich ścieżkę lub link do nich. Cały kod mógłby więc wyglądać tak:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/koundy/ggplot_theme_Publication/master/ggplot_theme_Publication-2.R"</span>)</span>
<span id="cb68-2"></span>
<span id="cb68-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> cut)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb68-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb68-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb68-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb68-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Masa [karaty]"</span>,</span>
<span id="cb68-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena [$]"</span>,</span>
<span id="cb68-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Szlif"</span>,</span>
<span id="cb68-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena brylantu w zależności od masy"</span></span>
<span id="cb68-11">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb68-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_discrete</span>(</span>
<span id="cb68-13">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zadowalający"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dobry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bardzo dobry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Idealny"</span>),</span>
<span id="cb68-14">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb68-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>()</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> `geom_smooth()` using formula = 'y ~ x'
</span></code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/podstawy_R_files/figure-html/unnamed-chunk-62-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="sec-esquisse" class="level2" data-number="7.5">
<h2 data-number="7.5" class="anchored" data-anchor-id="sec-esquisse"><span class="header-section-number">7.5</span> <code>esquisse</code></h2>
<p>Wykres w takiej formie można już uznać za zadowalający. Ale co jeśli chcemy poprawić jakieś szczegóły? Na przykład dostosować kolory? Są na to odpowiednie funkcje, ale jeśli mam być szczery, jest ich na tyle dużo, a w tutorialach tak bardzo przeplatają się stare i nowe metody, że bez gruntownego wyszkolenia (którego na przykład ja nie posiadam) bardzo łatwo jest się zgubić i bez zrozumienia kopiować kod znaleziony w Internecie. Na szczęście istnieje pewne narzędzie, które może nam w tej sytuacji pomóc. Nazywa się <code>esquisse</code> i jest dodatkiem do RStudio.</p>
<p>Instalujemy <code>esquisse</code> jak każdy inny pakiet (<code>install.packages("esquisse")</code>). Po zainstalowaniu, jeśli jest taka potrzeba, można spróbować zmienić język na polski komendą <code>set_i18n("pl")</code><sup>31</sup>. Po zainstalowaniu pakietu, w menu Addins na górnej belce, powinniśmy uzyskać dostęp do opcji <em>ggplot2 builder</em><sup>32</sup>, które jest narzędziem do interaktywnego konstruowania wykresów. Pozwala na stworzenie kodu w wygodnym, graficznym interfejsie. Polecam zapoznać się z tym interfejsem, ale nie będę go omawiał, ponieważ jest dość intiucyjny. Po wygenerowaniu naszego wykresu możemy skopiować gotowy kod do skryptu.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_diamonds) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb69-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> clarity) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb69-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamond"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb69-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YlOrRd"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">direction =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb69-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb69-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Masa [karaty]"</span>,</span>
<span id="cb69-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena [$]"</span>,</span>
<span id="cb69-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena diamentów od ich masy według szlifu"</span>,</span>
<span id="cb69-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Źródło danych: ggplot2"</span>,</span>
<span id="cb69-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Przejrzystość"</span></span>
<span id="cb69-11">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb69-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb69-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb69-14">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>,</span>
<span id="cb69-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb69-16">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb69-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(cut))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/podstawy_R_files/figure-html/unnamed-chunk-63-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Powyżej wykres, który stworzyłem w <code>equisse</code>. Warto jednak zwrócić uwagę na jego niedoskonałości, takie jak brak polskich tłumaczeń typów szlifu. Pewnym wyjaśnieniem może być dla nas nazwa francuskiego słowa <em>equisse</em> – szkic. Takie narzędzia jak <code>equisse</code> nie zwalniają nas całkowicie z umiejętności kodowania wykresów, ale pozwalają wygodnie tworzyć <em>szkice</em> naszego kodu. Ten szkic mogę pozmieniać, np. zamieniając <code>theme_bw</code> na <code>theme_Publication</code> i dodając polskie tłumaczenia. Nieco inaczej, niż wcześniej, bo <code>facet_wrap</code> nie jest estetyką, więc sposób dodawania do niego niestandardowych etykiet znalazłem w dokumentacji.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_diamonds) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb70-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> clarity) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb70-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamond"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb70-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YlOrRd"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">direction =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb70-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb70-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Masa [karaty]"</span>,</span>
<span id="cb70-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena [$]"</span>,</span>
<span id="cb70-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena diamentów od ich masy według szlifu"</span>,</span>
<span id="cb70-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Źródło danych: ggplot2"</span>,</span>
<span id="cb70-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Przejrzystość"</span></span>
<span id="cb70-11">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb70-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb70-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb70-14">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>,</span>
<span id="cb70-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb70-16">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb70-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(</span>
<span id="cb70-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(cut),</span>
<span id="cb70-19">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labeller =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labeller</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cut =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb70-20">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fair"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zadowalający"</span>,</span>
<span id="cb70-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Good"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dobry"</span>,</span>
<span id="cb70-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Very Good"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bardzo dobry"</span>,</span>
<span id="cb70-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span>,</span>
<span id="cb70-24">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ideal"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Idealny"</span></span>
<span id="cb70-25">            )</span>
<span id="cb70-26">        )</span>
<span id="cb70-27">    )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nieobliczalne.pl/posts/podstawy_R_files/figure-html/unnamed-chunk-64-1.png" class="img-fluid figure-img" style="width:100.0%"></p>
</figure>
</div>
</div>
</div>
<p>Wykresy to olbrzymi temat, który tutaj tylko liznęliśmy z wierzchu. Sądzę jednak, że ta wiedza wystarczy, żeby – z pomocą dokumentacji i Google – być w stanie powoli rozbudowywać swoje umiejętności z zakresu <code>ggplot2</code>. Zwłaszcza, że tworzenie dobrych wykresów do trudna sztuka, co skutecznie udowadnia plebiscyt na najgorszy wykres roku organizowany przez dr. Przemysława Biecka na <a href="http://smarterpoland.pl/index.php/2021/12/plebiscyt-na-najgorszy-wykres-roku-2021/">jego stronie</a>. W tym miejscu mogę polecić jego książkę „Wykresy od kuchni”, <a href="https://betaandbit.github.io/Wykresy/">dostępną za darmo</a> i okraszoną kodem R, który posłużył do wygenerowania jego wykresów.</p>
</section>
</section>
<section id="sec-tests" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> Modele statystyczne</h1>
<p>Największą trudnością nie jest tworzenie modeli statystycznych, tylko wiedza kiedy zrobić jaki test i jak je interpretować. Stąd też nie będę się tutaj rozwodził nad samymi testami, a omówię raczej ogólną specyfikę wykonywania testów statystycznych w R i wyświetlania ich wyników. Szczegóły co do tego, jak wykonywać konkretne testy, znajdują się w dokumentacji ich funkcji.</p>
<p>Modele statystyczne w R można ogólnie podzielić na te, które wykonuje się wprowadzając formuły i na te, w których wskazuje się kolumny. Fundamentalnym przykładem pierwszego typu jest funkcja do wykonywania regresji liniowej <code>lm</code>. Drugi typ reprezentuje np. test korelacji Pearsona <code>cor.test</code>.</p>
<p>Funkcja <code>lm</code> to prototyp modeli regresyjnych. W identyczny sposób, formułami, wykonujemy w R inne podstawowe modele takie jak ANOVA (<code>aov</code>). Funkcja wykonująca test t-Studenta również potrafi obsługiwać formuły. Także co to jest ta formuła? To szczególny typ wskazywania kolumn z użyciem znaku <code>~</code> (<em>czyt.</em> tylda). Jeśli chcielibyśmy wykonać regresję, w której sprawdzalibyśmy związek długości płatków irysa długością i szerokością jego działek kielicha (słynna, stara baza danych <code>iris</code>, dostępna automatycznie w R), zrobilibyśmy coś takiego:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zerkamy w bazę</span></span>
<span id="cb71-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(iris)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> Rows: 150
<span style="color: #555555;">#&gt;</span> Columns: 5
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">Sepal.Length</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">Sepal.Width </span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">Petal.Length</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">Petal.Width </span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…
<span style="color: #555555;">#&gt;</span> $ <span style="font-weight: bold;">Species     </span> <span style="color: #555555; font-style: italic;">&lt;fct&gt;</span> setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"></span>
<span id="cb72-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tworzymy model</span></span>
<span id="cb72-3">lm_price <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iris <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb72-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(Petal.Length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Sepal.Length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Sepal.Width, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> .)</span>
<span id="cb72-5"></span>
<span id="cb72-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># próbujemy wyświetlić</span></span>
<span id="cb72-7">lm_price</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> 
<span style="color: #555555;">#&gt;</span> Call:
<span style="color: #555555;">#&gt;</span> lm(formula = Petal.Length ~ Sepal.Length + Sepal.Width, data = .)
<span style="color: #555555;">#&gt;</span> 
<span style="color: #555555;">#&gt;</span> Coefficients:
<span style="color: #555555;">#&gt;</span>  (Intercept)  Sepal.Length   Sepal.Width  
<span style="color: #555555;">#&gt;</span>       -2.525         1.776        -1.339
</code></pre>
</div>
</div>
<p>Obiekty tego typu zawsze wymagają argumentu <code>data</code>. Dlaczego jednak zapisałem <code>data = .</code>? Problem polega tutaj na użyciu potoków. Standardowo potok <code>%&gt;%</code> wrzuca rzeczy do pierwszego argumentu. Wiele funkcji, tak jak <code>lm</code>, nie przyjmuje bazy danych w pierwszym argumencie. Często nawet nie w drugim, więc najlepiej wprost go nazwać. Omawiany w podrozdziale 8.2 pakiet <code>rstatix</code> za pierwszy cel postawił sobie nawet przerobienie testów statystycznych tak, żeby lepiej współpracowały z potokami. Jak więc poradzić sobie w takiej sytuacji? Jedna opcja, to całkiem zrezygnować z potoków i zapisać <code>data = iris</code>. Tak też jest dobrze, ale co jeśli potrzebujemy użyć potoku? Na przykład przed stworzeniem modelu wykonujemy serię przekształceń danych? Warto pamiętać, że potoki nie są obowiązkowe, można równie dobrze zagnieżdżać funkcje. Cierpi na tym tylko czytelność kodu. Druga opcja, to wprost powiedzenie potokowi, gdzie ma wrzucić naszą bazę danych. Do tego właśnie służy <code>.</code>. Zapis <code>data = .</code> mówi potokowi „halo halo, proszę nie wrzucać bazy do pierwszego argumentu, tylko o tu, gdzie pokazałem(-am) kropką”.</p>
<p>W powyższym przykładzie widać też, że <code>lm</code>, podobnie jak wiele innych obiektów modeli, nie daje nam domyślnie sensownego podsumowania. Wiele modeli wymaga od nas, byśmy wrzucili je do funkcji <code>summary</code> (nie mylić z <code>summarise</code>) żeby powiedziały nam coś, co da się zrozumieć.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_price)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> 
<span style="color: #555555;">#&gt;</span> Call:
<span style="color: #555555;">#&gt;</span> lm(formula = Petal.Length ~ Sepal.Length + Sepal.Width, data = .)
<span style="color: #555555;">#&gt;</span> 
<span style="color: #555555;">#&gt;</span> Residuals:
<span style="color: #555555;">#&gt;</span>      Min       1Q   Median       3Q      Max 
<span style="color: #555555;">#&gt;</span> -1.25582 -0.46922 -0.05741  0.45530  1.75599 
<span style="color: #555555;">#&gt;</span> 
<span style="color: #555555;">#&gt;</span> Coefficients:
<span style="color: #555555;">#&gt;</span>              Estimate Std. Error t value Pr(&gt;|t|)    
<span style="color: #555555;">#&gt;</span> (Intercept)  -2.52476    0.56344  -4.481 1.48e-05 ***
<span style="color: #555555;">#&gt;</span> Sepal.Length  1.77559    0.06441  27.569  &lt; 2e-16 ***
<span style="color: #555555;">#&gt;</span> Sepal.Width  -1.33862    0.12236 -10.940  &lt; 2e-16 ***
<span style="color: #555555;">#&gt;</span> ---
<span style="color: #555555;">#&gt;</span> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
<span style="color: #555555;">#&gt;</span> 
<span style="color: #555555;">#&gt;</span> Residual standard error: 0.6465 on 147 degrees of freedom
<span style="color: #555555;">#&gt;</span> Multiple R-squared:  0.8677, Adjusted R-squared:  0.8659 
<span style="color: #555555;">#&gt;</span> F-statistic:   482 on 2 and 147 DF,  p-value: &lt; 2.2e-16
</code></pre>
</div>
</div>
<p>Ten widok już jest możliwy do zinterpretowania. Jeśli wiemy co nieco o regresjach, możemy z niego odczytać, że oba predyktory są istotne statystycznie, podobnie jak statystyka <img src="https://latex.codecogs.com/png.latex?F">, a także że wyjaśniliśmy <img src="https://latex.codecogs.com/png.latex?R%5E2%20=%2087%5C%25"> wariancji. Nie jest to jednak najlepszy format wyświetlania wyników.</p>
<section id="sec-broom" class="level2" data-number="8.1">
<h2 data-number="8.1" class="anchored" data-anchor-id="sec-broom"><span class="header-section-number">8.1</span> Czyste wyniki, czyli pakiet <code>broom</code></h2>
<p>Dlaczego nie jest to dobry format? Bo jest niejednolity i chaotyczny. Nie tylko w widocznej postaci, ale też pod maską, co przeszkadza nam, kiedy chcemy wejść głębiej z programowaniem albo pisać automatyczne raporty. Niestandardowe wykresy również mogą być wtedy problemem. Odpowiedzią na te problemy stał się pakiet <code>broom</code>. Należy on do świata <code>tidyverse</code>, ale nie jest ładowany z pakietem <code>tidyverse</code>, więc trzeba załadować go ręcznie. Rdzeniem tego pakietu jest specjalny słownik, standard tworzenia modeli, w którym kolumny zawierające określone informacje muszą nazywać się w określony sposób. Kolumny, bo wyczyszczony model ma zawsze postać tabeli. Dla przykładu kolumna z wartością <img src="https://latex.codecogs.com/png.latex?p"> zawsze musi nazywać się <code>p.value</code>, a kolumna z wartością współczynnika – <code>estimate</code>. Wymusza to spójność i zapewnia przewidywalność obiektów zawierających modele. Wiele współczesnych pakietów do modelowania od razu dostosowuje swoje modele do wymogów czystych danych.</p>
<p><code>broom</code> nie jest jednak tylko standardem – to także pakiet zawierający trzy funkcje <em>czyszczące</em> modele. Co więcej zawsze są to te same trzy funkcje, które zawsze przyjmują tak samo nazywające się argumenty. Ta spójność i zapewnienie spójności to najlepsze, co daje nam <code>broom</code>. Omówmy sobie teraz te trzy funkcje i zobaczmy je w akcji.</p>
<section id="sec-glance" class="level3" data-number="8.1.1">
<h3 data-number="8.1.1" class="anchored" data-anchor-id="sec-glance"><span class="header-section-number">8.1.1</span> <code>glance</code></h3>
<p>Pierwszą funkcją czyszczącą jest <code>glance</code> (nie mylić z <code>glimpse</code>). Służy ona do tworzenia czystych opisów samego modelu w pojedynczym wierszu. Będą to takie rzeczy jak statystyka <img src="https://latex.codecogs.com/png.latex?F"> czy <img src="https://latex.codecogs.com/png.latex?R%5E2">. Jak każda funkcja <code>broom</code>, jako pierwszy argument przyjmuje ona nasz model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"broom"</span>)</span>
<span id="cb74-2"></span>
<span id="cb74-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glance</span>(lm_price)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 1 × 12</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">r.squared</span> <span style="font-weight: bold;">adj.r.squared</span> <span style="font-weight: bold;">sigma</span> <span style="font-weight: bold;">statistic</span>  <span style="font-weight: bold;">p.value</span>    <span style="font-weight: bold;">df</span> <span style="font-weight: bold;">logLik</span>   <span style="font-weight: bold;">AIC</span>   <span style="font-weight: bold;">BIC</span>
<span style="color: #555555;">#&gt;</span>       <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>         <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span>     <span style="color: #555555;">0.</span>868         <span style="color: #555555;">0.</span>866 <span style="color: #555555;">0.</span>646      482. 2.74<span style="color: #555555;">e</span><span style="color: #BB0000;">-65</span>     2  -<span style="color: #BB0000;">146.</span>  300.  312.
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 3 more variables: </span><span style="color: #555555; font-weight: bold;">deviance</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">df.residual</span><span style="color: #555555;"> &lt;int&gt;, </span><span style="color: #555555; font-weight: bold;">nobs</span><span style="color: #555555;"> &lt;int&gt;</span>
</code></pre>
</div>
</div>
<p>Widzimy tutaj ogólne podsumowanie skuteczności naszego modelu z całą serią statystyk. Co ciekawe mamy też takie statystyki jak AIC i BIC, których <code>summary</code> nie wyświetla. W ten sposób <code>broom</code> nie tylko czyści nasz model, ale także dostarcza nam nowych informacji.</p>
</section>
<section id="sec-tidy" class="level3" data-number="8.1.2">
<h3 data-number="8.1.2" class="anchored" data-anchor-id="sec-tidy"><span class="header-section-number">8.1.2</span> <code>tidy</code></h3>
<p>Funkcja <code>tidy</code> wyświetla nam najważniejsze elementy modelu. Dla wszelkich regresji będą to przede wszystkim współczynniki regresji, choć dokładna zawartość wynikowej tabeli naturalnie zależy od tego, jaki model czyściliśmy. Zobaczmy to.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy</span>(lm_price)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 3 × 5</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">term</span>         <span style="font-weight: bold;">estimate</span> <span style="font-weight: bold;">std.error</span> <span style="font-weight: bold;">statistic</span>  <span style="font-weight: bold;">p.value</span>
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>           <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> (Intercept)     -<span style="color: #BB0000;">2.52</span>    <span style="color: #555555;">0.</span>563      -<span style="color: #BB0000;">4.48</span> 1.48<span style="color: #555555;">e</span><span style="color: #BB0000;">- 5</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">2</span> Sepal.Length     1.78    <span style="color: #555555;">0.0</span>64<span style="text-decoration: underline;">4</span>     27.6  5.85<span style="color: #555555;">e</span><span style="color: #BB0000;">-60</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">3</span> Sepal.Width     -<span style="color: #BB0000;">1.34</span>    <span style="color: #555555;">0.</span>122     -<span style="color: #BB0000;">10.9</span>  9.43<span style="color: #555555;">e</span><span style="color: #BB0000;">-21</span>
</code></pre>
</div>
</div>
<p>Widzimy więc, że oba współczynniki (<code>estimate</code>) są istotne statystycznie, z czego długość działki kielicha ma współczynnik dodatni, a szerokość ujemny.</p>
</section>
<section id="sec-augment" class="level3" data-number="8.1.3">
<h3 data-number="8.1.3" class="anchored" data-anchor-id="sec-augment"><span class="header-section-number">8.1.3</span> <code>augment</code></h3>
<p>Ostania funkcja czyszcząca nie do końca cokolwiek czyści. Pozwala ona na dodanie do oryginalnej bazy danych informacji zaczerpniętych z modelu, m.in. jaką wartość przewiduje model dla tego przypadku, jaka jest wartość resztkowa (<em>residual</em>), zwykła i standaryzowana, jaki jest dystans Cooka i <em>hat value</em> itd. Dokładne możliwości funkcji <code>augment</code> zależą od rodzaju modelu. Są to informacje użyteczne chociażby kiedy chcemy zidentyfikować outliery. Wszystkie dodane kolumny mają nazwy zaczynające się kropką.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">augment</span>(lm_price)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 150 × 9</span>
<span style="color: #555555;">#&gt;</span>    <span style="font-weight: bold;">Petal.Length</span> <span style="font-weight: bold;">Sepal.Length</span> <span style="font-weight: bold;">Sepal.Width</span> <span style="font-weight: bold;">.fitted</span>   <span style="font-weight: bold;">.resid</span>   <span style="font-weight: bold;">.hat</span> <span style="font-weight: bold;">.sigma</span>  <span style="font-weight: bold;">.cooksd</span>
<span style="color: #555555;">#&gt;</span>           <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>        <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>       <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span>          1.4          5.1         3.5    1.85 -<span style="color: #555555;">0.</span><span style="color: #BB0000;">446</span>   <span style="color: #555555;">0.0</span>17<span style="text-decoration: underline;">7</span>  <span style="color: #555555;">0.</span>648  2.91<span style="color: #555555;">e</span><span style="color: #BB0000;">-3</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span>          1.4          4.9         3      2.16 -<span style="color: #555555;">0.</span><span style="color: #BB0000;">760</span>   <span style="color: #555555;">0.0</span>15<span style="text-decoration: underline;">9</span>  <span style="color: #555555;">0.</span>646  7.54<span style="color: #555555;">e</span><span style="color: #BB0000;">-3</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span>          1.3          4.7         3.2    1.54 -<span style="color: #555555;">0.</span><span style="color: #BB0000;">237</span>   <span style="color: #555555;">0.0</span>19<span style="text-decoration: underline;">6</span>  <span style="color: #555555;">0.</span>648  9.15<span style="color: #555555;">e</span><span style="color: #BB0000;">-4</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span>          1.5          4.6         3.1    1.49  <span style="color: #555555;">0.00</span>6<span style="text-decoration: underline;">77</span> <span style="color: #555555;">0.0</span>21<span style="text-decoration: underline;">8</span>  <span style="color: #555555;">0.</span>649  8.34<span style="color: #555555;">e</span><span style="color: #BB0000;">-7</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span>          1.4          5           3.6    1.53 -<span style="color: #555555;">0.</span><span style="color: #BB0000;">134</span>   <span style="color: #555555;">0.0</span>22<span style="text-decoration: underline;">2</span>  <span style="color: #555555;">0.</span>649  3.34<span style="color: #555555;">e</span><span style="color: #BB0000;">-4</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span>          1.7          5.4         3.9    1.84 -<span style="color: #555555;">0.</span><span style="color: #BB0000;">143</span>   <span style="color: #555555;">0.0</span>32<span style="text-decoration: underline;">4</span>  <span style="color: #555555;">0.</span>649  5.63<span style="color: #555555;">e</span><span style="color: #BB0000;">-4</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span>          1.4          4.6         3.4    1.09  <span style="color: #555555;">0.</span>308   <span style="color: #555555;">0.0</span>24<span style="text-decoration: underline;">3</span>  <span style="color: #555555;">0.</span>648  1.94<span style="color: #555555;">e</span><span style="color: #BB0000;">-3</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span>          1.5          5           3.4    1.80 -<span style="color: #555555;">0.</span><span style="color: #BB0000;">302</span>   <span style="color: #555555;">0.0</span>16<span style="text-decoration: underline;">7</span>  <span style="color: #555555;">0.</span>648  1.25<span style="color: #555555;">e</span><span style="color: #BB0000;">-3</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span>          1.4          4.4         2.9    1.41 -<span style="color: #555555;">0.00</span><span style="color: #BB0000;">5</span><span style="color: #BB0000; text-decoration: underline;">84</span> <span style="color: #555555;">0.0</span>29<span style="text-decoration: underline;">2</span>  <span style="color: #555555;">0.</span>649  8.43<span style="color: #555555;">e</span><span style="color: #BB0000;">-7</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span>          1.5          4.9         3.1    2.03 -<span style="color: #555555;">0.</span><span style="color: #BB0000;">526</span>   <span style="color: #555555;">0.0</span>15<span style="text-decoration: underline;">4</span>  <span style="color: #555555;">0.</span>647  3.50<span style="color: #555555;">e</span><span style="color: #BB0000;">-3</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 140 more rows</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 1 more variable: </span><span style="color: #555555; font-weight: bold;">.std.resid</span><span style="color: #555555;"> &lt;dbl&gt;</span>
</code></pre>
</div>
</div>
</section>
</section>
<section id="sec-rstatix" class="level2" data-number="8.2">
<h2 data-number="8.2" class="anchored" data-anchor-id="sec-rstatix"><span class="header-section-number">8.2</span> Swiss Army Knife w R, czyli <code>rstatix</code></h2>
<p>Niezwykłe możliwości i giętkość pakietu <code>rstatix</code> były już w tym tekście wychwalane i pokazywane. Tutaj jednak chciałbym powiedzieć o głównej zawartości <code>rstatix</code> czy funkcjach wykonujących testy statystyczne.</p>
<p>R posiada dużą bibliotekę domyślnych funkcji do testów statystycznych, takich jak <code>t.test</code> czy <code>cor.test</code>. I one liczą dobrze, ale w wielu przypadkach są niewygodne. Nie ma się co dziwić, to są stare funkcje, swoją historią sięgające roku 2000, czyli początków R. Nie było wtedy <code>dplyr</code>, RStudio, potoków i całego dobrodziejstwa, które sprawia, że współczesny kod R średnio przypomina klasyczny kod, którego tu nie omawiam, ale który ciągle działa i buduje fundamenty tego języka. Dlatego właśnie wyniki tych testów są niewystandaryzowane, wymagają one niewygodnego wskazywania kolumn jako wektorów<sup>33</sup> i mają argument <code>data</code> na drugim miejscu, przez co potoki zawsze wymagają używania <code>.</code>.</p>
<p><code>rstatix</code> jest odpowiedzią na te problemy. Poza tym, że dodaje mnóstwo przyjaznych funkcji od siebie, to uwspółcześnia stare funkcje, naprawiając w nich wszystko, co złe, m.in. poprawiając pracę z potokami. Dodatkowo wykorzystuje sprytną nomenklaturę, która ułatwia uczenie się – jeśli w klasycznym R funkcja nazywa się <code>t.test</code>, to w <code>rstatix</code> nazywa się <code>t_test</code>, <code>cor.test</code> zmienia się w <code>cor_test</code> i tak dalej. Jest to zgodne z ogólnym standarem <code>tidyverse</code>, żeby współczesne funkcje zawsze były pisane snake_case (więcej o formatowaniu kodu w podrozdziale 9). Większość funkcji pozwala też na wykonywanie wielu testów jednocześnie i radzi sobie ze zgrupowanymi danymi.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test korelacji Pearsona</span></span>
<span id="cb77-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor_test</span>(diamonds, price, carat)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 1 × 8</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">var1</span>  <span style="font-weight: bold;">var2</span>    <span style="font-weight: bold;">cor</span> <span style="font-weight: bold;">statistic</span>     <span style="font-weight: bold;">p</span> <span style="font-weight: bold;">conf.low</span> <span style="font-weight: bold;">conf.high</span> <span style="font-weight: bold;">method</span> 
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>  
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> price carat  <span style="color: #555555;">0.</span>92      551.     <span style="color: #555555;">0</span>    <span style="color: #555555;">0.</span>920     <span style="color: #555555;">0.</span>923 Pearson
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1"></span>
<span id="cb78-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test t-Studenta</span></span>
<span id="cb78-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t_test</span>(df_scream, screams <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> songwriter)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 1 × 8</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">.y.</span>     <span style="font-weight: bold;">group1</span> <span style="font-weight: bold;">group2</span>     <span style="font-weight: bold;">n1</span>    <span style="font-weight: bold;">n2</span> <span style="font-weight: bold;">statistic</span>    <span style="font-weight: bold;">df</span>      <span style="font-weight: bold;">p</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">*</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> screams Andy   Malcolm    34    34      2.70  62.2 <span style="color: #555555;">0.00</span>8<span style="text-decoration: underline;">9</span>
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1"></span>
<span id="cb79-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test korelacji na zgrupowanych danych</span></span>
<span id="cb79-3">iris <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb79-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb79-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor_test</span>(Sepal.Length, Sepal.Width)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 3 × 9</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">Species</span>    <span style="font-weight: bold;">var1</span>       <span style="font-weight: bold;">var2</span>    <span style="font-weight: bold;">cor</span> <span style="font-weight: bold;">statistic</span>        <span style="font-weight: bold;">p</span> <span style="font-weight: bold;">conf.low</span> <span style="font-weight: bold;">conf.high</span> <span style="font-weight: bold;">method</span>
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;fct&gt;</span>      <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>      <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> 
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> setosa     Sepal.Len… Sepa…  <span style="color: #555555;">0.</span>74      7.68 6.71<span style="color: #555555;">e</span><span style="color: #BB0000;">-10</span>    <span style="color: #555555;">0.</span>585     <span style="color: #555555;">0.</span>846 Pears…
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">2</span> versicolor Sepal.Len… Sepa…  <span style="color: #555555;">0.</span>53      4.28 8.77<span style="color: #555555;">e</span><span style="color: #BB0000;">- 5</span>    <span style="color: #555555;">0.</span>290     <span style="color: #555555;">0.</span>702 Pears…
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">3</span> virginica  Sepal.Len… Sepa…  <span style="color: #555555;">0.</span>46      3.56 8.43<span style="color: #555555;">e</span><span style="color: #BB0000;">- 4</span>    <span style="color: #555555;">0.</span>205     <span style="color: #555555;">0.</span>653 Pears…
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1"></span>
<span id="cb80-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ANOVA</span></span>
<span id="cb80-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anova_test</span>(diamonds, price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> cut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> clarity)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> ANOVA Table (type II tests)
<span style="color: #555555;">#&gt;</span> 
<span style="color: #555555;">#&gt;</span>    Effect DFn   DFd       F         p p&lt;.05   ges
<span style="color: #555555;">#&gt;</span> 1     cut   4 53922  93.715  1.42e-79     * 0.007
<span style="color: #555555;">#&gt;</span> 2   color   6 53922 298.044  0.00e+00     * 0.032
<span style="color: #555555;">#&gt;</span> 3 clarity   7 53922 192.094 1.30e-282     * 0.024
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1"></span>
<span id="cb81-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># testy post-hoc</span></span>
<span id="cb81-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tukey_hsd</span>(diamonds, price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> cut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> clarity)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 59 × 9</span>
<span style="color: #555555;">#&gt;</span>    <span style="font-weight: bold;">term</span>  <span style="font-weight: bold;">group1</span>    <span style="font-weight: bold;">group2</span>    <span style="font-weight: bold;">null.value</span> <span style="font-weight: bold;">estimate</span> <span style="font-weight: bold;">conf.low</span> <span style="font-weight: bold;">conf.high</span>    <span style="font-weight: bold;">p.adj</span>
<span style="color: #555555;">#&gt;</span>  <span style="color: #555555;">*</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>          <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span> cut   Fair      Good               <span style="color: #555555;">0</span>   -<span style="color: #BB0000;">430.</span>    -<span style="color: #BB0000;">732.</span>     -<span style="color: #BB0000;">128.</span>  9.86<span style="color: #555555;">e</span><span style="color: #BB0000;">- 4</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span> cut   Fair      Very Good          <span style="color: #555555;">0</span>   -<span style="color: #BB0000;">377.</span>    -<span style="color: #BB0000;">656.</span>      -<span style="color: #BB0000;">97.9</span> 2.13<span style="color: #555555;">e</span><span style="color: #BB0000;">- 3</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span> cut   Fair      Premium            <span style="color: #555555;">0</span>    225.     -<span style="color: #BB0000;">51.5</span>     503.  1.72<span style="color: #555555;">e</span><span style="color: #BB0000;">- 1</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span> cut   Fair      Ideal              <span style="color: #555555;">0</span>   -<span style="color: #BB0000;">901.</span>   -<span style="color: #BB0000; text-decoration: underline;">1</span><span style="color: #BB0000;">17</span><span style="color: #555555;">3</span><span style="color: #BB0000;">.</span>     -<span style="color: #BB0000;">629.</span>  6.68<span style="color: #555555;">e</span><span style="color: #BB0000;">-14</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span> cut   Good      Very Good          <span style="color: #555555;">0</span>     52.9   -<span style="color: #BB0000;">125.</span>      231.  9.28<span style="color: #555555;">e</span><span style="color: #BB0000;">- 1</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span> cut   Good      Premium            <span style="color: #555555;">0</span>    655.     481.      830.  4.22<span style="color: #555555;">e</span><span style="color: #BB0000;">-14</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span> cut   Good      Ideal              <span style="color: #555555;">0</span>   -<span style="color: #BB0000;">471.</span>    -<span style="color: #BB0000;">638.</span>     -<span style="color: #BB0000;">305.</span>  1.4 <span style="color: #555555;">e</span><span style="color: #BB0000;">-13</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span> cut   Very Good Premium            <span style="color: #555555;">0</span>    602.     471.      734.  <span style="color: #555555;">0</span>   <span style="color: #555555;"> </span>   
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span> cut   Very Good Ideal              <span style="color: #555555;">0</span>   -<span style="color: #BB0000;">524.</span>    -<span style="color: #BB0000;">644.</span>     -<span style="color: #BB0000;">405.</span>  <span style="color: #555555;">0</span>   <span style="color: #555555;"> </span>   
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span> cut   Premium   Ideal              <span style="color: #555555;">0</span>  -<span style="color: #BB0000; text-decoration: underline;">1</span><span style="color: #BB0000;">12</span><span style="color: #555555;">7</span><span style="color: #BB0000;">.</span>   -<span style="color: #BB0000; text-decoration: underline;">1</span><span style="color: #BB0000;">24</span><span style="color: #555555;">1</span><span style="color: #BB0000;">.</span>    -<span style="color: #BB0000; text-decoration: underline;">1</span><span style="color: #BB0000;">01</span><span style="color: #555555;">2</span><span style="color: #BB0000;">.</span>  <span style="color: #555555;">0</span>   <span style="color: #555555;"> </span>   
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 49 more rows</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 1 more variable: </span><span style="color: #555555; font-weight: bold;">p.adj.signif</span><span style="color: #555555;"> &lt;chr&gt;</span>
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1"></span>
<span id="cb82-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wielkość efektu d Cohena</span></span>
<span id="cb82-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cohens_d</span>(df_scream, screams <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> songwriter)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 1 × 7</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">.y.</span>     <span style="font-weight: bold;">group1</span> <span style="font-weight: bold;">group2</span>  <span style="font-weight: bold;">effsize</span>    <span style="font-weight: bold;">n1</span>    <span style="font-weight: bold;">n2</span> <span style="font-weight: bold;">magnitude</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">*</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;ord&gt;</span>    
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> screams Andy   Malcolm   <span style="color: #555555;">0.</span>655    34    34 moderate
</code></pre>
</div>
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb83-1"></span>
<span id="cb83-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wielkość efektu eta^2</span></span>
<span id="cb83-3">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb83-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aov</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> cut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> clarity, .) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb83-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eta_squared</span>()</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>        cut      color    clarity 
<span style="color: #555555;">#&gt;</span> 0.01286207 0.02971211 0.02329457
</code></pre>
</div>
</div>
<p>Dodatkowo <code>rstatix</code> dostarcza nam wygodą funkcję <code>add_significance</code>, która do obiektu z modelem zgodnym z <code>broom</code> dodaje kolumnę z gwiazdkami istotności wartości <img src="https://latex.codecogs.com/png.latex?p">. Domyślne ustawienia są takie same jak dla funkcji <code>cor_mark_significance</code><sup>34</sup> i również można je modyfikować (por. 6.3).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">lm_price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb84-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb84-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_significance</span>()</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 3 × 6</span>
<span style="color: #555555;">#&gt;</span>   <span style="font-weight: bold;">term</span>         <span style="font-weight: bold;">estimate</span> <span style="font-weight: bold;">std.error</span> <span style="font-weight: bold;">statistic</span>  <span style="font-weight: bold;">p.value</span> <span style="font-weight: bold;">p.value.signif</span>
<span style="color: #555555;">#&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>           <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>     <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span>         
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">1</span> (Intercept)     -<span style="color: #BB0000;">2.52</span>    <span style="color: #555555;">0.</span>563      -<span style="color: #BB0000;">4.48</span> 1.48<span style="color: #555555;">e</span><span style="color: #BB0000;">- 5</span> ****          
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">2</span> Sepal.Length     1.78    <span style="color: #555555;">0.0</span>64<span style="text-decoration: underline;">4</span>     27.6  5.85<span style="color: #555555;">e</span><span style="color: #BB0000;">-60</span> ****          
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">3</span> Sepal.Width     -<span style="color: #BB0000;">1.34</span>    <span style="color: #555555;">0.</span>122     -<span style="color: #BB0000;">10.9</span>  9.43<span style="color: #555555;">e</span><span style="color: #BB0000;">-21</span> ****
</code></pre>
</div>
</div>
<p>Nie są to wszystkie funkcje, które oferuje <code>rstatix</code> i zachęcam do zerknięcia do <a href="https://github.com/kassambara/rstatix">repozytorium <code>rstatix</code> na GitHubie</a>, gdzie autor umieścił długą listę dostępnych funkcji ze streszczeniem ich działania.</p>
</section>
</section>
<section id="sec-formatting" class="level1" data-number="9">
<h1 data-number="9"><span class="header-section-number">9</span> Formatowanie kodu</h1>
<p>Ostatnia rzecz, którą chciałbym napisać w tym tekście, dotyczy formatowania kodu. Powiedzmy sobie szczerze – czytanie kodu jest trudne, choć <code>tidyverse</code> już i tak to mocno ułatwia. Gdy piszemy kod, powinniśmy mieć w głowie, że ktoś go kiedyś będzie czytał, gdzie tym ktosiem możemy być nawet przyszli my. Budzi to potrzebę, żeby kod wyglądał dobrze, przestrzegał pewnych standardów, aby był zrozumiały i spójny. Poza tym istnieje seria dobrych praktyk, które między innymi zwiększają czytelność kodu. Kod jest (lub bywa) giętki przyjmie wiele rzeczy i nawet brzydki będzie działał. Dla przykładu, jeśli tam, gdzie powinno być <code>TRUE</code> napiszemy <code>1</code>, to kod i tak zadziała, bo głęboko pod maską <code>TRUE</code> to takie fancy <code>1</code>, ale nie powinniśmy tego robić. Jest to szczególnie ważne, kiedy piszemy kod z kimś. Jeśli nie mamy jednolitych standardów, chociażby wewnętrznych, to nagle może się okazać, że kod działa, ale potrafi być niespójny nawet w obrębie pojedynczego pliku.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb85-2">(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span>My.own_NUMBERS)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>  [1] 4 4 4 8 8 8 5 5 5 9 9 9 9 9 9 4 4 4 8 8 8 5 5 5 9 9 9 9 9 9
</code></pre>
</div>
</div>
<p>Powyższy kod działa, czyli spełnia swoją funkcję, ale wygląda paskudnie. Sprawia to, że jeśli się nie wie, co ten kod robi, to jest to ciężko rozszyfrować. Jednak wszystko staje się prostsze, jeśli napiszemy go w sposób czystszy.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb86-2"></span>
<span id="cb86-3">(my_own_numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wylosuj 5 liczb między 1 a 10</span></span>
<span id="cb86-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zaokrąglij do całości</span></span>
<span id="cb86-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># każdą powtórz 3 razy, a całość 2 razy</span></span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span>  [1] 4 4 4 8 8 8 5 5 5 9 9 9 9 9 9 4 4 4 8 8 8 5 5 5 9 9 9 9 9 9
</code></pre>
</div>
</div>
<p>Kod ten od razu jest czytelniejszy, milszy dla oka, mimo że efekt jego działania jest identyczny. Sądzę, że łatwiej jest od razu nasiąkać dobrymi praktykami i standardami, od samego początku nauki, niż potem rugować złe przyzwyczajenia. A skąd mamy wiedzieć, jakie to są „dobre praktyki”? Cóż, standardy wewnętrzne to jedna sprawa, ale takie standardy trzeba ustalać w każdym zespole od nowa. Na szczęście istnieje pewna baza, fundament, standard który – według mnie – powinna znać każda osoba programująca w R, czyli standard <code>tidyverse</code>. Jeśli znamy te standardy, możemy je potraktować jako bazę dla standardów wewnętrznych. Nie umówiliśmy się, jak powinien wyglądać ten kod? To napiszę zgodnie ze standardem. Jeśli z powodu osobistej preferencji odchodzimy od standardów, robimy to wtedy świadomie. Poradnik formatowania kodu zgodnie z <code>tidyverse</code> znajdziemy <a href="https://style.tidyverse.org">tutaj</a>.</p>
<p>Pamiętanie o wszystkich standardach podczas pisania kodu jest trudne, zwłaszcza na początku. Na szczęście mamy narzędzia, które nam w tym pomogą.</p>
<section id="styler" class="level2" data-number="9.1">
<h2 data-number="9.1" class="anchored" data-anchor-id="styler"><span class="header-section-number">9.1</span> <code>styler</code></h2>
<p>Pierwszy z tych narzędzi to <code>styler</code>, który sam poprawia wiele aspektów kodu, w tym wiele oczywistych błędów. Instalujemy go jak każdy inny pakiet (<code>install.packages("styler")</code>). Po zainstalowaniu menu Addins wzbogaca się o kilka opcji, z których najważniejsza to <em>style active file</em><sup>35</sup>. Podczas pracy uruchamiam to co jakiś czas i zazwyczaj znajdują się jakieś przeoczenia.</p>
<div id="fig-styler" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-styler-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/ilustracje/styler_gif.gif" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-styler-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;4: Przykład wykorzystania <code>styler</code>
</figcaption>
</figure>
</div>
</section>
<section id="lintr" class="level2" data-number="9.2">
<h2 data-number="9.2" class="anchored" data-anchor-id="lintr"><span class="header-section-number">9.2</span> <code>lintr</code></h2>
<p><code>styler</code> nie poprawia wszystkich błędów, bo byłoby to zbyt destrukcyjne. Na szczęście <code>lintr</code> może nam większość z nich wypomnieć. Dla każdego naszego projektu powinniśmy raz uruchomić komendę <code>lintr::use_lintr(type = "tidyverse")</code>. Spowoduje to wytworzenie w folderze pliku o nazwie <code>.lintr</code>. Zawiera on konfigurację <code>lintr</code> dla danego projektu. Za jego pomocą będziemy mogli tę konfigurację również zmieniać.</p>
<div id="fig-lintr" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-lintr-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/ilustracje/lintr_gif.gif" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-lintr-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;5: Przykład wykorzystania <code>lintr</code>
</figcaption>
</figure>
</div>
<p>Zmiana dokonuje się przez wpisanie do pliku <code>.lintr</code><sup>36</sup> odpowiednich opcji. Szczegóły omawia dokumentacja (<code>vignette("lintr")</code>), ale na pewno chciałbym wskazać jedną, której zmiana jest wręcz konieczna. Domyślnie <code>lintr</code> uznaje za za długie linie powyżej 80 znaków. To jest strasznie mało! Ja zazwyczaj ustawiam ten limit to na 120-150 znaków. Zmodyfikujmy to. Domyślna zawartość pliku <code>.lintr</code> wygląda tak:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1">linters<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">linters_with_defaults</span>()</span>
<span id="cb87-2">encoding<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTF-8"</span></span></code></pre></div>
</div>
<p>By zmienić limit znaków, należy przekształcić go w ten sposób:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1">linters<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">linters_with_defaults</span>(</span>
<span id="cb88-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">line_length_linter</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span>
<span id="cb88-3">)</span>
<span id="cb88-4">encoding<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTF-8"</span></span></code></pre></div>
</div>
<p>Gdzie 120 to nowy limit znaków. W podobny sposób możemy zmienić wymagany styl nazywania obiektów. Standardem <code>tidyverse</code> jest snake_case, czyli nazywanie małymi literami, oddzielając słowa podkreślnikiem. Poza tym wyróżniamy jeszcze camelCase, czyli każde słowo składowe wielką literą poza pierwszym, PascalCase, czyli każde słowo wielką literą (choć czasem <em>Pascal case</em> też nazywa się <em>camel case</em> lub <em>upper camel case</em>), kebab-case, czyli oddzielanie słów myślnikiem i dot.notation, czyli oddzielanie słów kropką, żeby wymienić te bardziej znane. Żaden ze stylów nie jest zły, jednal jak już się zdecydujemy na jeden, powinniśmy się go trzymać.</p>
<p>Oba te pakiety, <code>lintr</code> i <code>styler</code>, są bardzo użyteczne, jednak ostatecznie nie zastępują ludzkiej decyzji. Nie wystarczy więc tylko mieć te pakiety, trzeba też – choć pobieżnie – znać same standardy.</p>
</section>
</section>
<section id="sec-debug" class="level1" data-number="10">
<h1 data-number="10"><span class="header-section-number">10</span> Debugowanie</h1>
<p>W założeniu powyższe podrozdziały mają być wystarczającym wprowadzeniem, żeby zacząć pisać analizy w R. Jednak przeczytanie i przećwiczenie tego materiału nie oznacza, że będzie się to robić bezbłędnie. Specyfika programowania w ogóle, niezależnie czy jest to R, Python, C czy nawet Scratch<sup>37</sup>, polega na tym, że czasem popełniamy błędy i z tego wynikają problemy, które musimy naprawić. W żargonie taki błąd określilibyśmy angielskim mianem <em>bug</em>, zaś proces usuwania takich błędów <em>debugowaniem</em>.</p>
<p>Debugowanie to czynność, na której będziemy spędzać sporo czasu, zwłaszcza na początku. Im więcej doświadczenia z językiem, tym mniej się bugów generuje, ale <strong>nigdy nie będziemy pisać bezbłędnie</strong>. Popełnianie błędów nie świadczy, że ktoś źle rozumie język. Doświadczenie sprawia tylko, że piszemy bardziej skomplikowany kod i popełniamy bardziej wysublimowane błędy. Ba! Proste błędy też popełniamy, ale w ramach doświaczenia mamy często już wypracowane sposoby, by sobie z konkretnymi błędami radzić. Będziemy pamiętali, jak poradziliśmy sobie z podobnym problemem ostatnim razem. Czasem nawet specjalnie piszmey błędny kod, żeby sprawdzić, co się stanie. Na każdym etapie możemy sprawdzić, czy kod działa, nie musząc czekać, aż będziemy pewni, że napisaliśmy to dobrze. <strong>Nie bójmy się popełniać błędów!</strong></p>
<section id="sec-diag" class="level2" data-number="10.1">
<h2 data-number="10.1" class="anchored" data-anchor-id="sec-diag"><span class="header-section-number">10.1</span> Diagnoza</h2>
<p>Możemy roboczo podzielić bugi na dwa rodzaje – takie, które nie pozwalają na wykonanie kodu i takie, przy których kod się wykonuje, ale efekt nie jest taki, jak chcemy, żeby był. Pierwszy rodzaj błędu jest o tyle prosty w zauważeniu, że konsola zacznie na nas krzyczeć na czerwono informatycznym żargonem, jeśli taki błąd popełnimy. Do tej kategorii wpadną wszystkie literówki, błędy składniowe, niewłaściwy typ argumentu itd. Druga kategoria błędów jest bardziej podstępna, bo możemy je zawuażyć 100 linijek od miejsca, w którym rzeczywiście zrobiliśmy coś nie tak. A potem musimy szukać.</p>
<p>Proces debugowania zawsze zaczyna się od zauważenia błędu i dzieje się to zazwyczaj w konsoli. Na niektóre błędy (np. niektóre literówki) zostaną nam pokazane już przez edytor kodu, ale zazwyczaj dopiero wykonanie jakiegoś kodu pozwoli nam zauważyć, że jest on błędny. Zobaczmy sobie przykład, gdzie będziemy chcieli zainstalować pakiet <code>ViewPipeSteps</code>, który przyda nam się potem.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(ViewPipeSteps)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> Error in eval(expr, envir, enclos): nie znaleziono obiektu 'ViewPipeSteps'
</span></code></pre>
</div>
</div>
<p>Jeśli uruchominy ten kod, otrzymamy błąd. Komunikatów o błędach nie należy się bać, bo są bezcennym źródłem informacji na temat tego, co się dzieje. Konsola stara się poinformować nas gdzie popełniliśmy błąd i jakiego rodzaju jest to błąd. Tutaj otrzymaliśmy komunikat <code>object 'ViewPipeSteps' not found</code>. Widzimy więc, że komenda szuka zmiennej o nazwie <code>ViewPipeSteps</code> i jej nie znajduje. Wtedy możemy się zorientować, że my rzeczywiście nie mamy takiej zmiennej, bo to w ogóle nie ma być zmienna, tylko <em>nazwa</em> pakietu do zainstalowania. A jak nazwa, to dosłowny ciąg znaków. A więc powinniśmy napisać tak:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ViewPipeSteps"</span>)</span></code></pre></div>
</div>
<p>Ale wpadłem na to, bo już mi się to przydarzyło. To, swoją drogą, częsty błąd, branie w cudzysłów rzeczy, które nie powinny być w cudzysłowie albo odwrotnie, brak cudzysłowia, gdy powinien być on obecny. O tym, jak wpaść na rozwiązanie, piszę więcej niżej. Tutaj jednak warto zwrócić uwagę na sam komunikat błędu.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb91-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selcet</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_3)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> Error in selcet(., H_1:H_3): nie udało się znaleźć funkcji 'selcet'
</span></code></pre>
</div>
</div>
<p>Powyższa komenda zwraca błąd <code>could not find function "selcet"</code>, co może zdarzyć się w dwóch sytuacjach – nie załadowaliśmy pakietu, w którym ta funkcja się znajduje, albo zrobiliśmy literówkę. Tutaj uważne przeczytanie wskazuje na tę drugą ewentualność, zamieniłem literki miejscami.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb92-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb92-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb92-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_suma =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10)),</span>
<span id="cb92-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.after =</span> id</span>
<span id="cb92-5">    )</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 45 × 15</span>
<span style="color: #555555;">#&gt;</span>       <span style="font-weight: bold;">id</span>  <span style="font-weight: bold;">wiek</span> <span style="font-weight: bold;">wyksztalcenie</span> <span style="font-weight: bold;">H_suma</span>   <span style="font-weight: bold;">H_1</span>   <span style="font-weight: bold;">H_2</span>   <span style="font-weight: bold;">H_3</span>   <span style="font-weight: bold;">H_4</span>   <span style="font-weight: bold;">H_5</span>   <span style="font-weight: bold;">H_6</span>   <span style="font-weight: bold;">H_7</span>
<span style="color: #555555;">#&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;ord&gt;</span>          <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span>    54    21 Wyższe          <span style="text-decoration: underline;">1</span>93<span style="color: #555555;">2</span>     5     5     5     5     2     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span>    33    22 Wyższe          <span style="text-decoration: underline;">1</span>93<span style="color: #555555;">2</span>     5     5     4     5     2     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span>    30    23 Wyższe          <span style="text-decoration: underline;">1</span>93<span style="color: #555555;">2</span>     6     5     5     5     2     5     3
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span>    49    23 Wyższe          <span style="text-decoration: underline;">1</span>93<span style="color: #555555;">2</span>     6     6     6     6     1     6     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span>    31    24 Wyższe          <span style="text-decoration: underline;">1</span>93<span style="color: #555555;">2</span>     3     4     4     4     3     4     4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span>    38    25 Wyższe          <span style="text-decoration: underline;">1</span>93<span style="color: #555555;">2</span>     5     5     5     5     2     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span>    46    25 Wyższe          <span style="text-decoration: underline;">1</span>93<span style="color: #555555;">2</span>     5     5     1     5     2     1     3
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span>    43    26 Wyższe          <span style="text-decoration: underline;">1</span>93<span style="color: #555555;">2</span>     6     6     6     6     1     6     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span>    35    29 Wyższe          <span style="text-decoration: underline;">1</span>93<span style="color: #555555;">2</span>     6     6     6     6     1     6     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span>     2    52 Wyższe          <span style="text-decoration: underline;">1</span>93<span style="color: #555555;">2</span>     5     5     5     5     2     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 35 more rows</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 4 more variables: </span><span style="color: #555555; font-weight: bold;">H_8</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">H_9</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">H_10</span><span style="color: #555555;"> &lt;dbl&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">wyksztalcenie_grupa</span><span style="color: #555555;"> &lt;chr&gt;</span>
</code></pre>
</div>
</div>
<p>Powyższy przykład na nas nie krzyczy, wykonuje się, jednak nie działa tak, jak byśmy chcieli. Celem tego kodu było uzyskanie sumy kolumn od H1 do H10 dla każdej osoby badanej, jak robiliśmy w podrozdziale 5.4.1. Jednak kod nie działa tak, jak byśmy chcieli. W każdej komórce kolumny <code>H_suma</code> znajduje się ta sama wartość. Zaskakująco duża. Wynika to z tego, że R domyślnie myśli kolumnami, nie wierszami. Gdy więc każemy mu sumować kolumny od <code>H1</code> do <code>H10</code>, to sumuje <em>całe</em> kolumny i w każdą komórkę wrzuca tę sumę. Jeśli chcemy policzyć sumę dla każdego wiersza z osobna, to musimy albo użyć funkcji <code>rowSums</code> zamiast zwykłego <code>sum</code>, albo wcześniej przepuścić przez funkcję <code>rowwise()</code>, czego nie robiliśmy wcześniej.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb93-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb93-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowwise</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb93-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb93-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_suma =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10)),</span>
<span id="cb93-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.after =</span> id</span>
<span id="cb93-6">    )</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># A tibble: 45 × 15</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># Rowwise: </span>
<span style="color: #555555;">#&gt;</span>       <span style="font-weight: bold;">id</span>  <span style="font-weight: bold;">wiek</span> <span style="font-weight: bold;">wyksztalcenie</span> <span style="font-weight: bold;">H_suma</span>   <span style="font-weight: bold;">H_1</span>   <span style="font-weight: bold;">H_2</span>   <span style="font-weight: bold;">H_3</span>   <span style="font-weight: bold;">H_4</span>   <span style="font-weight: bold;">H_5</span>   <span style="font-weight: bold;">H_6</span>   <span style="font-weight: bold;">H_7</span>
<span style="color: #555555;">#&gt;</span>    <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;ord&gt;</span>          <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 1</span>    54    21 Wyższe            44     5     5     5     5     2     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 2</span>    33    22 Wyższe            43     5     5     4     5     2     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 3</span>    30    23 Wyższe            45     6     5     5     5     2     5     3
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 4</span>    49    23 Wyższe            45     6     6     6     6     1     6     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 5</span>    31    24 Wyższe            39     3     4     4     4     3     4     4
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 6</span>    38    25 Wyższe            44     5     5     5     5     2     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 7</span>    46    25 Wyższe            33     5     5     1     5     2     1     3
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 8</span>    43    26 Wyższe            45     6     6     6     6     1     6     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"> 9</span>    35    29 Wyższe            50     6     6     6     6     1     6     1
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">10</span>     2    52 Wyższe            44     5     5     5     5     2     5     2
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 35 more rows</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;"># ℹ 4 more variables: </span><span style="color: #555555; font-weight: bold;">H_8</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">H_9</span><span style="color: #555555;"> &lt;dbl&gt;, </span><span style="color: #555555; font-weight: bold;">H_10</span><span style="color: #555555;"> &lt;dbl&gt;,</span>
<span style="color: #555555;">#&gt;</span> <span style="color: #555555;">#   </span><span style="color: #555555; font-weight: bold;">wyksztalcenie_grupa</span><span style="color: #555555;"> &lt;chr&gt;</span>
</code></pre>
</div>
</div>
<p>Ostatecznie orientujemy się, że gdzieś w naszym kodzie jest błąd i musimy go rozwiązać. Musimy jednak wiedzieć dokładnie jaka funkcja ten błąd powoduje. Jeśli jest to błąd uniemożliwiający wykonanie kodu, konsola postara się nas poinformować, gdzie ten błąd się znajduje. Gorzej w przypadku drugiej kategorii błędów. Tutaj musimy mocniej się postarać. Czytanie kodu to podstawowa metoda, ale mamy też narzędzia, które mogą nam w tym pomóc.</p>
<section id="viewpipesteps" class="level3" data-number="10.1.1">
<h3 data-number="10.1.1" class="anchored" data-anchor-id="viewpipesteps"><span class="header-section-number">10.1.1</span> <code>ViewPipeSteps</code></h3>
<p>Gdy piszemy całą serię funkcji połączonych potokami, możemy mieć problem ze zidentyfikowaniem, gdzie popełniliśmy błąd. Może się okazać, że w rzeczywistości błąd popełniliśmy kilka linijek wyżej, a nie w funkcji, która ten błąd zwraca. Spójrzmy na uproszczony przykład.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb94-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb94-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb94-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(wiek <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span></code></pre></div>
<div class="sourceCode" style="background: #f1f3f5;">
<pre class="sourceCode code-with-copy"><code class="sourceCode"><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BBBB00; font-weight: bold;">Error</span><span style="color: #BB0000; font-weight: bold;"> in `filter()`:</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #00BBBB;">ℹ</span><span style="color: #BB0000;"> In argument: `wiek &gt; 40`.
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BB0000; font-weight: bold;">Caused by error:</span><span style="color: #BB0000;">
</span><span style="color: #555555;">#&gt;</span><span style="color: #BB0000;"> </span><span style="color: #BBBB00;">!</span><span style="color: #BB0000;"> nie znaleziono obiektu 'wiek'
</span></code></pre>
</div>
</div>
<p>Błąd zwraca nam tutaj funkcja <code>filter</code>, jednak błąd popełniliśmy w funkcji <code>select</code> – nie możemy odfiltrować osób w wieku powyżej 40 roku życia, jeśli w naszej bazie nie ma już kolumny <code>wiek</code>. Tutaj możemy to szybko zauważyć, ale w dłuższych ciągach potoków może nie być to takie oczywiste. Zazwyczaj zacznaczamy wtedy kolejne kroki i patrzymy jak nasza baza się zmienia.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb95-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Najpierw uruchamiamy to</span></span>
<span id="cb95-2">df</span>
<span id="cb95-3"></span>
<span id="cb95-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Potem to</span></span>
<span id="cb95-5">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb95-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10)</span>
<span id="cb95-7"></span>
<span id="cb95-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Na koniec to</span></span>
<span id="cb95-9">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb95-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb95-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(wiek <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span></code></pre></div>
</div>
<p>Zazwyczaj robimy to ręcznie, ale mamy też użyteczne narzędzie służące właśnie wyświetleniu kolejnych kroków ciągu potoków. Jest to dodatek do RStudio <code>ViewPipeSteps</code>. Po zainstalowaniu możemy wykorzystać to narzędzie zaznaczając swój ciąg i wybierając odpowiednią opcję z menu Addins. Otworzy to w kolejnych kartach (albo wydrukuje konsoli) kolejne kroki ciągu funkcji połączonych potokami. Często pozwala to na zidentyfikowanie kroku, w którym pojawia się błąd.</p>
</section>
<section id="metoda-gumowej-kaczuszki" class="level3" data-number="10.1.2">
<h3 data-number="10.1.2" class="anchored" data-anchor-id="metoda-gumowej-kaczuszki"><span class="header-section-number">10.1.2</span> Metoda gumowej kaczuszki</h3>
<p>To zabrzmi jak żart, ale to nie jest żart. Naprawdę istnieje metoda debugowania znana jako metoda gumowej kaczuszki. Ma nawet swoją <a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging">stronę na Wikipedii</a>. W pierwszym kroku potrzebujemy gumowej kaczuszki. Przy braku kaczuszki możemy skorzystać z innych obiektów nieożywionych. Jeśli czujemy się wyjątkowo okrutni, możemy skorzystać z żywych osób<sup>38</sup>. Następnie tłumaczymy owej kaczuszce nasz kod, linijka po linijce. Na głos. Tłumaczenie tego na głos pozwoli zauważyć błędy logiczne, które zauważyć jest trudno przy zwykłym czytaniu kodu. Przypomina to metodę Feynmana, którą szerzej opisuję <a href="https://jakub-jedrusiak.edu.pl/posts/uczenie-sie.html">tutaj</a>. Jest to podstawowa metoda debugowania, która pomaga również nabyć nawyki myślowe, dzięki którym będziemy z czasem popełniać mniej błędów.</p>
</section>
</section>
<section id="rozwiązywanie-problemu" class="level2" data-number="10.2">
<h2 data-number="10.2" class="anchored" data-anchor-id="rozwiązywanie-problemu"><span class="header-section-number">10.2</span> Rozwiązywanie problemu</h2>
<p>Czasami rozwiązanie problemu wprost wynika z diagnozy. Jeśli popełniliśmy błąd taki, że zamiast <code>&lt;</code> napisaliśmy <code>&gt;</code>, to rozwiązaniem tego problemu jest po prostu zmiana znaku. Jeśli usunęliśmy kolumnę z wiekiem, to musimy ją dodać. Rozwiązanie jest logiczną konsekwencją źródła problemu. Jednak czasem musimy nieco wiedzieć, żeby problem rozwiązać. Najważniejszym źródłem rozwiązań jest doświadczenie. Na początku drogi będziemy się często frustrować potykając się o różne głupotki. Jeśli mamy szczęście mieć nauczyciela, pomoże on znaleźć rozwiązanie i szybciej nabyć doświadczenia, pożyczając własne doświadczenie. Dlatego też to, co na początku będzie powodowało problemy, potem stanie się oczywistą częścią języka. Co jednak zrobić, gdy nie mamy jeszcze doświadczenia z danym problemem?</p>
<p>Pierwszym i podstawowym źródłem jest dokumentacja. Doświadczenie podpowiada mi, że być może <code>install.packages(ViewPipeSteps)</code> nie zadziałało, bo potrzeba gdzieś cudzysłowia, ale skąd mam to wiedzieć? Oczywiście wpisując w konsolę <code>?install.packages</code>. Tam, przy opisie argumentów, znajdę informację, że pierwszy argument, <code>pkgs</code>, powinien mieć postać „character vector of the names of packages”. Oznacza to, że nazwy muszą być w cudzysłowie. Jeśli mamy problem z informatycznym żargonem (do którego przyzwyczaimy się z czasem), na samym dole dokumentacji zawsze znajdziemy <strong>przykłady</strong>. Dokumentacja jest więc pierwszą rzeczą, którą powinniśmy sprawdzić, pracując z nową funkcją albo funkcją powodującą problemy.</p>
<p>Drugim istotnym źródłem informacji jest Internet, a konkretniej zazwyczaj StackOverflow. Jest fo swego rodzaju forum informatyczne, gdzie ludzie zadają pytania i czasem otrzymują odpowiedzi. Jeśli wyszukamy treść naszego błędu w Google (inteligentnie pomijając takie rzeczy jak nazwy naszych zmiennych) powinniśmy znaleźć pytanie kogoś, kto miał podobny problem. Jeśli nie (co czasem się zdarza), to sami możemy zadać na StackOverflow pytanie.</p>
<p>W naszym pytaniu powinniśmy zawrzeć przykład kodu, jaki trzeba wykonać, żeby uzyskać nasz problem. Nazywa się to <em>minimal reproducible example</em> z naciskiem na <em>minimal</em> – nie wrzucamy dużych fragmentów naszej analizy, ale najlepiej piszemy nowy przykład, który pozwala uzyskać ten sam błąd. Praktyczna porada jest taka, że można wykorzystać jedną z kilku wbudowanych w R baz danych:</p>
<ul>
<li><code>iris</code> – długości płatków i działek kielicha trzech odmian irysów.</li>
<li><code>mtcars</code> – parametry techniczne 32 samochodów.</li>
<li><code>ToothGrowth</code> – dane z eksperymentu o związku witaminy C z długością zębów kawii domowych (3 dawki, 2 sposoby podawania, dobre do ANOVY wieloczynnikowej).</li>
<li><code>PlantGrowth</code> – masa wysuszonych roślin z warunków kontrolnego i eksperymentalnego (typowa baza do testów t).</li>
<li><code>USArrests</code> – dane statystyczne o zbrodniach popełnianych w każdym stanie USA w 1973 r.</li>
</ul>
<p>Każda z tych baz dancyh ma swoją stronę w dokumentacji wyjaśniającą szczegóły. Warto znać chciażby dwie pierwsze bazy. Wykorzystywanie ich w przykładach jest o tyle dobre, że każdy, kto ma R, automatycznie ma dostęp do tych baz. Więcej szczegółow na temat pisania pytań na StackOverflow można znaleźć na <a href="https://stackoverflow.com/help/how-to-ask">ich stronie</a>.</p>
<p>Czytanie StackOverflow jest zdobywaniem pewnego doświadczenia. Każdy rozwiązany problem to kolejny poznawczy egzemplarz do kolekcji. Im więcej takich mamy, tym trudniej nas zagiąć. Nie oznacza to, że bugi nie będą się pojawiać, ale to, że z pamięci będziemy wiedzieć – lub się domyślać – jak sprawnie je rozwiązać.</p>
</section>
</section>
<section id="sec-ending" class="level1" data-number="11">
<h1 data-number="11"><span class="header-section-number">11</span> Posłowie</h1>
<p>W ten sposób kończymy to przydługie wprowadzenie do R. Wielu rzeczy tutaj nie omówiłem, np. elementów klasycznego R, takich jak wybór pojedynczej kolumny jako wektora (np. <code>df$wyksztalcenie</code>), czy w ogóle wektorów. Nie poznaliśmy klasycznych sposobów selekcji danych, jak np. <code>df[df$wyksztalcenie == "Wyższe", 1:10]</code>. Nie powiedzieliśmy nic o listach ani pętlach, czyli tym kawałku R, który umożliwia automatyzację. Nie liznęliśmy nawet Quarto, czyli standardu do łączenia R z pisaniem raportów, w którym zresztą piszę ten tekst. Części rzeczy nie omówiłem, bo na początek da się je skutecznie zastąpić nowszymi i bardziej czytelnymi funkcjami <code>tidyverse</code>. Część natomiast bywa bardzo przydatna, ale jest po prostu, według mnie, zbyt zaawansowana jak na pierwszy kontakt z językiem.</p>
<p>Tym samym zachęcam do dalszej nauki! Jeśli opanowaliście elementy zawarte w tym tekście, macie solidny fundament, by zrozumieć takie książki jak polecana przeze mnie na wstępie publikacja „Język R. Kompletny zestaw narzędzi dla analityków danych” <span class="citation" data-cites="wickham2020">(Wickham &amp; Grolemund, 2020)</span>. Zaznaczam tylko, że ten tekst jest od tej książki nowszy, więc czasem pojawią się rozbieżności. W kilku miejscach wspominałem, że to, co opisuję, to nowinka, ale co do wielu rzeczy już nawet nie pamiętam, że były kiedyś nowe. Zawsze jednak pierwszym, podstawowym źródłem powinna być dokumentacja (zawsze aktualna), a dopiero potem StackOverflow.</p>
<p>Jeśli czytasz to teraz, oznacza to, że ten tekst to praca w toku. Za każdą informację zwrotną będę wdzięczny. Jeśli coś było niejasne, jeśli coś powinienem wyjaśnić szerzej albo prościej, jeśli czegoś mocno zabrakło, to można (trzeba!) do mnie pisać na <a href="mailto:kuba23031999@gmail.com">kuba23031999@gmail.com</a>.</p>
<div class="cell">
<details class="code-fold">
<summary>Pokaż całość kodu z analizy</summary>
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb96-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Przygotowanie ----</span></span>
<span id="cb96-2"></span>
<span id="cb96-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Ładowanie bibliotek ----</span></span>
<span id="cb96-4"></span>
<span id="cb96-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span>
<span id="cb96-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"broom"</span>)</span>
<span id="cb96-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rstatix"</span>)</span>
<span id="cb96-8"></span>
<span id="cb96-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/koundy/ggplot_theme_Publication/master/ggplot_theme_Publication-2.R"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># motyw do wykresów</span></span>
<span id="cb96-10"></span>
<span id="cb96-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Ładowanie danych ----</span></span>
<span id="cb96-12"></span>
<span id="cb96-13">df_raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/jakub-jedrusiak/jakub-jedrusiak.github.io/main/statystyka/dane/podstawy-R/complex_database.csv"</span>)</span>
<span id="cb96-14"></span>
<span id="cb96-15">df_KTR_test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/jakub-jedrusiak/jakub-jedrusiak.github.io/main/statystyka/dane/podstawy-R/join-test.csv"</span>)</span>
<span id="cb96-16"></span>
<span id="cb96-17">df_KTR_retest <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[./dane/podstawy-R/join-retest.csv](https://raw.githubusercontent.com/jakub-jedrusiak/jakub-jedrusiak.github.io/main/statystyka/dane/podstawy-R/join-retest.csv)"</span>)</span>
<span id="cb96-18"></span>
<span id="cb96-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data wrangling ----</span></span>
<span id="cb96-20"></span>
<span id="cb96-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Czyszczenie ----</span></span>
<span id="cb96-22"></span>
<span id="cb96-23">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df_raw <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Płeć <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mężczyzna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(ID, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Wiek (ukończony w latach)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, Wykształcenie, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wiek"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wyksztalcenie"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb96-28">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wiek =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(wiek),</span>
<span id="cb96-29">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10, parse_number),</span>
<span id="cb96-30">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(H_5, H_7), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .x),</span>
<span id="cb96-31">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">H_suma =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(H_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>H_10)),</span>
<span id="cb96-32">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wyksztalcenie_grupa =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb96-33">            wyksztalcenie <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Średnie"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ponadpodstawowe"</span>,</span>
<span id="cb96-34">            wyksztalcenie <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zawodowe"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ponadpodstawowe"</span>,</span>
<span id="cb96-35">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.default =</span> wyksztalcenie</span>
<span id="cb96-36">        ),</span>
<span id="cb96-37">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wyksztalcenie =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(</span>
<span id="cb96-38">            wyksztalcenie,</span>
<span id="cb96-39">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Podstawowe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zawodowe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Średnie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wyższe"</span>),</span>
<span id="cb96-40">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb96-41">            )</span>
<span id="cb96-42">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-43">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(wyksztalcenie), wiek) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relocate</span>(H_suma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.before =</span> H_1)</span>
<span id="cb96-45"></span>
<span id="cb96-46"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Dołączanie retestu ----</span></span>
<span id="cb96-47"></span>
<span id="cb96-48">df_KTR <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df_KTR_test <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-49">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(</span>
<span id="cb96-50">        df_KTR_retest,</span>
<span id="cb96-51">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(ID <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> Subject),</span>
<span id="cb96-52">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">suffix =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_retest"</span>)</span>
<span id="cb96-53">    )</span>
<span id="cb96-54"></span>
<span id="cb96-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Analiza ----</span></span>
<span id="cb96-56"></span>
<span id="cb96-57"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Eksploracja ----</span></span>
<span id="cb96-58"></span>
<span id="cb96-59">descr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-60">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_summary_stats</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-61">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">v =</span> sd <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> mean)</span>
<span id="cb96-62"></span>
<span id="cb96-63">descr_wyksztalcenie <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-64">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(wyksztalcenie) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-65">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_summary_stats</span>()</span>
<span id="cb96-66"></span>
<span id="cb96-67">freq_wyksztalcenie <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">freq_table</span>(df, wyksztalcenie)</span>
<span id="cb96-68"></span>
<span id="cb96-69">corr_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df_KTR <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-70">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor_mat</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>ID) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-71">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor_mark_significant</span>()</span>
<span id="cb96-72"></span>
<span id="cb96-73"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Wykresy ----</span></span>
<span id="cb96-74"></span>
<span id="cb96-75">plot_price <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-76">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-77">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb96-78">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> clarity) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb96-79">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamond"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb96-80">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YlOrRd"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">direction =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb96-81">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb96-82">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Masa [karaty]"</span>,</span>
<span id="cb96-83">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena [$]"</span>,</span>
<span id="cb96-84">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cena diamentów od ich masy według szlifu"</span>,</span>
<span id="cb96-85">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Źródło danych: ggplot2"</span>,</span>
<span id="cb96-86">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Przejrzystość"</span></span>
<span id="cb96-87">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb96-88">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_Publication</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb96-89">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb96-90">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>,</span>
<span id="cb96-91">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb96-92">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb96-93">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(</span>
<span id="cb96-94">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(cut),</span>
<span id="cb96-95">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labeller =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labeller</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cut =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb96-96">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fair"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zadowalający"</span>,</span>
<span id="cb96-97">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Good"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dobry"</span>,</span>
<span id="cb96-98">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Very Good"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bardzo dobry"</span>,</span>
<span id="cb96-99">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span>,</span>
<span id="cb96-100">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ideal"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Idealny"</span></span>
<span id="cb96-101">                )</span>
<span id="cb96-102">            )</span>
<span id="cb96-103">        )</span>
<span id="cb96-104"></span>
<span id="cb96-105"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Testy statystyczne ----</span></span>
<span id="cb96-106"></span>
<span id="cb96-107">cor_price_carat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor_test</span>(diamonds, price, carat)</span>
<span id="cb96-108"></span>
<span id="cb96-109">anova_diamons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anova_test</span>(diamonds, price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> cut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> clarity)</span>
<span id="cb96-110"></span>
<span id="cb96-111"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tukey_hsd</span>(diamonds, price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> cut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> clarity) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># post-hoc</span></span>
<span id="cb96-112"></span>
<span id="cb96-113">eta_diamonds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-114">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aov</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> cut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> clarity, .) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb96-115">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eta_squared</span>()</span></code></pre></div>
</details>
</div>
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img alt="Licencja Creative Commons" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>Ten utwór jest dostępny na <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">licencji Creative Commons Uznanie autorstwa-Użycie niekomercyjne-Na tych samych warunkach 4.0 Międzynarodowe</a>.</p>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">Bibliografia</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-field2012" class="csl-entry">
Field, A., Miles, J., &amp; Field, Z. (2012). <em>Discovering statistics using R</em>. Los Angeles London New Delhi Singapore Washington, DC: Sage.
</div>
<div id="ref-wickham2020" class="csl-entry">
Wickham, H., &amp; Grolemund, G. (2020). <em>J<span>ę</span>zyk R: kompletny zestaw narz<span>ę</span>dzi dla analityków danych</em>. Gliwice: Wydawnictwo Helion.
</div>
<div id="ref-wilkinson_grammar_2005" class="csl-entry">
Wilkinson, L. (2005). <em>The <span>Grammar</span> of <span>Graphics</span></em>. New York: Springer-Verlag. <a href="https://doi.org/10.1007/0-387-28695-0">https://doi.org/10.1007/0-387-28695-0</a>
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Przypisy</h2>

<ol>
<li id="fn1"><p>Drugim najpopularniejszym jest R.↩︎</p></li>
<li id="fn2"><p>To trudno sobie wyobrazić, łatwiej zobaczyć na obrazkach. Poświęciłem temu cały podrozdział 5.8.↩︎</p></li>
<li id="fn3"><p>Jeśli korzystasz z jakiejś dystrybucji linuxa, R możesz zainstalować z oficjalnych repozytoriów. Pakiet zazwyczaj nazywa się <code>r-base</code>. W Ubuntu wystarczy użyć komendy <code>sudo apt install r-base</code>.↩︎</p></li>
<li id="fn4"><p>W R da się programować też w innych IDE, np. w Visual Studio Code. Niemniej na sam początek lepiej przylgnąć do standardu RStudio, który pomoże nam nabrać najlepszych praktyk i nauczyć się, z czym R się je.↩︎</p></li>
<li id="fn5"><p>Sam używam <a href="https://github.com/anthonynorth/rscodeio">rscodeio</a>.↩︎</p></li>
<li id="fn6"><p>Jeśli znasz jakiś inny język programowania, możesz zapytać, dlaczego nie używamy <code>=</code>. Operator <code>=</code> też zadziała, ale za dobrą praktykę w R uznawane jest stosowanie <code>&lt;-</code> do przypisywania obiektów, a <code>=</code> do ustalania wartości argumentów.↩︎</p></li>
<li id="fn7"><p>Z założenia. Struktura dokumentacji jest bardzo dobra, a każda funkcja w pakietach CRAN musi być udokumentowana. Zdarzało mi się jednak mieć problem ze zrozumieniem, o co chodzi autorom funkcji w danych opisach. Jak to w życiu bywa, niektórzy tłumaczą lepiej, a inni piszą treść tego rozdziału.↩︎</p></li>
<li id="fn8"><p>Piszę o wielu skrótach klawiszowych, bo umiejętność pisania kodu bez odrywania rąk od klawiatury znacząco przyspiesza pracę. Jednocześnie wiele z tych rzeczy da się wyklikać myszką. Zachęcam jednak, żeby próbować uczyć się skrótów. Listę wszystkich skrótów w RStudio znajdziemy w menu Tools → Keyboard Shortcuts Help (albo pod skrótem Alt+Shift+K).↩︎</p></li>
<li id="fn9"><p>Ustawiają katalog roboczy (<em>working directory</em>), dzięki czemu, kiedy musimy powiedzieć, gdzie jest, powiedzmy, plik z danymi, możemy napisać <code>"./dane/dane.xlsx"</code>. <code>./</code> oznacza “w tym folderze”, <code>/dane/</code> oznacza “w podfolderze dane”, a <code>/dane.xlsx</code> oznacza “w pliku <code>dane.xlsx</code>”. Możemy to też zrobić ręcznie funkcją <code>setwd</code>.↩︎</p></li>
<li id="fn10"><p>Jeśli nie wiesz o co chodzi, nie przejmuj się. To duży temat i nie jest to coś, bez czego nie da się żyć. W skrócie to system do monitorowania historii zmian w plikach i współpracy nad kodem. Więcej o tym piszę <a href="./posts/git.qmd">tutaj</a>.↩︎</p></li>
<li id="fn11"><p>Ciągi znaków tekstowych w informatyce określamy mianem <em>string</em>, stąd <code>stringr</code>.↩︎</p></li>
<li id="fn12"><p><code>filter</code> wybiera wiersze spełniające jakiś warunek. Jeśli chcemy wybrać wiersze na podstawie ich pozycji (np. wiersze od 1. do 10.), użyjemy funkcji <code>slice</code>.↩︎</p></li>
<li id="fn13"><p>Zdążyłem zauważyć, że różne pakiety posiadają swoje własne funkcje o nazwie <code>set_names</code>. Wiele razy zdarzyło mi się szukać, dlaczego mój kod nie działa, jak wszystko jest dobrze. Okazywało się potem, że R bierze <code>set_names</code> nie z <code>purrr</code>, tylko np. z <code>magrittr</code>, który też zawiera funkcję o takiej nazwie, ale kompletnie innym działaniu. Jeśli R napotyka w dwóch różnych pakietach funkcje o takich samych nazwach, domyślnie wybiera tę załadowaną <strong>później</strong>. Mówimy, że <em>przesłania</em> ona (<em>masks</em>) poprzenią. Jeśli więc najpierw załadowałem <code>tidyverse</code>, a potem <code>magrittr</code>, to gdy piszę <code>set_names</code> R wybiera wersję „z wierzchu”, czyli z <code>magrittr</code>. Na szczęście możemy wprost powiedzieć R, z którego pakietu ma brać daną funkcję, używając jej pełnej nazwy, np. <code>purrr::set_names</code>. Zawsze jest to <code>nazwa_pakietu::funkcja</code>. Takich pełnych nazw używam też w nagłówkach. Warto wiedzieć, że używając takiego zapisu nie musimy ładować całego pakietu, żeby użyć funkcji z danego pakietu, której np. używamy tylko raz w całym kodzie. Osobiście, dla spokoju ducha, akurat <code>set_names</code> zawsze zapisuję <code>purrr::set_names</code>. Zbyt dużo czasu straciłem na szukanie tego błędu.↩︎</p></li>
<li id="fn14"><p>Chyba że nie jest to dosłowny ciąg znaków, tylko jakaś zmienna albo funkcja. Jeśli wcześniej zapisaliśmy <code>name &lt;- "wiek"</code>, to możemy w <code>set_names</code> wpisać <code>name</code> bez cudzysłowu, ale wtedy nowa kolumna będzie się nazywała <code>"wiek"</code>. Przykład z użyciem funkcji <em>generującej</em> ciągi znaków poniżej.↩︎</p></li>
<li id="fn15"><p>Jej zachowanie możemy modyfikować, np. mówiąc jej, że w liczbach typu <code>128 242,78</code> spację ma traktować jako rozdzielacz dużych liczb, a przecinek jako operator dziesiętny (w krajach anglosaskich tę funkcję pełni zazwyczaj kropka). Inaczej <code>parse_number("128 242,78")</code> zwróci nam pierwszą napotkaną liczbę, czyli 128. Szczegóły można znaleźć w dokumentacji, ale w takim wypadku powinniśmy użyć <code>parse_number("128 242,78", locale = locale(grouping_mark = " ", decimal_mark = ","))</code>. Jeśli nasz respondent najpierw wpisał rok, a potem wiek, trzeba będzie się bawić niestandardowo, np. funkcją <code>case_when</code> lub <code>case_match</code> z podrozdziału 5.4.2.↩︎</p></li>
<li id="fn16"><p>Wyrażenia regularne (<em>Regular expressions</em> w skrócie <em>RegEx</em>) to wielki temat, a liźnięcie go polecam każdemu, czy programuje, czy nie. Pozwalają one na wyszukiwanie regularnych wzorców w tekście, np. <code>"H_\d+"</code> oznacza „“H_” a potem jakakolwiek liczba (<code>\d</code>), jedna lub więcej (<code>+</code>)“. Można je wykorzystywać np. w LibreOffice czy Google Docs (Word zrobił własny system, bo przecież czemu wdrażać światowe standardy, jak można zrobić coś tylko dla tego jednego programu?). Wiele razy oszczędzały mi godzin mechanicznej pracy, gdy trzeba było, powiedzmy, dopisać coś na początku każdej linijki z tekstem. Obfita instrukcja do wyrażeń regularnych znajduje się w ściądze do <code>stringr</code>.↩︎</p></li>
<li id="fn17"><p>Jej zachowanie możemy modyfikować, np. mówiąc jej, że w liczbach typu <code>128 242,78</code> spację ma traktować jako rozdzielacz dużych liczb, a przecinek jako operator dziesiętny (w krajach anglosaskich tę funkcję pełni zazwyczaj kropka). Inaczej <code>parse_number("128 242,78")</code> zwróci nam pierwszą napotkaną liczbę, czyli 128. Szczegóły można znaleźć w dokumentacji, ale w takim wypadku powinniśmy użyć <code>parse_number("128 242,78", locale = locale(grouping_mark = " ", decimal_mark = ","))</code>.↩︎</p></li>
<li id="fn18"><p>Choć dokumentacja <code>dplyr</code> zaleca, by jednak używać w takich sytuacjach funkcji anonimowych, które opisuję w podrozdziale 5.3.3.1.↩︎</p></li>
<li id="fn19"><p>Inny sposób dodaje pakiet <code>purrr</code> wchodzący w skład <code>tidyverse</code>. Polega on na użyciu znaczka <code>~</code> (<em>czyt.</em> tylda). Nasza funkcja <code>odejmij_od_7</code> ma w tej konwencji postać <code>~ 7 - .x</code>. Poprzez <code>.x</code> zawsze oznacza się w takich funkcjach to, co do funkcji wrzucamy, czyli to, co w <code>odejmij_od_7</code> oznaczaliśmy jako <code>wynik</code>. Jest to starszy sposób skracania funkcji anonimowych, więc można go spostkać w różnych miejscach, jeszcze z czasów, zanim skrócony zapis znalazł się natywnie w R.↩︎</p></li>
<li id="fn20"><p>Jakiekolwiek inne operacje na wierszach są możliwe i wymagają użycia funkcji <code>rowwise()</code>. Ponieważ robi się&nbsp;to rzadko, a jest to dość zaawansowane zagadnienie, nie opisuję tego tutaj, a odsyłam zainteresowanych do dokumentacji.↩︎</p></li>
<li id="fn21"><p>W chwili kiedy to piszę, <code>pick</code> jest świeżynką, wprowadzoną do <code>dplyr</code> w wersji 1.1.0 na koniec stycznia 2023 r. Jeśli Twój R jej nie znajduje, warto zaktualizować pakiety, albo guzikami w RStudio, albo funkcją <code>devtools::update_packages()</code>. Jeśli nie ma takiej możliwości, w miejsce <code>pick</code> można użyć <code>across</code>.↩︎</p></li>
<li id="fn22"><p>W starszych tekstach (z mojej perspektywy starszych niż 3 tygodnie) można zamiast argumentu <code>.default</code> spotkać konstrukcję typu <code>TRUE ~ wyksztalcenie</code>. Aktualnie ona jeszcze działa, ale powoli będzie wycofywana. Lepiej jest przestawiać się na <code>.default</code>.↩︎</p></li>
<li id="fn23"><p>Warto zauważyć, że zapisane tu warunki moglibyśmy uprościć do postaci <code>wyksztalcenie == "Średnie" | wyksztalcenie == "Podstawowe"</code> albo jeszcze bardziej <code>wyksztalcenie %in% c("Średnie", "Podstawowe")</code>. Warto też zerknąć w nową siostrzaną funkcję <code>case_when</code>, tj. <code>case_match</code>, która również mogłaby nam tutaj pomóc. Szczegóły, oczywiście, w dokumentacji.↩︎</p></li>
<li id="fn24"><p>Dlatego ja zazwyczaj wstępną bazę ładuję do zmiennej typu <code>df_raw</code>, zaś do zmiennej <code>df</code> zapisuję już wyczyszczoną bazę. Swój kod czyszczący zaczynam więc od <code>df &lt;- df_raw %&gt;%</code>. Dzięki temu zawsze mogę na szybko zerknąć do niewyczyszczonej bazy, jakbym czegoś z niej potrzebował.↩︎</p></li>
<li id="fn25"><p><code>tidyverse</code> dopuszcza zarówno pisownię brytyjską <code>summarise</code> jak i amerykańską <code>summarize</code>. Podobnie w przypadku innych rozbieżności. Dokumentacja wskazuje jednak, że pisownia brytyjska jest preferowana. Też ją preferuję.↩︎</p></li>
<li id="fn26"><p>Oczywiście psychometria dysponuje lepszymi wskaźnikami rzetelności testów niż proste średnie odpowiedzi. Fakt pozostaje faktem jednak, że grupować dane po pytaniach można tylko wtedy, gdy są w jednej kolumnie.↩︎</p></li>
<li id="fn27"><p>To zachowanie można zmodyfikować argumentem <code>values_fill</code>. Szczegóły można znaleźć w dokumentacji. Swoją drogą to jest piękne w R, jak bardzo jest on giętki. Funkcje mają domyślne zachowania, ale jeśli użytkownik w swojej szczególnej sytuacji potrzebuje czegoś innego, to zawsze może to ustawić. Ta uniwersalność jest sama w sobie dobrym powodem, żeby uczyć się&nbsp;programowania.↩︎</p></li>
<li id="fn28"><p>Czasami możemy też wykorzystać inną informację o osobie badanej jako identyfikator. Brałem udział w badaniach, w których osoba badana wypełniała ankietę i w tym samym czasie była nagrywana. Potem łączyłem informacje z nagrania z informacjami z ankiety na podstawie czasu wypełniania ankiety i czasu nagrywania. Jak widać, wszystko jest możliwe, choć domyślne złączenia z <code>dplyr</code>, w chwili pisania tego tekstu, nie pozwalają na pełną giętkość. Wtedy użyłem złączeń z pakietu <code>fuzzyjoin</code>.↩︎</p></li>
<li id="fn29"><p>Ewentualnie można zaokrąglić kolumny z korelacjami do 3 lub 4 miejsc po przecinku z użyciem funkcji <code>mutate</code> i <code>round</code> albo też wyłączając notację naukową komendą <code>format</code>; można napisać na przykład <code>korelacje_p_1 %&gt;% mutate(across(where(is.numeric), ~ format(.x, scientific = FALSE)))</code>. Tylko taka macierz naprawdę dziwnie wygląda.↩︎</p></li>
<li id="fn30"><p><img src="https://latex.codecogs.com/png.latex?*"> – <img src="https://latex.codecogs.com/png.latex?p%20%3C%200,05">; <img src="https://latex.codecogs.com/png.latex?**"> – <img src="https://latex.codecogs.com/png.latex?p%20%3C%200,01">; <img src="https://latex.codecogs.com/png.latex?***"> – <img src="https://latex.codecogs.com/png.latex?p%20%3C%200,001">.↩︎</p></li>
<li id="fn31"><p>Piszę „spróbować”, bo gdy to piszę polskie tłumaczenie znajduje się w wersji rozwojowej. Wersje stabilne pakietów znajdują się w CRAN i to one się pobierają, gdy piszemy komendę <code>install.packages()</code>. Jednak wiele pakietów ma też swoje wersje rozwojowe, które szybciej dostają nowe funkcje, ale bywają niestabilne. Można je pobrać poleceniem <code>install_github</code> z pakietu <code>devtools</code>, do którego wrzucamy nazwę repozytorium. Na przykład wersję rozwojową <code>esquisse</code> można zainstalować komendą <code>devtools::install_github("dreamRs/esquisse")</code>. Takie pakiety można potem aktualizować komendą <code>devtools::update_packages()</code>.↩︎</p></li>
<li id="fn32"><p>Narzędzie można wywołać też komendą <code>esquisse::esquisser()</code>.↩︎</p></li>
<li id="fn33"><p>Na przykład klasyczna funkcja <code>t.test</code> do wykonania przykładu, który za moment podaję, wymaga takiej składni: <code>t.test(df_scream$screams, df_scream$songwriter)</code>. Opcja z formułą też jest możliwa, ale argument <code>data</code> jest tam na drugim miejscu.↩︎</p></li>
<li id="fn34"><p><img src="https://latex.codecogs.com/png.latex?*"> – <img src="https://latex.codecogs.com/png.latex?p%20%3C%200,05">; <img src="https://latex.codecogs.com/png.latex?**"> – <img src="https://latex.codecogs.com/png.latex?p%20%3C%200,01">; <img src="https://latex.codecogs.com/png.latex?***"> – <img src="https://latex.codecogs.com/png.latex?p%20%3C%200,001">.↩︎</p></li>
<li id="fn35"><p>To samo możemy uzyskać używając komendy <code>styler::style_file("ścieżka/do/pliku")</code>.↩︎</p></li>
<li id="fn36"><p>Nazwa tego pliku zaczyna się od kropki, co oznacza, że jest on ukryty. Aby wyświetlić ukryte pliki można użyć skrótu klawiszowego Ctrl+H lub przeszukać opcje eksploratora.↩︎</p></li>
<li id="fn37"><p>Scratch to bardzo przyjemne, darmowe, rysunkowo-blokowe narzędzie do ćwiczenia programowania stworzone przez naukowców z MIT. Nie jest ono specyficzne dla żadnego języka, ale może być dobrym wprowadzeniem do programowania w ogóle. Nie wymaga pisania kodu, a opiera się w całości na przeciąganiu myszką bloczków. Dzięki temu można oswoić się z różnymi ideami w programowaniu, takimi jak funkcje, zmienne itd., bez zaprzątania głowy składnią konkretnego języka.↩︎</p></li>
<li id="fn38"><p>Należy się upwenić, że te osoby kochają nas wystarczająco, żeby być gotowymi na to poświęcenie.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Statystyka</category>
  <category>R</category>
  <guid>https://nieobliczalne.pl/posts/podstawy_R.html</guid>
  <pubDate>Mon, 20 Feb 2023 23:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/podstawy_R.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Kombinatoryka</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/kombinatoryka.html</link>
  <description><![CDATA[ 




<div id="setup" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Pokaż kod</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> itertools</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> variations(iterable, subset_length):</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Kombinacje w wierszach, permutacje w kolumnach, wszystko razem to wariacje'''</span></span>
<span id="cb1-6">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(itertools.permutations(x)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> itertools.combinations(iterable, subset_length)])</span>
<span id="cb1-7">    df.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df.index) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-8">    df.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df.columns) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df</span></code></pre></div>
</details>
</div>
<p>Kombinatoryka to część matematyki zajmująca się modyfikacjami zbiorów. Weźmy sobie zbiór 5 pierwszych liter alfabetu i nazwijmy go Z jak zbiór. Zacznę od skomplikowanie brzmiącego wstępu, a potem wyjaśnię to na przykładach.</p>
<div id="91763d14" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span>]</span></code></pre></div>
</div>
<p>Z tym zbiorem mogę zrobić kilka rzeczy. Mogę go zacząć rozbijać na mniejsze zbiory. Mogę zacząć przestawiać w nim elementy. Mogę najpierw rozbić go na mniejsze zbiory, a potem przestawiać elementy w tych małych zbiorach. Każda z tych akcji ma swoją własną nazwę. Jeżeli mówię, że:</p>
<ul>
<li><strong>permutuję</strong> – zmieniam kolejność elementów;</li>
<li><strong>kombinuję</strong> – rozbijam swój zbiór na mniejsze zbiory (<em>combine</em> – łączyć; łączę stare elementy na nowo).</li>
</ul>
<p>Kiedy robię permutacje, z góry zakładam, że kolejność ma znaczenie. Jest wiele sytuacji, w których kolejność ma znaczenie, ale są też sytuacje, w których liczy się tylko to, <em>jakie</em> mam elementy, a nie <em>w jakiej są kolejności</em>. Dla przykładu nieważne, czy w losowaniu Lotto wyciągnięto 2, 5, 7 czy 7, 5, 2 – jeśli mamy te liczby na swoim kuponie, możemy dostać nagrodę. Jeśli kolejność ma znaczenie, mówimy o wariacjach, a jeśli znaczenia nie ma, mówimy o kombinacjach.</p>
<p>Przed chwilą mówiłem, że zmiana kolejności to permutacja, a potem nagle używam słowa wariacja. Istnieje pomiędzy nimi pewna różnica, polegająca na tym, czy zmieniam kolejność w całym naszym zbiorze, czy wcześniej rozbijam go na mniejsze zbiory. Słowem <em>permutacja</em> określamy zmiany kolejności w całym zbiorze, zaś o <em>wariacjach</em> mówimy wtedy, gdy przed zmianą kolejności rozbijamy nasz zbiór na mniejsze zbiory.</p>
<section id="permutacje" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Permutacje</h1>
<p>Omówmy to na przykładzie naszego zbioru liter od A do E. Permutacja tego zbioru będzie wyglądała tak:</p>
<div id="fd0f24a4" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">pd.DataFrame(itertools.permutations(Z))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>A</td>
<td>B</td>
<td>C</td>
<td>D</td>
<td>E</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>A</td>
<td>B</td>
<td>C</td>
<td>E</td>
<td>D</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>A</td>
<td>B</td>
<td>D</td>
<td>C</td>
<td>E</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>A</td>
<td>B</td>
<td>D</td>
<td>E</td>
<td>C</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>A</td>
<td>B</td>
<td>E</td>
<td>C</td>
<td>D</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">115</td>
<td>E</td>
<td>D</td>
<td>A</td>
<td>C</td>
<td>B</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">116</td>
<td>E</td>
<td>D</td>
<td>B</td>
<td>A</td>
<td>C</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">117</td>
<td>E</td>
<td>D</td>
<td>B</td>
<td>C</td>
<td>A</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">118</td>
<td>E</td>
<td>D</td>
<td>C</td>
<td>A</td>
<td>B</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">119</td>
<td>E</td>
<td>D</td>
<td>C</td>
<td>B</td>
<td>A</td>
</tr>
</tbody>
</table>

<p>120 rows × 5 columns</p>
</div>
</div>
</div>
<p>Ze zbioru 5 liter możemy zatem wytworzyć 120 zbiorów, każdy z inną kolejnością liter. Policzyć jest to dość łatwo. Mamy 5 miejsc i 5 liter, które możemy tam umieścić: <img src="https://latex.codecogs.com/png.latex?P_5%20=%20%5C_%20%5Ctimes%20%5C_%20%5Ctimes%20%5C_%20%5Ctimes%20%5C_%20%5Ctimes%20%5C_">. Na pierwszym miejscu możemy umieścić 5 liter: <img src="https://latex.codecogs.com/png.latex?P_5%20=%205%20%5Ctimes%20%5C_%20%5Ctimes%20%5C_%20%5Ctimes%20%5C_%20%5Ctimes%20%5C_">. Ponieważ jedną literę już zużyliśmy, do drugiego miejsca możemy wsadzić tylko jedną z 4 pozostałych liter: <img src="https://latex.codecogs.com/png.latex?P_5%20=%205%20%5Ctimes%204%20%5Ctimes%20%5C_%20%5Ctimes%20%5C_%20%5Ctimes%20%5C_">. Uzupełniając nasz schemacik dalej otrzymujemy równanie <img src="https://latex.codecogs.com/png.latex?P_5%20=%205%5Ctimes%204%20%5Ctimes%203%20%5Ctimes%202%20%5Ctimes%201%20=%205!%20=%20120">. 5! (<em>czyt.</em> pięć silnia) to skrótowy zapis mnożenia liczb od 1 do 5. Powstaje nam z tego wzór na liczbę możliwych permutacji <em>n</em> elementów:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP_n%20=%20n!%0A"></p>
</section>
<section id="wariacje" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Wariacje</h1>
<p>Ciekawie zaczyna się robić, gdy przed zmianą kolejności chcemy jeszcze rozbić nasz zbiór na mniejsze zbiory. Dla przykładu możemy sobie wyobrazić, że chcemy z naszego zbioru 5 liter wybrać wszystkie możliwe zbiory po 2 litery, np. AB, AC, AD itd. Mamy do dyspozycji mniej miejsca, niż liter w zbiorze. Liczenie czegoś takiego jest analogiczne. Na pierwszym miejscu może pojawić się 1 z 5 liter, na drugim tylko 1 z 4: <img src="https://latex.codecogs.com/png.latex?V%5E2_5%20=%205%20%5Ctimes%204%20=%2020">. Powinno więc istnieć 20 takich zbiorów. Wypiszmy je wszystkie.</p>
<div id="2d620fe7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">variations(Z, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1</td>
<td>(A, B)</td>
<td>(B, A)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2</td>
<td>(A, C)</td>
<td>(C, A)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>(A, D)</td>
<td>(D, A)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>(A, E)</td>
<td>(E, A)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>(B, C)</td>
<td>(C, B)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">6</td>
<td>(B, D)</td>
<td>(D, B)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">7</td>
<td>(B, E)</td>
<td>(E, B)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">8</td>
<td>(C, D)</td>
<td>(D, C)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9</td>
<td>(C, E)</td>
<td>(E, C)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">10</td>
<td>(D, E)</td>
<td>(E, D)</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Żeby wyprowadzić wzór na takie wariacje, musimy zwrócić uwagę na fakt, że nasze obliczenie <img src="https://latex.codecogs.com/png.latex?5%20%5Ctimes%204"> wygląda jak kawałek silni. Brakuje tylko <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%202%20%5Ctimes%201">. Moglibyśmy więc zapisać to w taki sposób:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AV%5E2_5%20=%205%20%5Ctimes%204%20=%20%5Cfrac%7B5%20%5Ctimes%204%20%5Ctimes%203%20%5Ctimes%202%20%5Ctimes%201%7D%7B3%20%5Ctimes%202%20%5Ctimes%201%7D%20=%20%5Cfrac%7B5!%7D%7B3!%7D%0A"></p>
<p>W taki sposób <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%202%20%5Ctimes%201"> skróci się i zostanie tylko <img src="https://latex.codecogs.com/png.latex?5%20%5Ctimes%204">. Jeśli mielibyśmy 3 miejsca, chcielibyśmy uzyskać <img src="https://latex.codecogs.com/png.latex?5%20%5Ctimes%204%20%5Ctimes%203">, a więc w mianowniku zapisalibyśmy tylko <img src="https://latex.codecogs.com/png.latex?2%20%5Ctimes%201">, czyli ostatecznie <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B5!%7D%7B2!%7D">. Powstaje nam z tego następujący wzór na liczbę wariacji <em>n</em> elementów po <em>k</em> elementów (czyli rozbicie w podzbiory po <em>k</em> elementów):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AV%5Ek_n%20=%20%5Cfrac%7Bn!%7D%7B(n-k)!%7D%0A"></p>
<p>Spróbujmy wypisać wariacje naszego zbioru po 3 elementy.</p>
<div id="241e2592" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">variations(Z, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1</td>
<td>(A, B, C)</td>
<td>(A, C, B)</td>
<td>(B, A, C)</td>
<td>(B, C, A)</td>
<td>(C, A, B)</td>
<td>(C, B, A)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2</td>
<td>(A, B, D)</td>
<td>(A, D, B)</td>
<td>(B, A, D)</td>
<td>(B, D, A)</td>
<td>(D, A, B)</td>
<td>(D, B, A)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>(A, B, E)</td>
<td>(A, E, B)</td>
<td>(B, A, E)</td>
<td>(B, E, A)</td>
<td>(E, A, B)</td>
<td>(E, B, A)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>(A, C, D)</td>
<td>(A, D, C)</td>
<td>(C, A, D)</td>
<td>(C, D, A)</td>
<td>(D, A, C)</td>
<td>(D, C, A)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>(A, C, E)</td>
<td>(A, E, C)</td>
<td>(C, A, E)</td>
<td>(C, E, A)</td>
<td>(E, A, C)</td>
<td>(E, C, A)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">6</td>
<td>(A, D, E)</td>
<td>(A, E, D)</td>
<td>(D, A, E)</td>
<td>(D, E, A)</td>
<td>(E, A, D)</td>
<td>(E, D, A)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">7</td>
<td>(B, C, D)</td>
<td>(B, D, C)</td>
<td>(C, B, D)</td>
<td>(C, D, B)</td>
<td>(D, B, C)</td>
<td>(D, C, B)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">8</td>
<td>(B, C, E)</td>
<td>(B, E, C)</td>
<td>(C, B, E)</td>
<td>(C, E, B)</td>
<td>(E, B, C)</td>
<td>(E, C, B)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9</td>
<td>(B, D, E)</td>
<td>(B, E, D)</td>
<td>(D, B, E)</td>
<td>(D, E, B)</td>
<td>(E, B, D)</td>
<td>(E, D, B)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">10</td>
<td>(C, D, E)</td>
<td>(C, E, D)</td>
<td>(D, C, E)</td>
<td>(D, E, C)</td>
<td>(E, C, D)</td>
<td>(E, D, C)</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Tabela jest bardziej rozbudowana, ale wszystko zgadza się z naszymi poprzednimi wnioskami:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdisplaylines%7B%0AV%5E3_5%20=%20%5Cfrac%7B5!%7D%7B(5-3)!%7D%20=%20%5Cfrac%7B5!%7D%7B2!%7D%20=%20%5C%5C%0A=%20%5Cfrac%7B5%20%5Ctimes%204%20%5Ctimes%203%20%5Ctimes%202%20%5Ctimes%201%7D%7B2%20%5Ctimes%201%7D%20=%20%5C%5C%0A=%205%20%5Ctimes%204%20%5Ctimes%203%20=%2020%20%5Ctimes%203%20=%2060%0A%7D%0A"></p>
<p>Czyli wariacji po 3 elementy jest w naszym przykładzie 3 razy więcej, niż wariacji po 2 elementy.</p>
</section>
<section id="kombinacje" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Kombinacje</h1>
<p>Możemy zwrócić uwagę, że tabela powyżej ma ściśle określoną strukturę. W pierwszym wierszu wszystkie podzbiory składają się z literek A, B i C ułożonych na różne sposoby. Można więc powiedzieć, że podzbiory w każdym wierszu są dla siebie <em>permutacjami</em>, bo składają się z tych samych elementów, różnią się tylko kolejnością. Każda kolumna zawiera unikalne zestawy literek. Widzimy więc, że ze zbioru 5 literek możemy wybrać 10 różnych zestawów literek, a w każdym z tych zestawów można ułożyć literki na 6 sposobów, co daje łącznie 60 wariacji. Wariacje możemy więc uzyskać tak, że weźmiemy wszystkie unikalne mniejsze zestawy literek, a potem rozpiszemy permutacje każdego z tych zestawów. Takie unikalne zestawy literek, bez zwracania uwagi na ich kolejność, to <em>kombinacje</em>. W tabeli każdy wiersz to pełny zestaw kombinacji. Wynika nam z tego inny wzór na liczbę wariacji:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AV%5Ek_n%20=%20C%5Ek_n%20%5Ctimes%20P_k%0A"></p>
<p>Są to w rzeczywistości wymiary naszej tabeli. Liczba kombinacji (tj. unikalnych zestawów) to liczba wierszy, a liczba permutacji to liczba kolumn. Tabela powyżej ma wymiary <img src="https://latex.codecogs.com/png.latex?10%20%5Ctimes%206">, bo mamy 10 unikalnych zestawów po 3 elementy i każdy taki zestaw da się ułożyć na 6 różnych sposobów, co ostatecznie daje 60 komórek.</p>
<p>Żeby wyprowadzić wzór na liczbę kombinacji, możemy wykorzystać fakt, że wiemy, jak się liczy liczbę wariacji i permutacji. W powyższej tabeli mamy 60 wariacji, a każda kombinacja ma 6 możliwych permutacji. Żeby więc pozbyć się informacji o permutacjach, musimy podzielić 60 wariacji na 6. Podstawiając do wzoru:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdisplaylines%7B%0AV%5E3_5%20=%20C%5E3_5%20%5Ctimes%20P_3%20%5C%5C%0A60%20=%20C%5E3_5%20%5Ctimes%206%5C%20%7C%5Cdiv%206%20%5C%5C%0AC%5E3_5%20=%20%5Cfrac%7B60%7D%7B6%7D%20=%2010%0A%7D%0A"></p>
<p>Czyli jeśli mamy tabelę z 6 kolumnami i ilomaś wierszami, która ma 60 komórek, to wierszy musi być 10.</p>
<p>Możemy do naszego nowego wzoru podstawić wzory na liczbę wariacji i permutacji i w ten sposób uzyskać ogólny wzór na liczbę kombinacji:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdisplaylines%7B%0AV%5Ek_n%20=%20C%5Ek_n%20%5Ctimes%20P_k%20%5C%5C%0A%5Cfrac%7Bn!%7D%7B(n-k)!%7D%20=%20C%5Ek_n%20%5Ctimes%20k!%20%5C%20%7C%5Cdiv%20k!%20%5C%5C%0AC%5Ek_n%20=%20%5Cfrac%7B%5Cfrac%7Bn!%7D%7B(n-k)!%7D%7D%7Bk!%7D%20=%20%5Cfrac%7Bn!%7D%7Bk!(n-k)!%7D%20=%20%5Cbinom%7Bn%7D%7Bk%7D%0A%7D%0A"></p>
<p>Wzór ten doczekał się nawet własnego symbolu zwanego dwumianem Newtona <img src="https://latex.codecogs.com/png.latex?%5Cbinom%7Bn%7D%7Bk%7D"> (<em>czyt.</em> en nad ka). Dla przykładu liczba kombinacji 5 elementów po 3 elementy oznacza się jako 5 nad 3 i liczy tak:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdisplaylines%7B%0A%5Cbinom%7B5%7D%7B3%7D%20=%20%5Cfrac%7B5!%7D%7B3!(5-3)!%7D%20=%20%5C%5C%0A=%20%5Cfrac%7B5!%7D%7B3!2!%7D%20=%20%5Cfrac%7B5%20%5Ctimes%204%20%5Ctimes%203%20%5Ctimes%202%20%5Ctimes%201%7D%7B(3%20%5Ctimes%202%20%5Ctimes%201)%20%5Ctimes%20(2%20%5Ctimes%201)%7D%20=%20%5C%5C%0A=%2010%0A%7D%0A"></p>
</section>
<section id="powtórzenia" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Powtórzenia</h1>
<p>Do tej pory omówiliśmy wariacje i kombinacje bez powtórzeń. Innymi słowy litera raz użyta nie mogła zostać użyta ponownie. Spotykaliśmy zbiory ABC, ale nie spotkaliśmy zbioru AAA. Wariacje i kombinacje mogą pozwalać na takie powtórzenia. Wariacje możemy policzyć jak zawsze kreskami. W zbiorze Z mamy 5 liter i chcemy zrobić z niego podzbiory po 2 elementy ze zwracaniem (czyli po wylosowaniu wraca do puli, czyli z powtórzeniami). Na pierwszym miejscu może być 5 liter, ale na drugim miejscu także może być 5 liter, bo litery się nie zużywają. Wychodzi nam więc takie działanie:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbar%7BV%7D%5E2_5%20=%205%20%5Ctimes%205%20=%205%5E2%20=%2025%0A"></p>
<p>Wychodzi nam z tego prosty wzór na liczbę wariacji <em>n</em> elementów po <em>k</em> elementów z powtórzeniami:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbar%7BV%7D%5Ek_n%20=%20n%5Ek%0A"></p>
<p>Wzór na kombinacje z powtórzeniami podaję raczej <em>pro forma</em>, bo rzadko jest używany.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbar%7BC%7D%5Ek_n%20=%20%5Cbinom%7Bk+n-1%7D%7Bk%7D%20=%20%5Cfrac%7B(k+n-1)!%7D%7Bk!(n-1)!%7D%0A"></p>
</section>
<section id="podsumowanie" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Podsumowanie</h1>
<p>Permutacje to zmiany kolejności, kombinacje to unikalne podzbiory. Jeśli zaczniemy robić permutacje unikalnych podzbiorów, wyjdą nam wariacje. Albo patrząc inaczej – permutacje to wariacje <img src="https://latex.codecogs.com/png.latex?V%5En_n">. Permutacje i wariacje możemy liczyć kreskami i silnią. Liczbę kombinacji uzyskamy dzieląc liczbę wariacji po <em>k</em> elementów przez liczbę permutacji <em>k</em>. Powstały wzór oznacza się symbolem Newtona <img src="https://latex.codecogs.com/png.latex?%5Cbinom%7Bn%7D%7Bk%7D">. Pomocny może okazać się poniższy schemat.</p>
<!-- ![](./ilustracje/kombinatoryka-flowchart.svg){fig-align="center"} -->
<div class="cell" data-fig-responsive="true" data-fig-width="80%" data-layout-align="default">
<details class="code-fold">
<summary>Kod</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{mermaid}</span></span>
<span id="cb6-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%| fig-responsive: true</span></span>
<span id="cb6-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%| fig-width: 80%</span></span>
<span id="cb6-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%| code-fold: true</span></span>
<span id="cb6-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%| code-summary: "Pokaż kod"</span></span>
<span id="cb6-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">flowchart TD</span></span>
<span id="cb6-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    START(START) --&gt; zbior</span></span>
<span id="cb6-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    zbior[/Mam zbiór, z którym chcę coś zrobić/] --&gt;</span></span>
<span id="cb6-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    kolejnosc{Czy kolejność ma znaczenie?}</span></span>
<span id="cb6-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    kolejnosc --&gt;|Nie| C[kombinacja]</span></span>
<span id="cb6-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        C --&gt; C_powtorzenia{Czy elementy mogą się powtarzać?}</span></span>
<span id="cb6-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        C_powtorzenia --&gt;|Tak| C_powtorzenia_koniec(kombinacja z powtórzeniami)</span></span>
<span id="cb6-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        C_powtorzenia --&gt;|Nie| C_koniec(kombinacja bez powrótrzeń)</span></span>
<span id="cb6-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    kolejnosc --&gt;|Tak| V[wariacja]</span></span>
<span id="cb6-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        V --&gt; V_calosc{Czy wykorzystuję cały zbiór?}</span></span>
<span id="cb6-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        V_calosc --&gt;|Tak| P(permutacja)</span></span>
<span id="cb6-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        V_calosc --&gt;|Nie| V_powtorzenia{Czy elementy mogą się powtarzać?}</span></span>
<span id="cb6-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        V_powtorzenia --&gt;|Tak| V_powtorzenia_koniec(wariacja z powtórzeniami)</span></span>
<span id="cb6-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        V_powtorzenia --&gt;|Nie| V_koniec(wariacja bez powrótrzeń)</span></span>
<span id="cb6-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart TD
    START(START) --&gt; zbior
    zbior[/Mam zbiór, z którym chcę coś zrobić/] --&gt;
    kolejnosc{Czy kolejność ma znaczenie?}
    kolejnosc --&gt;|Nie| C[kombinacja]
        C --&gt; C_powtorzenia{Czy elementy mogą się powtarzać?}
        C_powtorzenia --&gt;|Tak| C_powtorzenia_koniec(kombinacja z powtórzeniami)
        C_powtorzenia --&gt;|Nie| C_koniec(kombinacja bez powrótrzeń)
    kolejnosc --&gt;|Tak| V[wariacja]
        V --&gt; V_calosc{Czy wykorzystuję cały zbiór?}
        V_calosc --&gt;|Tak| P(permutacja)
        V_calosc --&gt;|Nie| V_powtorzenia{Czy elementy mogą się powtarzać?}
        V_powtorzenia --&gt;|Tak| V_powtorzenia_koniec(wariacja z powtórzeniami)
        V_powtorzenia --&gt;|Nie| V_koniec(wariacja bez powrótrzeń)
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img alt="Licencja Creative Commons" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>Ten utwór jest dostępny na <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">licencji Creative Commons Uznanie autorstwa-Użycie niekomercyjne-Na tych samych warunkach 4.0 Międzynarodowe</a>.</p>


</section>

 ]]></description>
  <category>Matematyka</category>
  <guid>https://nieobliczalne.pl/posts/kombinatoryka.html</guid>
  <pubDate>Thu, 16 Feb 2023 23:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/kombinatoryka.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Testy statystyczne i wartość p</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/p-value.html</link>
  <description><![CDATA[ 




<p>Dla przykładu – wychodzę z mieszkania i zamykam drzwi na klucz. Zrobiłem to odruchowo, nieuważnie, więc po chwili nie wiem już, czy zamknąłem te drzwi, czy nie. Wzbiera we mnie lęk, więc cofam się i sprawdzam. Uff, zamknąłem. W tej chwili uzyskuję chwilową pewność<sup>1</sup>, że drzwi są zamknięte i spokojnie wychodzę z budynku. Wspomnienie zaciera się nieco, więc moja pewność spada ze 100% do 96%. Jednak taki poziom pewności w zupełności wystarczy, żebym na pytanie „Zamknąłeś drzwi?” odpowiedział „Tak”.</p>
<p>Jeśli jednak cierpiałbym na zaburzenie obsesyjno-kompulsywne (OCD), 96% pewności mogłoby się okazać stanowczo za dużym ryzykiem. Mógłbym wracać do tych drzwi kilkanaście razy, za każdym razem sprawdzając, czy na pewno są zamknięte. Każda pewność niższa niż 100% byłaby dla mnie trudna do zaakceptowania. Nawet 0,5% szans, że stanie się coś złego, mógłbym uważać za bardzo, bardzo dużo. Jednak takie zachowania i zniekształcenia poznawcze uznajemy za objaw psychopatologii <span class="citation" data-cites="butcher2018">(Butcher &amp; Hooley, 2018)</span>. W świecie rzeczywistym musimy akceptować jakąś niepewność, jakąś szansę na pomyłkę. W przypadku zamykania drzwi robimy to na oko. W nauce, gdzie prawdopodobieństwo określamy liczbowo, możemy przyjąć konkretną granicę.</p>
<section id="problemy-z-próbkowaniem" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="problemy-z-próbkowaniem"><span class="header-section-number">1</span> Problemy z próbkowaniem</h2>
<p>Wyobraźmy sobie, że słyszymy w telewizji wypowiedź pewnego polityka, który twierdzi, że kobiety są mniej inteligentne od mężczyzn. Do tego wyobraźmy sobie, że jesteśmy psychologami, więc mamy uprawnienia do badania inteligencji. Sceptyczni, postanawiamy naukowo sprawdzić, czy chłopski rozum naszego polityka może mieć trochę racji. Docieramy do 100 kobiet i 100 mężczyzn, każdej z osób badanych przeprowadzamy rzetelny i trafny test inteligencji WAIS-R, liczymy średnie i jesteśmy w szoku. Na skali IQ, średnia inteligencja kobiet wyniosła 99, a średnia inteligencja mężczyzn 101. Ogarnia nas zdziwienie. Czy polityk miał rację? Czy musimy się teraz pokajać i w geście hołdu zaśpiewać razem <em>Yellow Submarine</em>? Niekoniecznie.</p>
<p>Nie ufamy swoim wnioskom, więc postanawiamy powtórzyć badanie. Ponownie pobieramy próbkę 100 kobiet i 100 mężczyzn, ponownie wykonujemy WAIS-R i ponownie liczymy średnie. Ciekawe. Tym razem średnia dla kobiet wyniosła 101, a dla mężczyzn… 98. Nie dość, że różnica wzrosła, to jeszcze się odwróciła. Ale jak to? Losowaliśmy z tej samej populacji. Dlaczego nagle średnia inteligencja w naszych próbkach jest inna?</p>
<p>Ten przykład stał się nierealny, gdy od niechcenia samodzielnie przeprowadziliśmy WAIS-R 200 osobom. Popuśćmy wodze fantazji jeszcze luźniej. Wyobraźmy sobie, że jesteśmy szalonym dyktatorem dużego państwa i mamy nieograniczone zasoby. Zaskoczeni naszymi wynikami, chcemy sprawdzić, czy kolejne średnie też będą się od siebie różniły. Badamy więc 1000 próbek po 100 osób każda. Mamy na swoim komputerze 1000 średnich, które przeglądamy. Kilka spośród nich pokazałem w tabeli 1.</p>
<div class="cell" data-layout-align="center">
<div id="tbl-iq-means" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-layout-align="center">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-iq-means-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Tabela&nbsp;1: Średnie wyniki IQ są zawsze trochę inne, ale rzadko są dalekie od 100.
</figcaption>
<div aria-describedby="tbl-iq-means-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<table class="table do-not-create-environment cell caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">lp</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">IQ</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">98.77</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">99.78</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">97.06</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">103.18</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: right;">101.92</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: right;">99.63</td>
</tr>
<tr class="odd">
<td style="text-align: right;">7</td>
<td style="text-align: right;">98.33</td>
</tr>
<tr class="even">
<td style="text-align: right;">8</td>
<td style="text-align: right;">100.49</td>
</tr>
<tr class="odd">
<td style="text-align: right;">9</td>
<td style="text-align: right;">99.89</td>
</tr>
<tr class="even">
<td style="text-align: right;">10</td>
<td style="text-align: right;">98.66</td>
</tr>
</tbody>
</table>


</div>
</div>
</figure>
</div>
</div>
<p>Zaczynamy zauważać, że wyniki za każdym razem były trochę inne, ale zawsze lądowały w pobliżu 100. Innymi słowy średnie bliskie 100 pojawiały się często, a średnie dalekie od 100 pojawiały się rzadko. Nie mamy na przykład ani jednego wyniku mniejszego niż 95, a w zakresie 99-101 mieści się 47% wszystkich uzyskanych średnich. Możemy zrobić nawet wykres, jak często pojawiały się jakie średnie.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div id="fig-iq-means-histogram" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-iq-means-histogram-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/p-value_files/figure-html/fig-iq-means-histogram-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-iq-means-histogram-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;1: Im wyższy słupek, tym średnia z tego zakresu pojawiała się częściej w naszym zbiorze 1000 średnich. Jak widać, średnie koncentrują się dookoła wyniku 100 IQ.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Wpadamy więc na pomysł – skoro średnie koncentrują się dookoła wyniku 100, to może prawdziwa średnia inteligencja w populacji wynosi właśnie 100? To jest bardzo rozsądne założenie. Zwłaszcza, że jeśli policzymy jedną, zbiorczą średnią dla 100 000 naszych badanych, to rzeczywiście wychodzi 100.</p>
<p>Dobieranie próby, wielkości tej próby i generalizowanie wniosków z prób na całe populacje to temat na całą inną rozmowę. Nie będziemy się teraz w to zagłębiać. Dla nas ważny jest taki problem – skąd mamy wiedzieć, czy różnica w IQ, która wychodzi nam w naszym badaniu, rzeczywiście istnieje? Może wyszła nam tylko przez przypadek? Czy cała nauka to kłamstwo, bo nigdy nie możemy mieć pewności? Czy nie powinniśmy odrzucić akademickich dywagacji i podążać za chłopskim rozumem? Wstrzymajmy panikę. To da się rozwiązać.</p>
</section>
<section id="jak-łatwo-wychodzą-przypadkowe-różnice" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="jak-łatwo-wychodzą-przypadkowe-różnice"><span class="header-section-number">2</span> Jak łatwo wychodzą przypadkowe różnice?</h2>
<p>I teraz robi się ciekawie. To jest skomplikowane, warto tutaj zwolnić. Jeśli to się zrozumie, to zrozumie się całą wielką logikę testów statystycznych. Spróbujmy więc nieco się zagłębić. Jesteśmy w końcu w pięknej, abstrakcyjnej sytuacji, gdzie mamy do swojej dyspozycji 1000 średnich z różnych próbek. Na rysunku 1. widzimy, że większość naszych średnich mieści się mniej więcej w granicach 98-102. Uzyskać przez przypadek średnią 105 byłoby bardzo trudno. Uzyskać średnią 115 jest praktycznie niemożliwe. Ale już średnią 101 przez przypadek uzyskać jest bardzo łatwo.</p>
<p>Możemy to ugryźć od innej strony. Jestem w końcu szalonym, bogatym dyktatorem dużego państwa, więc znowu robię olbrzymie badania i powtarzam nasz pierwotny eksperyment 1000 razy. Czyli losuję 1000 próbek po 100 mężczyzn, 1000 próbek po 100 kobiet, mierzę inteligencję i liczę różnicę. Efektem jest zbiór danych, którego fragment znajdziemy w tabeli 2.</p>
<div class="cell" data-layout-align="center">
<div id="tbl-iq-diffs" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-layout-align="center">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-iq-diffs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Tabela&nbsp;2: Możemy wiele razy powtórzyć nasz eksperyment, a różnice za każdym razem będą inne.
</figcaption>
<div aria-describedby="tbl-iq-diffs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<table class="table do-not-create-environment cell caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">lp</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">IQ kobiet</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">IQ mężczyzn</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">różnica</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.49</td>
<td style="text-align: right;">98.83</td>
<td style="text-align: right;">1.66</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">97.89</td>
<td style="text-align: right;">99.14</td>
<td style="text-align: right;">-1.25</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">99.89</td>
<td style="text-align: right;">101.26</td>
<td style="text-align: right;">-1.37</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">99.87</td>
<td style="text-align: right;">100.14</td>
<td style="text-align: right;">-0.27</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: right;">102.91</td>
<td style="text-align: right;">98.65</td>
<td style="text-align: right;">4.26</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: right;">101.43</td>
<td style="text-align: right;">101.82</td>
<td style="text-align: right;">-0.39</td>
</tr>
<tr class="odd">
<td style="text-align: right;">7</td>
<td style="text-align: right;">103.46</td>
<td style="text-align: right;">101.24</td>
<td style="text-align: right;">2.22</td>
</tr>
<tr class="even">
<td style="text-align: right;">8</td>
<td style="text-align: right;">100.30</td>
<td style="text-align: right;">101.45</td>
<td style="text-align: right;">-1.15</td>
</tr>
<tr class="odd">
<td style="text-align: right;">9</td>
<td style="text-align: right;">99.98</td>
<td style="text-align: right;">99.17</td>
<td style="text-align: right;">0.81</td>
</tr>
<tr class="even">
<td style="text-align: right;">10</td>
<td style="text-align: right;">99.00</td>
<td style="text-align: right;">100.54</td>
<td style="text-align: right;">-1.54</td>
</tr>
</tbody>
</table>


</div>
</div>
</figure>
</div>
</div>
<p>Podstawą do różnicy była tu średnia inteligencja kobiet, więc ujemna różnica oznacza, że mężczyźni okazali się mniej inteligentni, zaś dodatnia, że bardziej. Tak jak w przypadku tabeli 1., niektóre różnice są większe, niektóre mniejsze, ale ich rozkład nie jest przypadkowy. Wrzućmy nasze różnice na wykres.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div id="fig-iq-diffs-histogram" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-iq-diffs-histogram-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/p-value_files/figure-html/fig-iq-diffs-histogram-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-iq-diffs-histogram-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;2: Różnice w średnich bywały większe lub mniejsze, ale oscylowały wokół zera.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Jak widzimy, różnice oscylują wokół zera. Skoro w większości eksperymentów różnica wyniosła zero albo prawie zero, to najprawdopodobniej to jest właśnie odpowiedź – prawdziwa różnica wynosi właśnie zero! Ale pomimo tego łatwo jest losowo uzyskać różnicę rzędu 1 punktu. Trudniej jest uzyskać różnicę rzędu 5 punktów. Przypadkowa różnica rzędu 10 punktów jest prawie niemożliwa do uzyskania.</p>
<p>To jest absolutnie kluczowe. Gdy nie ma różnic w populacjach, różnice między poszczególnymi próbkami i tak się zdarzają. Małe różnice w próbkach są łatwe do uzyskania, a duże różnice są mniej prawdopodobne. Możemy określić dokładnie, jak łatwo uzyskać jest jaką różnicę. Na przykład – jak często pojawiła się w naszym zbiorze różnica 5 lub więcej punktów (na plusie albo na minusie)? Mogę to policzyć – w 1000 próbkach różnica 5 albo większa pojawiła się 19 razy, co daje 1,9% szans. A jak często pojawiła się różnica co najmniej 2 punktów? W 343 przypadkach na 1000, czyli 34,3% szans.</p>
</section>
<section id="istotność-statystyczna" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="istotność-statystyczna"><span class="header-section-number">3</span> Istotność statystyczna</h2>
<p>Powtarzając nasze badanie 1000 razy, byliśmy w stanie ustalić, że różnicy w inteligencji tak naprawdę nie ma. Zyskaliśmy też możliwość policzenia, jak łatwo uzyskać daną różnicę przez przypadek, mimo że tak naprawdę różnic nie ma. Ale czy naprawdę musimy powtarzać nasz eksperyment 1000 razy, żeby zyskać taką pewność? Ronald Fisher wymyślił sposób, który ułatwia nam całą sprawę i pozwala dochodzić do podobnych wniosków na podstawie pojedynczych próbek.</p>
<p>Fisher daje nam taką propozycję – najpierw udajmy, że różnicy tak naprawdę nie ma. Przyjmijmy za fakt to, co trochę wyżej wywołało u nas kryzys wiary w naukę, czyli że jakakolwiek różnica, która między próbkami powstała, powstała w wyniku przypadku. Ot, bo średnie z próbek nie oddają dokładnie średniej z całej populacji i majtają się losowo dookoła prawdziwej średniej<sup>2</sup>. Taką hipotezę nazywamy <strong>hipotezą zerową</strong>. Hipoteza zerowa zawsze mówi, że tak naprawdę różnic nie ma, a jeśli jakieś wykryliśmy, to powstały one przez przypadek<sup>3</sup>.</p>
<p>Wyobrażamy sobie więc, że różnic między populacjami kobiet i mężczyzn w zakresie inteligencji nie ma. Przypomnijmy, że w pierwszym rzucie naszych badań kobiety miały średnią inteligencję równą 99, a mężczyźni 101. Różnica wyniosła więc 2 punkty. Z Badań Szalonego Dyktatora™ wiemy, że uzyskanie tak małej różnicy przez przypadek jest całkiem prawdopodobne, ale zakładamy, że dostępu do tamtych danych nie mamy.</p>
<p>Wiemy, że kiedy różnic tak naprawdę nie ma, to łatwo uzyskuje się małe różnice, ale uzyskanie dużej różnicy staje się naprawdę trudne. Możemy pójść więc taką logiką – jeśli 2 punkty to duża różnica, to to nie mógł być przypadek, że ją uzyskaliśmy. Z tego, że jest duża, możemy wnioskować, że istnieje naprawdę, a nie wynika z losowego majtania się średnich w próbkach dookoła prawdziwej średniej. Jeśli zaś różnica 2 punktów jest mała, no to równie dobrze mogła nam się trafić przez przypadek.</p>
<p>Lecz czy da się sprawdzić, czy dana różnica jest duża, czy mała? Bo przecież to nie może być po prostu umowne. Duże różnice to takie, które przez przypadek zdarzają się rzadko, a małe różnice to takie, które zdarzają się często. Ale czy bez pomocy państwowego aparatu opresji możemy zrobić to, co robiliśmy na koniec poprzedniego podrozdziału, czyli policzyć dokładne szanse na uzyskanie danej różnicy przez przypadek? Możesz pewnie teraz powtórzyć za Tadeuszem Sznukiem „nie wiem, ale się domyślam”.</p>
<p>Oczywiście sposób na to istnieje. Ten sposób nazywamy testem <em>t</em>-Studenta<sup>4</sup>. Należy on do szerokiej grupy podobnych sposobów na różne problemy, nazywających się ogólnie <em>testami statystycznymi</em>. Co najlepsze, nie będziemy wgłębiać się teraz w to, jak konkretnie ten test działa z punktu widzenia matematyki. Nie jest nam to potrzebne do zrozumienia jego logiki. A logika jest następująca:</p>
<ol type="1">
<li><p>Załóż, że różnic tak naprawdę nie ma (hipoteza zerowa jest prawdziwa).</p></li>
<li><p>Policz, jak prawdopodobne jest uzyskanie takiej różnicy, jaka wyszła<sup>5</sup>.</p></li>
</ol>
<p>Ponieważ założyliśmy, że różnic tak naprawdę nie ma, to różnica, która wyszła, musiała nam wyjść przez przypadek. Innymi słowy my chwilowo zakładamy, że to rzeczywiście był przypadek. Wtedy, korzystając ze wzoru testu <em>t</em>-Studenta, sprawdzamy, jaka była szansa, żeby ten przypadek miał miejsce. Jeśli szansa na to była bardzo mała, dochodzimy do wniosku, że to może jednak nie stało się przypadkiem. Mówiąc językiem naukowym – odrzucamy hipotezę zerową. Zerowa mówiła, że to wszystko wyszło przez przypadek, Ty jej odpowiadasz, że takie różnice nie dzieją się przez przypadek, że prawdopodobieństwo jest za niskie. Odrzucona hipoteza zerowa zaczyna płakać i upokorzona ucieka. Gorzej, jeśli szansa na przypadek jest duża. Wtedy nie możemy hipotezy zerowej odrzucić. Ciężko jest ją też przyjąć, ale o tym później.</p>
<p>Nie wgłębiając się za bardzo w to, jak nasz test to robi, wrzucamy do niego nasze dane. Program statystyczny wypluwa nam wtedy coś w tym rodzaju:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output cell-output-stdout">
<pre><code>
    Welch Two Sample t-test

data:  women and men
t = -0.94536, df = 195.91, p-value = 0.3456
alternative hypothesis: true difference in means is not equal to 0
95 percent confidence interval:
 -6.172271  2.172271
sample estimates:
mean of x mean of y 
       99       101 </code></pre>
</div>
</div>
<p>Najważniejsza dla nas wartość określona jest literką <img src="https://latex.codecogs.com/png.latex?p"> (<em>p-value</em>). Ta wartość znaczy to, nad czym tak bardzo się rozwodziłem we wcześniejszych akapitach – jak łatwo byłoby uzyskać otrzymać różnicę 2 punktów przez przypadek, gdyby różnic tak naprawdę nie było? W naszym wypadku odpowiedzią jest, że taką różnicę uzyskamy w 34,6% losowych próbek. Badania Szalonego Dyktatora™ pokazały wartość 34,3%, także widzimy, że test <em>t</em>-Studenta ma naprawdę dobrą skuteczność. Z jednego powtórzenia wyczytał to, do czego szalony dyktator potrzebował tysiąca powtórzeń. Teraz pojawia się pytanie – czy to wystarczająco mała szansa, żeby stwierdzić, że to nie przypadek? Żeby odrzucić hipotezę zerową?</p>
<p>Na oko moglibyśmy powiedzieć, że nie. Jeśli naprawdę nie byłoby różnic, to różnicę rzędu 2 punktów albo więcej i tak dostawalibyśmy w mniej więcej co trzeciej próbce. Tak po prostu losowo. Ale jeśli <img src="https://latex.codecogs.com/png.latex?p"> wyszłoby nam 0,000001%, to raczej nie mielibyśmy wątpliwości, że to nie mógł być przypadek i różnica istnieje naprawdę. Ale co gdy <img src="https://latex.codecogs.com/png.latex?p%20=%208%5C%25">? Albo <img src="https://latex.codecogs.com/png.latex?p%20=%204%5C%25">? Być może dobrze by było, gdybyśmy zaczęli się zastanawiać, jak duże ryzyko błędu możemy ponieść i podejmowali tę decyzję osobno w każdym przypadku. A może powodowałoby to tylko chaos i trudności w dojściu do porozumienia, bo dla każdego naukowca duża i mała szansa znaczyłyby co innego.</p>
<p>Tak czy inaczej musimy ustalić gdzieś punkt odcięcia. Jak małe prawdopodobieństwo jest wystarczająco małe, żeby uznać, że to nie mógł być przypadek? Taką wartość odcięcia oznaczamy <img src="https://latex.codecogs.com/png.latex?%5Calpha"> i w większości nauk przyjęty zwyczaj mówi, że <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%200,05">. Jeśli szansa na przypadek wynosi mniej niż 5%, to uznajemy, że to nie był przypadek. Warto zaznaczyć, że taka granica jest całkiem arbitralna. Jak każda granica, wywołuje pytania w stylu „Czyli jak szansa na przypadek wynosi 4,9%, to nie wierzę, że to przypadek, ale jak wynosi już 5,1%, to nie mogę być taki pewny?“. Odpowiedź brzmi „tak”. Mimo że na zdrowy rozum to nie ma sensu, to bycie blisko granicy rzeczywiście wywołuje duże emocje i część naukowców skłania do podejrzanych praktyk, żeby tylko zbić <img src="https://latex.codecogs.com/png.latex?p"> poniżej magicznego 0,05<sup>6</sup>.</p>
<p>Gdy prawdopodobieństwo uzyskania danej różnicy w sytuacji braku rzeczywistych różnic jest mniejsze niż 5%<sup>7</sup>, mówimy o takiej różnicy, że jest <strong>istotna statystycznie</strong> i odrzucamy hipotezę zerową (czyt. to nie mógł być przypadek). W naszym przykładzie <img src="https://latex.codecogs.com/png.latex?p%20=%200,346">, a więc nie możemy odrzucić hipotezy zerowej (<img src="https://latex.codecogs.com/png.latex?0,346%20%3E%200,005">). Prawdopodobieństwo przypadku jest stanowczo za wysokie.</p>
<p>Co jest jednak ważne, wartość <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%200,05"> ciągle dopuszcza 5% szans na błąd. Jeśli zrobilibyśmy 100 badań, to ok. 5 z nich dałoby nam złudzenie, że różnica jest prawdziwa, mimo że tak naprawdę nie jest. W Badaniach Szalonego Dyktatora™ w 1000 powtórzeń uzyskaliśmy dużą różnicę 47 razy (właśnie ok. 5%). Jakieś ryzyko błędu zawsze jest, pytanie brzmi tylko, jak duże ryzyko jesteśmy w stanie zaakceptować. Daryl Bem <span class="citation" data-cites="bem2011">(2011)</span> opublikował kiedyś podsumowanie swoich badań, 9 eksperymentów z których 8 udowadniało, że ludzie potrafią przewidywać przyszłość. Jak się potem okazało, w ciągu 10 lat swoich badań wykonał on znacznie więcej niż te 9 eksperymentów, ale opublikował tylko te, które wyszły <span class="citation" data-cites="engber2017">(Engber, 2017)</span>. Można więc zapytać, dlaczego wyszły? A odpowiedź może brzmieć – przypadkiem. Bo wartość <img src="https://latex.codecogs.com/png.latex?%5Calpha"> zawsze jest trochę większa, niż zero.</p>
<p>Pytaniem filozoficznym jest, czy w takim razie mamy hipotezę zerową przyjąć? To nie jest takie proste, bo brakuje nam jednego jeszcze czynnika – wielkości próby. Zanim jednak omówimy wielkość próby, weźmiemy to, co powiedzieliśmy o teście <em>t</em>-Studenta i zobaczymy, jak to ma się do całej reszty testów statystycznych.</p>
</section>
<section id="logika-testów-statystycznych" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="logika-testów-statystycznych"><span class="header-section-number">4</span> Logika testów statystycznych</h2>
<p>Testów statystycznych jest od groma. Chciałbym móc powiedzieć, że każdy sprawdza co innego, ale niestety często wiele testów służy do dokładnie tego samego, a ich autorzy przekrzykują się w tym, który test jest mocniejszy, lepszy, bardziej odporny, lepiej pachnie itd. Zdobycie pewnej orientacji w tym gąszczu wymaga czasu i doświadczenia. Dzisiaj wiem, że różnice w średnich sprawdzam testem <em>t</em>-Studenta, a normalność rozkładu np. testem Shapiro-Wilka, ale nie wiedziałem tego, jak zaczynałem dopiero zaczynałem się uczyć.</p>
<p>Mimo całego bogactwa testów statystycznych, każdy z nich idzie bardzo podobną logiką, opierającą się na dwóch hipotezach – zerowej (<img src="https://latex.codecogs.com/png.latex?H_0">) i alternatywnej (<img src="https://latex.codecogs.com/png.latex?H_1">). Zerową już poznaliśmy (i skrzywdziliśmy). Hipoteza alternatywna to jej dokładne przeciwieństwo. Jeśli zerowa mówi, że nie ma różnic, to alternatywna na przekór twierdzi, że różnice są. Każdy test statystyczny ma takie dwie hipotezy. Wiedzieć, co robi dany test, to znaczy znać jego hipotezy. Przykładowo dla testu <em>t</em>-Studenta hipotezy brzmią tak:</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?H_0">: Prawdziwa różnica między średnimi wynosi 0.</p>
<p><img src="https://latex.codecogs.com/png.latex?H_1">: Prawdziwa różnica między średnimi jest różna od 0.</p>
</blockquote>
<p>Dla testu Shapiro-Wilka hipotezy brzmią tak:</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?H_0">: Rozkład zmiennej nie różni się od normalnego<sup>8</sup>.</p>
<p><img src="https://latex.codecogs.com/png.latex?H_1">: Rozkład zmiennej różni się od normalnego.</p>
</blockquote>
<p>Hipoteza alternatywna może być niekierunkowa (np. kobiety i mężczyźni różnią się inteligencją) lub kierunkowa (np. kobiety są inteligentniejsze od mężczyzn). W tym miejscu tylko to sygnalizuję, ale to ma potem znaczenie np. przy testowaniu, czy średnie się różnią (tzw. testy jedno- lub dwustronne).</p>
<p>Każdy test statystyczny wyrzuca nam na koniec wartość <img src="https://latex.codecogs.com/png.latex?p">. Ta wartość zawsze znaczy to samo – jeśli hipoteza zerowa byłaby prawdziwa, to jak trudno by było uzyskać dane, które uzyskaliśmy? Jeśli byłoby trudno, jeśli szansa na to wynosi mniej niż 5%, to odrzucamy hipotezę zerową. Przy teście <em>t</em>-Studenta oznacza to, że stwierdzamy, że różnica w średnich istnieje naprawdę, a nie jest tylko artefaktem w naszych próbkach. W teście Shapiro-Wilka odrzucenie hipotezy zerowej oznacza, że stwierdzamy, że rozkład różni się od normalnego. Na przykład jest paranormalny i straszy.</p>
<p>Ciekawe jest to, że o ile przy większości testów chcemy odrzucić hipotezę zerową, tak nie zawsze jest to prawdą. Nie chodzi mi o sytuację, w której po prostu chcemy, żeby się okazało, że kobiety i mężczyźni nie różnią się inteligencją. Czasem po prostu potrzebujemy, żeby hipoteza zerowa była prawdziwa. Dla przykładu z pewnych matematycznych przyczyn lubimy, jak dane nam się rozkładają normalnie. Dlatego jeśli test Shapiro-Wilka daje istotny statystycznie wynik, to zaklinamy pod nosem, bo to znaczy, że nasz rozkład istotnie różni się od normalnego<sup>9</sup>. Logika jest ta sama – <img src="https://latex.codecogs.com/png.latex?p%20%3C%200,05"> oznacza odrzucenie hipotezy zerowej, tylko w przypadku tego testu, odrzucanie hipotezy zerowej jest nam nie na rękę.</p>
<p>Jeśli rozumie się tę ogólną logikę testów statystycznych, zna się hipotezę zerową danego testu, potrafi się wykorzystać wartość <img src="https://latex.codecogs.com/png.latex?p"> do jej odrzucenia bądź nieodrzucania oraz potrafi się zinterpretować, co to odrzucenie znaczy w konkretnym teście, to spokojnie można iść w świat. Najtrudniejsze już za nami. Pierwszy kamień milowy właściwie mamy osiągnięty. Zanim jednak otworzymy szampana, warto się jeszcze zorientować, jak na <img src="https://latex.codecogs.com/png.latex?p"> można wpływać, kiedy badanie nam nie wychodzi i jak ma się istotność statystyczna do wielkości efektu.</p>
</section>
<section id="wielkość-próbki" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="wielkość-próbki"><span class="header-section-number">5</span> Wielkość próbki</h2>
<p>Z może nieco przydługich rozważań powyżej wyłonił nam się jasny obraz – duże różnice możemy wykryć, a małe nie, bo jak różnica jest mała, to zawsze jest ryzyko, że powstała przypadkiem. Ale na wielkość różnicy nie możemy wpływać. Ona jest jaka jest. A co jeśli się uprę i będę chciał wykryć małą różnicę? Czy jest coś, na co mogę wpłynąć, a co pozwoli mi wykrywać nawet te mniejsze różnice tak, żeby były istotne statystycznie? Owszem. Spoilerem był tytuł podrozdziału, ale można wykrywać mniejsze różnice, gdy zbierze się większą próbę.</p>
<p>Zobaczmy to na przykładzie. Pokazywałem wcześniej (na rysunku 1) wyniki symulacji, gdzie braliśmy 100 osób, liczyliśmy ich średnią inteligencję. Powtórzyliśmy to 1000 razy i patrzyliśmy, jak często pojawiają się dane średnie. Teraz zrobimy to samo, ale każda pojedyncza próbka będzie składała się z 1000 osób.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div id="fig-iq-stderr-histogram" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-iq-stderr-histogram-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/p-value_files/figure-html/fig-iq-stderr-histogram-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-iq-stderr-histogram-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;3: Jak często pojawiały się dane średnie, gdy w jednym rzucie badaliśmy 100 osób (mała próba) albo 1000 osób (duża próba).
</figcaption>
</figure>
</div>
</div>
</div>
<p>Na rysunku 3 widzimy, co się dzieje, kiedy liczebność próby zwiększa się. Kiedy próba była mała, wyniki koncentrowały się wokół prawdziwej średniej, czyli wartości 100, ale miały całkiem spory rozstrzał – ok. 95-105. Większość wyników plasowała się wtedy w zakresie<sup>10</sup> od 98,5 do 101,5. Gdy próbka była duża, wyniki ciągle koncentrowały się wokół 100, ale były znacznie mniej rozproszone. Całkowity rozstęp to ok. 98-102, a większość wyników mieści się w zakresie 99,5-100,5.</p>
<p>Ma to sens, jak się dłużej zastanowić. Na czuja da się stwierdzić, że średnia z 1000 osób będzie bardziej adekwatna, niż średnia ze 100 osób. A „bardziej adekwatna” oznacza w tym wypadku „bliższa prawdziwej średniej całej populacji” czyli „bliżej 100”. Dlatego właśnie ten rozkład jest bardziej zbity – bo każda pojedyncza średnia, która go buduje, jest bardziej adekwatna.</p>
<p>Można powiedzieć – no tak, ale co to zmienia? Zmienia to tyle, że teraz co innego jest małą, a co innego dużą różnicą. Przy małych próbach wyniki oddalone o 1 lub więcej punktów od prawdziwej średniej zdarzały się dość często, bo w 53,3% przypadków. W takim razie można powiedzieć, że 1 punkt oddalenia to dość mało, często się zdarza przez przypadek. Ale jak próba jest duża, to takie samo oddalenie możemy już uznać za duże, bo pojawiło się tylko w 3,4% przypadków.</p>
<p>Przekładając to na logikę wartości <img src="https://latex.codecogs.com/png.latex?p"> – różnice, które bardzo łatwo uzyskać w małych próbach, nagle stają się trudne do uzyskania, gdy próba jest duża. Jeśli zbadaliśmy po 100 kobiet i mężczyzn i wyszła nam różnica 2 punktów IQ, to nie zrobi to na nas większego wrażenia, bo taka różnica może być przypadkowa. Ale jeśli różnica 2 punkty wychodzi przy próbce po 1000 osób, to wtedy mamy już więcej zaufania, że ta różnica istnieje naprawdę.</p>
<p>Jako ciekawostkę mogę jeszcze dorzucić, że jeśli spodziewamy się, jak duży będzie nasz efekt (np. dlatego, że przeczytaliśmy dużo na ten temat i mamy już mniej więcej wyczucie, czego się spodziewać), to możemy oszacować, ile osób musimy zbadać, żeby efekt o takiej wielkości wykryć. Im mniejszy jest efekt do wykrycia, tym więcej ludzi trzeba zbadać, żeby okazał się istotny statystycznie. Nazywamy to <strong>analizą mocy</strong> i możemy wykonać w darmowym programie G*Power lub za pomocą pakietu <code>pwr</code> w R.</p>
<section id="dlaczego-większe-próbki-pozwalają-wykryć-mniejsze-efekty" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="dlaczego-większe-próbki-pozwalają-wykryć-mniejsze-efekty"><span class="header-section-number">5.1</span> Dlaczego większe próbki pozwalają wykryć mniejsze efekty?</h3>
<p>Ta część jest zupełnie nieobowiązkowa. Spokojnie da się dobrze rozumieć testy statystyczne po prostu wiedząc, <em>że</em> większe próbki pozwalają wykryć mniejsze efekty, bez wchodzenia w szczegóły <em>dlaczego</em> tak się dzieje. Ale poświęcę chwilę, żeby to drugie też wyjaśnić. Kilka kolejnych akapitów będzie też bardziej techniczne i można spokojnie je pominąć i przejść do podrozdziału o wielkości efektu.</p>
<p>Pod rysunkiem 3. pisałem o tym, że większość wyników mieści się w jakimśtam zakresie dookoła średniej. Ten zakres, w którym zawiera się większość wyników, nazywamy <strong>odchyleniem standardowym</strong> i więcej na jego temat piszę <a href="./posts/procent-wariancji.qmd">w tym wpisie</a>.</p>
<p>Bardzo szczególne jest odchylenie standardowe rozkładów takich, jak te z rysunku 3. Przypomnijmy, co to są za rozkłady. Pokazują one, jak często możemy wylosować jaką średnią. Środkiem tego rozkładu jest prawdziwa średnia całej populacji, a średnie dookoła to losowe odchylenia od tej prawdziwej średniej. Takie rozkłady nazywamy <strong>rozkładami próbkowania</strong> i niosą one bardzo ważną informację – jakie różnice są duże, a jakie są małe. Odchylenia standardowe takich rozkładów nazywamy <strong>błędem standardowym</strong>. Błąd standardowy mówi nam, jakie średnie będą nam często wychodzić przez przypadek, a jakie rzadko.</p>
<p>Jeśli wartości są w obrębie ok. 2 błędów standardowych, czyli tam, gdzie 95% wszystkich wyników, to uznajemy, że różnice są w sumie małe, <em>nieistotne statystycznie</em>. To, że to są 2 odchylenia standardowe<sup>11</sup> to konkret, którego nie mówiłem wcześniej, ale który wynika z faktu, że przyjmujemy <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%200,05"> (por. podrozdział <em>Istotność statystyczna</em>). Innymi słowy wyniki oddalone o mniej niż 2 odchylenia standardowe uzyskać jest łatwo (więcej niż 5% szans), a wyniki oddalone o więcej niż 2 odchylenia standardowe uzyskać jest trudno (mniej niż 5% szans).</p>
<p>Żeby przerobić to na konkretnym przykładzie, zerknijmy jeszcze raz na rozkłady z rysunku 3. Odchylenie standardowe rozkładu z małymi próbkami wynosi<sup>12</sup> ok. 1,5, zaś średnia wynosi 100. Oznacza to, że często (w ok. 95% przypadków) będą nam się losowały średnie z zakresu 97-103. Jeśli jakaś grupa, np. członkowie Mensy, będzie miała średnią spoza tego zakresu, to da nam dowód na to, że średnia inteligencja tej grupy naprawdę jest inna niż średnia ogółu społeczeństwa. Odchylenie standardowe rozkładu z większymi próbami jest mniejsze, bo wynosi zaledwie ok. 0,5 (widać na rysunku, że rozkład jest węższy, więc trzeba węższych widełek, żeby objąć większość wyników). Oznacza to, że spodziewamy się wyników w zakresie 99-101 punktów IQ, a wyniki spoza tego zakresu uznajemy za nieprzypadkowe. Średni wynik 102 łatwo jest uzyskać, kiedy zbadamy tylko 100 osób, ale trudno, kiedy zbadamy ich 1000.</p>
<p>Widzimy więc, że im większa próbka, tym błąd standardowy mniejszy. Przypomnijmy, że mniejszy błąd standardowy oznacza, że łatwiej nam wykryć mniejsze efekty, bo zakres wyników podejrzanych o bycie przypadkowymi (średnia ± 2 błędy standardowe) jest węższy. Możemy to sobie wyobrazić tak, że gdy policja robi dokładniejsze sprawdzenie podejrzanych, to winę części z nich mogą wykluczyć. Grono podejrzanych zmniejsza się i łatwiej jest odróżnić prawego obywatela od przestępcy.</p>
<p>Czy potrzebujemy jednak Badań Szalonego Dyktatora™, żeby znać błąd standardowy? W końcu musimy wiedzieć, jaka jest prawdziwa średnia i zobaczyć, jak często pojawiają się jakie średnie próbek, żeby sprawdzić odchylenie standardowe tego rozkładu. Na szczęście, tak jak wcześniej odkryliśmy dla testów <em>t</em>-Studenta, istnieje zaskakująco prosty sposób na oszacowanie wielkości błędu standardowego na podstawie jednej próbki, bez pobierania 1000 próbek po 100 osób. Wzór ten wynika z czegoś, co nazywa się <strong>centralnym twierdzeniem granicznym</strong> i wygląda następująco:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0ASE=%5Cfrac%7BSD%7D%7B%5Csqrt%7Bn%7D%7D%0A"></p>
<p>Bierzemy odchylenie standardowe naszej próbki i dzielimy je przez pierwiastek z liczby obserwacji (w naszym wypadku liczby osób badanych). Z Badań Szalonego Dyktatora™ wyszło, że błąd standardowy dla próbki wielkości 100 osób wynosi 1,52. Jeśli weźmiemy naszą próbkę 100 mężczyzn z samego początku i podstawimy dane do wzoru, wyjdzie nam <img src="https://latex.codecogs.com/png.latex?SE%20=%20%5Cfrac%7B14,17%7D%7B%5Csqrt%7B100%7D%7D%20=%201,42">. Jak widzimy, skuteczność tego twierdzenia jest niezła. Biorąc pod uwagę, jak dużo środków i czasu oszczędza (nie trzeba powtarzać badania 1000 razy), jest wręcz fenomenalna.</p>
<p>Najważniejsze jest jednak to, że w mianowniku tego twierdzenia pojawia się pierwiastek z liczby osób badanych. Oznacza to, że im więcej osób badanych, tym przez większą liczbę dzielimy. Jak dzielimy przez większe liczby, rzeczy maleją. Czyli im więcej osób badanych, tym mniejszy błąd standardowy. A wiemy, że im mniejszy błąd standardowy, tym łatwiej wykrywać małe efekty. I właśnie dlatego, że w mianowniku tego twierdzenia jest liczba obserwacji, większe próbki pozwalają wykryć mniejsze efekty.</p>
</section>
</section>
<section id="wielkość-efektu-a-istotność-statystyczna" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="wielkość-efektu-a-istotność-statystyczna"><span class="header-section-number">6</span> Wielkość efektu a istotność statystyczna</h2>
<p>Kiedy wiemy już, co znaczy istotność statystyczna, dobrze byłoby powiedzieć, czego nie oznacza. Ludzie często uważają, że jest ona czymś innym, niż jest w rzeczywistości, być może dzięki temu, że ma tak chwytliwą nazwę. Z jednej strony mamy w statystyce rzeczy, które nazywają się „błąd I rodzaju” i „błąd II rodzaju”, które spokojnie dało się nazwać lepiej<sup>13</sup>. Na przykład żeby nazwa sugerowała nam który jest który<sup>14</sup>. „Istotność statystyczna” to termin znacznie doskonalszy, bo nie dość, że przypomina, co oznacza, to do tego sugeruje, że znaczy znacznie, znacznie więcej, niż znaczy w rzeczywistości. Coś jak nazwa „apartament” użyta na pokój motelowy z łóżkiem, oknem i niewielkim stołem.</p>
<p>Kiedy mówimy, że różnice są <em>nieistotne statystycznie</em>, sugeruje to, że nie mają żadnego znaczenia. Kiedy mówimy, że odkryliśmy <em>istotne różnice</em>, sugeruje to, że odnaleźliśmy coś fundamentalnego. „Nieistotne” rozumiemy jako „małe”, „zaniedbywalne”, zaś „istotne” jako „duże”, „ważne”. I to jest błąd.</p>
<p>Wyobraźmy sobie (przykład kompletnie zmyślony), że badaliśmy skuteczność maści z sadła goryla, którą naciera się bananowce, żeby rodziły więcej owoców. A co tam, czemu nie. Jako szalony dyktator jesteśmy potentatami światowego rynku bananowego, mamy do swojej dyspozycji miliony drzew bananowych, możemy testować. Planujemy nasz eksperyment poprawnie metodologicznie, z grupą kontrolną i standardowymi procedurami, kupujemy tony rzeczonej maści i wydajemy polecenie smarowania oznaczonych drzew. Banany rodzone w eksperymentalnych hodowlach skrzętnie ważymy. Gdy dane spływają, dokonujemy analizy statystycznej. I cieszymy się niezmiernie, bo oto wychodzi nam istotny statystycznie efekt! Odrzucamy hipotezę zerową, to nie może być przypadek, bo <img src="https://latex.codecogs.com/png.latex?p%20%3C%200,001">. Czy to znaczy, że czas zacząć masowo smarować wszystkie nasze drzewa? Nie tak szybko.</p>
<p>Wartość <img src="https://latex.codecogs.com/png.latex?p"> mówi nam, że różnica między drzewami smarowanymi a niesmarowanymi istnieje naprawdę, że nie jest tylko losowym artefaktem próbkowania. Wiemy więc, że drzewa traktowane maścią rodzą więcej bananów. Ale zupełnie innym pytaniem jest „o ile więcej”. W końcu zbadaliśmy bardzo, bardzo dużo drzew. Oznacza to, że możemy skutecznie wykrywać bardzo małe różnice. Pytanie zaś jest o <strong>wielkość efektu</strong>. Sprawdzamy więc, za jakie zwiększenie produkcji goryle oddały swoje sadło. Okazuje się, że maść powoduje zwiększenie miesięcznej produkcji bananów z jednej hodowli o ok. 2 kilogramy. Na oko 2 kiście. W chwili, kiedy to piszę, przekłada się to na zwiększenie miesięcznego przychodu o ok. 11,6 zł. A maść z sadła goryla jest znacznie, znacznie droższa. Zwłaszcza biorąc pod uwagę straty wizerunkowe.</p>
<p>Także kiedy mówimy, że „efekt jest istotny statystycznie” mamy na myśli „mamy rozsądne powody przypuszczać, że istnieje naprawdę”, a kiedy mówimy, że „efekt okazał się nieistotny statystycznie” mamy na myśli „nie możemy być pewni, czy w ogóle istnieje”. A przynajmniej to powinniśmy mieć na myśli. Z tym, co ludzie rzeczywiście mają na myśli mówiąc o statystycznej istotności, cóż, różnie bywa.</p>
<p>Z naszym bananowym przykładem wiąże się jeszcze ciekawy problem dotyczący wyników nieistotnych. Nasz potentat bananowy, przed rozpoczęciem eksperymentu, mógłby sprawdzić, jak mocno maść z sadła goryla musiałaby zwiększyć produkcję, żeby wprowadzanie jej w ogóle było opłacalne. Wtedy mógłby wykonać analizę mocy, o której wspominałem wcześniej, żeby sprawdzić, ile drzew musi smarować, żeby wykryć efekt o pożądanej wielkości. Mniejszych efektów wykrywać po prostu nie potrzebuje. Badając za dużo drzew dał sobie możliwość wykrycia bardzo małych różnic, ale też wydał mnóstwo pieniędzy na maść i stracił więcej czasu swoich pracownikóę. Dla naszego potentata nie było ważne, czy maść w ogóle ma szansę zwiększyć liczbę owoców (co mogłoby ciekawić biologa), ale czy może zwiększyć tę produkcję w opłacalny sposób.</p>
<p>To rodzi pytanie dotyczące udowadniania nieistnienia. Wydaje się, że nie da się udowodnić nieistnienia czegoś. Jeśli powiem, że jednorożców nie ma, ktoś może mi odpowiedzieć, że źle szukałem. I technicznie będzie miał rację, może po prostu wszyscy źle szukamy. Czasem mam taką nadzieję. W statystyce również nie możemy być do końca pewni, czy efekt nie istnieje. Dla przykładu – jeśli w naszych badaniach maści z sadła goryla nie zaobserwowalibyśmy żadnych efektów (czyli najbardziej prawdopodobny scenariusz), mogłoby to być dlatego, że żadnego efektu tak naprawdę nie ma (czyli najbardziej prawdopodobny scenariusz). Ale być może efekt jest, tylko nasza próbka jest zbyt mała. Może efekt zwiększa masy hodowanych bananów o tysięczne części grama i po prostu na świecie jest za mało bananowców, żeby to wykryć. A może nasze badanie ma błędy metodologiczne. Może efekt jest, ale użyliśmy za mało maści albo smarowaliśmy gałęzie, podczas gdy powinniśmy byli smarować liście. Zawsze istnieje pewna doza niepewności w określaniu, że czegoś nie ma. Z drugiej strony, jeśli zrobiliśmy wszystko, co było w naszej mocy i według wszystkiego, co wiemy, powinniśmy coś zaobserwować, a nie widzimy nic, to może rzeczywiście tego nie ma? Może brak dowodu tam, gdzie się go spodziewamy, może być dowodem nieistnienia? W niektórych przypadkach, przynajmniej. W końcu z praktycznego punktu widzenia, co za różnica, czy efektu nie ma wcale, czy jest tak mały, że niemożliwy do zaobserwowania?<sup>15</sup></p>
</section>
<section id="podsumowanie" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="podsumowanie"><span class="header-section-number">7</span> Podsumowanie</h2>
<ol type="1">
<li><p>Jeżeli obserwujemy jakiś efekt w naszych danych to może on albo istnieć naprawdę, albo być losowym artefaktem, błędem, wynikającym z tego, że próbka nie jest doskonałym odzwierciedleniem populacji, z której pochodzi.</p></li>
<li><p>Wartość <img src="https://latex.codecogs.com/png.latex?p"> mówi nam, jaka jest szansa uzyskania danego efektu (np. różnicy w średnich) przez przypadek, czyli gdyby ten efekt tak naprawdę nie istniał. Jeśli ta szansa jest mniejsza niż 5%, to uznajemy, że nie może być mowy o przypadku.</p></li>
<li><p>Wartość <img src="https://latex.codecogs.com/png.latex?p"> dają nam testy statystyczne, które są wymyślane w konkretnym celu. Rdzeń testu statystycznego stanowi jego hipoteza zerowa, którą – na podstawie wartości <img src="https://latex.codecogs.com/png.latex?p"> – odrzucimy lub nie.</p></li>
<li><p>Wartość <img src="https://latex.codecogs.com/png.latex?p"> zależy od dwóch rzeczy – wielkości efektu i wielkości próby. Na wielkość efektu nie mamy wpływu, ale możemy wykrywać mniejsze efekty zwiększając liczebność próby.</p></li>
<li><p>To, że coś jest istotne statystycznie znaczy tylko tyle, że prawdopodobnie istnieje naprawdę. Wartość <img src="https://latex.codecogs.com/png.latex?p"> nie mówi nam, czy efekt jest duży, czy mały, ani czy ma praktyczne znaczenie.</p></li>
</ol>
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img alt="Licencja Creative Commons" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>Ten utwór jest dostępny na <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">licencji Creative Commons Uznanie autorstwa-Użycie niekomercyjne-Na tych samych warunkach 4.0 Międzynarodowe</a>.</p>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">Bibliografia</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-bem2011" class="csl-entry">
Bem, D. J. (2011). Feeling the future: Experimental evidence for anomalous retroactive influences on cognition and affect. <em>Journal of Personality and Social Psychology</em>, <em>100</em>, 407–425. <a href="https://doi.org/10.1037/a0021524">https://doi.org/10.1037/a0021524</a>
</div>
<div id="ref-butcher2018" class="csl-entry">
Butcher, J. N. M. S., &amp; Hooley, J. M. (2018). <em>Psychologia zaburze<span>ń</span></em>. Sopot: Gda<span>ń</span>skie Wydawnictwo Psychologiczne.
</div>
<div id="ref-engber2017" class="csl-entry">
Engber, D. (2017). Daryl Bem proved ESP is real: Which means science is broken. <em>Slate, May</em>, <em>17</em>.
</div>
<div id="ref-wilkes2017" class="csl-entry">
Wilkes, J. (2017). <em>Spal pracowni<span>ę</span> matematyczn<span>ą</span>... i sam sobie wymy<span>ś</span>l matematyk<span>ę</span></em>. Warszawa: Prószy<span>ń</span>ski Media.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Przypisy</h2>

<ol>
<li id="fn1"><p>Zdaję sobie sprawę, że „pewność” i jej zmiany pasują bardziej do analiz bayesowskich niż testów, ale tego typu przykłady znacznie łatwiej jest zrozumieć niż bardziej abstrakcyjny `dobór prób z populacji. Do większej abstrakcji przejdę później.↩︎</p></li>
<li id="fn2"><p>Akurat w przypadku inteligencji znamy prawdziwą średnią (<img src="https://latex.codecogs.com/png.latex?M%20=%20100">) i odchylenie standardowe (<img src="https://latex.codecogs.com/png.latex?SD%20=%2015">), ale w większości przypadków tego szczęścia nie mamy. Na szczęście mieć nie musimy. Są to jednak pewne szczegóły dotyczące działania testów <em>t</em>, w które nie ma teraz sensu wchodzić. Teraz próbujemy dostać ogólny obraz, a potem wnikać w to, jak działają konkretne testy.↩︎</p></li>
<li id="fn3"><p>To można wyrazić jeszcze na inny sposób – że próbki pochodzą z tego samego rozkładu. Czyli w naszym przykładzie kobiety i mężczyźni nie różnią się, u jednych i drugich inteligencja to rozkład normalny o średniej 100 i odchyleniu standardowym 15. Nie tworzą oni dwóch osobnych rozkładów o różnych średnich.↩︎</p></li>
<li id="fn4"><p>Niech nie zwiedzie Cię nazwa, drogi Czytelniku, Student to pseudonim Fishera.↩︎</p></li>
<li id="fn5"><p>Matematycznie możemy zapisać to tak:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(%5CDelta%20M%7CH_0)%0A"></p>
<p>czyli prawdopodobieństwo uzyskania danej różnicy w średnich zakładając, że hipoteza zerowa jest prawdziwa.↩︎</p></li>
<li id="fn6"><p>Powody ku temu są dość poważne. Wiele czasopism naukowych po prostu nie chce przyjmować tzw. wyników zerowych, a od publikowania zależy byt naukowca. Jednym ze sposobów na takie manipulowanie wartością <img src="https://latex.codecogs.com/png.latex?p"> (tzw. <em>p-hacking</em>) jest usuwanie z bazy osób, które nagle zaczynają nam się wydawać podejrzane, bo np. za długo rozwiązywały nasz kwestionariusz. Te i podobne kontrowersje są siłą napędową prężnie rozwijającego się ruchu Open Science.↩︎</p></li>
<li id="fn7"><p>Lub inna arbitralnie przyjęta granica, np. niektóre czasopisma medyczne przyjmują <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%200,01">.↩︎</p></li>
<li id="fn8"><p>Bardziej po ludzku powiedzielibyśmy, że jest normalny, ale warto pamiętać, że hipoteza zerowa zawsze mówi o <em>braku</em> czegoś, w tym wypadku o braku różnic między rozkładem zmiennej, a rozkładem normalnym.↩︎</p></li>
<li id="fn9"><p>W praktyce jeszcze nie wszytko stracone. Często patrząc na parametry rozkładu możemy uznać, że owszem, różni się od normalnego, ale na tyle mało, że to nie ma znaczenia. Ale to jest nieco inny temat.↩︎</p></li>
<li id="fn10"><p>Przez większość wyników mam na myśli około <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B2%7D%7B3%7D">. Jeśli ktoś jest zaznajomiony z pojęciem odchylenia standardowego, to chodzi o zakres ±1 odchylenie standardowe od średniej.↩︎</p></li>
<li id="fn11"><p>A dokładnie mówiąc 1,96 odchylenia standardowego. Piszę <em>odchylenia standardowe</em>, błąd standardowy to odchylenie standardowe rozkładu próbkowania.↩︎</p></li>
<li id="fn12"><p>Ponownie, liczenie odchylenia standardowego omawiam dokładnie <a href="./posts/procent-wariancji.qmd">w tym wpisie</a>.↩︎</p></li>
<li id="fn13"><p>Sporo miejsca przyjętym konwencjom nazywania rzeczy w matematyce i jak potem źle dobrane nazwy utrudniają wszystkim życie poświęca w swojej książce Jason Wilkes <span class="citation" data-cites="wilkes2017">(2017)</span>. Zgadzam się z nim w tej kwestii. Nazwy powinny przypominać nam, co oznaczają. Prześledziłem kiedyś dzieje językowe nazwy funkcji sinus (łac. zatoka, łono lub pierś). Cała seria wzajemnego niezrozumienia autorów hinduskich, arabskich i łacińskich doprowadziła do tego, że sensowna nazwa w sanskrycie (<em>jyā</em>, cięciwa, bo odnosi się do długości w pionie) zmieniła się w niemającą żadnego związku z samą funkcją nazwę po łacinie. Ale że konwencja się przyjęła, to nikt nie próbuje jej dziś poprawiać. A może gdyby nazwy lepiej oddawały swoje desygnaty, to dziś trygonometria (czy w ogóle matematyka, w tym statystyka) nie byłyby uznawane za takie trudne.↩︎</p></li>
<li id="fn14"><p>Dlatego osobiście wolę nazwy „błąd fałszywego alarmu” (myślałem, że coś było, ale tak naprawdę tego nie było) i „błąd chybienia” (coś naprawdę było, ale to przegapiłem).↩︎</p></li>
<li id="fn15"><p>Nie dla wszystkich badań to będzie prawda. W psychologii, jeśli coś wpływa na zachowanie absolutnie minimalnie, to równie dobrze możemy to zignorować, bo <em>de facto</em> nie ma znaczenia. Ale na przykład w fizyce minimalny wpływ może być kluczowy, jeśli ma udowodnić, że jakaś siła rzeczywiście istnieje. Czasem też zjawiska bardzo rzadkie są cenne, bo udowadniają nam, że coś jest w ogóle możliwe.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Statystyka</category>
  <guid>https://nieobliczalne.pl/posts/p-value.html</guid>
  <pubDate>Tue, 20 Sep 2022 22:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/p-value.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Wyjaśnianie wariancji i test F</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/procent-wariancji.html</link>
  <description><![CDATA[ 




<p>W psychologii można spotkać się z przytaczaniem wartości odziedziczalności. Możemy, dla przykładu, przeczytać, że wzrost jest odziedziczalny w 90% <span class="citation" data-cites="plomin2001">(Plomin, DeFries, McClearn, &amp; McGuffin, 2001)</span>. Ale co to znaczy? Że z moich 170 cm wzrostu 153 cm zawdzięczam genom, a pozostałe 17 cm środowisku? To jest bez sensu. Czy odziedziczalność powie mi, czy byłem skazany na bycie niskim od początku albo czy dało się tego uniknąć? W <em>Genetyce zachowania</em> możemy przeczytać, że odziedziczalność to:</p>
<blockquote class="blockquote">
<p>Część zmienności fenotypowej pomiędzy osobnikami, która może być przypisana różnicom genetycznym w określonej populacji <span class="citation" data-cites="plomin2001">(Plomin i in., 2001, s. 401)</span>.</p>
</blockquote>
<p>W innym miejscu spotykamy uszczegółowienie:</p>
<blockquote class="blockquote">
<p>Odziedziczalność to odsetek (część) wariancji fenotypowej, którą można przypisać różnicom genetycznym pomiędzy jednostkami <span class="citation" data-cites="plomin2001">(Plomin i in., 2001, s. 104)</span>.</p>
</blockquote>
<p>Po którym następuje groźnie brzmiące ostrzeżenie:</p>
<blockquote class="blockquote">
<p>Odziedziczalność odnosi się do wkładu genetycznego do różnic indywidualnych (wariancji), a nie do fenotypu pojedynczej jednostki <span class="citation" data-cites="plomin2001">(Plomin i in., 2001, s. 106)</span>.</p>
</blockquote>
<p>Łatwo jest zrozumieć, że istnieje jakieś nieporozumienie co do tego, czym jest odziedziczalność. Widzimy wyraźnie, że odziedziczalność nie ma oznaczać ograniczeń, jakie biologia narzuca na jednostkę, ale że jest to miara, która w jakiś sposób dotyczy całej populacji. Pojawia się tajemnicza wariancja, co powoduje mroczne skojarzenia z matematyką. Ale ciągle możemy mieć wątpliwości co do tego, co ma znaczyć, że wzrost jest odziedziczalny w 90%? Bez tła statystycznego powyższe wyjaśnienia właściwie nic nie wyjaśniają. Ale na ich podstawie możemy wyrazić myśl o wzroście tak: czynniki genetyczne wyjaśniają 90% wariancji w zakresie wzrostu w populacji. I tak dochodzimy do <em>clou</em> tego tekstu – co to znaczy, że coś wyjaśnia 90% wariancji?</p>
<section id="średnia-jako-model" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="średnia-jako-model"><span class="header-section-number">1</span> Średnia jako model</h2>
<p>By zrozumieć sens odziedziczalności (i podobnych tworów) w kontekście wyjaśniania wariancji, musimy najpierw powiedzieć sobie coś o tym, czym jest owa tajemnicza wariancja. Wykorzystamy do tego spreparowany zbiór danych nt. związku wielkości pająków z niepokojem odczuwanym przez obserwatorów<span class="citation" data-cites="field2012">(na podstawie: Field, Miles, &amp; Field, 2012)</span>. Wyobraźmy sobie, że wielkość pająka wyrażono na Międzynarodowej Skali Wielkości Pająków, zaś niepokój mierzono kwestionariuszowo. Dane zebrano w tabeli poniżej.</p>
<div class="cell" data-layout-align="center">
<div id="tbl-spiders" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-layout-align="center">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-spiders-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Tabela&nbsp;1: Wielkość pająka i niepokój, jaki wzbudza.
</figcaption>
<div aria-describedby="tbl-spiders-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<table class="table do-not-create-environment cell caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">wielkość pająka</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">niepokój</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">2</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">8</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">5</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">8</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: right;">12</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: right;">11</td>
</tr>
<tr class="odd">
<td style="text-align: right;">7</td>
<td style="text-align: right;">18</td>
</tr>
<tr class="even">
<td style="text-align: right;">8</td>
<td style="text-align: right;">16</td>
</tr>
</tbody>
</table>


</div>
</div>
</figure>
</div>
</div>
<p>Dla takich danych możemy policzyć całkiem sporo rzeczy. Łatwiej jest jednak zrozumieć dane, jak się je rzeczywiście widzi. Spróbujmy więc stworzyć wykres. Chcielibyśmy wiedzieć, jaki jest związek wielkości pająka z niepokojem, jaki wywołuje<sup>1</sup>.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div id="fig-scatter-anxiety" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-scatter-anxiety-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/procent-wariancji_files/figure-html/fig-scatter-anxiety-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-scatter-anxiety-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;1: Wielkość pająka i niepokój, jaki wzbudza, tyle że na wykresie.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Widzimy więc wyraźnie, że im większy pająk, tym większy lęk wywołuje. Ale z tym wnioskiem wybiegliśmy sporo w przyszłość. Zazwyczaj w pierwszym odruchu robimy coś znacznie prostszego – liczymy średnią. Średni niepokój wyniósł tutaj dokładnie 10. Szybkie spojrzenie w tabelę pozwala nam stwierdzić, że żaden badany takiego wyniku niepokoju nie uzyskał i niezbyt nas to dziwi. W końcu to tylko średnia, żaden prawdziwy wynik nie musi mieć dokładnie średniej wartości. Jak w znienawidzonym przez statystyków kawale o średniej liczbie nóg na spacerze z psem. Rozumiemy więc, że średnia tylko w pewnym przybliżeniu oddaje cały zbiór danych, a konkretne wartości mogą się od średniej mniej lub bardziej odchylać. Te odchylenia możemy nanieść na wykres.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div id="fig-scatter-anxiety-mean" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-scatter-anxiety-mean-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/procent-wariancji_files/figure-html/fig-scatter-anxiety-mean-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-scatter-anxiety-mean-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;2: Średnia to rodzaj modelu, czyli narzędzia do przewidywania danych. Żaden z naszych pająków nie wywoływał średniego niepokoju, każdy punkt ma większe lub mniejsze odchylenie od średniej.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Przerywane linie pokazują nam odchylenie każdego punktu od średniej (<em>residual</em>). Dla przykładu pierwszy punkt ma wartość niepokoju 2, więc jego odchylenie to <img src="https://latex.codecogs.com/png.latex?2%20-%2010%20=%20-8">. Dlaczego na minusie? Bo pierwszy punkt jest <strong>poniżej</strong> średniej, więc żeby przejść od średniej do wartości tego konkretnego punktu musimy wykonać <strong>odejmowanie</strong>. Inny przykład – ostatni punkt ma wartość niepokoju 15, więc jego odchylenie od średniej wynosi <img src="https://latex.codecogs.com/png.latex?15%20-%2010%20=%205">. Tutaj odchylenie jest już dodatnie, co ma sens, bo ostatni punkt jest <strong>powyżej</strong> średniej, więc żeby przesunąć się od wartości średniej do wartości tego punktu musimy <strong>dodawać</strong>. Jak widać, żeby policzyć odchylenie, wystarczy od wartości punktu odjąć średnią. Można zapisać to matematycznie:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AS_i%20=%20x_i%20-%20%5Cbar%20x%0A"></p>
<p>gdzie <img src="https://latex.codecogs.com/png.latex?S_i"> to odchylenie, <img src="https://latex.codecogs.com/png.latex?x_i"> to wartość konkretnego punktu, a <img src="https://latex.codecogs.com/png.latex?%5Cbar%20x"> to średnia. Pozioma kreska nad czymś zawsze oznacza średnią. Dla każdego punktu moglibyśmy policzyć takie odchylenie i dopisać sobie je do tabeli.</p>
<div class="cell" data-layout-align="center">
<div id="tbl-spider-residual" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-layout-align="center">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-spider-residual-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Tabela&nbsp;2: Każdy punkt ma swoje odchylenie od średniej, które możemy policzyć. Dodatnie odchylenia oznaczają, że wartość jest wyższa od średniej, a ujemne, że jest niższa.
</figcaption>
<div aria-describedby="tbl-spider-residual-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<table class="table do-not-create-environment cell caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">wielkość pająka</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">niepokój</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Si</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">2</td>
<td style="text-align: left;">2 - 10 = -8</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">8</td>
<td style="text-align: left;">8 - 10 = -2</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">5</td>
<td style="text-align: left;">5 - 10 = -5</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">8</td>
<td style="text-align: left;">8 - 10 = -2</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: right;">12</td>
<td style="text-align: left;">12 - 10 = 2</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: right;">11</td>
<td style="text-align: left;">11 - 10 = 1</td>
</tr>
<tr class="odd">
<td style="text-align: right;">7</td>
<td style="text-align: right;">18</td>
<td style="text-align: left;">18 - 10 = 8</td>
</tr>
<tr class="even">
<td style="text-align: right;">8</td>
<td style="text-align: right;">16</td>
<td style="text-align: left;">16 - 10 = 6</td>
</tr>
</tbody>
</table>


</div>
</div>
</figure>
</div>
</div>
<p>Średnia jest więc pewnym <strong>modelem</strong>, czyli służy nam jako uproszczony opis danych. Ponieważ modele są uproszczone, zawsze zawierają w sobie jakiś błąd. tym wypadku błędem jest po prostu odchylenie, które właśnie policzyliśmy.</p>
<p>Jakby ktoś zapytał mnie, jak duży niepokój wywołują pająki i uparł się, żeby podać mu jedną liczbę, to podałbym właśnie średnią. Dlaczego? Średnie mają tę niezwykłą właściwość, że starają się być tak bardzo na środku, tak blisko każdego punktu, jak to możliwe. Innymi słowy zwykła średnia daje nam mniejsze odchylenia niż jakakolwiek inna pojedyncza liczba. Dla przykładu, jakbyśmy stwierdzili sobie, że nie chcemy brać za model takiej brzydkiej liczby jak 10, a chcemy wziąć, powiedzmy, 15, to nagle okazałoby się, że odchylenia nam wzrosły. Obrazowo mówiąc, przerywane kreski na wykresie zrobiłyby się dłuższe.</p>
<p>Średnia gwarantuje mi, że pomylę się tak mało, jak to tylko możliwe, czyli że sumarycznie przerywane kreski na wykresie będą tak krótkie, jak się da. Średnia jest więc modelem niedoskonałym (bo ma błąd), ale lepszym niż jakakolwiek inna pojedyncza liczba (bo ma najmniejszy błąd).</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div id="fig-scatter-anxiety-15" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-scatter-anxiety-15-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/procent-wariancji_files/figure-html/fig-scatter-anxiety-15-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-scatter-anxiety-15-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;3: Modelem mogłaby być dowolna liczba, jeśli się uprzeć, ale żadna pojedyncza liczba nie będzie miała tak małych odchyleń, jak średnia.
</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="wariancja" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="wariancja"><span class="header-section-number">2</span> Wariancja</h2>
<p>Potrafimy policzyć odchylenie dowolnego punktu od średniej i wiemy, jak wyglądają te odchylenia na wykresie. Powiedziałem też, że sumarycznie średnia daje mniejsze odchylenia niż jakakolwiek inna liczba. Kusi więc, żeby odchylenia te rzeczywiście zsumować. W końcu w ten sposób wiedzielibyśmy, ile mamy błędu w modelu, czy jest go dużo, czy mało. Co więcej, poszczególne odchylenia różnią się między sobą. Fajnie więc by było policzyć średnią odchyleń. Takie średnie odchylenie powiedziałoby nam, czy ogólnie patrząc odchylenia są duże, czy niewielkie, a więc czy sama średnia jest blisko danych (dobrze je przybliża), czy może jest kompletnie od czapy (nie oddaje dobrze danych)<sup>2</sup>.</p>
<p>Skuszeni matematyczną perspektywą bierzemy kalkulator w dłoń, dodajemy do siebie wartości odchyleń (co ładnie, matematycznie możemy zapisać jako <img src="https://latex.codecogs.com/png.latex?%5Csum%20S_i">, bo wielka litera sigma znaczy po prostu dodawanie)<sup>3</sup> i bardzo się dziwimy, kiedy wychodzi nam 0. Ale jak 0? W końcu sumaryczne odchylenie nie może nam wyjść 0! Chcieliśmy jakiejś dużej liczby, która da nam ogólne pojęcie o tym, jak nasze dane odchylają się od średniej, a wychodzi nam 0, tak jakby w ogóle nie było żadnych odchyleń. Po chwili jednak orientujemy się dlaczego – część odchyleń jest dodatnich, a część ujemnych, to jak się je doda, to się zerują. No tak. A średnia (jak sama nazwa wskazuje) jest dokładnie pośrodku tych danych.</p>
<p>To w takim razie, jak chcemy dostać to nasze ogólne odchylenie, to musimy pozbyć się minusów. Moglibyśmy je po prostu zignorować (tzn. dodawać wartości bezwzględne odchyleń <img src="https://latex.codecogs.com/png.latex?%7CS_i%7C">), ale to by przecież by łoza proste. Statystycy, chcąc utrudnić wszystkim życie<sup>4</sup>, wybrali inny sposób na pozbywanie się minusów, czyli podnoszenie do potęgi drugiej. Minus razy minus daje plus, głosi szkolna formułka. Opanowujemy więc flashbacki z liceum, zaciskamy zęby, podnosimy odchylenia do kwadratu i znowu je do siebie dodajemy. Matematycznie wyrazilibyśmy to tak:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0ASS_T%20=%20%5Csum_%7Bi=1%7D%5EN%20S_i%5E2%20=%20%5Csum_%7Bi=1%7D%5EN%20(x_i%20-%20%5Cbar%20x)%5E2%0A"></p>
<p>Za tym przerażającym zapisem kryje się prosta idea – weź wszystkie odchylenia (a mamy ich <em>N</em>, bo tak się oznacza liczbę zebranych obserwacji) i dodaj je wszystkie po kolei, zaczynając od 1. i na <em>N</em>-tym (w naszym przypadku 8.) kończąc. Po znaku równa się przypominam, co właściwie oznaczaliśmy przez <img src="https://latex.codecogs.com/png.latex?S_i">, czyli obserwacja odjąć średnia do kwadratu. Jak to rzeczywiście zrobimy, wyjdzie nam 190,875. Niezbyt ładna liczba, ale daje więcej satysfakcji niż 0. Tę liczbę we wzorze nazwałem <img src="https://latex.codecogs.com/png.latex?SS_T">, co jest skrótem od <em>total sum of squares</em>, czyli <strong>całkowita suma kwadratów</strong>. Jak się zastanowić, to jest to niezła nazwa, bo od razu jest praktycznie wzorem.</p>
<p>Ale z całkowitą sumą kwadratów jest pewien problem. Siłą rzeczy, im będzie więcej obserwacji, tym ta liczba będzie większa, nawet jeśli odchylenia będą mniejsze. 100 ciężarówek z 50 paletami każda dadzą w sumie więcej towaru, niż 1 ciężarówka z 200 paletami. Suma ocen wzrasta z każdą oceną, mimo że średnia może nawet nie drgnąć. Ale możemy sobie z tym poradzić dość łatwo – po prostu zróbmy z tego średnią. Średnia to suma dzielona przez liczbę przypadków. <img src="https://latex.codecogs.com/png.latex?SS_T"> jest sumą kwadratów odchyleń (w tym miejscu tekstu należy się zatrzymać i upewnić się, że rozumie się wyrażenie „suma kwadratów odchyleń”), więc jak podzielimy ją przez liczbę obserwacji, to wyjdzie nam średnia z kwadratów odchyleń. Prawda? No prawie, bo to znowu byłoby za proste.</p>
<p>Nie rozwodząc się za bardzo, bo to też jest szeroki temat, zamiast dzielić <img src="https://latex.codecogs.com/png.latex?SS_T"> przez 8, musimy podzielić ją przez 7. Mówiąc w dużym skrócie, nas w badaniach obchodzi cała populacja. Badamy tylko (losową) próbę z tej populacji, ale tak naprawdę to o samej populacji chcemy wnioskować. Nie wystawiłem 8 osób na kontakt z dużymi i małymi pająkami, bo ciekawiły mnie te konkretne osoby, tylko dlatego, że chcę powiedzieć coś ogólnie o ludziach, o Polakach, o nastolatkach czy jakiejkolwiek innej interesującej mnie populacji. Jeśli podzielilibyśmy przez 8, to wyszłaby nam średnia, która jest prawdziwa dla tej konkretnej próby, ale prawie na pewno niższa, niż ta prawdziwa, populacyjna. Ale jak podzielimy przez 7, to będziemy znacznie, znacznie bliżej prawdziwym wartościom. To da się matematycznie udowodnić, ale bez przesady, nie wszystko naraz. Ta skorygowana liczba nazywa się <em>stopniami swobody</em> i dla średniej zawsze jest ich <img src="https://latex.codecogs.com/png.latex?N-1">. To będzie ogólnie problem w statystyce, że od czasu do czasu będziemy musieli dzielić przez stopnie swobody zamiast normalnie przez wielkość próby, żeby dostać bardziej wiarygodne liczby. Jeśli uczy się tego pierwszy raz, to można to <img src="https://latex.codecogs.com/png.latex?N-1"> przyjąć na wiarę, bo sama wariancja jest wystarczająco skomplikowana. Nie trzeba wszystkiego w pełni zrozumieć od razu.</p>
<p>Także jeśli chcemy uzyskać średnią kwadratów odchyleń, to bierzemy naszą całkowitą sumę kwadratów i dzielimy ją przez <img src="https://latex.codecogs.com/png.latex?N-1">. Tak jak średnią ocen liczymy dzieląc sumę ocen przez ich liczbę. Możemy to zapisać matematycznie na kilka sposobów:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma%5E2%20=%20%5Cfrac%7BSS_T%7D%7BN-1%7D%20=%20%5Cfrac%7B%5Csum%5EN_%7Bi%20=%201%7D%20S_i%5E2%7D%7BN-1%7D%20=%20%5Cfrac%7B%5Csum%5EN_%7Bi%20=%201%7D%20(x_i%20-%20%5Cbar%20x)%5E2%7D%7BN-1%7D%0A"></p>
<p>Spokojnie. To są tylko wzory, nie trzeba się ich bać. Każdy z tych trzech wzorów znaczy to samo i opiera się na tym, co już wiemy z poprzednich części tekstu. Tak naprawdę to ciągle wzór na <img src="https://latex.codecogs.com/png.latex?SS_T">, tylko teraz podzielony na <img src="https://latex.codecogs.com/png.latex?N-1">. Po pokonaniu pierwszego szoku można zacząć świętować! W ten sposób udało nam się wreszcie policzyć średnią kwadratów odchyleń (ponownie – trzeba się zatrzymać, upewnić się, że się rozumie, ewentualnie trochę się cofnąć i dopiero można iść dalej).</p>
<p>Trzeba przyznać, że „średni kwadrat odchylenia” albo „średnia z odchyleń podniesionych do potęgi drugiej” to nie są zbyt chwytliwe nazwy. Dlatego właśnie nazwano to <strong>wariancją</strong> i oznaczono przez <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2">. To jest mała grecka litera sigma. A dlaczego <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2"> a nie po prostu <img src="https://latex.codecogs.com/png.latex?%5Csigma">? Bo to średnia z <em>kwadratów</em> odchyleń. Jeśli byśmy chcieli wycofać się teraz z tej gmatwającej wszystko decyzji o podnoszeniu czegokolwiek do kwadratu i uzyskać upragnione średnie odchylenie, to możemy teraz wyciągnąć pierwiastek ze wzoru na wariancję, jaki nam przed chwilą wyszedł i który na pierwszy rzut oka może przytłaczać.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma%20=%20%5Csqrt%7B%5Cfrac%7BSS_T%7D%7BN-1%7D%7D%20=%20%5Csqrt%7B%5Cfrac%7B%5Csum%5EN_%7Bi%20=%201%7D%20S_i%5E2%7D%7BN-1%7D%7D%20=%20%5Csqrt%7B%5Cfrac%7B%5Csum%5EN_%7Bi%20=%201%7D%20(x_i%20-%20%5Cbar%20x)%5E2%7D%7BN-1%7D%7D%0A"></p>
<p>Każdy z tych wzorów znaczy ostatecznie to samo, więc można używać któregokolwiek. Ważne jest to, że wychodzi nam z tego średnie odchylenie, które nazywamy <strong>odchyleniem standardowym</strong> i które oznaczamy literą <img src="https://latex.codecogs.com/png.latex?%5Csigma"> lub skrótem <em>SD</em> (<em>standard deviation</em>). Odchylenie standardowe, jak już wyżej wspomniałem, mówi nam, czy średnia dobrze reprezentuje dane. Jeśli jest wysokie, to znaczy, że dane są mocno rozproszone (odchylenia są ogólnie duże) i sama średnia jest mało wiarygodna. Jeśli <em>SD</em> jest niewielkie, to średniej zasadniczo można zaufać. To jakie <em>SD</em> jest duże, a jakie małe, zależy od tego, co mierzymy. Dla średniej pensji <em>SD</em> = 10 uznalibyśmy za raczej niewielkie, ale takie samo odchylenie standardowe dla średniej liczby nóg takie małe już się nie wydaje. Także może i mamy średnio po 3 nogi jak wychodzimy z psem na spacer, ale ta średnia ma całą nogę odchylenia standardowego!</p>
<p>Podsumowując ten fragment:</p>
<ol type="1">
<li><p>Zauważyliśmy, że każdy punkt ma swoje większe lub mniejsze odchylenie od średniej.</p></li>
<li><p>Próbowaliśmy sumować te odchylenia, ale przeszkadzały nam minusy, więc przed sumowaniem podnosiliśmy nasze odchylenia do kwadratu, uzyskując w ten sposób całkowitą sumę kwadratów (<img src="https://latex.codecogs.com/png.latex?SS_T">).</p></li>
<li><p>Wykorzystaliśmy całkowitą sumę kwadratów do policzenia <strong>wariancji</strong> (średniej z kwadratów odchyleń) w taki sposób, że podzieliliśmy <img src="https://latex.codecogs.com/png.latex?SS_T"> przez <img src="https://latex.codecogs.com/png.latex?N-1"> (stopnie swobody). Nie mogliśmy podzielić <img src="https://latex.codecogs.com/png.latex?SS_T"> przez <img src="https://latex.codecogs.com/png.latex?N">, bo to zaniżyłoby prawdziwą wariancję w populacji.</p></li>
<li><p>Wyciągnęliśmy pierwiastek z wariacji, żeby wreszcie dostać średnie odchylenie, które nazywamy <strong>odchyleniem standardowym</strong>.</p></li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Zadanie
</div>
</div>
<div class="callout-body-container callout-body">
<p>Załóżmy, że powtórzyliśmy nasze badanie na kolejnych 8 osobach i otrzymaliśmy następujące wyniki kwestionariusza lęku:</p>
<p>5, 8, 8, 8, 5, 6, 5, 3</p>
<p>Nie przejmuj się na razie wielkością pająków. Policz wariancję i odchylenie standardowe tych danych.</p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Odpowiedź
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Csigma%5E2%20&amp;=%20%5Cfrac%7B%5Csum%5EN_%7Bi%20=%201%7D%20(x_i%20-%20%5Cbar%20x)%5E2%7D%7BN-1%7D%20%20=%20%5C%5C%0A&amp;=%20%5Cfrac%7B(5-6)%5E2%20+%20(8-6)%5E2%20+%20(8-6)%5E2%20+%20(8-6)%5E2%20+%20(5-6)%5E2%20+%20(6-6)%5E2%20+%20(5-6)%5E2%20+%20(3-6)%5E2%7D%7B8-1%7D%20=%20%5C%5C%0A&amp;=%20%5Cfrac%7B1%20+%204%20+%204%20+%204%20+%201%20+%200%20+%201%20+%209%7D%7B7%7D%20=%20%5C%5C%0A&amp;=%20%5Cfrac%7B24%7D%7B7%7D%20%5Capprox%203,43%0A%5Cend%7Baligned%7D%0A"> <img src="https://latex.codecogs.com/png.latex?%0A%5Csigma%20=%20%5Csqrt%7B3,43%7D%20%5Capprox%201,85%0A"></p>
</div>
</div>
</div>
</section>
<section id="średnia-to-nie-wszystko" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="średnia-to-nie-wszystko"><span class="header-section-number">3</span> Średnia to nie wszystko</h2>
<p>Wiemy już bardzo dokładnie czym jest wariancja i jaki ma związek ze średnią. Ale nie oszukujmy się, jesteśmy w stanie wymyślić lepsze modele niż średnia. Od samego początku korci nas, żeby na wykresie niepokoju od wielkości pająka narysować piękną, skośną, rosnącą linię, która będzie zależała nie tylko od wartości niepokoju, ale również od wielkości pająka. Przecież od razu widać, że pasowałaby do naszych danych znacznie bardziej.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div id="fig-scatter-anxiety-lm" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-scatter-anxiety-lm-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/procent-wariancji_files/figure-html/fig-scatter-anxiety-lm-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-scatter-anxiety-lm-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;4: Linia rosnąca sugeruje nam, że im większy pająk, tym większy niepokój wywołuje. Na pierwszy rzut oka widać, że odchylenia są mniejsze, niż przy średniej.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Od razu lepiej. Od początku chcieliśmy móc powiedzieć, że im większy pająk, tym większy niepokój, a teraz mamy tego dowód. W końcu ta linia ewidentnie pasuje do danych lepiej – na pierwszy rzut oka widać, że odchylenia są mniejsze. No właśnie! Dzięki łamaniu sobie głowy nad odchyleniami od średniej zyskaliśmy sposób na stwierdzenie, czy jakiś model jest lepszy od średniej, czy nie – wystarczy sprawdzić, czy odchylenia zrobiły się istotnie mniejsze.</p>
<p>Spróbujmy więc zrobić dla tych nowych odchyleń to samo, co zrobiliśmy dla odchyleń od średniej. Ponieważ samo wyznaczanie wartości tych odchyleń wymaga bardziej złożonych obliczeń ze wzoru na prostą, po prostu je podam (bo policzył je za mnie program statystyczny). Powiem tylko, że procedura jest identyczna, jak w przypadku liczenia <img src="https://latex.codecogs.com/png.latex?SS_T">, ale licząc odchylenia zamiast wartości średniej (która poprzednio była naszym modelem) odejmujemy wartość, którą przewiduje nasz nowy, lepszy model, a którą w tabeli oznaczyłem jako <img src="https://latex.codecogs.com/png.latex?x_M">. Podnosimy więc wartości odchyleń (oznaczone w tabeli <img src="https://latex.codecogs.com/png.latex?S_R">) do kwadratu, sumujemy i wychodzi nam w zaokrągleniu <img src="https://latex.codecogs.com/png.latex?SS_R%20=%2029,98">. <img src="https://latex.codecogs.com/png.latex?SS_R"> oznacza <em>residual sum of squares</em> i w gruncie rzeczy mówi nam o tych odchyleniach, które ciągle są, które nie zniknęły, mimo że nowy model jest lepszy.</p>
<div class="cell" data-layout-align="center">
<div id="tbl-lm-resid" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-layout-align="center">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-lm-resid-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Tabela&nbsp;3: Nowy model magicznie przewiduje niepokój z wielkości pająka (xM), ale nie robi tego doskonale. Tak jak dla średniej, możemy policzyć, jak wartość prawdziwa odchyla się od tej z modelu.
</figcaption>
<div aria-describedby="tbl-lm-resid-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<table class="table do-not-create-environment cell caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">wielkość pająka</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">niepokój</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">xM</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">SR</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">2</td>
<td style="text-align: left;">2,92</td>
<td style="text-align: left;">-0,92</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">8</td>
<td style="text-align: left;">4,94</td>
<td style="text-align: left;">3,06</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">5</td>
<td style="text-align: left;">6,96</td>
<td style="text-align: left;">-1,96</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">8</td>
<td style="text-align: left;">8,99</td>
<td style="text-align: left;">-0,99</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: right;">12</td>
<td style="text-align: left;">11,01</td>
<td style="text-align: left;">0,99</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: right;">11</td>
<td style="text-align: left;">13,04</td>
<td style="text-align: left;">-2,04</td>
</tr>
<tr class="odd">
<td style="text-align: right;">7</td>
<td style="text-align: right;">18</td>
<td style="text-align: left;">15,06</td>
<td style="text-align: left;">2,94</td>
</tr>
<tr class="even">
<td style="text-align: right;">8</td>
<td style="text-align: right;">16</td>
<td style="text-align: left;">17,08</td>
<td style="text-align: left;">-1,08</td>
</tr>
</tbody>
</table>


</div>
</div>
</figure>
</div>
</div>
<p>Możemy w pewnym sensie mówić o wariancji wokół średniej i wariancji wokół modelu<sup>5</sup>. Wariancja, niezależnie wokół czego, to suma kwadratów podzielona przez <img src="https://latex.codecogs.com/png.latex?N-1">, więc naturalnie musielibyśmy teraz <img src="https://latex.codecogs.com/png.latex?SS_T"> i <img src="https://latex.codecogs.com/png.latex?SS_R"> podzielić przez <img src="https://latex.codecogs.com/png.latex?N-1">. Jednak to, co chcę pokazać dalej, będzie łatwiejsze do zrozumienia, jeśli będziemy się posługiwać surowymi sumami kwadratów. Możemy więc zignorować dzielenie przez <img src="https://latex.codecogs.com/png.latex?N-1">. Jeśli ktoś mi nie ufa, to może robić to, co za moment zrobię, ale wcześniej podzielić nasze sumy kwadratów przez <img src="https://latex.codecogs.com/png.latex?N-1"> i gwarantuję, że wyjdzie mu to samo<sup>6</sup>.</p>
<p>Możemy więc spojrzeć na to w ten sposób – na początku mieliśmy 190,875 jednostek wariancji, a teraz, po dopasowaniu nowego modelu, mamy ich tylko 29,98. Dla wygody zaokrąglijmy te liczby do całości. Także cała różnica, <img src="https://latex.codecogs.com/png.latex?191%20-%2030%20=%20161">, gdzieś nam wyparowała. Ta wariancja była, a teraz nagle jej nie ma. O takiej wariancji możemy powiedzieć, że została <em>wyjaśniona</em> i możemy ją oznaczyć <img src="https://latex.codecogs.com/png.latex?SS_M"> od <em>model sum of squares</em>. Czyli stworzyliśmy nowy model, który pozwala nam przewidywać niepokój z wielkości pająka i w ten sposób wyjaśniliśmy jakąś część wariancji. Jaką? Coż, wystarczy to przeliczyć na procenty. Cała wariancja<sup>7</sup> wynosiła 191 jednostek, a wariacja wyjaśniona wyniosła 161 jednostek. Odsetek wariancji, który udało nam się wyjaśnić, oznaczamy <img src="https://latex.codecogs.com/png.latex?R%5E2"> i możemy go wyrazić w procentach<sup>8</sup>.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AR%5E2%20=%20%5Cfrac%7B161%7D%7B191%7D%5Ctimes%20100%5C%25%20=%2084,3%5C%25%0A"></p>
<p>Możemy więc powiedzieć, że wielkość pająka (bo nowy model przewiduje niepokój na podstawie wielkości pająka) wyjaśnia 84,3% wariancji niepokoju. Ludzie ciągle różnią się niepokojem w reagowaniu na pająki, ale odchylenia od nowego modelu są znacznie mniejsze. Ogólny wzór na <img src="https://latex.codecogs.com/png.latex?R%5E2"> wygląda więc tak<sup>9</sup>:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AR%5E2%20=%20%5Cfrac%7BSS_M%7D%7BSS_T%7D%20=%20%5Cfrac%7BSS_T%20-%20SS_R%7D%7BSS_T%7D%0A"></p>
<p>Moglibyśmy się pytać, co odpowiada za pozostałe 17,3% wariancji. Mogą to być dodatkowe czynniki, takie jak doświadczenia z pająkami w dzieciństwie albo uszkodzenia mózgu. To wymaga dalszych badań.</p>
<p>Możemy wyobrazić sobie, że pojawia nam się nowa osoba badana, która pająków nie boi się w ogóle, co pokazałem na wykresie. Jak to wpływa na nasz model?</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div id="fig-scatter-anxiety-lm2" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-scatter-anxiety-lm2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/procent-wariancji_files/figure-html/fig-scatter-anxiety-lm2-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-scatter-anxiety-lm2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;5: Nowa osoba badana, która nie boi się pająków wcale, nie przystaje do naszego modelu. Może to sugerować, że nasz model jest adekwatny tylko dla pewnej grupy osób (czyli możemy stworzyć bardziej złożony model, który weźmie to pod uwagę) albo że odważny badany kłamie (i powinien zostać wykluczony z bazy).
</figcaption>
</figure>
</div>
</div>
</div>
<p>Jak widzimy model się trochę pozmieniał. <img src="https://latex.codecogs.com/png.latex?R%5E2"> spadło dramatycznie, bo w tym drugim modelu wyniosło zaledwie 23,4%. Ale pojawienie się tego nowego, odważnego badanego nie zmieniło wyników pozostałych.</p>
<p>Tak samo jest z odziedziczalnością. Odziedziczalność mówi nam, jaką część różnic w populacji da się wyjaśnić czynnikami genetycznymi, ale nawet bardzo wysoka odziedziczalność nie mówi nam, jakie są biologiczne, genetyczne granice ludzkich możliwości rozwoju. Jeśli pojawi się zdeterminowana jednostka, to może ona wstrząsnąć naszym modelem albo, co ciekawsze, nie zrobić żadnej różnicy w modelu (jeśli próba byłaby odpowiednio duża)<sup>10</sup>. W takim wypadku model ciągle byłby bardzo adekwatny, wyjaśniałby bardzo dużo wariancji, a jednocześnie nie wykluczał istnienia jednostek, które całkowicie do niego nie przystają.</p>
<p>Dlatego właśnie odziedziczalność tej samej cechy może być różna w różnych populacjach albo zmieniać się w czasie – odziedziczalność, tak jak każdy model statystyczny, opisuje różnice tu i teraz, na poziomie populacji. Niestety (albo na szczęście) sama odziedziczalność nie może rozstrzygnąć, czy ja, konkretna jednostka, od urodzenia byłem skazany na bycie tak niskim. Może mi jednak powiedzieć, że czynniki genetyczne wyjaśniają 90% wariancji wzrostu w mojej populacji. Tylko teraz już wiem, co to znaczy.</p>
</section>
<section id="test-f" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="test-f"><span class="header-section-number">4</span> Test <em>F</em></h2>
<p>Moglibyśmy w tym momencie skończyć, ale skoro mamy wszystkie skróty powtórzone na świeżo, dobrze byłoby jeszcze jedną sprawę omówić. Wiedzę o tym, czym jest <img src="https://latex.codecogs.com/png.latex?SS_M"> i <img src="https://latex.codecogs.com/png.latex?SS_R"> (tzn. cała wariancja wyjaśniona przez model i cała wariancja niewyjaśniona przez model) możemy wykorzystać, do zrozumienia potężnej, uniwersalnej statystyki diagnostycznej – <img src="https://latex.codecogs.com/png.latex?F">. Najpierw wyjaśnię, jak to się liczy, a potem jak się to interpretuje.</p>
<p>Statystyka <img src="https://latex.codecogs.com/png.latex?F"> to stosunek (czyli wynik dzielenia) wariancji wyjaśnionej do wariancji niewyjaśnionej. Matematycznie możemy zapisać to tak:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AF%20=%20%5Cfrac%7BMS_M%7D%7BMS_R%7D%0A"></p>
<p>Moment. Dopiero akapit wyżej pisałem, że wariancja wyjaśniona to <img src="https://latex.codecogs.com/png.latex?SS_M">, a niewyjaśniona to <img src="https://latex.codecogs.com/png.latex?SS_R">, a teraz nagle piszę <img src="https://latex.codecogs.com/png.latex?MS_M"> i <img src="https://latex.codecogs.com/png.latex?MS_R">. Czy to podważa moją wiarygodność? Czy należy rzucić komputerem w proteście przeciw umowności matematyki? Nie. Bez przesady. <img src="https://latex.codecogs.com/png.latex?M"> znaczy średnia.</p>
<p>Przypominam – <img src="https://latex.codecogs.com/png.latex?SS_M"> i <img src="https://latex.codecogs.com/png.latex?SS_R"> to <strong>sumy</strong> kwadratów, tak jakbyśmy tylko zsumowali swoje oceny bez liczenia średniej. Do policzenia <img src="https://latex.codecogs.com/png.latex?F"> potrzebujemy nie <em>sum</em> kwadratów, a <em>średniego</em> kwadratu. Ponownie, średnią ocen liczymy dzieląc sumę ocen przez ich liczbę. Mamy już policzone sumy kwadratów <img src="https://latex.codecogs.com/png.latex?SS_M"> i <img src="https://latex.codecogs.com/png.latex?SS_R">, więc dzielimy je przez liczbę obserwacji. Uważnemu czytelnikowi zapaliła się właśnie w głowie lampka ostrzegawcza, bo pisałem przecież, że liczba przypadków jest zakłamana i nie można jej ufać. Nie pożyczamy jej pieniędzy. Ufać można stopniom swobody i przez nie powinniśmy podzielić. Już raz to zrobiliśmy, podzieliliśmy <img src="https://latex.codecogs.com/png.latex?SS_T"> przez stopnie swobody i nazwaliśmy to wariancją. Teraz tę samą logikę chcemy zastosować do <img src="https://latex.codecogs.com/png.latex?SS_R"> i <img src="https://latex.codecogs.com/png.latex?SS_M">.</p>
<p>Tylko pojawia się trudne pytanie – ile stopni swobody mają nasze <img src="https://latex.codecogs.com/png.latex?SS_M"> i <img src="https://latex.codecogs.com/png.latex?SS_R">? Już odpowiadam. Liczba stopni swobody dla <img src="https://latex.codecogs.com/png.latex?SS_M"> to liczba zmiennych niezależnych (w przykładzie z pająkami to 1, bo lęk przewidujemy tylko na podstawie wielkości pająka). Liczba stopni swobody dla <img src="https://latex.codecogs.com/png.latex?SS_R"> to liczba obserwacji – liczba zmiennych niezależnych – 1 (w naszym przypadku <img src="https://latex.codecogs.com/png.latex?8-1-1%20=%206">). I to trzeba po prostu wziąć na wiarę.</p>
<p>Także bierzemy nasze sumy kwadratów i robimy z nich średnie. <img src="https://latex.codecogs.com/png.latex?MS_M%20=%20%5Cfrac%7B160,895%7D%7B1%7D%20=%20160,895"> oraz <img src="https://latex.codecogs.com/png.latex?MS_R%20=%20%5Cfrac%7B29,98%7D%7B6%7D%20=%205">. Mając średnie możemy policzyć wartość naszej statystyki <img src="https://latex.codecogs.com/png.latex?F%20=%20%5Cfrac%7B160,895%7D%7B5%7D%20%5Capprox%2032">. Czad. Tylko co z tego?</p>
<p>Ta liczba, 32, informuje nas, że ilość wariancji wyjaśnionej przez model jest <em>32 razy większa</em> niż ilość wariancji niewyjaśnionej. Czyli że model więcej wyjaśnia niż nie wyjaśnia, bo wyjaśnia średnio 160,895 jednostek wariancji, a nie wyjaśnia średnio 5 jednostek wariacji. Dobry model ma co najmniej <img src="https://latex.codecogs.com/png.latex?F%20%3E%201">, bo – jak się zastanowić – wtedy właśnie więcej wyjaśnia, bo nie wyjaśnia<sup>11</sup>. Licznik jest większy niż mianownik. <img src="https://latex.codecogs.com/png.latex?SS_M%20%3E%20SS_R">. Jakby wyszło nam, że <img src="https://latex.codecogs.com/png.latex?F%20=%200,25">, to znaczyłoby to, że model jest fatalny, bo ma więcej (4 razy więcej!) błędu niż racji. W skrócie mówiąc – im większe <img src="https://latex.codecogs.com/png.latex?F">, tym lepiej, a <img src="https://latex.codecogs.com/png.latex?F%20%3E%201"> to absolutne minimum.</p>
</section>
<section id="postscriptum-jak-szybciej-liczyć-ssm" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="postscriptum-jak-szybciej-liczyć-ssm"><span class="header-section-number">5</span> <em>Postscriptum</em> – jak szybciej liczyć <em>SS<sub>M</sub></em></h2>
<p>Można zauważyć ciekawą rzecz związaną z obliczaniem <img src="https://latex.codecogs.com/png.latex?SS_M">. Jak się okazuje, <img src="https://latex.codecogs.com/png.latex?SS_M"> da się policzyć bez liczenia <img src="https://latex.codecogs.com/png.latex?SS_T"> i <img src="https://latex.codecogs.com/png.latex?SS_R">. <img src="https://latex.codecogs.com/png.latex?SS_M"> uzyskujemy, jeśli zignorujemy obserwacje i zsumujemy kwadraty różnic między średnią a nowym modelem. Zaznaczyłem te różnice na poniższym wykresie przerywanymi liniami.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div id="fig-scatter-anxiety-ssm" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-scatter-anxiety-ssm-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/procent-wariancji_files/figure-html/fig-scatter-anxiety-ssm-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-scatter-anxiety-ssm-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;6: <img src="https://latex.codecogs.com/png.latex?SS_M"> można szybciej policzyć za pomocą odchyleń modelu od średniej, czyli kresek między średnią wartościami przewidywanymi przez nasz nowy model.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Można to przetestować za pomocą danych z tabeli niżej. <img src="https://latex.codecogs.com/png.latex?x_M"> to wartość przewidywana przez model, a <img src="https://latex.codecogs.com/png.latex?S_M"> to różnica między modelem a średnim niepokojem. Podniesienie wartości <img src="https://latex.codecogs.com/png.latex?S_M"> do kwadratu i zsumowanie ich daje w wyniku nasze <img src="https://latex.codecogs.com/png.latex?SS_M">.</p>
<div class="cell" data-layout-align="center">
<div id="tbl-lm-ssm" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-layout-align="center">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-lm-ssm-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Tabela&nbsp;4: Podstawą do policzenia SSM mogą być odchylenia modelu od średniej SM. Trzeba je policzyć dla każdego punktu, podnieść do kwadratu i dodać.
</figcaption>
<div aria-describedby="tbl-lm-ssm-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<table class="table do-not-create-environment cell caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">wielkość pająka</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">niepokój</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">xM</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">SM</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">2</td>
<td style="text-align: left;">2,92</td>
<td style="text-align: left;">2,92 - 10 = -7,08</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">8</td>
<td style="text-align: left;">4,94</td>
<td style="text-align: left;">4,94 - 10 = -5,06</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">5</td>
<td style="text-align: left;">6,96</td>
<td style="text-align: left;">6,96 - 10 = -3,04</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">8</td>
<td style="text-align: left;">8,99</td>
<td style="text-align: left;">8,99 - 10 = -1,01</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: right;">12</td>
<td style="text-align: left;">11,01</td>
<td style="text-align: left;">11,01 - 10 = 1,01</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: right;">11</td>
<td style="text-align: left;">13,04</td>
<td style="text-align: left;">13,04 - 10 = 3,04</td>
</tr>
<tr class="odd">
<td style="text-align: right;">7</td>
<td style="text-align: right;">18</td>
<td style="text-align: left;">15,06</td>
<td style="text-align: left;">15,06 - 10 = 5,06</td>
</tr>
<tr class="even">
<td style="text-align: right;">8</td>
<td style="text-align: right;">16</td>
<td style="text-align: left;">17,08</td>
<td style="text-align: left;">17,08 - 10 = 7,08</td>
</tr>
</tbody>
</table>


</div>
</div>
</figure>
</div>
</div>
<p>Jest to jeszcze jeden sposób myślenia o <img src="https://latex.codecogs.com/png.latex?SS_M">, który może pojawić się w niektórych opracowaniach. Zgłębienie tego może dać nam nowy sposób myślenia o wariancji wyjaśnianej, ale nie jest konieczne, bo ostatecznie liczy nam to komputer. Rozumienie tego, jak działa <img src="https://latex.codecogs.com/png.latex?SS_M"> według poprzedniego sposobu (wariancja, która zniknęła, jak zmieniliśmy model ze średniej na jakiś inny) to i tak dużo i powinno wystarczyć.</p>
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img alt="Licencja Creative Commons" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>Ten utwór jest dostępny na <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">licencji Creative Commons Uznanie autorstwa-Użycie niekomercyjne-Na tych samych warunkach 4.0 Międzynarodowe</a>.</p>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">Bibliografia</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-field2012" class="csl-entry">
Field, A., Miles, J., &amp; Field, Z. (2012). <em>Discovering statistics using R</em>. Los Angeles London New Delhi Singapore Washington, DC: Sage.
</div>
<div id="ref-plomin2001" class="csl-entry">
Plomin, R., DeFries, J., McClearn, G., &amp; McGuffin, P. (2001). <em>Genetyka zachowania</em>. Warszawa: Wydawnictwo Naukowe PWN.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Przypisy</h2>

<ol>
<li id="fn1"><p>Wszystko, co napiszę dalej o średniej, mogłoby równie dobrze być pokazane na innym wykresie. To, że na oś poziomą wrzuciłem wielkość pająka wynika tylko ze względów estetycznych. Mógłbym te punkty rozrzucić losowo. Zauważ, że aż do podrozdziału <em>Średnia to nie wszystko</em> nie będę używał wielkości pająka w obliczeniach.↩︎</p></li>
<li id="fn2"><p>Uważny Czytelnik może zwrócić uwagę, że <em>de facto</em> się powtarzam. Skoro średnia <em>jest</em> modelem, to i suma odchyleń, i średnie odchylenie mówią nam o tym samym – ile błędu jest w modelu. Jest to prawda, bo informacja jest ta sama ale nieco inna perspektywa. Można porównać do to ocen – możemy policzyć sumę wszystkich swoich ocen, a możemy policzyć swoją średnią ocen. Suma ocen nie wydaje się szczególnie potrzebną informacją, oceny sumujemy zazwyczaj po to, by policzyć średnią, ale – jak się przekonamy – gdy mówimy o wariancji sama suma też może być użyteczna.↩︎</p></li>
<li id="fn3"><p>A będąc dokładniejszym, moglibyśmy zapisać <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi%20=%201%7D%5E8%20S_i">, co znaczy „zamiast <img src="https://latex.codecogs.com/png.latex?i"> napisz 1, potem 2, potem 3 itd. aż dojdziesz do 8 (bo tyle mamy obserwacji) i to wszystko do siebie dodaj” albo bardziej matematycznie <img src="https://latex.codecogs.com/png.latex?S_1+S_2+S_3+%E2%80%A6+S_8">.↩︎</p></li>
<li id="fn4"><p>Tak naprawdę mieli ku temu dobry, ale bardzo matematyczny powód. Kiedy podnosimy coś do kwadratu, to wychodzą nam na wykresach parabole, a jak wyciągamy wartość bezwzględną, to wykresy mają ostre czubki. Parabole mają tę przewagę nad ostrymi czubkami, że da się na nich wykonywać rachunek różniczkowy, a to się – wbrew pozorom! – przydaje, jak się wymyśla testy czy inne innowacje matematyczne.↩︎</p></li>
<li id="fn5"><p>Ale musimy pamiętać, że słowo <em>wariancja</em> bez żadnego uszczegółowienia zawsze odnosi się do wariancji wokół średniej.↩︎</p></li>
<li id="fn6"><p>Mogę udowodnić to ze wzoru, który wyprowadzam w dalszej części tekstu. Po kilku akapitach można tu wrócić i to przeanalizować.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AR%5E2%20=%20%5Cfrac%7B%5Cfrac%7BSS_M%7D%7BN-1%7D%7D%7B%5Cfrac%7BSS_T%7D%7BN-1%7D%7D%20=%20%5Cfrac%7BSS_M%7D%7B%5Ccancel%7BN-1%7D%7D%20%5Ctimes%20%5Cfrac%7B%5Ccancel%7BN-1%7D%7D%7BSS_T%7D%20=%20%5Cfrac%7BSS_M%7D%7BSS_T%7D%0A">↩︎</p></li>
<li id="fn7"><p>Powtórzę – cała wariancja to znaczy wariancja wokół średniej, bo średnia to najprostszy model, jaki da się dopasować do danych.↩︎</p></li>
<li id="fn8"><p>Ale, oczywiście, nie musimy. Ja osobiście nie lubię notacji z procentami, wolę pisać ułamki dziesiętne i w razie czego czytać je jak procenty. Ale to kwestia gustu.↩︎</p></li>
<li id="fn9"><p>Tak naprawdę <img src="https://latex.codecogs.com/png.latex?SS_M"> da się policzyć bezpośrednio, bez liczenia <img src="https://latex.codecogs.com/png.latex?SS_T"> i <img src="https://latex.codecogs.com/png.latex?SS_R">, co pokazuję w <em>postscriptum</em>.↩︎</p></li>
<li id="fn10"><p>Gdy Bill Gates wchodzi do pubu, średnia pensja (i jej odchylenie standardowe!) osób w pubie nagle dramatycznie skacze, mimo że nikt ze zgromadzonych nie czuje się bogatszy. Niemniej sam jeden Bill Gates nie miałby tak wielkiego wpływu na średnią pensję wszystkich mieszkańców Polski. Tak samo jedna piątka nie zmieni za bardzo średniej z 20 ocen, ale może całkowicie zmienić średnią z 3 ocen. Modele oparte o dużą liczbę obserwacji są więc stabilniejsze.↩︎</p></li>
<li id="fn11"><p>Tak naprawdę potrzeba nam sporo więcej niż 1, żeby uznać model na wiarygodny. Statystyka <img src="https://latex.codecogs.com/png.latex?F"> musi <em>istotnie</em> odchylać się od 1. Musimy mieć co najmniej 95% pewności, że <img src="https://latex.codecogs.com/png.latex?F"> jest większe od 1. Ale prawdopodobieństwo trudno się liczy, zależy od liczby obserwacji i w ogóle bez sensu się tym zajmować, bo program statystyczny nam to pokaże.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Statystyka</category>
  <guid>https://nieobliczalne.pl/posts/procent-wariancji.html</guid>
  <pubDate>Wed, 18 May 2022 22:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/procent-wariancji.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Pamięć w służbie ucznia</title>
  <dc:creator>Jakub Jędrusiak</dc:creator>
  <link>https://nieobliczalne.pl/posts/uczenie-sie.html</link>
  <description><![CDATA[ 




<p>Ten tekst oryginalnie miał być częścią publikacji pokonferencyjnej, która nigdy się nie ukazała, dlatego jest napisany bardziej formalnie niż inne teksty tutaj zebrane.</p>
<section id="wprowadzenie" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Wprowadzenie</h1>
<p>Obserwator rzeczywistości polskiej szkoły może zauważyć niepokojące, coraz powszechniejsze zjawisko wypalenia szkolnego wśród uczniów, u podstaw którego leży m.in. nadmierne obciążenie materiałem <span class="citation" data-cites="cymerman_syndrom_2017">(Cymerman &amp; Tomaszek, 2017)</span>. Systemowe zmniejszenie tego obciążenia, jakkolwiek pożądane, nie może zostać przeprowadzone przez pojedynczego nauczyciela, który zajęcia prowadzi zgodnie z podstawą programową. Sądzę jednak, że istnieją sposoby, które mogłyby pozwolić ograniczyć siłę wypalenia, a których wdrożenie do praktyki edukacyjnej zależy w całości od ucznia. Nie jest w końcu możliwe, jak wskazuje Leitner <span class="citation" data-cites="leitner_naucz_1972">(1972)</span>, by nauczyciel wlał uczniowi wiedzę do głowy, przyswojenie materiału jest, według tego autora, zadaniem ucznia. Takie też założenie przyjmuję tutaj.</p>
<p>Leitner <span class="citation" data-cites="leitner_naucz_1972">(1972)</span> określa zadania nauczyciela, a wśród nich przedstawienie uczniowi skutecznych metod uczenia się. Uważa to również za zadanie najbardziej zaniedbane. Pomimo, że jest to opinia wyrażona ponad pół wieku temu, uważam, że w polskiej szkole XXI wieku jest ona ciągle aktualna. Daleki jednak jestem od wysuwania oskarżeń w kierunku nauczycieli – niewątpliwie jest to zadanie trudne. Dające się znaleźć w Internecie (czy nawet w przeznaczonych specjalnie dla uczniów materiałach) porady są często bardzo trudne do zastosowania, wzajemnie się wykluczające się czy wręcz utrudniające proces nauki. Sądzę, że wyposażenie uczniów w skuteczne techniki uczenia się, może nie tylko zwiększyć ich długoterminową skuteczność, która jest kluczowa w systemie edukacji opartym o egzaminy, ale także zmniejszyć ryzyko wypalenia szkolnego.</p>
<p>W tym artykule staram się stworzyć definicję technik uczenia się, przytaczam ogólne prawidłowości, na których powszechnie opierają się konkretne techniki oraz trzy takie techniki omawiam – pałac pamięci (metodę miejsc; <em>loci</em>), metodę Feynmana oraz fiszki elektroniczne z wykorzystaniem programu Anki. Zaczniemy od refleksji na temat definicji technik uczenia się.</p>
<section id="czym-są-techniki-uczenia-się" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="czym-są-techniki-uczenia-się"><span class="header-section-number">1.1</span> Czym są techniki uczenia się?</h2>
<p>W swojej definicji technik uczenia się nawiązuję do koncepcji taksonomii Blooma <span class="citation" data-cites="bloom_taxonomy_1956">(1956)</span>, czyli klasyfikacji celów nauczania. Pojęcie „technik uczenia się” często utożsamiane jest z pojęciem „mnemotechnik”. Nie mniej mnemotechniki odnoszą się wyłącznie do pierwszego elementu taksonomii, tj. zapamiętywania. Rzeczywiście, takie metody jak pałac pamięci nie mają na celu zwiększenia zrozumienia, zdolności wykorzystywania, analizy, syntezy czy ewaluacji informacji, jednak moja analiza wskazuje, że istnieją techniki, jak omówiona niżej metoda Feynmana, które największy nacisk kładą na cele inne niż zapamiętywanie. Dlatego też proponuję następującą definicję:</p>
<p><strong>Techniki uczenia się</strong> – usystematyzowane działania dążące do zwiększenia poziomu zapamiętywania, rozumienia, zdolności wykorzystywania, analizy, syntezy i/lub ewaluacji informacji, oparte na wiedzy na temat procesów poznawczych człowieka.</p>
<p>Chcielibyśmy zwrócić uwagę na trzy elementy tej definicji.</p>
<p>Techniki uczenia się muszą być usystematyzowane. Tym samym nie włączam w zakres tego pojęcia „luźnych porad” w rodzaju „przed nauką zjedz lekki posiłek”, gdyż (jakkolwiek może być to korzystne) nie wpływa bezpośrednio na realizację celów postawionych przez Blooma. Tym samym, każda technika uczenia się musi dać się ująć w postaci konkretnej instrukcji.</p>
<p>Drugi element to omówione wyżej odwołanie do taksonomii Blooma, i w konsekwencji rozszerzenie pojęcia technik uczenia się w stosunku do mnemotechnik. W tym kontekście, mnemotechniki można zdefiniować jako te techniki uczenia się, których głównym celem jest zwiększenie poziomu zapamiętywania.</p>
<p>Trzecim elementem jest odniesienie pojęcia technik uczenia się do wiedzy empirycznej. Jest to o tyle ważne, że (jak zostało wspomniane) funkcjonuje wiele mitów, pseudonaukowych tez bez potwierdzenia w empirii, które wielokrotnie powielane, zostały powszechnie przyjęte nawet w szkołach. Przykładem takiego mitu jest, że uczyć należy się zawsze w tym samym miejscu, podczas gdy badania <span class="citation" data-cites="smith_environmental_1978">(np. Smith, Glenberg, &amp; Bjork, 1978)</span> sugerują, że to właśnie zmiana miejsca nauki może być korzystna dla przyswajania informacji.</p>
</section>
<section id="sec-skutecznosc" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="sec-skutecznosc"><span class="header-section-number">1.2</span> Skuteczność technik uczenia się w kontekście systemu egzaminacyjnego</h2>
<p>Jak wskazują Soderstrom i Bjork <span class="citation" data-cites="soderstrom_learning_2015">(2015)</span>, inne techniki uczenia się są skuteczne w perspektywie krótko- i długoterminowej. W tym kontekście przeanalizujemy teraz potencjalną wartość stosowana usystematyzowanych technik uczenia się w porównaniu do metod stosowanych przez uczniów. Jest to o tyle istotne, że nauczanie w szkołach publicznych opiera się w dużej mierze na dwóch typach metod sprawdzania wiedzy – sprawdzianach i egzaminach.</p>
<p>Sprawdziany to formy obejmujące mniejsze partie materiału. Co do zasady, uczeń jest w stanie powtórzyć całość wymaganego materiału „zarywając nockę” bezpośrednio przed sprawdzianem (a często jest nawet w stanie nauczyć się go od podstaw). Ze względu na rozpowszechnienie tej praktyki (w którym swój udział ma także wspomniane wyżej przeciążenie ucznia), uczeń będzie stosował i uważał za skuteczne metody raczej krótkoterminowe. Egzaminy (ósmoklasisty i matura) obejmują znacznie większą partię materiału – uczeń nie jest w stanie powtórzyć wszystkiego, czego nauczył się w przeciągu całej swojej dotychczasowej edukacji w jedną noc, tydzień, czy nawet miesiąc.</p>
<p>Analiza Willinghama <span class="citation" data-cites="willingham_strategies_2014">(2014)</span> wskazuje na istnienie pewnej konkretnej techniki uczenia się, która dominuje pośród uczniów. Składa się na nią (1) uważne czytanie literatury, (2) podkreślanie lub zaznaczanie co ważniejszych fragmentów tekstu, (3) nierobienie nic aż do egzaminu i (4) powtórne czytanie literatury, tym razem przykładając szczególną uwagę do tekstu uprzednio zaznaczonego. Metoda prosta i intuicyjna, cechuje się wysoką skutecznością krótkoterminową [74%; <span class="citation" data-cites="dunlosky_practice_2015">Dunlosky &amp; Rawson (2015)</span>], ale niską skutecznością długoterminową (29%; <em>ibidem</em>). Wynik na granicy progu zdawalności matury (który wynosi 30%) zwykle nie jest dla ucznia satysfakcjonujący.</p>
<p>Wyżej przywołane badania związane są z działaniami podejmowanymi przez ucznia i nie uwzględniają wpływu nauczyciela na proces uczenia się.</p>
</section>
<section id="co-zapamiętujemy-najlepiej" class="level2" data-number="1.3">
<h2 data-number="1.3" class="anchored" data-anchor-id="co-zapamiętujemy-najlepiej"><span class="header-section-number">1.3</span> Co zapamiętujemy najlepiej?</h2>
<p>Podam teraz kilka ogólnych prawidłowości skutecznego zapamiętywania a także rolę powtórek i analogii w procesie uczenia się. Następnie poddam krytyce częstą praktykę uczenia się za pomocą bezrefleksyjnego przepisywania z tablicy.</p>
<p>Zimbardo, Johnson i McCann <span class="citation" data-cites="zimbardo_psychologia_2017">(2017, s. 155)</span> stwierdzają, że „tworzymy najpełniejsze i najwierniejsze zapisy pamięciowe dla:</p>
<ul>
<li>Informacji, na której skupiliśmy uwagę, jak w przypadku słów wypowiadanych przez przyjaciela na tle rozmowy innych osób.</li>
<li>Informacji, którą jesteśmy zainteresowani, jak akcja ulubionego filmu.</li>
<li>Informacji, która pobudza nas emocjonalnie, jak szczególnie radosne lub ciężkie doświadczenia (…).</li>
<li>Informacji, która wiąże się z wcześniejszym doświadczeniem, jak w przypadku owych danych na temat dzieciństwa muzyka, na którego koncercie byliśmy w zeszłym tygodniu.</li>
<li>Informacji, którą powtarzamy, jak materiał przeglądany przed egzaminem.”</li>
</ul>
<p>Ponadto, wymieniają oni dwa rodzaje powtarzania – utrzymujące i opracowujące [elaboracja; <span class="citation" data-cites="zimbardo_psychologia_2017">Zimbardo i in. (2017)</span>]. Zasadniczą różnicą pomiędzy tymi dwoma jest dokonywanie zmian w utrzymywanych w pamięci informacjach. Przy powtarzaniu utrzymującym, informacje nie ulegają żadnym zmianom, podczas gdy powtarzanie opracowujące zakłada poznawcze zniekształcanie informacji. Głębokość przetworzenia przekłada się na skuteczność zapamiętywania – im dana informacja zostanie bardziej przetworzona, tym skuteczniejsze będzie zapamiętywanie <span class="citation" data-cites="craik_levels_1972">(np. Craik &amp; Lockhart, 1972)</span>.</p>
<p>Dobrym sposobem opracowywania informacji jest tworzenie analogii <span class="citation" data-cites="halpern_analogies_1990">(Halpern, Hansen, &amp; Riefer, 1990)</span>. Łączą to, co już uczeń wie lub potrafi sobie wyobrazić z informacjami nowymi i abstrakcyjnymi. Za przykład możemy przywołać porównanie elektronów na powłokach elektronowych do piłeczki na schodach. Tak jak piłeczka może wylądować na pierwszym, drugim, trzecim schodku, tak nigdy nie zatrzyma się pomiędzy schodkami. Tak samo elektron może mieć różną energię, ale zawsze będzie na jakiejś powłoce, nigdy pomiędzy <span class="citation" data-cites="campbell_biologia_2016">(na podstawie: Campbell i in., 2016)</span>. Tworzenie analogii pomaga także rozwijać zdolności twórczego myślenia <span class="citation" data-cites="szmidt_abc_2019">(Szmidt, 2019)</span>.</p>
<div id="fig-analogia" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-analogia-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/ilustracje/uczenie-sie/rysunek-1.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-analogia-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;1: Analogia – przykład opracowywania informacji (© OpenStax na licencji CC BY 4.0)
</figcaption>
</figure>
</div>
</section>
<section id="przepisywanie-jako-metoda-prowadzenia-notatek" class="level2" data-number="1.4">
<h2 data-number="1.4" class="anchored" data-anchor-id="przepisywanie-jako-metoda-prowadzenia-notatek"><span class="header-section-number">1.4</span> Przepisywanie jako metoda prowadzenia notatek</h2>
<p>Konsekwencją konieczności opracowywania materiałów jest niski poziom trwałego zapamiętywania informacji przepisywanych w niezmienionej formie. Mimo to, bezrefleksyje przepisywanie z tablicy lub prezentacji jest w szkołach częstą praktyką. Jak podaje Piolat <span class="citation" data-cites="piolat_prise_2001 piolat_mesure_2003 piolat_cognitive_2005">(2001; Piolat, Roussey, &amp; Barbier, 2003; za: Piolat, Olive, &amp; Kellogg, 2005)</span> intensywne przepisywanie może skutkować przesunięciem zasobów pamięci operacyjnej z poznawczego przetwarzania tekstu (lub słów wypowiadanych przez nauczyciela) na sam akt pisania. Dzięki temu uczeń da radę przepisać nawet całą prezentację, ale nie będzie wiedział, co właściwie przepisał.</p>
<p>Problemu tego łatwo jest uniknąć poprzez udostępnianie uczniom prezentacji lub innych materiałów dydaktycznych. Nie sugeruję, że zawsze jest to najlepsze rozwiązanie – celem prezentacji multimedialnej często nie jest przekazanie jakichkolwiek informacji, których nie byłoby w literaturze (często prezentacje multimedialne składają się w dużej mierze z cytatów i rycin zaczerpniętych właśnie z podręcznika), a jedynie merytoryczne wsparcie prowadzącego lekcję. Biorąc jednak pod uwagę ograniczoną pojemność pamięci operacyjnej, stoję na stanowisku, że jeśli uczniowie znaczącą część zajęć spędzają na przepisywaniu już opracowanego tekstu, należy albo udostępnić im materiały z lekcji, albo napomnieć, że mają już do nich dostęp w literaturze.</p>
</section>
</section>
<section id="pałac-pamięci" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Pałac pamięci</h1>
<p>Pałac pamięci (nazywamy też metodą miejsc lub metodą loci) to starożytna technika uczenia się, zwiększająca ilość zapamiętywanych informacji. Jej legendarne początki związane są z postacią Symonidesa z Keos, który przebywając na uczcie, miał wyjść z budynku bezpośrednio przed jego zawaleniem. Później, miał on pomóc zidentyfikować ciała gości pogrzebanych pod gruzami poprzez przypominanie sobie, w którym miejscu stołu siedział każdy z nich <span class="citation" data-cites="cyceron_oratore_2001">(Cyceron, 2001)</span>.</p>
<p>Jako metoda pałac pamięci stosowany jest do dzisiaj, w tym bardzo powszechnie wśród tzw. mnemonistów, czyli ludzi będących w stanie zapamiętywać duże ilości informacji w krótkim czasie <span class="citation" data-cites="maguire_routes_2003">(Maguire, Valentine, Wilding, &amp; Kapur, 2003)</span>.</p>
<section id="skuteczność" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="skuteczność"><span class="header-section-number">2.1</span> Skuteczność</h2>
<p>Skuteczność metody miejsc została wielokrotnie udowodniona eksperymentalnie <span class="citation" data-cites="roediger_effectiveness_1980">(np. Roediger, 1980)</span>, również w zapamiętywaniu skomplikowanych koncepcji <span class="citation" data-cites="qureshi_method_2014">(Qureshi, Rizvi, Syed, Shahid, &amp; Manzoor, 2014)</span>. Pośrednio o skuteczności metody świadczy jej wiek, bowiem stosowana jest od co najmniej dwóch tysięcy lat <span class="citation" data-cites="cyceron_oratore_2001">(Cyceron, 2001)</span>. Jako metoda intrapsychiczna, stanowi ona pewien wysiłek – gdyby „zwykłe powtarzanie” było skuteczniejsze i jednocześnie wymagało mniejszych nakładów energii, pałac pamięci prawdopodobnie zostałby przez ludzkość porzucony, gdyż nie byłby warty energii, jaką trzeba na jego budowę poświęcić. Inny pośredni dowód wynika z badania Grossa i współpracowników <span class="citation" data-cites="gross_older_2014">(2014)</span>, zgodnie z którym 25% dorosłych badanych nauczonych metody pałacu pamięci po 5 latach od kursu deklarowała, że korzysta z niej w dalszym ciągu.</p>
<p>Podczas prowadzonych pilotażowo przez Stowarzyszenie Evviva l’arte w I Liceum Ogólnokształcącym im. Juliusza Słowackiego w Oleśnicy zajęć z technik uczenia się, zachęcałem uczniów do przetestowania metody na sobie, proponując podjęcie próby zapamiętania nazw dwunastu nerwów czaszkowych. Informacje zwrotne, jakie otrzymałem, świadczą, że uczniowie zaskoczeni są skutecznością, z jaką udało im się przypomnieć listę po zaledwie kilku minutach myślenia. Zauważają także, że przypominanie sobie przy zastosowaniu metody miejsc jest nie tylko skuteczniejsze, ale i łatwiejsze. Jedna z uczestniczek zajęć, 16-letnia uczennica klasy pierwszej (po gimnazjum) stwierdziła „Nie musiałam się wysilać, żeby sobie przypomnieć. Po prostu leciało.” Nadmienię, że sesja przypominania nie następuje na tych zajęciach bezpośrednio po nauce. Pomiędzy nauką a „kartkówką” omawiamy metodę Feynmana, czym absorbuje się uwagę uczniów, dzięki czemu nie mogą oni powtarzać podtrzymująco listy nerwów.</p>
</section>
<section id="instrukcja" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="instrukcja"><span class="header-section-number">2.2</span> Instrukcja</h2>
<p>Pierwszym krokiem w korzystaniu z pałacu pamięci jest wytworzenie skojarzeń. Już samo tworzenie skojarzeń, jako forma elaboracji, pozwala na zwiększenie poziomu zapamiętywania informacji <span class="citation" data-cites="atkinson_application_1975">(Atkinson &amp; Raugh, 1975)</span>. Dobre skojarzenia powinny przetwarzać oryginalną informację (np. przy zapamiętywaniu listy zakupów, majonezu nie powinien reprezentować rzeczywisty majonez, a na przykład wizja kury w donicy z rzepakiem) i pobudzać emocjonalnie <span class="citation" data-cites="zimbardo_psychologia_2017">(Zimbardo i in., 2017)</span>. Jako relatywnie łatwy sposób stworzenia symboli zawierających ładunek emocjonalny można wskazać (1) tworzenie symboli zabawnych lub (2) nawiązujących do seksualności człowieka. Dzięki tzw. efektowi odniesienia do ja, lepiej będą zapamiętane także informacje odniesione do samego siebie (<span class="citation" data-cites="rogers_self-reference_1977">Rogers, Kuiper, &amp; Kirker (1977)</span> za: <span class="citation" data-cites="wojciszke_psychologia_2019">Wojciszke (2019)</span>).</p>
<p>Drugim krokiem jest wybór znanego miejsca lub drogi z jednego miejsca do drugiego i umieszczenie tam uprzednio skonstruowanych symboli. Prawdopodobnie pozwala to na wykorzystanie podwójnej funkcji hipokampu, który związany jest z tworzeniem wspomnień oraz pamięcią przestrzenną <span class="citation" data-cites="maguire_routes_2003">(Maguire i in., 2003)</span>. Jeśli symbole umieszcza się w pomieszczeniu, sugeruję umieszczanie i odczytywanie ich zawsze w tej samej kolejności, tzn. np. zgodnie z ruchem wskazówek zegara.</p>
<p>W końcu – przypominanie sobie polega na wyobrażeniu sobie miejsca, w którym wcześniej umieszczono symbole. By lepiej zobrazować, jak można praktycznie wykorzystać metodę pałacu pamięci, omówię ją na przykładzie.</p>
</section>
<section id="przykład" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="przykład"><span class="header-section-number">2.3</span> Przykład</h2>
<p>Agnieszka, uczennica liceum, musi nauczyć się na biologię nazw 12 nerwów czaszkowych, tj. węchowy, wzrokowy, bloczkowy, okoruchowy, trójdzielny, odwodzący, twarzowy, przedsionkowo-ślimakowy, językowo-gardłowy, błędny, dodatkowy i podjęzykowy <span class="citation" data-cites="wozniak_anatomia_2003">(Woźniak, 2003)</span>. Jest to lista nazw, których musi się „po prostu” nauczyć na pamięć, przez co wybiera metodę pałacu pamięci.</p>
<p>Najpierw Agnieszka musi wybrać miejsce lub drogę, które jest w stanie odtworzyć z pamięci. Wybiera drogę z przystanku autobusowego do szkoły, ponieważ chodzi tamtędy codziennie i jest ona dla niej łatwa do wyobrażenia.</p>
<p>Następnie, na podstawie listy nerwów, Agnieszka musi stworzyć symboliczne reprezentacje każdej nazwy. Pierwszy jest nerw węchowy, więc wyobraża sobie swoją polonistkę, która w szkole znana jest ze swojego wielkiego nosa. Polonistkę tę (z groteskowo powiększonym nosem) wyobraża sobie pod wiatą przystankową, jako siedzącą na ławce z podręcznikiem i wykrzykującą nazwy epok literackich do przechodniów.</p>
<p>Kolejny nerw, wzrokowy, Agnieszka wyobraża sobie jako dziecko, które trzyma olbrzymi balon w kształcie gałki ocznej. Umieszcza je przy słupie ogłoszeniowym, który jest niedaleko jej przystanku. Nie jest on bardzo oddalony od wiaty przystankowej, ale wystarczająco daleko, by reprezentacja nerwu wzrokowego była wyraźnie oddzielona od reprezentacji nerwu węchowego. Aby wzmocnić ślad pamięciowy, Agnieszka wyobraża sobie, że dziecko pozbawione jest własnych oczu i kieruje głowę ku plakatowi z napisem „Wielki Brat patrzy”. Podobny proces stosuje dla każdego kolejnego nerwu.</p>
<p>Symbole Agnieszki są silnie przekształcone – nie są na przykład nazwami nerwów zapisanymi na tabliczkach. Ponadto, są bardzo wyraziste i emocjonalnie pobudzające – obraz krzyczącej polonistki jest dla niej zabawny, a pozbawione oczu dziecko to wizja, którą odbiera jako makabryczną, kojarzoną z horrorem. Sądzimy, że uczniowie powinni mieć pozostawioną pełną dowolność w konstruowaniu symboli, a ich treść powinna pozostać ich prywatną sprawą. W końcu – Agnieszka wykorzystuje efekt odniesienia do ja. Część (niekoniecznie wszystkie) reprezentacji nerwów odnosi się wprost do niej: polonistki nie są powszechnie znane z wielkich nosów, jednak dla Agnieszki jest to cecha charakterystyczna jej własnej nauczycielki, natomiast z hasłem „Wielki Brat patrzy” Agnieszka jest o tyle związana, że <em>Rok 1984</em> Orwella uznaje za swoją ulubioną książkę.</p>
<p>Jakiś czas po skonstruowaniu pałacu pamięci, Agnieszka chce sprawdzić swoją wiedzę. Wyobraża sobie więc, jak wysiada z autobusu i dostrzega swoją polonistkę z karykaturalnie wielkim nosem, wykrzykującą słowo „Rokoko”, co interpretuje jako nerw węchowy. Przechodząc w wyobraźni drogę do szkoły, nazywa kolejne nerwy. Pomija jednak nerw trójdzielny, który wyobraziła sobie, jako pas ruchu, z którego można skręcić w prawo, w lewo lub jechać prosto. Ma niejasne wrażenie, że „coś tu było”, ale nie potrafi sobie przypomnieć, co konkretnie. Po sprawdzeniu w literaturze, zamienia ten symbol na bardziej wyrazisty – wyobraża sobie trzy osoby, które stoją w kółku trzymając się za ręce. Jest to przewodniczący jej ulubionej partii, sędzia z paradokumentu, który Agnieszka ogląda z mamą i królowa Elżbieta II. W ten sposób kojarzy nazwę nerwu trójdzielnego z trójpodziałem władzy, o którym uczyła się na wiedzy o społeczeństwie.</p>
</section>
</section>
<section id="metoda-feynmana" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Metoda Feynmana</h1>
<p>Metoda Feynmana to szczególny sposób elaboracji informacji, przypisywany wybitnemu amerykańskiemu fizykowi Richardowi Feynmanowi <span class="citation" data-cites="young_never_2011">(Young, 2011)</span>. Pozwala ona na zrozumienie skomplikowanych koncepcji, łatwe wykrycie przez ucznia których elementów teoretycznych nie zrozumiał, a także nie pozwala na wykorzystywanie powtarzania utrzymującego, dzięki czemu zwiększa głębokość przetwarzania.</p>
<p>Podstawą teoretyczną dla metody Feynmana może być koncepcja uczenia się przez nauczanie (<em>Lernen durch Lehren</em>, LdL), stworzona przez Jean-Paula Martina i oparta na założeniu, że uczenie innych zwiększa efektywność edukacji własnej <span class="citation" data-cites="grzega_didactic_2008">(Grzega &amp; Schöner, 2008)</span>. Koncept, oryginalnie stworzony do stosowania w klasach, okazuje się skuteczny, co potwierdzają badania <span class="citation" data-cites="aslan_is_2015">(np. Aslan, 2015)</span>. Anegdotycznie mogę dodać, że koncepcje, o których coś pisałem, rozumiem znacznie lepiej. Badania nieosadzone w koncepcji LdL również wskazują na skuteczność uczenia się przez nauczanie <span class="citation" data-cites="cloward_studies_1967">(np. Cloward, 1967)</span>. Tym samym, pomimo braku badań określających skuteczność metody Feynmana <em>per se</em>, opiera się ona na silnych przesłankach teoretycznych.</p>
<section id="instrukcja-1" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="instrukcja-1"><span class="header-section-number">3.1</span> Instrukcja</h2>
<p>Pierwszym krokiem jest wybranie zagadnienia. Ponieważ głównym celem metody Feynmana jest zwiększenie zrozumienia materiału, nie ma ona zastosowania w nauce typowo pamięciowej (np. uczenie się słownictwa w obcym języku) ani w nauce umiejętności (np. pisanie rozprawek). Przykładem zastosowania, który omawiam w dalszej części artykułu, jest zrozumienie mechanizmów warunkowania klasycznego. Innymi przykładami mogą być mechanizmy fotosyntezy czy opis przyczyn, przebiegu i skutków rewolucji październikowej. Gdy uczeń skończy zapoznawać się z literaturą poświęconą danemu zagadnieniu, nazwę zagadnienia powinien (w roli tytułu) zapisać na kartce papieru lub w dokumencie elektronicznym.</p>
<p>Drugim krokiem jest opisanie zagadnienia tak, jakby tłumaczyło się je komuś innemu. Zwykle wskazuje się tutaj wyobrażenie sobie ucznia, który przyszedł z innej szkoły i nie rozumie zadanego materiału. Ja zazwyczaj polecam wyobrażenie sobie inteligentnego dziewięciolatka. Tym samym, opis powinien być możliwie najprostszy. Pisać należy z pamięci, nie wolno w trakcie korzystać z literatury i tworzyć notatki jednocześnie, bo grozi to popadnięciem w powtarzanie utrzymujące i zwykłe przepisywanie.</p>
<p>Trzecim krokiem jest powrót do literatury. Należy go dokonać dopiero wtedy, gdy wystąpi trudność w konstruowaniu notatki. Na czas uzupełniania wiedzy należy przerwać pisanie. „Douczanie” powinno następować do momentu, w którym uzyska się subiektywną pewność, że jest się w stanie opisać dany koncept własnymi słowami.</p>
<p>Czwartym i ostatnim krokiem jest uproszczenie powstałej w ten sposób notatki i (o ile to możliwe) wzbogacenie jej o analogie. Należy w tym kroku usunąć przedmiotowy żargon i zastąpić go wyrażeniami bardziej opisowymi. Prowadzi to do uproszczeń, jednak uczeń uczący się danego konceptu po raz pierwszy, często może sobie na takie uproszczenia pozwolić. Czwarty krok należy powtarzać aż do uzyskania opisu maksymalnie prostego. Powstała w ten sposób notatka może w przyszłości posłużyć do powtórek.</p>
</section>
<section id="przykład-1" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="przykład-1"><span class="header-section-number">3.2</span> Przykład</h2>
<p>Dla zilustrowania metody Feynmana, przytoczymy przykładową notatkę dotyczącą eksperymentów Pawłowa, opracowaną na podstawie podręcznika Zimbardo i współpracowników <span class="citation" data-cites="zimbardo_psychologia_2017">(2017)</span>.</p>
<p><strong><em>Warunkowanie klasyczne – wersja 1.</em></strong> Eksperymenty Pawłowa polegały na mierzeniu ilości śliny, którą toczyły psy pod wpływem określonych bodźców. Bodźcem bezwarunkowym był widok lub zapach jedzenia. Pawłow chciał przenieść tę reakcję na inny bodziec – na dźwięk kamertonu. Zestawiał on więc bodziec bezwarunkowy z dźwiękiem kamertonu wielokrotnie, aż dźwięk powodował u psa toczenie śliny.</p>
<p>W takim tekście identyfikujemy wyrażenia trudne i język specjalistyczny, a następnie zastępujemy je wyrażeniami opisowymi. Jeśli okaże się, że notatka jest niepełna, należy ją uzupełnić o brakujące informacje.</p>
<p><strong><em>Warunkowanie klasyczne – wersja 2.</em></strong> Eksperymenty Pawłowa polegały na mierzeniu ilości śliny, którą toczyły psy w różnych sytuacjach. Psy naturalnie toczyły ślinę na widok lub zapach jedzenia. Pawłow chciał sprawić, żeby śliniły się też na dźwięk kamertonu. Zestawiał on więc jedzenie z dźwiękiem kamertonu wielokrotnie, aż dźwięk (bez obecności jedzenia) powodował u psa toczenie śliny.</p>
<p>Krok czwarty, czyli recenzję, powtarzamy do uzyskania satysfakcjonującej notatki. Jeśli jesteśmy w stanie, wprowadzamy analogie. Pomimo założenia, że notatka ma być skierowana do kogoś innego, można stosować analogie odnoszące się do własnej osoby, ze względu na korzystny dla zapamiętywania efekt odniesienia do ja (Rogers i in., 1997).</p>
<p><strong><em>Warunkowanie klasyczne – wersja 3.</em></strong> Eksperymenty Pawłowa polegały na mierzeniu ilości śliny, którą toczyły psy w różnych sytuacjach. Psy naturalnie śliniły się na widok lub zapach jedzenia, tak jak robi to mój pies Emes, kiedy niosę mu miskę z karmą. Pawłow chciał sprawić, żeby śliniły się też na dźwięk kamertonu. Za każdym razem, gdy podawał psom jedzenie, dzwonił kamertonem, aż w końcu sam dźwięk (bez obecności jedzenia) powodował u psa ślinienie się.</p>
</section>
</section>
<section id="fiszki-elektroniczne-w-programie-anki" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Fiszki elektroniczne w programie Anki</h1>
<p>Fiszki jako metoda zostały spopularyzowane przez Sebastiana Leitnera w publikacji <em>Naucz się uczyć</em> <span class="citation" data-cites="leitner_naucz_1972">(1972)</span>. Przyjmują one formę kart, które z jednej strony mają zapisane pytanie, a z drugiej odpowiedź. Najbardziej oczywistym ich zastosowaniem jest nauka słownictwa w języku obcym, ale mogą one zostać wykorzystane w nauce właściwie każdego materiału (więcej informacji niżej).</p>
<p>Same karty nie stanowią jednak techniki uczenia się w myśl naszej definicji. Leitner <span class="citation" data-cites="leitner_naucz_1972">(1972)</span> proponował stworzenie tzw. kartoteki autodydaktycznej, czyli pudełka, które miało usprawnić i usystematyzować proces sprawdzania swojej wiedzy za pomocą fiszek. Pozwala ona na niejednakowe powtarzanie informacji – skupienie się na tych, które trudniej uczniowi zapamiętać, przy rzadszym powtarzaniu tych, które uczeń uznaje za łatwe. Selekcja ta jest znacznie łatwiejsza do zastosowania przy fiszkach, niż przy korzystaniu z metody opisanej przez Willinghama <span class="citation" data-cites="willingham_strategies_2014">(Willingham, 2014, por. Sekcja&nbsp;1.2)</span>.</p>
<p>Temat fiszek jest bardzo rozległy, dlatego poświęcę mu więcej uwagi niż wcześniej omawianym metodom. Najpierw omówię przewagę fiszek elektronicznych nad tradycyjnymi. Następnie podam kilka dowodów na skuteczność tej metody i porad jak na etapie tworzenia sprawić, by fiszki rzeczywiście były skuteczne (wraz z przykładami). Później omówimę polecany przez siebie program do tworzenia fiszek (Anki) i to, jak praktycznie wygląda jego codzienne użytkowanie. Następnie przeanalizuję potencjalne zalety korzystania z fiszek w kontekście polskiego systemu oświaty. Na koniec podam kilka przykładów dodatków do programu Anki wraz z opisem, jak mogą one usprawnić uczenie się tą metodą.</p>
<section id="fiszki-tradycyjne-a-elektroniczne" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="fiszki-tradycyjne-a-elektroniczne"><span class="header-section-number">4.1</span> Fiszki tradycyjne a elektroniczne</h2>
<p>Ze względu na to, że jego książka została oryginalnie wydana w roku 1972, Leitner do stworzenia kartoteki autodydaktycznej proponował wykorzystanie kartonu, papieru i długopisów. Wskazywał nawet na potencjalne problemy, jakie może sprawić próba stworzenia fiszek za pomocą komputera, takie jak drogie i trudne w obsłudze oprogramowanie. XXI wiek, będący erą powszechnej dostępności i mobilności komputerów, a także wolnego oprogramowania, zażegnał te problemy. Wymienić można co najmniej kilka zasadniczych zalet fiszek elektronicznych nad tradycyjnymi:</p>
<ul>
<li>Wiele fiszek automatycznie powstaje z jednej notatki bez konieczności przepisywania (np. tradycyjne stworzenie fiszek ze słownictwem angielski → polski wymaga tyle samo pracy, ile stworzenie pierwotnego zestawu polski → angielski, zaś przy fiszkach elektronicznych, obydwa zestawy można stworzyć jednocześnie).</li>
<li>Tworzenie fiszek elektronicznych zajmuje znacznie mniej czasu niż tworzenie tych tradycyjnych (np. przez różnice w tempie pisania).</li>
<li>Czas między sesjami nauki jest regulowany przez program, co usuwa zagrożenie zbyt częstego korzystania z fiszek, na jakie wskazują Wissman, Rawson i Pyc <span class="citation" data-cites="wissman_how_2012">(2012)</span>.</li>
<li>Są łatwiejsze do modyfikacji.</li>
<li>Łatwiej mieć przy sobie telefon niż pudełko z fiszkami tradycyjnymi (Leitner opracował nawet wariant przenośny swojej kartoteki, który miałby polegać na wykorzystaniu wolnych przegródek w portfelu, dzięki czemu miałoby się uniknąć ciekawskich spojrzeń ludzi w miejscach publicznych).</li>
<li>Każda fiszka ma osobno liczony czas rozłożonej powtórki, podczas gdy forma tradycyjna uzależnia czas rozłożonej powtórki od tworzenia nowych fiszek – gdy uczeń przestaje tworzyć nowe fiszki, nie powtarza też tych starych.</li>
<li>Forma elektroniczna zdaje się być atrakcyjniejsza dla uczniów.</li>
<li>Łatwo tworzy się fiszki obrazkowe i dźwiękowe, co dla formy tradycyjnej jest trudne lub wręcz niemożliwe.</li>
<li>Klasa może łatwo współpracować w tworzeniu fiszek elektronicznych (patrz Sekcja&nbsp;4.7).</li>
</ul>
</section>
<section id="skuteczność-1" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="skuteczność-1"><span class="header-section-number">4.2</span> Skuteczność</h2>
<p>Wykorzystanie fiszek pozwala na zapamiętanie większej liczby informacji niż wielokrotne powtórki przy takim samym czasie przeznaczonym na naukę, co jest prawdą zarówno dla fiszek elektronicznych <span class="citation" data-cites="schmidmaier_using_2011">(Schmidmaier i in., 2011)</span>, jak i tradycyjnych <span class="citation" data-cites="vaughn_diagnosing_2011">(Vaughn &amp; Rawson, 2011)</span>. Ponadto piśmiennictwo sugeruje, że testowanie własnej wiedzy, na którym opiera się technika fiszek, zwiększa skuteczność uczenia się <span class="citation" data-cites="roediger_test-enhanced_2006">(np. Roediger &amp; Karpicke, 2006)</span> i wydłuża czas przechowywania informacji <span class="citation" data-cites="larsen_repeated_2009">(Larsen, Butler, &amp; Roediger III, 2009)</span> w stosunku do zwykłych rozłożonych powtórek z wielokrotnym czytaniem. Należy zaznaczyć, że już samo rozłożenie powtórek zdaje się zwiększać długoterminową skuteczność nauki, w stosunku do nauki skomasowanej <span class="citation" data-cites="bahrick_retention_1987">(Bahrick &amp; Phelphs, 1987)</span>, takiej jak „zarywanie nocki” przed sprawdzianem.</p>
</section>
<section id="jak-robić-skuteczne-fiszki" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="jak-robić-skuteczne-fiszki"><span class="header-section-number">4.3</span> Jak robić skuteczne fiszki?</h2>
<p>Nie każda fiszka będzie skuteczna, na co wskazuje Wozniak <span class="citation" data-cites="wozniak_effective_1999">(1999)</span>. Podaje on dwadzieścia zasad skutecznego ujmowania wiedzy. Omówię tylko kilka, które uznaję za najważniejsze, a najważniejszą z nich jest zasada minimum informacji.</p>
<p><strong><em>Zasada minimum informacji.</em></strong> Podstawowy błąd, jaki popełniają uczniowie zaczynający pracę z fiszkami, to umieszczanie zbyt dużej ilości informacji na jednej fiszce. By zobrazować ten problem, podam przykład na podstawie podręcznika do biologii do liceum autorstwa Hosera <span class="citation" data-cites="hoser_fizjologia_1996">(1996)</span>. Błędnie wykonana fiszka może wyglądać tak:</p>
<p><strong>Przód:</strong> Opisz proces tworzenia moczu <strong>Tył:</strong> Najpierw w ciałkach nerkowych nefronu zachodzi filtracja, co prowadzi do powstania moczu pierwotnego, którego powstaje 150-180 litrów dziennie. Następnie dochodzi do resorpcji kanalikowej, w trakcie którego aktywnie wchłaniana jest między innymi glukoza. Ostatnim etapem jest sekrecja kanalikowa, mająca na celu m.in. utrzymanie stabilnego pH moczu.</p>
<p>Fiszka ta przypomina raczej notatkę. Jak wskazuje Wozniak (1999), uczeń może nie tyle nie pamiętać, że człowiek produkuje 150-180 litrów moczu pierwotnego dziennie, ile zapomnieć, że w ogóle ta informacja może być podana. Zapytany wprost o dzienną ilość wytwarzanego moczu pierwotnego, odpowie bez wahania. By nauka za pomocą fiszek była skuteczna, taka karta musi zostać rozbita na wiele kart mniejszych – jeśli to możliwe, każda powinna zawierać pytanie o tylko jedną informację. Powyższy tekst, w myśl zasady minimum informacji, mógłby zostać rozbity w sposób następujący:</p>
<p><strong>Przód:</strong> Gdzie zachodzi filtracja? <strong>Tył:</strong> W ciałkach nerkowych nefronu.</p>
<p><strong>Przód:</strong> Jaki proces zachodzi w ciałkach nerkowych nefronu? <strong>Tył:</strong> Filtracja.</p>
<p><strong>Przód:</strong> Jaki proces prowadzi do powstania moczu pierwotnego? <strong>Tył:</strong> Filtracja.</p>
<p><strong>Przód:</strong> […] powstaje w wyniku filtracji. <strong>Tył:</strong> Mocz pierwotny powstaje w wyniku filtracji.</p>
<p><strong>Przód:</strong> Ile moczu pierwotnego powstaje dziennie w organizmie człowieka? <strong>Tył:</strong> 150-180 litrów.</p>
<p><strong>Przód 1.:</strong> W trakcie […] dochodzi do aktywnego wchłaniania glukozy. <strong>Przód 2.:</strong> W trakcie resorpcji kanalikowej dochodzi do [aktywnego/biernego] wchłaniania glukozy. <strong>Przód 3.:</strong> W trakcie resorpcji kanalikowej dochodzi do aktywnego wchłaniania [najważniejszy związek]. <strong>Tył:</strong> W trakcie resorpcji kanalikowej dochodzi do aktywnego wchłaniania glukozy.</p>
<p><strong>Przód:</strong> Jaki jest główny cel sekrecji kanalikowej? <strong>Tył:</strong> Utrzymanie stabilnego pH moczu.</p>
<p><strong>Przód:</strong> Wymień kolejno etapy powstawania moczu. <strong>Tył:</strong> (1) Filtracja, (2) resorpcja i (3) sekrecja.</p>
<p>Przykład obrazuje też kilka innych możliwości związanych z tworzeniem skutecznych fiszek. W przykładach 4. i 6. pojawiają się fiszki z luką, czyli inny sposób formułowania pytań, polegający na uzupełnianiu zdań, podobnie jak formułowane są pytania w krzyżówkach. Pozwala to na stworzenie kart wtedy, gdy trudno sformułować pytanie o daną informację. Ponadto, jak pokazano w przykładzie 6., z jednego zdania Anki jest w stanie wygenerować kilka osobnych kart. Takie karty będą miały taki sam tył, ale przody mogą prosić o uzupełnienie różnych części wyjściowego zdania.</p>
<p>W przykładzie to samo zdanie (“W trakcie resorpcji kanalikowej dochodzi do aktywnego wchłaniania glukozy.”) należy uzupełnić informacją o (1) nazwę procesu, (2) bilans energetyczny i (3) najważniejszy związek. Jest to zgodne z zasadą minimum informacji, bo każda z tych fiszek zadaje pytanie, na które odpowiedź stanowi pojedyncza informacja. Cenne jest to, że program te karty traktuje jako oddzielne. Tym samym fakt, że uczeń nie może przypomnieć sobie, czy filtracja jest procesem aktywnym czy biernym, nie wpłynie na częstotliwość pokazywania się pytania o nazwę tego procesu.</p>
<p>Za pomocą fiszek z luką łatwo jest tworzyć fiszki z pytaniami o definicje zjawisk. Polecam w tym celu korzystać ze schematu „[Termin] to [definicja].”, by uczeń był w stanie zarówno nazwać opisywane zjawisko, jak i potrafił je zdefiniować. Łatwo jest się spotkać z sytuacją, w której uczeń zastanawia się nie tyle „Co to jest?”, a raczej „Jak to się nazywało?”. Dla przykładu fiszka z definicją efektu odniesienia do ja według Wojciszke <span class="citation" data-cites="wojciszke_psychologia_2019">(2019, s. 533)</span>:</p>
<p><strong>Przód 1.:</strong> […] to „lepsze zapamiętywanie informacji odnoszonych do własnej osoby niż do innych osób bądź przetwarzanej w inny sposób.” <strong>Przód 2.:</strong> Efekt odniesienia do ja to […] <strong>Tył:</strong> „Efekt odniesienia do ja to lepsze zapamiętywanie informacji odnoszonych do własnej osoby niż do innych osób bądź przetwarzanej w inny sposób.”</p>
<p><strong><em>Listy elementów a fiszki.</em></strong> Jeśli uczeń musi stworzyć fiszkę, na którą odpowiada lista elementów (tak jak w przykładzie 8.) za Wozniakiem <span class="citation" data-cites="wozniak_effective_1999">(1999)</span> radzę skorzystać wtedy z metody pałacu pamięci lub innej mnemotechniki. Może nie być to konieczne w prostej liście trzech jednowyrazowych elementów, ale często uczniowie muszą zapamiętywać listy dłuższe i bardziej skomplikowane. Ponadto jeśli da się rozbić długą listę na mniejsze, należy to zrobić. Dla przykładu – uczeń chcący zapamiętać listę wszystkich krajów UE może rozbić tę listę na 8 mniejszych list stworzonych na zasadzie roku przystąpienia. W ten sposób zamiast listy 27-elementowej, otrzyma zestaw list, z których najdłuższa będzie miała tylko 10 elementów <span class="citation" data-cites="wozniak_effective_1999">(przykład na podstawie: Wozniak, 1999)</span>.</p>
<p><strong><em>Fiszki obrazkowe.</em></strong> Pośród zalet fiszek elektronicznych wymieniliśmy łatwość w tworzeniu fiszek obrazkowych. Jeśli to możliwe, uczeń powinien korzystać z tego typu materiałów w swoich fiszkach. Aby ułatwić tworzenie fiszek obrazkowych z luką (zasłonięty podpis na schemacie) w programie Anki, zalecamy zapoznanie się z dodatkiem Image Occlusion Enhanced (patrz Sekcja&nbsp;4.8).</p>
<p><strong><em>Fiszki a rozumienie.</em></strong> Wozniak zaznacza również fakt, że fiszki nie zastępują uczenia się. Można z nich korzystać dopiero po sesji nauki. Innymi słowy, nie należy tworzyć fiszek z materiału, którego się nie rozumie.</p>
<p><strong><em>Prostota fiszek.</em></strong> Inną wymienioną przez Wozniaka zasadą jest, by fiszki były proste. Nie należy zakładać, że zapamięta się jakąś informację „przy okazji”, a raczej dla każdej z informacji zrobić osobną fiszkę. Dla przykładu, fiszka „Kto odkrył mechanizm warunkowania klasycznego?” powinna mieć odpowiedź „Iwan Pawłow”, nie zaś „Iwan Pawłow na początku XX wieku”. Jeśli uczeń chce zapamiętać, kiedy eksperymenty Pawłowa były przeprowadzane, powinien stworzyć dla tego pytania osobną fiszkę.</p>
</section>
<section id="anki" class="level2" data-number="4.4">
<h2 data-number="4.4" class="anchored" data-anchor-id="anki"><span class="header-section-number">4.4</span> Anki</h2>
<p>Narzędzi do tworzenia fiszek elektronicznych jest bardzo wiele, ja jednak polecam program Anki. Posiada on kilka zasadniczych zalet:</p>
<ol type="1">
<li>Jest to narzędzie całkowicie darmowe.</li>
<li>Jest dostępne w języku polskim.</li>
<li>Jako program otwartoźródłowy, posiada mnóstwo darmowych dodatków, pozwalających na zwiększenie jego możliwości (patrz Sekcja&nbsp;4.8).</li>
<li>Jest to narzędzie dostępne dla wszystkich popularnych systemów operacyjnych – zarówno tych stacjonarnych (Windows, Linux, MacOS) jak i mobilnych (Android, iOS).</li>
<li>Posiada wbudowany system synchronizacji, dzięki czemu fiszki stworzone na komputerze w bardzo łatwy sposób można zsynchronizować z aplikacją na telefonie.</li>
<li>Uczeń samodzielnie stwierdza, czy dobrze odpowiedział na pytanie. Dzięki temu, możliwe jest sprawne korzystanie z fiszek zadających pytania o definicje – inne programy często wymagają od ucznia udzielenia poprawnej odpowiedzi słowo w słowo, podczas gdy tutaj, to uczeń decyduje, czy jest swoją odpowiedzią usatysfakcjonowany.</li>
</ol>
<p>Anki, jako narzędzie, jest bardzo rozbudowane i posiada niezwykle duże możliwości, których opis wykracza poza obszar zainteresowania tego artykułu. Nie mniej, wszystkie jego funkcje opisane są w dokumentacji programu, a w Internecie można znaleźć dziesiątki przystępnych tekstów i wideoporadników na temat korzystania z programu Anki.</p>
</section>
<section id="przeglądanie-fiszek" class="level2" data-number="4.5">
<h2 data-number="4.5" class="anchored" data-anchor-id="przeglądanie-fiszek"><span class="header-section-number">4.5</span> Przeglądanie fiszek</h2>
<p>Fiszki zgrupowane są w tzw. talie. Zgodnie z instrukcją programu Anki, talie powinny być możliwie szerokie tematycznie (czyli jedna talia „Angielski” zamiast osobnych „Angielski – owoce”, „Angielski – zwierzęta” i „Angielski – kolory”). Dzięki temu kontekst talii nie będzie stanowił podpowiedzi przy uczeniu się <span class="citation" data-cites="wozniak_effective_1999">(Wozniak, 1999)</span>. Ponadto, przemieszanie kart oznacza przejście z uczenia się blokowego na uczenie interwałowe, które może być skuteczniejsze <span class="citation" data-cites="rohrer_interleaving_2012">(Rohrer, 2012)</span>, chociaż dowody są w tej kwestii ograniczone <span class="citation" data-cites="dunlosky_improving_2013">(Dunlosky, Rawson, Marsh, Nathan, &amp; Willingham, 2013)</span>.</p>
<p>Co więcej, zalecam wyłączenie zwykłego licznika kart, który w programie Anki, poza ilością pozostałych w danej sesji fiszek, wskazuje, czy aktualnie wyświetlana karta jest nowa, pojawia się dzisiaj po raz pierwszy, czy po raz kolejny. Może to stanowić niechcianą podpowiedź. Zwykły licznik można zastąpić dodatkiem Remaining Time (patrz Sekcja&nbsp;4.8).</p>
<p>Każdego dnia, program proponował będzie przejrzenie określonej porcji fiszek z danej talii. To, jakie konkretnie karty zostaną pokazane, zależy od uprzednio udzielanych na nią odpowiedzi. W ten sposób karta widziana po raz pierwszy pokaże się dwukrotnie w tej samej sesji nauki. Jeśli uczniowi uda się odpowiedzieć poprawnie dwa razy z rzędu, karta pojawi się następnego dnia. Jeśli i wtedy odpowie poprawnie, pojawi się po trzech dniach. Przerwa będzie się stopniowo wydłużała. Błąd powoduje rozpoczęcie procesu od nowa dla danej karty.</p>
</section>
<section id="rozłożone-powtórki-fiszek-w-kontekście-egzaminów" class="level2" data-number="4.6">
<h2 data-number="4.6" class="anchored" data-anchor-id="rozłożone-powtórki-fiszek-w-kontekście-egzaminów"><span class="header-section-number">4.6</span> Rozłożone powtórki fiszek w kontekście egzaminów</h2>
<p>Taki sposób prezentowania fiszek pozwala uczniowi na bieżąco powtarzać te fragmenty materiału, których mógł już zapomnieć. Dla przykładu – Dawid, uczeń klasy biologiczno-chemicznej w liceum, we wrześniu przerabiał w klasie grzyby. Dawid nie korzystał z fiszek, więc w listopadzie nie pamięta już dużej części materiału, a zanim przyjdzie czas powtórek przed maturą, okaże się, że Dawid musi nauczyć się grzybów od nowa.</p>
<p>Z kolei Paweł, uczeń tej samej klasy, korzysta z fiszek. W ramach jego codziennej praktyki, pojedyncze fiszki dotyczące grzybów zaczynają wracać już pod koniec października. W tym czasie Paweł jeszcze pamięta nazwy zarodników workowców, ale nie pamięta nazw zarodników podstawczaków. Ślad pamięciowy dla informacji, które był w stanie wydobyć, ulega wzmocnieniu w ramach tzw. małego cyklu pamięciowego <span class="citation" data-cites="tulving_ecphoric_1976">Strelau &amp; Doliński (2018)</span>, co można porównać do skoku na trampolinie – człowiek, który spada na trampolinę z większej wysokości, wybije się wyżej, tak samo informacja, którą uda się wydobyć po dłuższym czasie, będzie mogła być jeszcze dłużej przechowywana. Ponieważ pod koniec października Paweł pamięta większość materiału z grzybów, tylko nieliczne fiszki wracają do normalnego cyklu. Tym samym, nie zakłócają normalnej nauki bieżącego materiału, a jednak nie są zapominane. W ten sposób, Paweł przed maturą nie będzie musiał uczyć się całości grzybów od nowa, a jedynie je sobie przypomni.</p>
<p>Godną uwagi funkcją programu Anki jest tworzenie tzw. talii filtrowanych. Jeśli uczeń w trakcie tworzenia fiszek oznaczy je odpowiednią etykietą (np. „grzyby”), będzie mógł później łatwo stworzyć dodatkową talię, zawierającą wszystkie fiszki z grzybów, jakie posiada. Dzięki temu, uczeń może upewnić się, że pamięta wszystkie informacje, jakie zawarł w fiszkach o grzybach, co może być przydatne na przykład przed kartkówką powtórkową.</p>
</section>
<section id="sec-wspolpraca" class="level2" data-number="4.7">
<h2 data-number="4.7" class="anchored" data-anchor-id="sec-wspolpraca"><span class="header-section-number">4.7</span> Potencjał do współpracy w fiszkach elektronicznych</h2>
<p>O ile samo tworzenie fiszek jest korzystne z punktu widzenia uczenia się, gdyż wymaga selekcji i wymusza opracowanie materiału do formy pytań, warty zauważenia jest potencjał do współpracy, jaki zyskuje klasa korzystając z tej techniki.</p>
<p>Grupy wewnątrz klasy (lub nawet całe klasy) mogą podzielić się materiałem do opracowania i w ten sposób zmniejszyć nałożone na siebie obciążenie. Ma to szczególne znaczenie, jeśli uczniowie nie korzystają z fiszek od początku, a chcą wykorzystać je np. w powtórkach maturalnych. Jak wspomniano wyżej, jedna osoba nie jest w stanie szybko opracować całości materiału do egzaminu, jednak co innego grupa. Olga może poświęcić weekend na opracowywanie metabolizmu wiedząc, że fiszki o rybach dostanie od Adama, a o grzybach od Pawła.</p>
<p>Warta podkreślenia jest łatwość dzielenia się fiszkami elektronicznymi. Przesłanie pliku z pakietem fiszek jest szybkie, nie wymaga przepisywania i nie wiąże się z żadnym kosztem dla udostępniającego. Odbywa się niejako „przy okazji”. Niezależnie od tego, kto dane fiszki stworzył, odpowiedzialność za ich przeglądanie i tak spoczywa na uczniu – posiadanie fiszek nie sprawi, że nie trzeba się zawartych w nich informacji nauczyć, nie mniej znacząco to zadanie ułatwi.</p>
</section>
<section id="sec-dodatki" class="level2" data-number="4.8">
<h2 data-number="4.8" class="anchored" data-anchor-id="sec-dodatki"><span class="header-section-number">4.8</span> Dodatki</h2>
<p>By zebrać rozrzucone w różnych miejscach tego artykułu informacje o kilku wartych uwagi dodatkach do programu Anki. Jako program otwartoźródłowy, Anki posiada dużą liczbę bezpłatnych dodatków, rozszerzających jego możliwości o różne dodatkowe funkcje. Poniżej omówimy kilka dodatków, o których wspominaliśmy wyżej oraz kilka innych, również wartościowych. Ze względu na praktyczną naturę tego podrozdziału, warto najpierw samodzielnie zapoznać się z podstawowymi funkcjami programu Anki. Inaczej Czytelnik może nie być w stanie wyobrazić sobie działania części z omawianych niżej rozszerzeń.</p>
<p><strong><em>Image Occlusion Enhanced.</em></strong> Jest to dodatek, dzięki któremu można w prosty sposób tworzyć fiszki obrazkowe z luką (patrz Rysunek&nbsp;1). Uczeń może za jego pomocą nauczyć się rozpoznawać elementy schematów. Szczególnie użyteczne dla przedmiotów przyrodniczych, gdzie można użyć obrazów zamiast opisów (np. ryciny anatomiczne, mapy).</p>
<p><img src="https://nieobliczalne.pl/posts/ilustracje/uczenie-sie/rysunek-2.png" class="img-fluid" alt="Przykład fiszki wykonanej za pomocą Image Occlusion Enhanced (na podstawie: Hoser, 1996, s. 134)">{!fig-image}</p>
<p><strong><em>Review Heatmap.</em></strong> Jest to dodatek, który dodaje do głównego ekranu Anki schemat, na którym kolorem zaznaczone są dni, w których przeglądano karty. Im więcej kart przejrzano w danym dniu, tym ciemniejszy jest kolor (patrz Rysunek&nbsp;2). Poza tym podaje średnią ilość dziennie przeglądanych kart, czy dni, w jakie z rzędu uczeń dokonywał powtórek. Chęć nieprzerywania tej passy może okazać się bodźcem motywującym do codziennych powtórek. Co więcej metaanaliza Harkina i współpracowników <span class="citation" data-cites="harkin_does_2016">(2016)</span> wskazuje, że monitorowanie swoich postępów znacząco zwiększa skuteczność osiągania celów.</p>
<div id="fig-heatmap" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-heatmap-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nieobliczalne.pl/posts/ilustracje/uczenie-sie/rysunek-3.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-heatmap-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Rysunek&nbsp;2: Schemat Review Heatmap (materiały własne)
</figcaption>
</figure>
</div>
<p><strong><em>Remaining time.</em></strong> Jak pisałem wyżej, zalecam, by wyłączyć standardowy licznik pozostałych kart, ze względu na to, że podpowiada, czy dana karta jest nowa, przeglądana czy uczona ponownie. Zamiast tego zalecam instalację dodatku Remaining time, który jest niczym innym, jak paskiem postępu, który wyświetla się w górnej części ekranu i wypełnia w trakcie przeglądania talii. Ponadto podaje szacowany czas do zakończenia powtórki i czas, jaki upłynął od jej początku.</p>
<p><strong><em>Life Drain.</em></strong> Jest to dodatek ułatwiający utrzymanie uwagi w trakcie powtórek. Umieszczony u dołu talii „pasek życia” maleje z upływem czasu, zaś udzielenie odpowiedzi (niezależnie od tego, czy będzie ona poprawna) odnawia część straconego życia. Pozwala to uczniowi utrzymać uwagę skoncentrowaną na powtórce, ponieważ rozpraszanie się będzie skutkowało utratą życia. Jeśli Life Drain zostanie uzupełniony dodatkiem Life Drain Extra, utrata całości życia będzie skutkowała wyświetleniem ekranu „Game over”, jednak nie będzie to miało żadnych innych konsekwencji. Uczeń może zacząć od nowa w miejscu, w którym skończył. Jest to prosty do wprowadzenia element grywalizacji, która posiada potencjał jako skuteczna metoda dydaktyczna <span class="citation" data-cites="cewinska_grywalizacja_2014">(Cewińska &amp; Krasnova, 2014)</span>. Zaznaczamy, że dodatek jest wysoko konfigurowalny – pozwala np. włączyć kary za błędne odpowiedzi (czego w zwykłej praktyce nie zalecam), a także posiada opcję, by utrata życia zatrzymywała się podczas sprawdzania odpowiedzi (co może być korzystne przy taliach z bardziej skomplikowanymi kartami, jak pytania o definicje, ale jest niepotrzebne przy kartach prostych, jak słownictwo w językach obcych).</p>
</section>
</section>
<section id="podsumowanie" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Podsumowanie</h1>
<p>Chciałbym ponownie zaznacyć, że istnieje duże zapotrzebowanie na skuteczne metody uczenia się w społeczności uczniowskiej. Fundamentem skutecznego uczenia się jest elaboracja, czyli opracowywanie materiału. Trzy opisane wyżej metody w pewien sposób wymuszają na uczniu elaborację. Na zasadzie dodawania, największą skutecznością będzie się odznaczało korzystanie ze wszystkich trzech metod, wykorzystywanych zależnie od uczonego materiału. Metodę należy też dobrać do rodzaju uczonego materiału – metoda miejsc skuteczna jest w uczeniu się na pamięć, ale nie sprawi, że uczeń lepiej zrozumie koncepcję teoretyczną. Cele i skrótowe opisy omawianych tu technik uczenia się zostały zebrane w Tabeli 1.</p>
<table class="caption-top table">
<caption>Cele i istota omówionych technik uczenia się.</caption>
<colgroup>
<col style="width: 25%">
<col style="width: 41%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Nazwa techniki</strong></th>
<th style="text-align: center;"><strong>Cel techniki</strong></th>
<th style="text-align: right;"><strong>Istota techniki</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Pałac pamięci</td>
<td style="text-align: center;">Zapamiętywanie list</td>
<td style="text-align: right;">Przedstawianie informacji symbolicznie i łączenie jej z wyobrażeniami miejsc.</td>
</tr>
<tr class="even">
<td>Metoda Feynmana</td>
<td style="text-align: center;">Rozumienie skomplikowanych koncepcji</td>
<td style="text-align: right;">Sporządzanie notatki, jakby tłumaczyło się dany materiał komuś innemu i dalsze jej upraszczanie.</td>
</tr>
<tr class="odd">
<td>Fiszki elektroniczne w programie Anki</td>
<td style="text-align: center;">Rozłożone powtórki materiału</td>
<td style="text-align: right;">Przekształcanie materiału na pojedyncze pytania i codzienne przeglądanie porcji materiału dobranej przez program.</td>
</tr>
</tbody>
</table>
<p>Korzystanie z tych metod w całości zależy od ucznia i, o ile są one na ogół skuteczne, dla części uczniów mogą okazać się niewygodne. Odwołując się do klasycznej teorii reaktancji (<span class="citation" data-cites="brehm_theory_1966">Brehm (1966)</span>; <span class="citation" data-cites="brehm_psychological_1981">Brehm &amp; Brehm (1981)</span>; za: <span class="citation" data-cites="wojciszke_psychologia_2019">Wojciszke (2019)</span>), przestrzegam nauczycieli przed zmuszaniem uczniów do korzystania z wyżej omówionych metod, gdyż obowiązek prawdopodobnie skutecznie ucznia zniechęci. Zamiast tego, proponuję, by przekazać uczniom dostępne narzędzia, jednocześnie pozostawiając wolność ich stosowania.</p>
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img alt="Licencja Creative Commons" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>Ten utwór jest dostępny na <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">licencji Creative Commons Uznanie autorstwa-Użycie niekomercyjne-Na tych samych warunkach 4.0 Międzynarodowe</a>.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">Bibliografia</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-aslan_is_2015" class="csl-entry">
Aslan, S. (2015). Is <span>Learning</span> by <span>Teaching</span> <span>Effective</span> in <span>Gaining</span> 21st <span>Century</span> <span>Skills</span>? <span>The</span> <span>Views</span> of <span>Pre</span>-<span>Service</span> <span>Science</span> <span>Teachers</span>. <em>Educational Sciences: Theory &amp; Practice</em>. <a href="https://doi.org/10.12738/estp.2016.1.0019">https://doi.org/10.12738/estp.2016.1.0019</a>
</div>
<div id="ref-atkinson_application_1975" class="csl-entry">
Atkinson, R. C., &amp; Raugh, M. R. (1975). An application of the mnemonic keyword method to the acquisition of a <span>Russian</span> vocabulary. <em>Journal of Experimental Psychology: Human Learning and Memory</em>, <em>1</em>(2), 126–133. <a href="https://doi.org/10.1037/0278-7393.1.2.126">https://doi.org/10.1037/0278-7393.1.2.126</a>
</div>
<div id="ref-bahrick_retention_1987" class="csl-entry">
Bahrick, H. P., &amp; Phelphs, E. (1987). Retention of <span>Spanish</span> vocabulary over 8 years. <em>Journal of Experimental Psychology: Learning, Memory, and Cognition</em>, <em>13</em>(2), 344–349. <a href="https://doi.org/10.1037/0278-7393.13.2.344">https://doi.org/10.1037/0278-7393.13.2.344</a>
</div>
<div id="ref-bloom_taxonomy_1956" class="csl-entry">
Bloom, B. S. (1956). <em>Taxonomy of educational objectives: <span>The</span> classification of educatio- nal goals.</em> Harlow: Longman Group.
</div>
<div id="ref-brehm_theory_1966" class="csl-entry">
Brehm, J. W. (1966). <em>A theory of psychological reactance.</em> New York: Academic Press.
</div>
<div id="ref-brehm_psychological_1981" class="csl-entry">
Brehm, J. W., &amp; Brehm, S. S. (1981). <em>Psychological reactance</em>. New York: Academic Press.
</div>
<div id="ref-campbell_biologia_2016" class="csl-entry">
Campbell, N. A., Reece, J. B., Urry, L. A., Cain, M. L., Wasserman, S. A., Minorsky, P. V., &amp; Jackson, R. (2016). <em>Biologia <span>Campbella</span></em> (M. Dabert, J. Dabert, &amp; K. Stobrawa, Tłum.). Poznań: Rebis.
</div>
<div id="ref-cewinska_grywalizacja_2014" class="csl-entry">
Cewińska, J., &amp; Krasnova, A. (2014). Grywalizacja w rozwoju i edukacji – szanse i zagrożenia. <em>Prace Naukowe Uniwersytetu Ekonomicznego we Wrocławiu</em>, (350), 73–81. <a href="https://doi.org/10.15611/pn.2014.350.06">https://doi.org/10.15611/pn.2014.350.06</a>
</div>
<div id="ref-cloward_studies_1967" class="csl-entry">
Cloward, R. D. (1967). Studies in <span>Tutoring</span>. <em>The Journal of Experimental Education</em>, <em>36</em>(1), 14–25. <a href="https://doi.org/10.1080/00220973.1967.11011022">https://doi.org/10.1080/00220973.1967.11011022</a>
</div>
<div id="ref-craik_levels_1972" class="csl-entry">
Craik, F. I. M., &amp; Lockhart, R. S. (1972). Levels of processing: <span>A</span> framework for memory research. <em>Journal of Verbal Learning and Verbal Behavior</em>, <em>11</em>(6), 671–684. <a href="https://doi.org/10.1016/S0022-5371(72)80001-X">https://doi.org/10.1016/S0022-5371(72)80001-X</a>
</div>
<div id="ref-cyceron_oratore_2001" class="csl-entry">
Cyceron, M. T. (2001). <em>De oratore</em> (E. W. Sutton, Tłum.). Pobrano z <a href="http://www.laits.utexas.edu/memoria/Cicero.html">http://www.laits.utexas.edu/memoria/Cicero.html</a>
</div>
<div id="ref-cymerman_syndrom_2017" class="csl-entry">
Cymerman, A. M.-., &amp; Tomaszek, K. (2017). Syndrom wypalenia w zawodzie nauczyciela i w roli ucznia. <span>Przegląd</span> literaturowy. <em>Forum Oświatowe</em>, <em>29</em>(2(58)), 95–115. Pobrano z <a href="https://www.forumoswiatowe.pl/index.php/czasopismo/article/view/526">https://www.forumoswiatowe.pl/index.php/czasopismo/article/view/526</a>
</div>
<div id="ref-dunlosky_practice_2015" class="csl-entry">
Dunlosky, J., &amp; Rawson, K. A. (2015). Practice tests, spaced practice, and successive relearning: <span>Tips</span> for classroom use and for guiding students’ learning. <em>Scholarship of Teaching and Learning in Psychology</em>, <em>1</em>(1), 72–78. <a href="https://doi.org/10.1037/stl0000024">https://doi.org/10.1037/stl0000024</a>
</div>
<div id="ref-dunlosky_improving_2013" class="csl-entry">
Dunlosky, J., Rawson, K. A., Marsh, E. J., Nathan, M. J., &amp; Willingham, D. T. (2013). Improving <span>Students</span>’ <span>Learning</span> <span>With</span> <span>Effective</span> <span>Learning</span> <span>Techniques</span>: <span>Promising</span> <span>Directions</span> <span>From</span> <span>Cognitive</span> and <span>Educational</span> <span>Psychology</span>. <em>Psychological Science in the Public Interest</em>, <em>14</em>(1), 4–58. <a href="https://doi.org/10.1177/1529100612453266">https://doi.org/10.1177/1529100612453266</a>
</div>
<div id="ref-gross_older_2014" class="csl-entry">
Gross, A. L., Brandt, J., Bandeen-Roche, K., Carlson, M. C., Stuart, E. A., Marsiske, M., &amp; Rebok, G. W. (2014). Do <span>Older</span> <span>Adults</span> <span>Use</span> the <span>Method</span> of <span>Loci</span>? <span>Results</span> <span>From</span> the <span>ACTIVE</span> <span>Study</span>. <em>Experimental Aging Research</em>, <em>40</em>(2), 140–163. <a href="https://doi.org/10.1080/0361073X.2014.882204">https://doi.org/10.1080/0361073X.2014.882204</a>
</div>
<div id="ref-grzega_didactic_2008" class="csl-entry">
Grzega, J., &amp; Schöner, M. (2008). The didactic model <em>LdL</em> (<span>Lernen</span> durch <span>Lehren</span>) as a way of preparing students for communication in a knowledge society. <em>Journal of Education for Teaching</em>, <em>34</em>(3), 167–175. <a href="https://doi.org/10.1080/02607470802212157">https://doi.org/10.1080/02607470802212157</a>
</div>
<div id="ref-halpern_analogies_1990" class="csl-entry">
Halpern, D. F., Hansen, C., &amp; Riefer, D. (1990). Analogies as an aid to understanding and memory. <em>Journal of Educational Psychology</em>, <em>82</em>(2), 298–305. <a href="https://doi.org/10.1037/0022-0663.82.2.298">https://doi.org/10.1037/0022-0663.82.2.298</a>
</div>
<div id="ref-harkin_does_2016" class="csl-entry">
Harkin, B., Webb, T. L., Chang, B. P. I., Prestwich, A., Conner, M., Kellar, I., … Sheeran, P. (2016). Does monitoring goal progress promote goal attainment? <span>A</span> meta-analysis of the experimental evidence. <em>Psychological Bulletin</em>, <em>142</em>(2), 198–229. <a href="https://doi.org/10.1037/bul0000025">https://doi.org/10.1037/bul0000025</a>
</div>
<div id="ref-hoser_fizjologia_1996" class="csl-entry">
Hoser, P. (1996). <em>Fizjologia organizmów z elementami anatomii człowieka: <span>Podręcz</span>- nik dla klasy trzeciej liceum ogólnokształcącego o profilu biologiczno-chemicznym</em>. Warszawa: Wydawnictwa Szkolne i Pedagogiczne.
</div>
<div id="ref-larsen_repeated_2009" class="csl-entry">
Larsen, D. P., Butler, A. C., &amp; Roediger III, H. L. (2009). Repeated testing improves long-term retention relative to repeated study: a randomised controlled trial. <em>Medical Education</em>, <em>43</em>(12), 1174–1181. <a href="https://doi.org/10.1111/j.1365-2923.2009.03518.x">https://doi.org/10.1111/j.1365-2923.2009.03518.x</a>
</div>
<div id="ref-leitner_naucz_1972" class="csl-entry">
Leitner, S. (1972). <em>Naucz się uczyć</em> (S. Kuchta &amp; J. Perczyński, Tłum.). Gdańsk: Wydawnictwo Cztery Głowy.
</div>
<div id="ref-maguire_routes_2003" class="csl-entry">
Maguire, E. A., Valentine, E. R., Wilding, J. M., &amp; Kapur, N. (2003). Routes to remembering: the brains behind superior memory. <em>Nature Neuroscience</em>, <em>6</em>(1), 90–95. <a href="https://doi.org/10.1038/nn988">https://doi.org/10.1038/nn988</a>
</div>
<div id="ref-piolat_prise_2001" class="csl-entry">
Piolat, A. (2001). <em>La prise de notes</em>. Paris: Presses Universitaires de France.
</div>
<div id="ref-piolat_cognitive_2005" class="csl-entry">
Piolat, A., Olive, T., &amp; Kellogg, R. T. (2005). Cognitive effort during note taking. <em>Applied Cognitive Psychology</em>, <em>19</em>(3), 291–312. <a href="https://doi.org/10.1002/acp.1086">https://doi.org/10.1002/acp.1086</a>
</div>
<div id="ref-piolat_mesure_2003" class="csl-entry">
Piolat, A., Roussey, J.-Y., &amp; Barbier, M.-L. (2003). Mesure de l’effort cognitif: <span>Pourquoi</span> est-il opportun de comparer la prise de notes à la rédaction, l’apprentissage et la lecture de divers documents. <em>Arob@se</em>, <em>7</em>(1-2), 118–114.
</div>
<div id="ref-qureshi_method_2014" class="csl-entry">
Qureshi, A., Rizvi, F., Syed, A., Shahid, A., &amp; Manzoor, H. (2014). The method of loci as a mnemonic device to facilitate learning in endocrinology leads to improvement in student performance as measured by assessments. <em>Advances in Physiology Education</em>, <em>38</em>(2), 140–144. <a href="https://doi.org/10.1152/advan.00092.2013">https://doi.org/10.1152/advan.00092.2013</a>
</div>
<div id="ref-roediger_effectiveness_1980" class="csl-entry">
Roediger, H. L. (1980). The effectiveness of four mnemonics in ordering recall. <em>Journal of Experimental Psychology: Human Learning and Memory</em>, <em>6</em>(5), 558–567. <a href="https://doi.org/10.1037/0278-7393.6.5.558">https://doi.org/10.1037/0278-7393.6.5.558</a>
</div>
<div id="ref-roediger_test-enhanced_2006" class="csl-entry">
Roediger, H. L., &amp; Karpicke, J. D. (2006). Test-<span>Enhanced</span> <span>Learning</span>: <span>Taking</span> <span>Memory</span> <span>Tests</span> <span>Improves</span> <span>Long</span>-<span>Term</span> <span>Retention</span>. <em>Psychological Science</em>, <em>17</em>(3), 249–255. <a href="https://doi.org/10.1111/j.1467-9280.2006.01693.x">https://doi.org/10.1111/j.1467-9280.2006.01693.x</a>
</div>
<div id="ref-rogers_self-reference_1977" class="csl-entry">
Rogers, T. B., Kuiper, N. A., &amp; Kirker, W. S. (1977). Self-reference and the encoding of personal information. <em>Journal of Personality and Social Psychology</em>, <em>35</em>(9), 677–688. <a href="https://doi.org/10.1037/0022-3514.35.9.677">https://doi.org/10.1037/0022-3514.35.9.677</a>
</div>
<div id="ref-rohrer_interleaving_2012" class="csl-entry">
Rohrer, D. (2012). Interleaving <span>Helps</span> <span>Students</span> <span>Distinguish</span> among <span>Similar</span> <span>Concepts</span>. <em>Educational Psychology Review</em>, <em>24</em>(3), 355–367. <a href="https://doi.org/10.1007/s10648-012-9201-3">https://doi.org/10.1007/s10648-012-9201-3</a>
</div>
<div id="ref-schmidmaier_using_2011" class="csl-entry">
Schmidmaier, R., Ebersbach, R., Schiller, M., Hege, I., Holzer, M., &amp; Fischer, M. R. (2011). Using electronic flashcards to promote learning in medical students: retesting versus restudying: <span>Efficacy</span> of retesting versus restudying. <em>Medical Education</em>, <em>45</em>(11), 1101–1110. <a href="https://doi.org/10.1111/j.1365-2923.2011.04043.x">https://doi.org/10.1111/j.1365-2923.2011.04043.x</a>
</div>
<div id="ref-smith_environmental_1978" class="csl-entry">
Smith, S. M., Glenberg, A., &amp; Bjork, R. A. (1978). Environmental context and human memory. <em>Memory &amp; Cognition</em>, <em>6</em>(4), 342–353. <a href="https://doi.org/10.3758/BF03197465">https://doi.org/10.3758/BF03197465</a>
</div>
<div id="ref-soderstrom_learning_2015" class="csl-entry">
Soderstrom, N. C., &amp; Bjork, R. A. (2015). Learning <span>Versus</span> <span>Performance</span>: <span>An</span> <span>Integrative</span> <span>Review</span>. <em>Perspectives on Psychological Science</em>, <em>10</em>(2), 176–199. <a href="https://doi.org/10.1177/1745691615569000">https://doi.org/10.1177/1745691615569000</a>
</div>
<div id="ref-strelau_psychologia_2018" class="csl-entry">
Strelau, J., &amp; Doliński, D. (Red.). (2018). <em>Psychologia akademicka</em>. Gdańsk: Gdańskie Wydawnictwo Psychologiczne.
</div>
<div id="ref-szmidt_abc_2019" class="csl-entry">
Szmidt, K. J. (2019). <em><span>ABC</span> kreatywności. <span>Kontynuacje</span></em>. Warszawa: Difin.
</div>
<div id="ref-tulving_ecphoric_1976" class="csl-entry">
Tulving, E. (1976). Ecphoric processes in recall and recognition. W J. Brown (Red.), <em>Recall and recognition</em> (s. x, 275–x, 275). Oxford, England: John Wiley &amp; Sons. <a href="https://doi.org/10.1037/11314-016">https://doi.org/10.1037/11314-016</a>
</div>
<div id="ref-vaughn_diagnosing_2011" class="csl-entry">
Vaughn, K. E., &amp; Rawson, K. A. (2011). Diagnosing <span>Criterion</span>-<span>Level</span> <span>Effects</span> on <span>Memory</span>: <span>What</span> <span>Aspects</span> of <span>Memory</span> <span>Are</span> <span>Enhanced</span> by <span>Repeated</span> <span>Retrieval</span>? <em>Psychological Science</em>, <em>22</em>(9), 1127–1131. <a href="https://doi.org/10.1177/0956797611417724">https://doi.org/10.1177/0956797611417724</a>
</div>
<div id="ref-willingham_strategies_2014" class="csl-entry">
Willingham, D. T. (2014). Strategies <span>That</span> <span>Make</span> <span>Learning</span> <span>Last</span>. <em>Educational Leadership</em>, <em>72</em>(2), 10–15.
</div>
<div id="ref-wissman_how_2012" class="csl-entry">
Wissman, K. T., Rawson, K. A., &amp; Pyc, M. A. (2012). How and when do students use flashcards? <em>Memory</em>, <em>20</em>(6), 568–579. <a href="https://doi.org/10.1080/09658211.2012.687052">https://doi.org/10.1080/09658211.2012.687052</a>
</div>
<div id="ref-wojciszke_psychologia_2019" class="csl-entry">
Wojciszke, B. (2019). <em>Psychologia społeczna</em>. Warszawa: Wydawnictwo Naukowe Scholar.
</div>
<div id="ref-wozniak_effective_1999" class="csl-entry">
Wozniak, P. (1999). Effective learning: <span>Twenty</span> rules of formulating knowledge. Pobrano z <a href="https://www.supermemo.com/en/blog/twenty-rules-of-formulating-knowledge">https://www.supermemo.com/en/blog/twenty-rules-of-formulating-knowledge</a>
</div>
<div id="ref-wozniak_anatomia_2003" class="csl-entry">
Woźniak, W. (Red.). (2003). <em>Anatomia człowieka. <span>Podręcznik</span> dla studentów i lekarzy</em>. Wrocław: Elsevier Urban &amp; Partner.
</div>
<div id="ref-young_never_2011" class="csl-entry">
Young, S. H. (2011). <em>Never <span>Forget</span> an <span>Idea</span> <span>Again</span> with <span>The</span> <span>Feynman</span> <span>Technique</span></em>. Pobrano z <a href="https://www.scotthyoung.com/learnonsteroids/grab/TranscriptFeynman.pdf">https://www.scotthyoung.com/learnonsteroids/grab/TranscriptFeynman.pdf</a>
</div>
<div id="ref-zimbardo_psychologia_2017" class="csl-entry">
Zimbardo, P. G., Johnson, R. L., &amp; McCann, V. (2017). <em>Psychologia. <span>Kluczowe</span> koncepcje</em> (T. 2). Warszawa: Wydawnictwo Naukowe PWN.
</div>
</div></section></div> ]]></description>
  <category>Psychologia</category>
  <guid>https://nieobliczalne.pl/posts/uczenie-sie.html</guid>
  <pubDate>Thu, 06 Feb 2020 23:00:00 GMT</pubDate>
  <media:content url="https://nieobliczalne.pl/posts/headers/uczenie-sie.webp" medium="image" type="image/webp"/>
</item>
</channel>
</rss>
